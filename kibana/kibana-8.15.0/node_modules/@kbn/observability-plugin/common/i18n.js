"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NOT_BETWEEN_TEXT = exports.NOT_AVAILABLE_LABEL = exports.BETWEEN_TEXT = exports.BELOW_TEXT = exports.BELOW_OR_EQ_TEXT = exports.ABOVE_TEXT = exports.ABOVE_OR_EQ_TEXT = void 0;
var _i18n = require("@kbn/i18n");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const NOT_AVAILABLE_LABEL = exports.NOT_AVAILABLE_LABEL = _i18n.i18n.translate('xpack.observability.notAvailable', {
  defaultMessage: 'N/A'
});

// Comparators
const BELOW_TEXT = exports.BELOW_TEXT = _i18n.i18n.translate('xpack.observability.customThreshold.rule.threshold.below', {
  defaultMessage: 'below'
});
const BELOW_OR_EQ_TEXT = exports.BELOW_OR_EQ_TEXT = _i18n.i18n.translate('xpack.observability.customThreshold.rule.threshold.belowOrEqual', {
  defaultMessage: 'below or equal'
});
const ABOVE_TEXT = exports.ABOVE_TEXT = _i18n.i18n.translate('xpack.observability.customThreshold.rule.threshold.above', {
  defaultMessage: 'above'
});
const ABOVE_OR_EQ_TEXT = exports.ABOVE_OR_EQ_TEXT = _i18n.i18n.translate('xpack.observability.customThreshold.rule.threshold.aboveOrEqual', {
  defaultMessage: 'above or equal'
});
const BETWEEN_TEXT = exports.BETWEEN_TEXT = _i18n.i18n.translate('xpack.observability.customThreshold.rule.threshold.between', {
  defaultMessage: 'between'
});
const NOT_BETWEEN_TEXT = exports.NOT_BETWEEN_TEXT = _i18n.i18n.translate('xpack.observability.customThreshold.rule.threshold.notBetween', {
  defaultMessage: 'not between'
});