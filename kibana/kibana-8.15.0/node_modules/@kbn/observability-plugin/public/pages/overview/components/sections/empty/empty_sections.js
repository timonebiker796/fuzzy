"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EmptySections = EmptySections;
var _eui = require("@elastic/eui");
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = require("styled-components");
var _i18n = require("@kbn/i18n");
var _deeplinksObservability = require("@kbn/deeplinks-observability");
var _public = require("@kbn/observability-shared-plugin/public");
var _kibana_react = require("../../../../../utils/kibana_react");
var _paths = require("../../../../../../common/locators/paths");
var _use_has_data = require("../../../../../hooks/use_has_data");
var _empty_section = require("./empty_section");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function EmptySections() {
  var _share$url$locators$g;
  const {
    http,
    share
  } = (0, _kibana_react.useKibana)().services;
  const onboardingMetricsHref = share === null || share === void 0 ? void 0 : (_share$url$locators$g = share.url.locators.get(_deeplinksObservability.OBSERVABILITY_ONBOARDING_LOCATOR)) === null || _share$url$locators$g === void 0 ? void 0 : _share$url$locators$g.useUrl({
    category: 'metrics'
  });
  const theme = (0, _react.useContext)(_styledComponents.ThemeContext);
  const {
    hasDataMap
  } = (0, _use_has_data.useHasData)();
  const appEmptySections = getEmptySections({
    http,
    onboardingMetricsHref
  }).filter(({
    id
  }) => {
    const app = hasDataMap[id];
    if (app) {
      return app.status === _public.FETCH_STATUS.FAILURE || !app.hasData;
    }
    return false;
  });
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGrid, {
    columns:
    // when more than 2 empty sections are available show them on 2 columns, otherwise 1
    appEmptySections.length > 2 ? 2 : 1,
    gutterSize: "s"
  }, appEmptySections.map(app => {
    return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
      key: app.id,
      style: {
        border: `${theme.eui.euiBorderEditable}`,
        borderRadius: `${theme.eui.euiBorderRadius}`
      }
    }, /*#__PURE__*/_react.default.createElement(_empty_section.EmptySection, {
      section: app
    }));
  })));
}
const getEmptySections = ({
  http,
  onboardingMetricsHref
}) => {
  return [{
    id: 'infra_logs',
    title: _i18n.i18n.translate('xpack.observability.emptySection.apps.logs.title', {
      defaultMessage: 'Logs'
    }),
    icon: 'logoLogging',
    description: _i18n.i18n.translate('xpack.observability.emptySection.apps.logs.description', {
      defaultMessage: 'Fast, easy, and scalable centralized log monitoring with out-of-the-box support for common data sources.'
    }),
    linkTitle: _i18n.i18n.translate('xpack.observability.emptySection.apps.logs.link', {
      defaultMessage: 'Install Filebeat'
    }),
    href: http.basePath.prepend('/app/home#/tutorial_directory/logging')
  }, {
    id: 'apm',
    title: _i18n.i18n.translate('xpack.observability.emptySection.apps.apm.title', {
      defaultMessage: 'APM'
    }),
    icon: 'logoObservability',
    description: _i18n.i18n.translate('xpack.observability.emptySection.apps.apm.description', {
      defaultMessage: 'Get deeper visibility into your applications with extensive support for popular languages, OpenTelemetry, and distributed tracing.'
    }),
    linkTitle: _i18n.i18n.translate('xpack.observability.emptySection.apps.apm.link', {
      defaultMessage: 'Install Agent'
    }),
    href: http.basePath.prepend('/app/apm/tutorial')
  }, {
    id: 'infra_metrics',
    title: _i18n.i18n.translate('xpack.observability.emptySection.apps.metrics.title', {
      defaultMessage: 'Metrics'
    }),
    icon: 'logoMetrics',
    description: _i18n.i18n.translate('xpack.observability.emptySection.apps.metrics.description', {
      defaultMessage: 'Stream, visualize, and analyze your infrastructure metrics.'
    }),
    linkTitle: _i18n.i18n.translate('xpack.observability.emptySection.apps.metrics.link', {
      defaultMessage: 'Install Metricbeat'
    }),
    href: onboardingMetricsHref !== null && onboardingMetricsHref !== void 0 ? onboardingMetricsHref : http.basePath.prepend('/app/home#/tutorial_directory/metrics')
  }, {
    id: 'uptime',
    title: _i18n.i18n.translate('xpack.observability.emptySection.apps.uptime.title', {
      defaultMessage: 'Uptime'
    }),
    icon: 'logoUptime',
    description: _i18n.i18n.translate('xpack.observability.emptySection.apps.uptime.description', {
      defaultMessage: 'Proactively monitor the availability and functionality of user journeys.'
    }),
    linkTitle: _i18n.i18n.translate('xpack.observability.emptySection.apps.uptime.link', {
      defaultMessage: 'Install Heartbeat'
    }),
    href: http.basePath.prepend('/app/home#/tutorial/uptimeMonitors')
  }, {
    id: 'ux',
    title: _i18n.i18n.translate('xpack.observability.emptySection.apps.ux.title', {
      defaultMessage: 'User Experience'
    }),
    icon: 'logoObservability',
    description: _i18n.i18n.translate('xpack.observability.emptySection.apps.ux.description', {
      defaultMessage: 'Collect, measure, and analyze performance data that reflects real-world user experiences.'
    }),
    linkTitle: _i18n.i18n.translate('xpack.observability.emptySection.apps.ux.link', {
      defaultMessage: 'Install RUM Agent'
    }),
    href: http.basePath.prepend('/app/apm/tutorial')
  }, {
    id: 'alert',
    title: _i18n.i18n.translate('xpack.observability.emptySection.apps.alert.title', {
      defaultMessage: 'No alerts found.'
    }),
    icon: 'watchesApp',
    description: _i18n.i18n.translate('xpack.observability.emptySection.apps.alert.description', {
      defaultMessage: 'Detect complex conditions within Observability and trigger actions when those conditions are met.'
    }),
    linkTitle: _i18n.i18n.translate('xpack.observability.emptySection.apps.alert.link', {
      defaultMessage: 'Create rule'
    }),
    href: http.basePath.prepend(_paths.paths.observability.rules)
  }, {
    id: 'universal_profiling',
    title: _i18n.i18n.translate('xpack.observability.emptySection.apps.universalProfiling.title', {
      defaultMessage: 'Universal Profiling'
    }),
    icon: 'logoObservability',
    description: _i18n.i18n.translate('xpack.observability.emptySection.apps.universalProfiling.description', {
      defaultMessage: 'Understand what lines of code are consuming compute resources across your entire infrastructure, with minimal overhead and zero instrumentation'
    }),
    linkTitle: _i18n.i18n.translate('xpack.observability.emptySection.apps.universalProfiling.link', {
      defaultMessage: 'Install Profiling Host Agent'
    }),
    href: http.basePath.prepend('/app/profiling/add-data-instructions')
  }];
};