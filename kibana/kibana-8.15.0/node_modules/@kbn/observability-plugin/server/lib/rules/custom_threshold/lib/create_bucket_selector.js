"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBucketSelector = void 0;
var _common = require("../../../../../common");
var _create_condition_script = require("./create_condition_script");
var _wrap_in_period = require("./wrap_in_period");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const createBucketSelector = (condition, alertOnGroupDisappear = false, timeFieldName, groupBy, lastPeriodEnd) => {
  const hasGroupBy = !!groupBy;
  const bucketPath = "currentPeriod['all']>aggregatedValue";
  const shouldTrigger = {
    bucket_script: {
      buckets_path: {
        value: bucketPath
      },
      script: (0, _create_condition_script.createConditionScript)(condition.threshold, (0, _common.convertToBuiltInComparators)(condition.comparator))
    }
  };
  const aggs = {
    shouldTrigger
  };
  if (hasGroupBy && alertOnGroupDisappear && lastPeriodEnd) {
    const wrappedPeriod = (0, _wrap_in_period.createLastPeriod)(lastPeriodEnd, condition, timeFieldName);
    aggs.lastPeriod = wrappedPeriod.lastPeriod;
    aggs.missingGroup = {
      bucket_script: {
        buckets_path: {
          lastPeriod: 'lastPeriod>_count',
          currentPeriod: "currentPeriod['all']>_count"
        },
        script: 'params.lastPeriod > 0 && params.currentPeriod < 1 ? 1 : 0'
      }
    };
    aggs.newOrRecoveredGroup = {
      bucket_script: {
        buckets_path: {
          lastPeriod: 'lastPeriod>_count',
          currentPeriod: "currentPeriod['all']>_count"
        },
        script: 'params.lastPeriod < 1 && params.currentPeriod > 0 ? 1 : 0'
      }
    };
  }
  if (hasGroupBy) {
    const evalutionBucketPath = alertOnGroupDisappear && lastPeriodEnd ? {
      shouldTrigger: 'shouldTrigger',
      missingGroup: 'missingGroup',
      newOrRecoveredGroup: 'newOrRecoveredGroup'
    } : {
      shouldTrigger: 'shouldTrigger'
    };
    const evaluationScript = alertOnGroupDisappear && lastPeriodEnd ? '(params.missingGroup != null && params.missingGroup > 0)  || (params.shouldTrigger != null && params.shouldTrigger > 0) || (params.newOrRecoveredGroup != null && params.newOrRecoveredGroup > 0)' : '(params.shouldTrigger != null && params.shouldTrigger > 0)';
    aggs.evaluation = {
      bucket_selector: {
        buckets_path: evalutionBucketPath,
        script: evaluationScript
      }
    };
  }
  return aggs;
};
exports.createBucketSelector = createBucketSelector;