"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DataViewSelectPopover = void 0;
var _react = _interopRequireWildcard(require("react"));
var _i18n = require("@kbn/i18n");
var _i18nReact = require("@kbn/i18n-react");
var _eui = require("@elastic/eui");
var _public = require("@kbn/unified-search-plugin/public");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const toDataViewListItem = dataView => {
  return {
    id: dataView.id,
    title: dataView.title,
    name: dataView.name,
    type: dataView.type,
    isAdhoc: !dataView.isPersisted()
  };
};
const DataViewSelectPopover = ({
  dependencies: {
    dataViews,
    dataViewEditor
  },
  metadata = {
    adHocDataViewList: [],
    isManagementPage: true
  },
  dataView,
  onSelectDataView,
  onChangeMetaData
}) => {
  var _dataView$getName;
  const [dataViewItems, setDataViewsItems] = (0, _react.useState)([]);
  const [dataViewPopoverOpen, setDataViewPopoverOpen] = (0, _react.useState)(false);
  const closeDataViewEditor = (0, _react.useRef)();
  const allDataViewItems = (0, _react.useMemo)(() => [...dataViewItems, ...metadata.adHocDataViewList.map(toDataViewListItem)], [dataViewItems, metadata.adHocDataViewList]);
  const closeDataViewPopover = (0, _react.useCallback)(() => setDataViewPopoverOpen(false), []);
  const onChangeDataView = (0, _react.useCallback)(async selectedDataViewId => {
    const selectedDataView = await dataViews.get(selectedDataViewId);
    onSelectDataView(selectedDataView);
    closeDataViewPopover();
  }, [closeDataViewPopover, dataViews, onSelectDataView]);
  const loadPersistedDataViews = (0, _react.useCallback)(async () => {
    const ids = await dataViews.getIds();
    const dataViewsList = await Promise.all(ids.map(id => dataViews.get(id)));
    setDataViewsItems(dataViewsList.map(toDataViewListItem));
  }, [dataViews]);
  const onAddAdHocDataView = (0, _react.useCallback)(adHocDataView => {
    onChangeMetaData({
      ...metadata,
      adHocDataViewList: [...metadata.adHocDataViewList, adHocDataView]
    });
  }, [metadata, onChangeMetaData]);
  const createDataView = (0, _react.useMemo)(() => dataViewEditor.userPermissions.editDataView() ? () => {
    closeDataViewEditor.current = dataViewEditor.openEditor({
      onSave: async createdDataView => {
        if (createdDataView.id) {
          if (!createdDataView.isPersisted()) {
            onAddAdHocDataView(createdDataView);
          }
          await loadPersistedDataViews();
          await onChangeDataView(createdDataView.id);
        }
      },
      allowAdHocDataView: true
    });
  } : undefined, [dataViewEditor, loadPersistedDataViews, onChangeDataView, onAddAdHocDataView]);
  (0, _react.useEffect)(() => {
    return () => {
      // Make sure to close the editor when unmounting
      if (closeDataViewEditor.current) {
        closeDataViewEditor.current();
      }
    };
  }, []);
  (0, _react.useEffect)(() => {
    loadPersistedDataViews();
  }, [loadPersistedDataViews]);
  const createDataViewButtonPadding = (0, _eui.useEuiPaddingCSS)('left');
  const onCreateDefaultAdHocDataView = (0, _react.useCallback)(async dataViewSpec => {
    var _newDataView$fields$g;
    const newDataView = await dataViews.create(dataViewSpec);
    if (((_newDataView$fields$g = newDataView.fields.getByName('@timestamp')) === null || _newDataView$fields$g === void 0 ? void 0 : _newDataView$fields$g.type) === 'date') {
      newDataView.timeFieldName = '@timestamp';
    }
    onAddAdHocDataView(newDataView);
    onChangeDataView(newDataView.id);
  }, [dataViews, onAddAdHocDataView, onChangeDataView]);
  if (!allDataViewItems) {
    return null;
  }
  return /*#__PURE__*/_react.default.createElement(_eui.EuiPopover, {
    id: "dataViewPopover",
    button: /*#__PURE__*/_react.default.createElement(_eui.EuiExpression, {
      display: "columns",
      "data-test-subj": "selectDataViewExpression",
      description: _i18n.i18n.translate('xpack.stackAlerts.components.ui.alertParams.dataViewLabel', {
        defaultMessage: 'data view'
      }),
      value: (_dataView$getName = dataView === null || dataView === void 0 ? void 0 : dataView.getName()) !== null && _dataView$getName !== void 0 ? _dataView$getName : _i18n.i18n.translate('xpack.stackAlerts.components.ui.alertParams.dataViewPlaceholder', {
        defaultMessage: 'Select a data view'
      }),
      isActive: dataViewPopoverOpen,
      onClick: () => {
        setDataViewPopoverOpen(true);
      },
      isInvalid: !(dataView !== null && dataView !== void 0 && dataView.id)
    }),
    isOpen: dataViewPopoverOpen,
    closePopover: closeDataViewPopover,
    ownFocus: true,
    anchorPosition: "downLeft",
    display: "block"
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      width: '450px'
    },
    "data-test-subj": "chooseDataViewPopoverContent"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiPopoverTitle, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    alignItems: "center",
    gutterSize: "s"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, _i18n.i18n.translate('xpack.stackAlerts.components.ui.alertParams.dataViewPopoverTitle', {
    defaultMessage: 'Data view'
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiButtonIcon, {
    "data-test-subj": "closeDataViewPopover",
    iconType: "cross",
    color: "danger",
    "aria-label": _i18n.i18n.translate('xpack.stackAlerts.components.ui.alertParams.closeDataViewPopoverLabel', {
      defaultMessage: 'Close'
    }),
    onClick: closeDataViewPopover
  })))), /*#__PURE__*/_react.default.createElement(_public.DataViewSelector, {
    currentDataViewId: dataView === null || dataView === void 0 ? void 0 : dataView.id,
    dataViewsList: allDataViewItems,
    setPopoverIsOpen: setDataViewPopoverOpen,
    onChangeDataView: onChangeDataView,
    onCreateDefaultAdHocDataView: onCreateDefaultAdHocDataView,
    isTextBasedLangSelected: false
  }), createDataView ? /*#__PURE__*/_react.default.createElement(_eui.EuiPopoverFooter, {
    paddingSize: "none"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiButtonEmpty, {
    css: createDataViewButtonPadding.s,
    iconType: "plusInCircleFilled",
    "data-test-subj": "chooseDataViewPopover.createDataViewButton",
    onClick: () => {
      closeDataViewPopover();
      createDataView();
    }
  }, _i18n.i18n.translate('xpack.stackAlerts.components.ui.alertParams.dataViewPopover.createDataViewButton', {
    defaultMessage: 'Create a data view'
  }))) : /*#__PURE__*/_react.default.createElement(_eui.EuiPopoverFooter, null, /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    color: "subdued",
    size: "xs"
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.stackAlerts.components.ui.alertParams.dataViewPopover.createDataViewButton.noPermissionDescription",
    defaultMessage: "You need additional privileges to create data views. Contact your administrator."
  })))));
};
exports.DataViewSelectPopover = DataViewSelectPopover;