"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchEsqlQuery = fetchEsqlQuery;
exports.getSourceFields = exports.getEsqlQuery = void 0;
var _lodash = require("lodash");
var _common = require("@kbn/triggers-actions-ui-plugin/common");
var _alertsAsDataUtils = require("@kbn/alerts-as-data-utils");
var _common2 = require("../../../../common");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

async function fetchEsqlQuery({
  ruleId,
  alertLimit,
  params,
  services,
  spacePrefix,
  publicBaseUrl,
  dateStart,
  dateEnd
}) {
  const {
    logger,
    scopedClusterClient
  } = services;
  const esClient = scopedClusterClient.asCurrentUser;
  const query = getEsqlQuery(params, alertLimit, dateStart, dateEnd);
  logger.debug(`ES|QL query rule (${ruleId}) query: ${JSON.stringify(query)}`);
  const response = await esClient.transport.request({
    method: 'POST',
    path: '/_query',
    body: query
  });
  const hits = (0, _common2.toEsQueryHits)(response);
  const sourceFields = getSourceFields(response);
  const link = `${publicBaseUrl}${spacePrefix}/app/management/insightsAndAlerting/triggersActions/rule/${ruleId}`;
  return {
    link,
    query,
    numMatches: Number(response.values.length),
    parsedResults: (0, _common.parseAggregationResults)({
      isCountAgg: true,
      isGroupAgg: false,
      esResult: {
        took: 0,
        timed_out: false,
        _shards: {
          failed: 0,
          successful: 0,
          total: 0
        },
        hits
      },
      resultLimit: alertLimit,
      sourceFieldsParams: sourceFields,
      generateSourceFieldsFromHits: true
    }),
    index: null
  };
}
const getEsqlQuery = (params, alertLimit, dateStart, dateEnd) => {
  const rangeFilter = [{
    range: {
      [params.timeField]: {
        lte: dateEnd,
        gt: dateStart,
        format: 'strict_date_optional_time'
      }
    }
  }];
  const query = {
    query: alertLimit ? `${params.esqlQuery.esql} | limit ${alertLimit}` : params.esqlQuery.esql,
    filter: {
      bool: {
        filter: rangeFilter
      }
    }
  };
  return query;
};
exports.getEsqlQuery = getEsqlQuery;
const getSourceFields = results => {
  const resultFields = results.columns.map(c => ({
    label: c.name,
    searchPath: c.name
  }));
  const alertFields = Object.keys(_alertsAsDataUtils.alertFieldMap);
  const ecsFields = Object.keys(_alertsAsDataUtils.ecsFieldMap)
  // exclude the alert fields that we don't want to override
  .filter(key => !alertFields.includes(key)).map(key => ({
    label: key,
    searchPath: key
  }));
  return (0, _lodash.intersectionBy)(resultFields, ecsFields, 'label');
};
exports.getSourceFields = getSourceFields;