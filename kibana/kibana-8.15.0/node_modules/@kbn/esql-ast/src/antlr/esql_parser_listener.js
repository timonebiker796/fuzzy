"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _antlr = require("antlr4");
// @ts-nocheck
// Generated from src/antlr/esql_parser.g4 by ANTLR 4.13.1

/**
 * This interface defines a complete listener for a parse tree produced by
 * `esql_parser`.
 */
class esql_parserListener extends _antlr.ParseTreeListener {
  constructor(...args) {
    super(...args);
    /**
     * Enter a parse tree produced by `esql_parser.singleStatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterSingleStatement", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.singleStatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitSingleStatement", void 0);
    /**
     * Enter a parse tree produced by the `compositeQuery`
     * labeled alternative in `esql_parser.query`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterCompositeQuery", void 0);
    /**
     * Exit a parse tree produced by the `compositeQuery`
     * labeled alternative in `esql_parser.query`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitCompositeQuery", void 0);
    /**
     * Enter a parse tree produced by the `singleCommandQuery`
     * labeled alternative in `esql_parser.query`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterSingleCommandQuery", void 0);
    /**
     * Exit a parse tree produced by the `singleCommandQuery`
     * labeled alternative in `esql_parser.query`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitSingleCommandQuery", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.sourceCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterSourceCommand", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.sourceCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitSourceCommand", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.processingCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterProcessingCommand", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.processingCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitProcessingCommand", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.whereCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterWhereCommand", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.whereCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitWhereCommand", void 0);
    /**
     * Enter a parse tree produced by the `logicalNot`
     * labeled alternative in `esql_parser.booleanExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterLogicalNot", void 0);
    /**
     * Exit a parse tree produced by the `logicalNot`
     * labeled alternative in `esql_parser.booleanExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitLogicalNot", void 0);
    /**
     * Enter a parse tree produced by the `booleanDefault`
     * labeled alternative in `esql_parser.booleanExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterBooleanDefault", void 0);
    /**
     * Exit a parse tree produced by the `booleanDefault`
     * labeled alternative in `esql_parser.booleanExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitBooleanDefault", void 0);
    /**
     * Enter a parse tree produced by the `isNull`
     * labeled alternative in `esql_parser.booleanExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterIsNull", void 0);
    /**
     * Exit a parse tree produced by the `isNull`
     * labeled alternative in `esql_parser.booleanExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitIsNull", void 0);
    /**
     * Enter a parse tree produced by the `regexExpression`
     * labeled alternative in `esql_parser.booleanExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterRegexExpression", void 0);
    /**
     * Exit a parse tree produced by the `regexExpression`
     * labeled alternative in `esql_parser.booleanExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitRegexExpression", void 0);
    /**
     * Enter a parse tree produced by the `logicalIn`
     * labeled alternative in `esql_parser.booleanExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterLogicalIn", void 0);
    /**
     * Exit a parse tree produced by the `logicalIn`
     * labeled alternative in `esql_parser.booleanExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitLogicalIn", void 0);
    /**
     * Enter a parse tree produced by the `logicalBinary`
     * labeled alternative in `esql_parser.booleanExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterLogicalBinary", void 0);
    /**
     * Exit a parse tree produced by the `logicalBinary`
     * labeled alternative in `esql_parser.booleanExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitLogicalBinary", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.regexBooleanExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterRegexBooleanExpression", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.regexBooleanExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitRegexBooleanExpression", void 0);
    /**
     * Enter a parse tree produced by the `valueExpressionDefault`
     * labeled alternative in `esql_parser.valueExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterValueExpressionDefault", void 0);
    /**
     * Exit a parse tree produced by the `valueExpressionDefault`
     * labeled alternative in `esql_parser.valueExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitValueExpressionDefault", void 0);
    /**
     * Enter a parse tree produced by the `comparison`
     * labeled alternative in `esql_parser.valueExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterComparison", void 0);
    /**
     * Exit a parse tree produced by the `comparison`
     * labeled alternative in `esql_parser.valueExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitComparison", void 0);
    /**
     * Enter a parse tree produced by the `operatorExpressionDefault`
     * labeled alternative in `esql_parser.operatorExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterOperatorExpressionDefault", void 0);
    /**
     * Exit a parse tree produced by the `operatorExpressionDefault`
     * labeled alternative in `esql_parser.operatorExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitOperatorExpressionDefault", void 0);
    /**
     * Enter a parse tree produced by the `arithmeticBinary`
     * labeled alternative in `esql_parser.operatorExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterArithmeticBinary", void 0);
    /**
     * Exit a parse tree produced by the `arithmeticBinary`
     * labeled alternative in `esql_parser.operatorExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitArithmeticBinary", void 0);
    /**
     * Enter a parse tree produced by the `arithmeticUnary`
     * labeled alternative in `esql_parser.operatorExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterArithmeticUnary", void 0);
    /**
     * Exit a parse tree produced by the `arithmeticUnary`
     * labeled alternative in `esql_parser.operatorExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitArithmeticUnary", void 0);
    /**
     * Enter a parse tree produced by the `dereference`
     * labeled alternative in `esql_parser.primaryExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterDereference", void 0);
    /**
     * Exit a parse tree produced by the `dereference`
     * labeled alternative in `esql_parser.primaryExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitDereference", void 0);
    /**
     * Enter a parse tree produced by the `inlineCast`
     * labeled alternative in `esql_parser.primaryExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterInlineCast", void 0);
    /**
     * Exit a parse tree produced by the `inlineCast`
     * labeled alternative in `esql_parser.primaryExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitInlineCast", void 0);
    /**
     * Enter a parse tree produced by the `constantDefault`
     * labeled alternative in `esql_parser.primaryExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterConstantDefault", void 0);
    /**
     * Exit a parse tree produced by the `constantDefault`
     * labeled alternative in `esql_parser.primaryExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitConstantDefault", void 0);
    /**
     * Enter a parse tree produced by the `parenthesizedExpression`
     * labeled alternative in `esql_parser.primaryExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterParenthesizedExpression", void 0);
    /**
     * Exit a parse tree produced by the `parenthesizedExpression`
     * labeled alternative in `esql_parser.primaryExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitParenthesizedExpression", void 0);
    /**
     * Enter a parse tree produced by the `function`
     * labeled alternative in `esql_parser.primaryExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterFunction", void 0);
    /**
     * Exit a parse tree produced by the `function`
     * labeled alternative in `esql_parser.primaryExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitFunction", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.functionExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterFunctionExpression", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.functionExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitFunctionExpression", void 0);
    /**
     * Enter a parse tree produced by the `toDataType`
     * labeled alternative in `esql_parser.dataType`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterToDataType", void 0);
    /**
     * Exit a parse tree produced by the `toDataType`
     * labeled alternative in `esql_parser.dataType`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitToDataType", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.rowCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterRowCommand", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.rowCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitRowCommand", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.fields`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterFields", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.fields`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitFields", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.field`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterField", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.field`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitField", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.fromCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterFromCommand", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.fromCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitFromCommand", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.indexPattern`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterIndexPattern", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.indexPattern`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitIndexPattern", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.clusterString`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterClusterString", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.clusterString`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitClusterString", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.indexString`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterIndexString", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.indexString`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitIndexString", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.metadata`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterMetadata", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.metadata`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitMetadata", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.metadataOption`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterMetadataOption", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.metadataOption`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitMetadataOption", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.deprecated_metadata`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterDeprecated_metadata", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.deprecated_metadata`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitDeprecated_metadata", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.metricsCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterMetricsCommand", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.metricsCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitMetricsCommand", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.evalCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterEvalCommand", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.evalCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitEvalCommand", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.statsCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterStatsCommand", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.statsCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitStatsCommand", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.inlinestatsCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterInlinestatsCommand", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.inlinestatsCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitInlinestatsCommand", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.qualifiedName`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterQualifiedName", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.qualifiedName`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitQualifiedName", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.qualifiedNamePattern`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterQualifiedNamePattern", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.qualifiedNamePattern`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitQualifiedNamePattern", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.qualifiedNamePatterns`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterQualifiedNamePatterns", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.qualifiedNamePatterns`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitQualifiedNamePatterns", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.identifier`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterIdentifier", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.identifier`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitIdentifier", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.identifierPattern`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterIdentifierPattern", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.identifierPattern`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitIdentifierPattern", void 0);
    /**
     * Enter a parse tree produced by the `nullLiteral`
     * labeled alternative in `esql_parser.constant`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterNullLiteral", void 0);
    /**
     * Exit a parse tree produced by the `nullLiteral`
     * labeled alternative in `esql_parser.constant`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitNullLiteral", void 0);
    /**
     * Enter a parse tree produced by the `qualifiedIntegerLiteral`
     * labeled alternative in `esql_parser.constant`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterQualifiedIntegerLiteral", void 0);
    /**
     * Exit a parse tree produced by the `qualifiedIntegerLiteral`
     * labeled alternative in `esql_parser.constant`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitQualifiedIntegerLiteral", void 0);
    /**
     * Enter a parse tree produced by the `decimalLiteral`
     * labeled alternative in `esql_parser.constant`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterDecimalLiteral", void 0);
    /**
     * Exit a parse tree produced by the `decimalLiteral`
     * labeled alternative in `esql_parser.constant`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitDecimalLiteral", void 0);
    /**
     * Enter a parse tree produced by the `integerLiteral`
     * labeled alternative in `esql_parser.constant`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterIntegerLiteral", void 0);
    /**
     * Exit a parse tree produced by the `integerLiteral`
     * labeled alternative in `esql_parser.constant`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitIntegerLiteral", void 0);
    /**
     * Enter a parse tree produced by the `booleanLiteral`
     * labeled alternative in `esql_parser.constant`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterBooleanLiteral", void 0);
    /**
     * Exit a parse tree produced by the `booleanLiteral`
     * labeled alternative in `esql_parser.constant`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitBooleanLiteral", void 0);
    /**
     * Enter a parse tree produced by the `inputParams`
     * labeled alternative in `esql_parser.constant`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterInputParams", void 0);
    /**
     * Exit a parse tree produced by the `inputParams`
     * labeled alternative in `esql_parser.constant`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitInputParams", void 0);
    /**
     * Enter a parse tree produced by the `stringLiteral`
     * labeled alternative in `esql_parser.constant`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterStringLiteral", void 0);
    /**
     * Exit a parse tree produced by the `stringLiteral`
     * labeled alternative in `esql_parser.constant`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitStringLiteral", void 0);
    /**
     * Enter a parse tree produced by the `numericArrayLiteral`
     * labeled alternative in `esql_parser.constant`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterNumericArrayLiteral", void 0);
    /**
     * Exit a parse tree produced by the `numericArrayLiteral`
     * labeled alternative in `esql_parser.constant`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitNumericArrayLiteral", void 0);
    /**
     * Enter a parse tree produced by the `booleanArrayLiteral`
     * labeled alternative in `esql_parser.constant`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterBooleanArrayLiteral", void 0);
    /**
     * Exit a parse tree produced by the `booleanArrayLiteral`
     * labeled alternative in `esql_parser.constant`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitBooleanArrayLiteral", void 0);
    /**
     * Enter a parse tree produced by the `stringArrayLiteral`
     * labeled alternative in `esql_parser.constant`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterStringArrayLiteral", void 0);
    /**
     * Exit a parse tree produced by the `stringArrayLiteral`
     * labeled alternative in `esql_parser.constant`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitStringArrayLiteral", void 0);
    /**
     * Enter a parse tree produced by the `inputParam`
     * labeled alternative in `esql_parser.params`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterInputParam", void 0);
    /**
     * Exit a parse tree produced by the `inputParam`
     * labeled alternative in `esql_parser.params`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitInputParam", void 0);
    /**
     * Enter a parse tree produced by the `inputNamedOrPositionalParam`
     * labeled alternative in `esql_parser.params`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterInputNamedOrPositionalParam", void 0);
    /**
     * Exit a parse tree produced by the `inputNamedOrPositionalParam`
     * labeled alternative in `esql_parser.params`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitInputNamedOrPositionalParam", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.limitCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterLimitCommand", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.limitCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitLimitCommand", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.sortCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterSortCommand", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.sortCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitSortCommand", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.orderExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterOrderExpression", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.orderExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitOrderExpression", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.keepCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterKeepCommand", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.keepCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitKeepCommand", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.dropCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterDropCommand", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.dropCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitDropCommand", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.renameCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterRenameCommand", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.renameCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitRenameCommand", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.renameClause`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterRenameClause", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.renameClause`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitRenameClause", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.dissectCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterDissectCommand", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.dissectCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitDissectCommand", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.grokCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterGrokCommand", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.grokCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitGrokCommand", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.mvExpandCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterMvExpandCommand", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.mvExpandCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitMvExpandCommand", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.commandOptions`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterCommandOptions", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.commandOptions`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitCommandOptions", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.commandOption`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterCommandOption", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.commandOption`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitCommandOption", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.booleanValue`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterBooleanValue", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.booleanValue`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitBooleanValue", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.numericValue`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterNumericValue", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.numericValue`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitNumericValue", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.decimalValue`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterDecimalValue", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.decimalValue`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitDecimalValue", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.integerValue`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterIntegerValue", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.integerValue`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitIntegerValue", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.string`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterString", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.string`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitString", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.comparisonOperator`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterComparisonOperator", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.comparisonOperator`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitComparisonOperator", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.explainCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterExplainCommand", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.explainCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitExplainCommand", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.subqueryExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterSubqueryExpression", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.subqueryExpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitSubqueryExpression", void 0);
    /**
     * Enter a parse tree produced by the `showInfo`
     * labeled alternative in `esql_parser.showCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterShowInfo", void 0);
    /**
     * Exit a parse tree produced by the `showInfo`
     * labeled alternative in `esql_parser.showCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitShowInfo", void 0);
    /**
     * Enter a parse tree produced by the `metaFunctions`
     * labeled alternative in `esql_parser.metaCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterMetaFunctions", void 0);
    /**
     * Exit a parse tree produced by the `metaFunctions`
     * labeled alternative in `esql_parser.metaCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitMetaFunctions", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.enrichCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterEnrichCommand", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.enrichCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitEnrichCommand", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.enrichWithClause`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterEnrichWithClause", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.enrichWithClause`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitEnrichWithClause", void 0);
    /**
     * Enter a parse tree produced by `esql_parser.lookupCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterLookupCommand", void 0);
    /**
     * Exit a parse tree produced by `esql_parser.lookupCommand`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitLookupCommand", void 0);
  }
}
exports.default = esql_parserListener;
module.exports = exports.default;