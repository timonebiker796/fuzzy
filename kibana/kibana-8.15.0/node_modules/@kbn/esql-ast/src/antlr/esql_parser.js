"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WhereCommandContext = exports.ValueExpressionDefaultContext = exports.ValueExpressionContext = exports.ToDataTypeContext = exports.SubqueryExpressionContext = exports.StringLiteralContext = exports.StringContext = exports.StringArrayLiteralContext = exports.StatsCommandContext = exports.SourceCommandContext = exports.SortCommandContext = exports.SingleStatementContext = exports.SingleCommandQueryContext = exports.ShowInfoContext = exports.ShowCommandContext = exports.RowCommandContext = exports.RenameCommandContext = exports.RenameClauseContext = exports.RegexExpressionContext = exports.RegexBooleanExpressionContext = exports.QueryContext = exports.QualifiedNamePatternsContext = exports.QualifiedNamePatternContext = exports.QualifiedNameContext = exports.QualifiedIntegerLiteralContext = exports.ProcessingCommandContext = exports.PrimaryExpressionContext = exports.ParenthesizedExpressionContext = exports.ParamsContext = exports.OrderExpressionContext = exports.OperatorExpressionDefaultContext = exports.OperatorExpressionContext = exports.NumericValueContext = exports.NumericArrayLiteralContext = exports.NullLiteralContext = exports.MvExpandCommandContext = exports.MetricsCommandContext = exports.MetadataOptionContext = exports.MetadataContext = exports.MetaFunctionsContext = exports.MetaCommandContext = exports.LookupCommandContext = exports.LogicalNotContext = exports.LogicalInContext = exports.LogicalBinaryContext = exports.LimitCommandContext = exports.KeepCommandContext = exports.IsNullContext = exports.IntegerValueContext = exports.IntegerLiteralContext = exports.InputParamsContext = exports.InputParamContext = exports.InputNamedOrPositionalParamContext = exports.InlinestatsCommandContext = exports.InlineCastContext = exports.IndexStringContext = exports.IndexPatternContext = exports.IdentifierPatternContext = exports.IdentifierContext = exports.GrokCommandContext = exports.FunctionExpressionContext = exports.FunctionContext = exports.FromCommandContext = exports.FieldsContext = exports.FieldContext = exports.ExplainCommandContext = exports.EvalCommandContext = exports.EnrichWithClauseContext = exports.EnrichCommandContext = exports.DropCommandContext = exports.DissectCommandContext = exports.DereferenceContext = exports.Deprecated_metadataContext = exports.DecimalValueContext = exports.DecimalLiteralContext = exports.DataTypeContext = exports.ConstantDefaultContext = exports.ConstantContext = exports.CompositeQueryContext = exports.ComparisonOperatorContext = exports.ComparisonContext = exports.CommandOptionsContext = exports.CommandOptionContext = exports.ClusterStringContext = exports.BooleanValueContext = exports.BooleanLiteralContext = exports.BooleanExpressionContext = exports.BooleanDefaultContext = exports.BooleanArrayLiteralContext = exports.ArithmeticUnaryContext = exports.ArithmeticBinaryContext = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _antlr = require("antlr4");
var _esql_parser; // @ts-nocheck
// Generated from src/antlr/esql_parser.g4 by ANTLR 4.13.1
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars

class esql_parser extends _antlr.Parser {
  get grammarFileName() {
    return "esql_parser.g4";
  }
  get literalNames() {
    return esql_parser.literalNames;
  }
  get symbolicNames() {
    return esql_parser.symbolicNames;
  }
  get ruleNames() {
    return esql_parser.ruleNames;
  }
  get serializedATN() {
    return esql_parser._serializedATN;
  }
  createFailedPredicateException(predicate, message) {
    return new _antlr.FailedPredicateException(this, predicate, message);
  }
  constructor(input) {
    super(input);
    this._interp = new _antlr.ParserATNSimulator(this, esql_parser._ATN, esql_parser.DecisionsToDFA, new _antlr.PredictionContextCache());
  }
  // @RuleVersion(0)
  singleStatement() {
    let localctx = new SingleStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, esql_parser.RULE_singleStatement);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 116;
        this.query(0);
        this.state = 117;
        this.match(esql_parser.EOF);
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  query(_p) {
    if (_p === undefined) {
      _p = 0;
    }
    let _parentctx = this._ctx;
    let _parentState = this.state;
    let localctx = new QueryContext(this, this._ctx, _parentState);
    let _prevctx = localctx;
    let _startState = 2;
    this.enterRecursionRule(localctx, 2, esql_parser.RULE_query, _p);
    try {
      let _alt;
      this.enterOuterAlt(localctx, 1);
      {
        {
          localctx = new SingleCommandQueryContext(this, localctx);
          this._ctx = localctx;
          _prevctx = localctx;
          this.state = 120;
          this.sourceCommand();
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 127;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 0, this._ctx);
        while (_alt !== 2 && _alt !== _antlr.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            if (this._parseListeners != null) {
              this.triggerExitRuleEvent();
            }
            _prevctx = localctx;
            {
              {
                localctx = new CompositeQueryContext(this, new QueryContext(this, _parentctx, _parentState));
                this.pushNewRecursionContext(localctx, _startState, esql_parser.RULE_query);
                this.state = 122;
                if (!this.precpred(this._ctx, 1)) {
                  throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
                }
                this.state = 123;
                this.match(esql_parser.PIPE);
                this.state = 124;
                this.processingCommand();
              }
            }
          }
          this.state = 129;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 0, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return localctx;
  }
  // @RuleVersion(0)
  sourceCommand() {
    let localctx = new SourceCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, esql_parser.RULE_sourceCommand);
    try {
      this.state = 136;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 5:
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 130;
            this.explainCommand();
          }
          break;
        case 6:
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 131;
            this.fromCommand();
          }
          break;
        case 16:
          this.enterOuterAlt(localctx, 3);
          {
            this.state = 132;
            this.rowCommand();
          }
          break;
        case 13:
          this.enterOuterAlt(localctx, 4);
          {
            this.state = 133;
            this.metricsCommand();
          }
          break;
        case 17:
          this.enterOuterAlt(localctx, 5);
          {
            this.state = 134;
            this.showCommand();
          }
          break;
        case 12:
          this.enterOuterAlt(localctx, 6);
          {
            this.state = 135;
            this.metaCommand();
          }
          break;
        default:
          throw new _antlr.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  processingCommand() {
    let localctx = new ProcessingCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, esql_parser.RULE_processingCommand);
    try {
      this.state = 152;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 4:
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 138;
            this.evalCommand();
          }
          break;
        case 8:
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 139;
            this.inlinestatsCommand();
          }
          break;
        case 10:
          this.enterOuterAlt(localctx, 3);
          {
            this.state = 140;
            this.limitCommand();
          }
          break;
        case 11:
          this.enterOuterAlt(localctx, 4);
          {
            this.state = 141;
            this.lookupCommand();
          }
          break;
        case 9:
          this.enterOuterAlt(localctx, 5);
          {
            this.state = 142;
            this.keepCommand();
          }
          break;
        case 18:
          this.enterOuterAlt(localctx, 6);
          {
            this.state = 143;
            this.sortCommand();
          }
          break;
        case 19:
          this.enterOuterAlt(localctx, 7);
          {
            this.state = 144;
            this.statsCommand();
          }
          break;
        case 20:
          this.enterOuterAlt(localctx, 8);
          {
            this.state = 145;
            this.whereCommand();
          }
          break;
        case 2:
          this.enterOuterAlt(localctx, 9);
          {
            this.state = 146;
            this.dropCommand();
          }
          break;
        case 15:
          this.enterOuterAlt(localctx, 10);
          {
            this.state = 147;
            this.renameCommand();
          }
          break;
        case 1:
          this.enterOuterAlt(localctx, 11);
          {
            this.state = 148;
            this.dissectCommand();
          }
          break;
        case 7:
          this.enterOuterAlt(localctx, 12);
          {
            this.state = 149;
            this.grokCommand();
          }
          break;
        case 3:
          this.enterOuterAlt(localctx, 13);
          {
            this.state = 150;
            this.enrichCommand();
          }
          break;
        case 14:
          this.enterOuterAlt(localctx, 14);
          {
            this.state = 151;
            this.mvExpandCommand();
          }
          break;
        default:
          throw new _antlr.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  whereCommand() {
    let localctx = new WhereCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, esql_parser.RULE_whereCommand);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 154;
        this.match(esql_parser.WHERE);
        this.state = 155;
        this.booleanExpression(0);
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  booleanExpression(_p) {
    if (_p === undefined) {
      _p = 0;
    }
    let _parentctx = this._ctx;
    let _parentState = this.state;
    let localctx = new BooleanExpressionContext(this, this._ctx, _parentState);
    let _prevctx = localctx;
    let _startState = 10;
    this.enterRecursionRule(localctx, 10, esql_parser.RULE_booleanExpression, _p);
    let _la;
    try {
      let _alt;
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 185;
        this._errHandler.sync(this);
        switch (this._interp.adaptivePredict(this._input, 6, this._ctx)) {
          case 1:
            {
              localctx = new LogicalNotContext(this, localctx);
              this._ctx = localctx;
              _prevctx = localctx;
              this.state = 158;
              this.match(esql_parser.NOT);
              this.state = 159;
              this.booleanExpression(7);
            }
            break;
          case 2:
            {
              localctx = new BooleanDefaultContext(this, localctx);
              this._ctx = localctx;
              _prevctx = localctx;
              this.state = 160;
              this.valueExpression();
            }
            break;
          case 3:
            {
              localctx = new RegexExpressionContext(this, localctx);
              this._ctx = localctx;
              _prevctx = localctx;
              this.state = 161;
              this.regexBooleanExpression();
            }
            break;
          case 4:
            {
              localctx = new LogicalInContext(this, localctx);
              this._ctx = localctx;
              _prevctx = localctx;
              this.state = 162;
              this.valueExpression();
              this.state = 164;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 48) {
                {
                  this.state = 163;
                  this.match(esql_parser.NOT);
                }
              }
              this.state = 166;
              this.match(esql_parser.IN);
              this.state = 167;
              this.match(esql_parser.LP);
              this.state = 168;
              this.valueExpression();
              this.state = 173;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              while (_la === 38) {
                {
                  {
                    this.state = 169;
                    this.match(esql_parser.COMMA);
                    this.state = 170;
                    this.valueExpression();
                  }
                }
                this.state = 175;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
              }
              this.state = 176;
              this.match(esql_parser.RP);
            }
            break;
          case 5:
            {
              localctx = new IsNullContext(this, localctx);
              this._ctx = localctx;
              _prevctx = localctx;
              this.state = 178;
              this.valueExpression();
              this.state = 179;
              this.match(esql_parser.IS);
              this.state = 181;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === 48) {
                {
                  this.state = 180;
                  this.match(esql_parser.NOT);
                }
              }
              this.state = 183;
              this.match(esql_parser.NULL);
            }
            break;
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 195;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 8, this._ctx);
        while (_alt !== 2 && _alt !== _antlr.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            if (this._parseListeners != null) {
              this.triggerExitRuleEvent();
            }
            _prevctx = localctx;
            {
              this.state = 193;
              this._errHandler.sync(this);
              switch (this._interp.adaptivePredict(this._input, 7, this._ctx)) {
                case 1:
                  {
                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
                    localctx._left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, esql_parser.RULE_booleanExpression);
                    this.state = 187;
                    if (!this.precpred(this._ctx, 4)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 4)");
                    }
                    this.state = 188;
                    localctx._operator = this.match(esql_parser.AND);
                    this.state = 189;
                    localctx._right = this.booleanExpression(5);
                  }
                  break;
                case 2:
                  {
                    localctx = new LogicalBinaryContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
                    localctx._left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, esql_parser.RULE_booleanExpression);
                    this.state = 190;
                    if (!this.precpred(this._ctx, 3)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
                    }
                    this.state = 191;
                    localctx._operator = this.match(esql_parser.OR);
                    this.state = 192;
                    localctx._right = this.booleanExpression(4);
                  }
                  break;
              }
            }
          }
          this.state = 197;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 8, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return localctx;
  }
  // @RuleVersion(0)
  regexBooleanExpression() {
    let localctx = new RegexBooleanExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, esql_parser.RULE_regexBooleanExpression);
    let _la;
    try {
      this.state = 212;
      this._errHandler.sync(this);
      switch (this._interp.adaptivePredict(this._input, 11, this._ctx)) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 198;
            this.valueExpression();
            this.state = 200;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === 48) {
              {
                this.state = 199;
                this.match(esql_parser.NOT);
              }
            }
            this.state = 202;
            localctx._kind = this.match(esql_parser.LIKE);
            this.state = 203;
            localctx._pattern = this.string_();
          }
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 205;
            this.valueExpression();
            this.state = 207;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === 48) {
              {
                this.state = 206;
                this.match(esql_parser.NOT);
              }
            }
            this.state = 209;
            localctx._kind = this.match(esql_parser.RLIKE);
            this.state = 210;
            localctx._pattern = this.string_();
          }
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  valueExpression() {
    let localctx = new ValueExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, esql_parser.RULE_valueExpression);
    try {
      this.state = 219;
      this._errHandler.sync(this);
      switch (this._interp.adaptivePredict(this._input, 12, this._ctx)) {
        case 1:
          localctx = new ValueExpressionDefaultContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 214;
            this.operatorExpression(0);
          }
          break;
        case 2:
          localctx = new ComparisonContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 215;
            localctx._left = this.operatorExpression(0);
            this.state = 216;
            this.comparisonOperator();
            this.state = 217;
            localctx._right = this.operatorExpression(0);
          }
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  operatorExpression(_p) {
    if (_p === undefined) {
      _p = 0;
    }
    let _parentctx = this._ctx;
    let _parentState = this.state;
    let localctx = new OperatorExpressionContext(this, this._ctx, _parentState);
    let _prevctx = localctx;
    let _startState = 16;
    this.enterRecursionRule(localctx, 16, esql_parser.RULE_operatorExpression, _p);
    let _la;
    try {
      let _alt;
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 225;
        this._errHandler.sync(this);
        switch (this._interp.adaptivePredict(this._input, 13, this._ctx)) {
          case 1:
            {
              localctx = new OperatorExpressionDefaultContext(this, localctx);
              this._ctx = localctx;
              _prevctx = localctx;
              this.state = 222;
              this.primaryExpression(0);
            }
            break;
          case 2:
            {
              localctx = new ArithmeticUnaryContext(this, localctx);
              this._ctx = localctx;
              _prevctx = localctx;
              this.state = 223;
              localctx._operator = this._input.LT(1);
              _la = this._input.LA(1);
              if (!(_la === 63 || _la === 64)) {
                localctx._operator = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
              this.state = 224;
              this.operatorExpression(3);
            }
            break;
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 235;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 15, this._ctx);
        while (_alt !== 2 && _alt !== _antlr.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            if (this._parseListeners != null) {
              this.triggerExitRuleEvent();
            }
            _prevctx = localctx;
            {
              this.state = 233;
              this._errHandler.sync(this);
              switch (this._interp.adaptivePredict(this._input, 14, this._ctx)) {
                case 1:
                  {
                    localctx = new ArithmeticBinaryContext(this, new OperatorExpressionContext(this, _parentctx, _parentState));
                    localctx._left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, esql_parser.RULE_operatorExpression);
                    this.state = 227;
                    if (!this.precpred(this._ctx, 2)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
                    }
                    this.state = 228;
                    localctx._operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (!((_la - 65 & ~0x1F) === 0 && (1 << _la - 65 & 7) !== 0)) {
                      localctx._operator = this._errHandler.recoverInline(this);
                    } else {
                      this._errHandler.reportMatch(this);
                      this.consume();
                    }
                    this.state = 229;
                    localctx._right = this.operatorExpression(3);
                  }
                  break;
                case 2:
                  {
                    localctx = new ArithmeticBinaryContext(this, new OperatorExpressionContext(this, _parentctx, _parentState));
                    localctx._left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, esql_parser.RULE_operatorExpression);
                    this.state = 230;
                    if (!this.precpred(this._ctx, 1)) {
                      throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
                    }
                    this.state = 231;
                    localctx._operator = this._input.LT(1);
                    _la = this._input.LA(1);
                    if (!(_la === 63 || _la === 64)) {
                      localctx._operator = this._errHandler.recoverInline(this);
                    } else {
                      this._errHandler.reportMatch(this);
                      this.consume();
                    }
                    this.state = 232;
                    localctx._right = this.operatorExpression(2);
                  }
                  break;
              }
            }
          }
          this.state = 237;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 15, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return localctx;
  }
  // @RuleVersion(0)
  primaryExpression(_p) {
    if (_p === undefined) {
      _p = 0;
    }
    let _parentctx = this._ctx;
    let _parentState = this.state;
    let localctx = new PrimaryExpressionContext(this, this._ctx, _parentState);
    let _prevctx = localctx;
    let _startState = 18;
    this.enterRecursionRule(localctx, 18, esql_parser.RULE_primaryExpression, _p);
    try {
      let _alt;
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 246;
        this._errHandler.sync(this);
        switch (this._interp.adaptivePredict(this._input, 16, this._ctx)) {
          case 1:
            {
              localctx = new ConstantDefaultContext(this, localctx);
              this._ctx = localctx;
              _prevctx = localctx;
              this.state = 239;
              this.constant();
            }
            break;
          case 2:
            {
              localctx = new DereferenceContext(this, localctx);
              this._ctx = localctx;
              _prevctx = localctx;
              this.state = 240;
              this.qualifiedName();
            }
            break;
          case 3:
            {
              localctx = new FunctionContext(this, localctx);
              this._ctx = localctx;
              _prevctx = localctx;
              this.state = 241;
              this.functionExpression();
            }
            break;
          case 4:
            {
              localctx = new ParenthesizedExpressionContext(this, localctx);
              this._ctx = localctx;
              _prevctx = localctx;
              this.state = 242;
              this.match(esql_parser.LP);
              this.state = 243;
              this.booleanExpression(0);
              this.state = 244;
              this.match(esql_parser.RP);
            }
            break;
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 253;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 17, this._ctx);
        while (_alt !== 2 && _alt !== _antlr.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            if (this._parseListeners != null) {
              this.triggerExitRuleEvent();
            }
            _prevctx = localctx;
            {
              {
                localctx = new InlineCastContext(this, new PrimaryExpressionContext(this, _parentctx, _parentState));
                this.pushNewRecursionContext(localctx, _startState, esql_parser.RULE_primaryExpression);
                this.state = 248;
                if (!this.precpred(this._ctx, 1)) {
                  throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
                }
                this.state = 249;
                this.match(esql_parser.CAST_OP);
                this.state = 250;
                this.dataType();
              }
            }
          }
          this.state = 255;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 17, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.unrollRecursionContexts(_parentctx);
    }
    return localctx;
  }
  // @RuleVersion(0)
  functionExpression() {
    let localctx = new FunctionExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, esql_parser.RULE_functionExpression);
    let _la;
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 256;
        this.identifier();
        this.state = 257;
        this.match(esql_parser.LP);
        this.state = 267;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case 65:
            {
              this.state = 258;
              this.match(esql_parser.ASTERISK);
            }
            break;
          case 30:
          case 31:
          case 32:
          case 41:
          case 44:
          case 48:
          case 49:
          case 52:
          case 55:
          case 63:
          case 64:
          case 68:
          case 69:
          case 71:
          case 72:
            {
              {
                this.state = 259;
                this.booleanExpression(0);
                this.state = 264;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while (_la === 38) {
                  {
                    {
                      this.state = 260;
                      this.match(esql_parser.COMMA);
                      this.state = 261;
                      this.booleanExpression(0);
                    }
                  }
                  this.state = 266;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                }
              }
            }
            break;
          case 54:
            break;
          default:
            break;
        }
        this.state = 269;
        this.match(esql_parser.RP);
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  dataType() {
    let localctx = new DataTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, esql_parser.RULE_dataType);
    try {
      localctx = new ToDataTypeContext(this, localctx);
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 271;
        this.identifier();
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  rowCommand() {
    let localctx = new RowCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, esql_parser.RULE_rowCommand);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 273;
        this.match(esql_parser.ROW);
        this.state = 274;
        this.fields();
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  fields() {
    let localctx = new FieldsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, esql_parser.RULE_fields);
    try {
      let _alt;
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 276;
        this.field();
        this.state = 281;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 20, this._ctx);
        while (_alt !== 2 && _alt !== _antlr.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 277;
                this.match(esql_parser.COMMA);
                this.state = 278;
                this.field();
              }
            }
          }
          this.state = 283;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 20, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  field() {
    let localctx = new FieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, esql_parser.RULE_field);
    try {
      this.state = 289;
      this._errHandler.sync(this);
      switch (this._interp.adaptivePredict(this._input, 21, this._ctx)) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 284;
            this.booleanExpression(0);
          }
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 285;
            this.qualifiedName();
            this.state = 286;
            this.match(esql_parser.ASSIGN);
            this.state = 287;
            this.booleanExpression(0);
          }
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  fromCommand() {
    let localctx = new FromCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, esql_parser.RULE_fromCommand);
    try {
      let _alt;
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 291;
        this.match(esql_parser.FROM);
        this.state = 292;
        this.indexPattern();
        this.state = 297;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 22, this._ctx);
        while (_alt !== 2 && _alt !== _antlr.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 293;
                this.match(esql_parser.COMMA);
                this.state = 294;
                this.indexPattern();
              }
            }
          }
          this.state = 299;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 22, this._ctx);
        }
        this.state = 301;
        this._errHandler.sync(this);
        switch (this._interp.adaptivePredict(this._input, 23, this._ctx)) {
          case 1:
            {
              this.state = 300;
              this.metadata();
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  indexPattern() {
    let localctx = new IndexPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, esql_parser.RULE_indexPattern);
    try {
      this.state = 308;
      this._errHandler.sync(this);
      switch (this._interp.adaptivePredict(this._input, 24, this._ctx)) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 303;
            this.clusterString();
            this.state = 304;
            this.match(esql_parser.COLON);
            this.state = 305;
            this.indexString();
          }
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 307;
            this.indexString();
          }
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  clusterString() {
    let localctx = new ClusterStringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, esql_parser.RULE_clusterString);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 310;
        this.match(esql_parser.UNQUOTED_SOURCE);
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  indexString() {
    let localctx = new IndexStringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, esql_parser.RULE_indexString);
    let _la;
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 312;
        _la = this._input.LA(1);
        if (!(_la === 25 || _la === 30)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  metadata() {
    let localctx = new MetadataContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, esql_parser.RULE_metadata);
    try {
      this.state = 316;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 76:
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 314;
            this.metadataOption();
          }
          break;
        case 69:
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 315;
            this.deprecated_metadata();
          }
          break;
        default:
          throw new _antlr.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  metadataOption() {
    let localctx = new MetadataOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, esql_parser.RULE_metadataOption);
    try {
      let _alt;
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 318;
        this.match(esql_parser.METADATA);
        this.state = 319;
        this.match(esql_parser.UNQUOTED_SOURCE);
        this.state = 324;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 26, this._ctx);
        while (_alt !== 2 && _alt !== _antlr.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 320;
                this.match(esql_parser.COMMA);
                this.state = 321;
                this.match(esql_parser.UNQUOTED_SOURCE);
              }
            }
          }
          this.state = 326;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 26, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  deprecated_metadata() {
    let localctx = new Deprecated_metadataContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, esql_parser.RULE_deprecated_metadata);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 327;
        this.match(esql_parser.OPENING_BRACKET);
        this.state = 328;
        this.metadataOption();
        this.state = 329;
        this.match(esql_parser.CLOSING_BRACKET);
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  metricsCommand() {
    let localctx = new MetricsCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, esql_parser.RULE_metricsCommand);
    try {
      let _alt;
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 331;
        this.match(esql_parser.METRICS);
        this.state = 332;
        this.indexPattern();
        this.state = 337;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 27, this._ctx);
        while (_alt !== 2 && _alt !== _antlr.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 333;
                this.match(esql_parser.COMMA);
                this.state = 334;
                this.indexPattern();
              }
            }
          }
          this.state = 339;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 27, this._ctx);
        }
        this.state = 341;
        this._errHandler.sync(this);
        switch (this._interp.adaptivePredict(this._input, 28, this._ctx)) {
          case 1:
            {
              this.state = 340;
              localctx._aggregates = this.fields();
            }
            break;
        }
        this.state = 345;
        this._errHandler.sync(this);
        switch (this._interp.adaptivePredict(this._input, 29, this._ctx)) {
          case 1:
            {
              this.state = 343;
              this.match(esql_parser.BY);
              this.state = 344;
              localctx._grouping = this.fields();
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  evalCommand() {
    let localctx = new EvalCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, esql_parser.RULE_evalCommand);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 347;
        this.match(esql_parser.EVAL);
        this.state = 348;
        this.fields();
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  statsCommand() {
    let localctx = new StatsCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, esql_parser.RULE_statsCommand);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 350;
        this.match(esql_parser.STATS);
        this.state = 352;
        this._errHandler.sync(this);
        switch (this._interp.adaptivePredict(this._input, 30, this._ctx)) {
          case 1:
            {
              this.state = 351;
              localctx._stats = this.fields();
            }
            break;
        }
        this.state = 356;
        this._errHandler.sync(this);
        switch (this._interp.adaptivePredict(this._input, 31, this._ctx)) {
          case 1:
            {
              this.state = 354;
              this.match(esql_parser.BY);
              this.state = 355;
              localctx._grouping = this.fields();
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  inlinestatsCommand() {
    let localctx = new InlinestatsCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, esql_parser.RULE_inlinestatsCommand);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 358;
        this.match(esql_parser.INLINESTATS);
        this.state = 359;
        localctx._stats = this.fields();
        this.state = 362;
        this._errHandler.sync(this);
        switch (this._interp.adaptivePredict(this._input, 32, this._ctx)) {
          case 1:
            {
              this.state = 360;
              this.match(esql_parser.BY);
              this.state = 361;
              localctx._grouping = this.fields();
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  qualifiedName() {
    let localctx = new QualifiedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, esql_parser.RULE_qualifiedName);
    try {
      let _alt;
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 364;
        this.identifier();
        this.state = 369;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 33, this._ctx);
        while (_alt !== 2 && _alt !== _antlr.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 365;
                this.match(esql_parser.DOT);
                this.state = 366;
                this.identifier();
              }
            }
          }
          this.state = 371;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 33, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  qualifiedNamePattern() {
    let localctx = new QualifiedNamePatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, esql_parser.RULE_qualifiedNamePattern);
    try {
      let _alt;
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 372;
        this.identifierPattern();
        this.state = 377;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 34, this._ctx);
        while (_alt !== 2 && _alt !== _antlr.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 373;
                this.match(esql_parser.DOT);
                this.state = 374;
                this.identifierPattern();
              }
            }
          }
          this.state = 379;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 34, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  qualifiedNamePatterns() {
    let localctx = new QualifiedNamePatternsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, esql_parser.RULE_qualifiedNamePatterns);
    try {
      let _alt;
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 380;
        this.qualifiedNamePattern();
        this.state = 385;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 35, this._ctx);
        while (_alt !== 2 && _alt !== _antlr.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 381;
                this.match(esql_parser.COMMA);
                this.state = 382;
                this.qualifiedNamePattern();
              }
            }
          }
          this.state = 387;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 35, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  identifier() {
    let localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, esql_parser.RULE_identifier);
    let _la;
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 388;
        _la = this._input.LA(1);
        if (!(_la === 71 || _la === 72)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  identifierPattern() {
    let localctx = new IdentifierPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, esql_parser.RULE_identifierPattern);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 390;
        this.match(esql_parser.ID_PATTERN);
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  constant() {
    let localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, esql_parser.RULE_constant);
    let _la;
    try {
      this.state = 434;
      this._errHandler.sync(this);
      switch (this._interp.adaptivePredict(this._input, 39, this._ctx)) {
        case 1:
          localctx = new NullLiteralContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 392;
            this.match(esql_parser.NULL);
          }
          break;
        case 2:
          localctx = new QualifiedIntegerLiteralContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 393;
            this.integerValue();
            this.state = 394;
            this.match(esql_parser.UNQUOTED_IDENTIFIER);
          }
          break;
        case 3:
          localctx = new DecimalLiteralContext(this, localctx);
          this.enterOuterAlt(localctx, 3);
          {
            this.state = 396;
            this.decimalValue();
          }
          break;
        case 4:
          localctx = new IntegerLiteralContext(this, localctx);
          this.enterOuterAlt(localctx, 4);
          {
            this.state = 397;
            this.integerValue();
          }
          break;
        case 5:
          localctx = new BooleanLiteralContext(this, localctx);
          this.enterOuterAlt(localctx, 5);
          {
            this.state = 398;
            this.booleanValue();
          }
          break;
        case 6:
          localctx = new InputParamsContext(this, localctx);
          this.enterOuterAlt(localctx, 6);
          {
            this.state = 399;
            this.params();
          }
          break;
        case 7:
          localctx = new StringLiteralContext(this, localctx);
          this.enterOuterAlt(localctx, 7);
          {
            this.state = 400;
            this.string_();
          }
          break;
        case 8:
          localctx = new NumericArrayLiteralContext(this, localctx);
          this.enterOuterAlt(localctx, 8);
          {
            this.state = 401;
            this.match(esql_parser.OPENING_BRACKET);
            this.state = 402;
            this.numericValue();
            this.state = 407;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === 38) {
              {
                {
                  this.state = 403;
                  this.match(esql_parser.COMMA);
                  this.state = 404;
                  this.numericValue();
                }
              }
              this.state = 409;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
            this.state = 410;
            this.match(esql_parser.CLOSING_BRACKET);
          }
          break;
        case 9:
          localctx = new BooleanArrayLiteralContext(this, localctx);
          this.enterOuterAlt(localctx, 9);
          {
            this.state = 412;
            this.match(esql_parser.OPENING_BRACKET);
            this.state = 413;
            this.booleanValue();
            this.state = 418;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === 38) {
              {
                {
                  this.state = 414;
                  this.match(esql_parser.COMMA);
                  this.state = 415;
                  this.booleanValue();
                }
              }
              this.state = 420;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
            this.state = 421;
            this.match(esql_parser.CLOSING_BRACKET);
          }
          break;
        case 10:
          localctx = new StringArrayLiteralContext(this, localctx);
          this.enterOuterAlt(localctx, 10);
          {
            this.state = 423;
            this.match(esql_parser.OPENING_BRACKET);
            this.state = 424;
            this.string_();
            this.state = 429;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while (_la === 38) {
              {
                {
                  this.state = 425;
                  this.match(esql_parser.COMMA);
                  this.state = 426;
                  this.string_();
                }
              }
              this.state = 431;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
            }
            this.state = 432;
            this.match(esql_parser.CLOSING_BRACKET);
          }
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  params() {
    let localctx = new ParamsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, esql_parser.RULE_params);
    try {
      this.state = 438;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case 52:
          localctx = new InputParamContext(this, localctx);
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 436;
            this.match(esql_parser.PARAM);
          }
          break;
        case 68:
          localctx = new InputNamedOrPositionalParamContext(this, localctx);
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 437;
            this.match(esql_parser.NAMED_OR_POSITIONAL_PARAM);
          }
          break;
        default:
          throw new _antlr.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  limitCommand() {
    let localctx = new LimitCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, esql_parser.RULE_limitCommand);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 440;
        this.match(esql_parser.LIMIT);
        this.state = 441;
        this.match(esql_parser.INTEGER_LITERAL);
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  sortCommand() {
    let localctx = new SortCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, esql_parser.RULE_sortCommand);
    try {
      let _alt;
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 443;
        this.match(esql_parser.SORT);
        this.state = 444;
        this.orderExpression();
        this.state = 449;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 41, this._ctx);
        while (_alt !== 2 && _alt !== _antlr.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 445;
                this.match(esql_parser.COMMA);
                this.state = 446;
                this.orderExpression();
              }
            }
          }
          this.state = 451;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 41, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  orderExpression() {
    let localctx = new OrderExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, esql_parser.RULE_orderExpression);
    let _la;
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 452;
        this.booleanExpression(0);
        this.state = 454;
        this._errHandler.sync(this);
        switch (this._interp.adaptivePredict(this._input, 42, this._ctx)) {
          case 1:
            {
              this.state = 453;
              localctx._ordering = this._input.LT(1);
              _la = this._input.LA(1);
              if (!(_la === 35 || _la === 39)) {
                localctx._ordering = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
            }
            break;
        }
        this.state = 458;
        this._errHandler.sync(this);
        switch (this._interp.adaptivePredict(this._input, 43, this._ctx)) {
          case 1:
            {
              this.state = 456;
              this.match(esql_parser.NULLS);
              this.state = 457;
              localctx._nullOrdering = this._input.LT(1);
              _la = this._input.LA(1);
              if (!(_la === 42 || _la === 43)) {
                localctx._nullOrdering = this._errHandler.recoverInline(this);
              } else {
                this._errHandler.reportMatch(this);
                this.consume();
              }
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  keepCommand() {
    let localctx = new KeepCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, esql_parser.RULE_keepCommand);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 460;
        this.match(esql_parser.KEEP);
        this.state = 461;
        this.qualifiedNamePatterns();
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  dropCommand() {
    let localctx = new DropCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, esql_parser.RULE_dropCommand);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 463;
        this.match(esql_parser.DROP);
        this.state = 464;
        this.qualifiedNamePatterns();
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  renameCommand() {
    let localctx = new RenameCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, esql_parser.RULE_renameCommand);
    try {
      let _alt;
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 466;
        this.match(esql_parser.RENAME);
        this.state = 467;
        this.renameClause();
        this.state = 472;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 44, this._ctx);
        while (_alt !== 2 && _alt !== _antlr.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 468;
                this.match(esql_parser.COMMA);
                this.state = 469;
                this.renameClause();
              }
            }
          }
          this.state = 474;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 44, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  renameClause() {
    let localctx = new RenameClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, esql_parser.RULE_renameClause);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 475;
        localctx._oldName = this.qualifiedNamePattern();
        this.state = 476;
        this.match(esql_parser.AS);
        this.state = 477;
        localctx._newName = this.qualifiedNamePattern();
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  dissectCommand() {
    let localctx = new DissectCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, esql_parser.RULE_dissectCommand);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 479;
        this.match(esql_parser.DISSECT);
        this.state = 480;
        this.primaryExpression(0);
        this.state = 481;
        this.string_();
        this.state = 483;
        this._errHandler.sync(this);
        switch (this._interp.adaptivePredict(this._input, 45, this._ctx)) {
          case 1:
            {
              this.state = 482;
              this.commandOptions();
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  grokCommand() {
    let localctx = new GrokCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, esql_parser.RULE_grokCommand);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 485;
        this.match(esql_parser.GROK);
        this.state = 486;
        this.primaryExpression(0);
        this.state = 487;
        this.string_();
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  mvExpandCommand() {
    let localctx = new MvExpandCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, esql_parser.RULE_mvExpandCommand);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 489;
        this.match(esql_parser.MV_EXPAND);
        this.state = 490;
        this.qualifiedName();
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  commandOptions() {
    let localctx = new CommandOptionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, esql_parser.RULE_commandOptions);
    try {
      let _alt;
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 492;
        this.commandOption();
        this.state = 497;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 46, this._ctx);
        while (_alt !== 2 && _alt !== _antlr.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            {
              {
                this.state = 493;
                this.match(esql_parser.COMMA);
                this.state = 494;
                this.commandOption();
              }
            }
          }
          this.state = 499;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 46, this._ctx);
        }
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  commandOption() {
    let localctx = new CommandOptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, esql_parser.RULE_commandOption);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 500;
        this.identifier();
        this.state = 501;
        this.match(esql_parser.ASSIGN);
        this.state = 502;
        this.constant();
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  booleanValue() {
    let localctx = new BooleanValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, esql_parser.RULE_booleanValue);
    let _la;
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 504;
        _la = this._input.LA(1);
        if (!(_la === 41 || _la === 55)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  numericValue() {
    let localctx = new NumericValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, esql_parser.RULE_numericValue);
    try {
      this.state = 508;
      this._errHandler.sync(this);
      switch (this._interp.adaptivePredict(this._input, 47, this._ctx)) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          {
            this.state = 506;
            this.decimalValue();
          }
          break;
        case 2:
          this.enterOuterAlt(localctx, 2);
          {
            this.state = 507;
            this.integerValue();
          }
          break;
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  decimalValue() {
    let localctx = new DecimalValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, esql_parser.RULE_decimalValue);
    let _la;
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 511;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === 63 || _la === 64) {
          {
            this.state = 510;
            _la = this._input.LA(1);
            if (!(_la === 63 || _la === 64)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);
              this.consume();
            }
          }
        }
        this.state = 513;
        this.match(esql_parser.DECIMAL_LITERAL);
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  integerValue() {
    let localctx = new IntegerValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, esql_parser.RULE_integerValue);
    let _la;
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 516;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === 63 || _la === 64) {
          {
            this.state = 515;
            _la = this._input.LA(1);
            if (!(_la === 63 || _la === 64)) {
              this._errHandler.recoverInline(this);
            } else {
              this._errHandler.reportMatch(this);
              this.consume();
            }
          }
        }
        this.state = 518;
        this.match(esql_parser.INTEGER_LITERAL);
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  string_() {
    let localctx = new StringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, esql_parser.RULE_string);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 520;
        this.match(esql_parser.QUOTED_STRING);
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  comparisonOperator() {
    let localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, esql_parser.RULE_comparisonOperator);
    let _la;
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 522;
        _la = this._input.LA(1);
        if (!((_la - 56 & ~0x1F) === 0 && (1 << _la - 56 & 125) !== 0)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);
          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  explainCommand() {
    let localctx = new ExplainCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, esql_parser.RULE_explainCommand);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 524;
        this.match(esql_parser.EXPLAIN);
        this.state = 525;
        this.subqueryExpression();
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  subqueryExpression() {
    let localctx = new SubqueryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, esql_parser.RULE_subqueryExpression);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 527;
        this.match(esql_parser.OPENING_BRACKET);
        this.state = 528;
        this.query(0);
        this.state = 529;
        this.match(esql_parser.CLOSING_BRACKET);
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  showCommand() {
    let localctx = new ShowCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, esql_parser.RULE_showCommand);
    try {
      localctx = new ShowInfoContext(this, localctx);
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 531;
        this.match(esql_parser.SHOW);
        this.state = 532;
        this.match(esql_parser.INFO);
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  metaCommand() {
    let localctx = new MetaCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, esql_parser.RULE_metaCommand);
    try {
      localctx = new MetaFunctionsContext(this, localctx);
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 534;
        this.match(esql_parser.META);
        this.state = 535;
        this.match(esql_parser.FUNCTIONS);
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  enrichCommand() {
    let localctx = new EnrichCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, esql_parser.RULE_enrichCommand);
    try {
      let _alt;
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 537;
        this.match(esql_parser.ENRICH);
        this.state = 538;
        localctx._policyName = this.match(esql_parser.ENRICH_POLICY_NAME);
        this.state = 541;
        this._errHandler.sync(this);
        switch (this._interp.adaptivePredict(this._input, 50, this._ctx)) {
          case 1:
            {
              this.state = 539;
              this.match(esql_parser.ON);
              this.state = 540;
              localctx._matchField = this.qualifiedNamePattern();
            }
            break;
        }
        this.state = 552;
        this._errHandler.sync(this);
        switch (this._interp.adaptivePredict(this._input, 52, this._ctx)) {
          case 1:
            {
              this.state = 543;
              this.match(esql_parser.WITH);
              this.state = 544;
              this.enrichWithClause();
              this.state = 549;
              this._errHandler.sync(this);
              _alt = this._interp.adaptivePredict(this._input, 51, this._ctx);
              while (_alt !== 2 && _alt !== _antlr.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                  {
                    {
                      this.state = 545;
                      this.match(esql_parser.COMMA);
                      this.state = 546;
                      this.enrichWithClause();
                    }
                  }
                }
                this.state = 551;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 51, this._ctx);
              }
            }
            break;
        }
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  enrichWithClause() {
    let localctx = new EnrichWithClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, esql_parser.RULE_enrichWithClause);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 557;
        this._errHandler.sync(this);
        switch (this._interp.adaptivePredict(this._input, 53, this._ctx)) {
          case 1:
            {
              this.state = 554;
              localctx._newName = this.qualifiedNamePattern();
              this.state = 555;
              this.match(esql_parser.ASSIGN);
            }
            break;
        }
        this.state = 559;
        localctx._enrichField = this.qualifiedNamePattern();
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  // @RuleVersion(0)
  lookupCommand() {
    let localctx = new LookupCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, esql_parser.RULE_lookupCommand);
    try {
      this.enterOuterAlt(localctx, 1);
      {
        this.state = 561;
        this.match(esql_parser.LOOKUP);
        this.state = 562;
        localctx._tableName = this.indexPattern();
        this.state = 563;
        this.match(esql_parser.ON);
        this.state = 564;
        localctx._matchFields = this.qualifiedNamePatterns();
      }
    } catch (re) {
      if (re instanceof _antlr.RecognitionException) {
        localctx.exception = re;
        this._errHandler.reportError(this, re);
        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }
    return localctx;
  }
  sempred(localctx, ruleIndex, predIndex) {
    switch (ruleIndex) {
      case 1:
        return this.query_sempred(localctx, predIndex);
      case 5:
        return this.booleanExpression_sempred(localctx, predIndex);
      case 8:
        return this.operatorExpression_sempred(localctx, predIndex);
      case 9:
        return this.primaryExpression_sempred(localctx, predIndex);
    }
    return true;
  }
  query_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 0:
        return this.precpred(this._ctx, 1);
    }
    return true;
  }
  booleanExpression_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 1:
        return this.precpred(this._ctx, 4);
      case 2:
        return this.precpred(this._ctx, 3);
    }
    return true;
  }
  operatorExpression_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 3:
        return this.precpred(this._ctx, 2);
      case 4:
        return this.precpred(this._ctx, 1);
    }
    return true;
  }
  primaryExpression_sempred(localctx, predIndex) {
    switch (predIndex) {
      case 5:
        return this.precpred(this._ctx, 1);
    }
    return true;
  }
  static get _ATN() {
    if (!esql_parser.__ATN) {
      esql_parser.__ATN = new _antlr.ATNDeserializer().deserialize(esql_parser._serializedATN);
    }
    return esql_parser.__ATN;
  }
}
exports.default = esql_parser;
_esql_parser = esql_parser;
(0, _defineProperty2.default)(esql_parser, "DISSECT", 1);
(0, _defineProperty2.default)(esql_parser, "DROP", 2);
(0, _defineProperty2.default)(esql_parser, "ENRICH", 3);
(0, _defineProperty2.default)(esql_parser, "EVAL", 4);
(0, _defineProperty2.default)(esql_parser, "EXPLAIN", 5);
(0, _defineProperty2.default)(esql_parser, "FROM", 6);
(0, _defineProperty2.default)(esql_parser, "GROK", 7);
(0, _defineProperty2.default)(esql_parser, "INLINESTATS", 8);
(0, _defineProperty2.default)(esql_parser, "KEEP", 9);
(0, _defineProperty2.default)(esql_parser, "LIMIT", 10);
(0, _defineProperty2.default)(esql_parser, "LOOKUP", 11);
(0, _defineProperty2.default)(esql_parser, "META", 12);
(0, _defineProperty2.default)(esql_parser, "METRICS", 13);
(0, _defineProperty2.default)(esql_parser, "MV_EXPAND", 14);
(0, _defineProperty2.default)(esql_parser, "RENAME", 15);
(0, _defineProperty2.default)(esql_parser, "ROW", 16);
(0, _defineProperty2.default)(esql_parser, "SHOW", 17);
(0, _defineProperty2.default)(esql_parser, "SORT", 18);
(0, _defineProperty2.default)(esql_parser, "STATS", 19);
(0, _defineProperty2.default)(esql_parser, "WHERE", 20);
(0, _defineProperty2.default)(esql_parser, "UNKNOWN_CMD", 21);
(0, _defineProperty2.default)(esql_parser, "LINE_COMMENT", 22);
(0, _defineProperty2.default)(esql_parser, "MULTILINE_COMMENT", 23);
(0, _defineProperty2.default)(esql_parser, "WS", 24);
(0, _defineProperty2.default)(esql_parser, "UNQUOTED_SOURCE", 25);
(0, _defineProperty2.default)(esql_parser, "EXPLAIN_WS", 26);
(0, _defineProperty2.default)(esql_parser, "EXPLAIN_LINE_COMMENT", 27);
(0, _defineProperty2.default)(esql_parser, "EXPLAIN_MULTILINE_COMMENT", 28);
(0, _defineProperty2.default)(esql_parser, "PIPE", 29);
(0, _defineProperty2.default)(esql_parser, "QUOTED_STRING", 30);
(0, _defineProperty2.default)(esql_parser, "INTEGER_LITERAL", 31);
(0, _defineProperty2.default)(esql_parser, "DECIMAL_LITERAL", 32);
(0, _defineProperty2.default)(esql_parser, "BY", 33);
(0, _defineProperty2.default)(esql_parser, "AND", 34);
(0, _defineProperty2.default)(esql_parser, "ASC", 35);
(0, _defineProperty2.default)(esql_parser, "ASSIGN", 36);
(0, _defineProperty2.default)(esql_parser, "CAST_OP", 37);
(0, _defineProperty2.default)(esql_parser, "COMMA", 38);
(0, _defineProperty2.default)(esql_parser, "DESC", 39);
(0, _defineProperty2.default)(esql_parser, "DOT", 40);
(0, _defineProperty2.default)(esql_parser, "FALSE", 41);
(0, _defineProperty2.default)(esql_parser, "FIRST", 42);
(0, _defineProperty2.default)(esql_parser, "LAST", 43);
(0, _defineProperty2.default)(esql_parser, "LP", 44);
(0, _defineProperty2.default)(esql_parser, "IN", 45);
(0, _defineProperty2.default)(esql_parser, "IS", 46);
(0, _defineProperty2.default)(esql_parser, "LIKE", 47);
(0, _defineProperty2.default)(esql_parser, "NOT", 48);
(0, _defineProperty2.default)(esql_parser, "NULL", 49);
(0, _defineProperty2.default)(esql_parser, "NULLS", 50);
(0, _defineProperty2.default)(esql_parser, "OR", 51);
(0, _defineProperty2.default)(esql_parser, "PARAM", 52);
(0, _defineProperty2.default)(esql_parser, "RLIKE", 53);
(0, _defineProperty2.default)(esql_parser, "RP", 54);
(0, _defineProperty2.default)(esql_parser, "TRUE", 55);
(0, _defineProperty2.default)(esql_parser, "EQ", 56);
(0, _defineProperty2.default)(esql_parser, "CIEQ", 57);
(0, _defineProperty2.default)(esql_parser, "NEQ", 58);
(0, _defineProperty2.default)(esql_parser, "LT", 59);
(0, _defineProperty2.default)(esql_parser, "LTE", 60);
(0, _defineProperty2.default)(esql_parser, "GT", 61);
(0, _defineProperty2.default)(esql_parser, "GTE", 62);
(0, _defineProperty2.default)(esql_parser, "PLUS", 63);
(0, _defineProperty2.default)(esql_parser, "MINUS", 64);
(0, _defineProperty2.default)(esql_parser, "ASTERISK", 65);
(0, _defineProperty2.default)(esql_parser, "SLASH", 66);
(0, _defineProperty2.default)(esql_parser, "PERCENT", 67);
(0, _defineProperty2.default)(esql_parser, "NAMED_OR_POSITIONAL_PARAM", 68);
(0, _defineProperty2.default)(esql_parser, "OPENING_BRACKET", 69);
(0, _defineProperty2.default)(esql_parser, "CLOSING_BRACKET", 70);
(0, _defineProperty2.default)(esql_parser, "UNQUOTED_IDENTIFIER", 71);
(0, _defineProperty2.default)(esql_parser, "QUOTED_IDENTIFIER", 72);
(0, _defineProperty2.default)(esql_parser, "EXPR_LINE_COMMENT", 73);
(0, _defineProperty2.default)(esql_parser, "EXPR_MULTILINE_COMMENT", 74);
(0, _defineProperty2.default)(esql_parser, "EXPR_WS", 75);
(0, _defineProperty2.default)(esql_parser, "METADATA", 76);
(0, _defineProperty2.default)(esql_parser, "FROM_LINE_COMMENT", 77);
(0, _defineProperty2.default)(esql_parser, "FROM_MULTILINE_COMMENT", 78);
(0, _defineProperty2.default)(esql_parser, "FROM_WS", 79);
(0, _defineProperty2.default)(esql_parser, "ID_PATTERN", 80);
(0, _defineProperty2.default)(esql_parser, "PROJECT_LINE_COMMENT", 81);
(0, _defineProperty2.default)(esql_parser, "PROJECT_MULTILINE_COMMENT", 82);
(0, _defineProperty2.default)(esql_parser, "PROJECT_WS", 83);
(0, _defineProperty2.default)(esql_parser, "AS", 84);
(0, _defineProperty2.default)(esql_parser, "RENAME_LINE_COMMENT", 85);
(0, _defineProperty2.default)(esql_parser, "RENAME_MULTILINE_COMMENT", 86);
(0, _defineProperty2.default)(esql_parser, "RENAME_WS", 87);
(0, _defineProperty2.default)(esql_parser, "ON", 88);
(0, _defineProperty2.default)(esql_parser, "WITH", 89);
(0, _defineProperty2.default)(esql_parser, "ENRICH_POLICY_NAME", 90);
(0, _defineProperty2.default)(esql_parser, "ENRICH_LINE_COMMENT", 91);
(0, _defineProperty2.default)(esql_parser, "ENRICH_MULTILINE_COMMENT", 92);
(0, _defineProperty2.default)(esql_parser, "ENRICH_WS", 93);
(0, _defineProperty2.default)(esql_parser, "ENRICH_FIELD_LINE_COMMENT", 94);
(0, _defineProperty2.default)(esql_parser, "ENRICH_FIELD_MULTILINE_COMMENT", 95);
(0, _defineProperty2.default)(esql_parser, "ENRICH_FIELD_WS", 96);
(0, _defineProperty2.default)(esql_parser, "LOOKUP_LINE_COMMENT", 97);
(0, _defineProperty2.default)(esql_parser, "LOOKUP_MULTILINE_COMMENT", 98);
(0, _defineProperty2.default)(esql_parser, "LOOKUP_WS", 99);
(0, _defineProperty2.default)(esql_parser, "LOOKUP_FIELD_LINE_COMMENT", 100);
(0, _defineProperty2.default)(esql_parser, "LOOKUP_FIELD_MULTILINE_COMMENT", 101);
(0, _defineProperty2.default)(esql_parser, "LOOKUP_FIELD_WS", 102);
(0, _defineProperty2.default)(esql_parser, "MVEXPAND_LINE_COMMENT", 103);
(0, _defineProperty2.default)(esql_parser, "MVEXPAND_MULTILINE_COMMENT", 104);
(0, _defineProperty2.default)(esql_parser, "MVEXPAND_WS", 105);
(0, _defineProperty2.default)(esql_parser, "INFO", 106);
(0, _defineProperty2.default)(esql_parser, "SHOW_LINE_COMMENT", 107);
(0, _defineProperty2.default)(esql_parser, "SHOW_MULTILINE_COMMENT", 108);
(0, _defineProperty2.default)(esql_parser, "SHOW_WS", 109);
(0, _defineProperty2.default)(esql_parser, "FUNCTIONS", 110);
(0, _defineProperty2.default)(esql_parser, "META_LINE_COMMENT", 111);
(0, _defineProperty2.default)(esql_parser, "META_MULTILINE_COMMENT", 112);
(0, _defineProperty2.default)(esql_parser, "META_WS", 113);
(0, _defineProperty2.default)(esql_parser, "COLON", 114);
(0, _defineProperty2.default)(esql_parser, "SETTING", 115);
(0, _defineProperty2.default)(esql_parser, "SETTING_LINE_COMMENT", 116);
(0, _defineProperty2.default)(esql_parser, "SETTTING_MULTILINE_COMMENT", 117);
(0, _defineProperty2.default)(esql_parser, "SETTING_WS", 118);
(0, _defineProperty2.default)(esql_parser, "METRICS_LINE_COMMENT", 119);
(0, _defineProperty2.default)(esql_parser, "METRICS_MULTILINE_COMMENT", 120);
(0, _defineProperty2.default)(esql_parser, "METRICS_WS", 121);
(0, _defineProperty2.default)(esql_parser, "CLOSING_METRICS_LINE_COMMENT", 122);
(0, _defineProperty2.default)(esql_parser, "CLOSING_METRICS_MULTILINE_COMMENT", 123);
(0, _defineProperty2.default)(esql_parser, "CLOSING_METRICS_WS", 124);
(0, _defineProperty2.default)(esql_parser, "EOF", _antlr.Token.EOF);
(0, _defineProperty2.default)(esql_parser, "RULE_singleStatement", 0);
(0, _defineProperty2.default)(esql_parser, "RULE_query", 1);
(0, _defineProperty2.default)(esql_parser, "RULE_sourceCommand", 2);
(0, _defineProperty2.default)(esql_parser, "RULE_processingCommand", 3);
(0, _defineProperty2.default)(esql_parser, "RULE_whereCommand", 4);
(0, _defineProperty2.default)(esql_parser, "RULE_booleanExpression", 5);
(0, _defineProperty2.default)(esql_parser, "RULE_regexBooleanExpression", 6);
(0, _defineProperty2.default)(esql_parser, "RULE_valueExpression", 7);
(0, _defineProperty2.default)(esql_parser, "RULE_operatorExpression", 8);
(0, _defineProperty2.default)(esql_parser, "RULE_primaryExpression", 9);
(0, _defineProperty2.default)(esql_parser, "RULE_functionExpression", 10);
(0, _defineProperty2.default)(esql_parser, "RULE_dataType", 11);
(0, _defineProperty2.default)(esql_parser, "RULE_rowCommand", 12);
(0, _defineProperty2.default)(esql_parser, "RULE_fields", 13);
(0, _defineProperty2.default)(esql_parser, "RULE_field", 14);
(0, _defineProperty2.default)(esql_parser, "RULE_fromCommand", 15);
(0, _defineProperty2.default)(esql_parser, "RULE_indexPattern", 16);
(0, _defineProperty2.default)(esql_parser, "RULE_clusterString", 17);
(0, _defineProperty2.default)(esql_parser, "RULE_indexString", 18);
(0, _defineProperty2.default)(esql_parser, "RULE_metadata", 19);
(0, _defineProperty2.default)(esql_parser, "RULE_metadataOption", 20);
(0, _defineProperty2.default)(esql_parser, "RULE_deprecated_metadata", 21);
(0, _defineProperty2.default)(esql_parser, "RULE_metricsCommand", 22);
(0, _defineProperty2.default)(esql_parser, "RULE_evalCommand", 23);
(0, _defineProperty2.default)(esql_parser, "RULE_statsCommand", 24);
(0, _defineProperty2.default)(esql_parser, "RULE_inlinestatsCommand", 25);
(0, _defineProperty2.default)(esql_parser, "RULE_qualifiedName", 26);
(0, _defineProperty2.default)(esql_parser, "RULE_qualifiedNamePattern", 27);
(0, _defineProperty2.default)(esql_parser, "RULE_qualifiedNamePatterns", 28);
(0, _defineProperty2.default)(esql_parser, "RULE_identifier", 29);
(0, _defineProperty2.default)(esql_parser, "RULE_identifierPattern", 30);
(0, _defineProperty2.default)(esql_parser, "RULE_constant", 31);
(0, _defineProperty2.default)(esql_parser, "RULE_params", 32);
(0, _defineProperty2.default)(esql_parser, "RULE_limitCommand", 33);
(0, _defineProperty2.default)(esql_parser, "RULE_sortCommand", 34);
(0, _defineProperty2.default)(esql_parser, "RULE_orderExpression", 35);
(0, _defineProperty2.default)(esql_parser, "RULE_keepCommand", 36);
(0, _defineProperty2.default)(esql_parser, "RULE_dropCommand", 37);
(0, _defineProperty2.default)(esql_parser, "RULE_renameCommand", 38);
(0, _defineProperty2.default)(esql_parser, "RULE_renameClause", 39);
(0, _defineProperty2.default)(esql_parser, "RULE_dissectCommand", 40);
(0, _defineProperty2.default)(esql_parser, "RULE_grokCommand", 41);
(0, _defineProperty2.default)(esql_parser, "RULE_mvExpandCommand", 42);
(0, _defineProperty2.default)(esql_parser, "RULE_commandOptions", 43);
(0, _defineProperty2.default)(esql_parser, "RULE_commandOption", 44);
(0, _defineProperty2.default)(esql_parser, "RULE_booleanValue", 45);
(0, _defineProperty2.default)(esql_parser, "RULE_numericValue", 46);
(0, _defineProperty2.default)(esql_parser, "RULE_decimalValue", 47);
(0, _defineProperty2.default)(esql_parser, "RULE_integerValue", 48);
(0, _defineProperty2.default)(esql_parser, "RULE_string", 49);
(0, _defineProperty2.default)(esql_parser, "RULE_comparisonOperator", 50);
(0, _defineProperty2.default)(esql_parser, "RULE_explainCommand", 51);
(0, _defineProperty2.default)(esql_parser, "RULE_subqueryExpression", 52);
(0, _defineProperty2.default)(esql_parser, "RULE_showCommand", 53);
(0, _defineProperty2.default)(esql_parser, "RULE_metaCommand", 54);
(0, _defineProperty2.default)(esql_parser, "RULE_enrichCommand", 55);
(0, _defineProperty2.default)(esql_parser, "RULE_enrichWithClause", 56);
(0, _defineProperty2.default)(esql_parser, "RULE_lookupCommand", 57);
(0, _defineProperty2.default)(esql_parser, "literalNames", [null, "'dissect'", "'drop'", "'enrich'", "'eval'", "'explain'", "'from'", "'grok'", "'inlinestats'", "'keep'", "'limit'", "'lookup'", "'meta'", "'metrics'", "'mv_expand'", "'rename'", "'row'", "'show'", "'sort'", "'stats'", "'where'", null, null, null, null, null, null, null, null, "'|'", null, null, null, "'by'", "'and'", "'asc'", "'='", "'::'", "','", "'desc'", "'.'", "'false'", "'first'", "'last'", "'('", "'in'", "'is'", "'like'", "'not'", "'null'", "'nulls'", "'or'", "'?'", "'rlike'", "')'", "'true'", "'=='", "'=~'", "'!='", "'<'", "'<='", "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", "'%'", null, null, "']'", null, null, null, null, null, "'metadata'", null, null, null, null, null, null, null, "'as'", null, null, null, "'on'", "'with'", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "'info'", null, null, null, "'functions'", null, null, null, "':'"]);
(0, _defineProperty2.default)(esql_parser, "symbolicNames", [null, "DISSECT", "DROP", "ENRICH", "EVAL", "EXPLAIN", "FROM", "GROK", "INLINESTATS", "KEEP", "LIMIT", "LOOKUP", "META", "METRICS", "MV_EXPAND", "RENAME", "ROW", "SHOW", "SORT", "STATS", "WHERE", "UNKNOWN_CMD", "LINE_COMMENT", "MULTILINE_COMMENT", "WS", "UNQUOTED_SOURCE", "EXPLAIN_WS", "EXPLAIN_LINE_COMMENT", "EXPLAIN_MULTILINE_COMMENT", "PIPE", "QUOTED_STRING", "INTEGER_LITERAL", "DECIMAL_LITERAL", "BY", "AND", "ASC", "ASSIGN", "CAST_OP", "COMMA", "DESC", "DOT", "FALSE", "FIRST", "LAST", "LP", "IN", "IS", "LIKE", "NOT", "NULL", "NULLS", "OR", "PARAM", "RLIKE", "RP", "TRUE", "EQ", "CIEQ", "NEQ", "LT", "LTE", "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", "PERCENT", "NAMED_OR_POSITIONAL_PARAM", "OPENING_BRACKET", "CLOSING_BRACKET", "UNQUOTED_IDENTIFIER", "QUOTED_IDENTIFIER", "EXPR_LINE_COMMENT", "EXPR_MULTILINE_COMMENT", "EXPR_WS", "METADATA", "FROM_LINE_COMMENT", "FROM_MULTILINE_COMMENT", "FROM_WS", "ID_PATTERN", "PROJECT_LINE_COMMENT", "PROJECT_MULTILINE_COMMENT", "PROJECT_WS", "AS", "RENAME_LINE_COMMENT", "RENAME_MULTILINE_COMMENT", "RENAME_WS", "ON", "WITH", "ENRICH_POLICY_NAME", "ENRICH_LINE_COMMENT", "ENRICH_MULTILINE_COMMENT", "ENRICH_WS", "ENRICH_FIELD_LINE_COMMENT", "ENRICH_FIELD_MULTILINE_COMMENT", "ENRICH_FIELD_WS", "LOOKUP_LINE_COMMENT", "LOOKUP_MULTILINE_COMMENT", "LOOKUP_WS", "LOOKUP_FIELD_LINE_COMMENT", "LOOKUP_FIELD_MULTILINE_COMMENT", "LOOKUP_FIELD_WS", "MVEXPAND_LINE_COMMENT", "MVEXPAND_MULTILINE_COMMENT", "MVEXPAND_WS", "INFO", "SHOW_LINE_COMMENT", "SHOW_MULTILINE_COMMENT", "SHOW_WS", "FUNCTIONS", "META_LINE_COMMENT", "META_MULTILINE_COMMENT", "META_WS", "COLON", "SETTING", "SETTING_LINE_COMMENT", "SETTTING_MULTILINE_COMMENT", "SETTING_WS", "METRICS_LINE_COMMENT", "METRICS_MULTILINE_COMMENT", "METRICS_WS", "CLOSING_METRICS_LINE_COMMENT", "CLOSING_METRICS_MULTILINE_COMMENT", "CLOSING_METRICS_WS"]);
// tslint:disable:no-trailing-whitespace
(0, _defineProperty2.default)(esql_parser, "ruleNames", ["singleStatement", "query", "sourceCommand", "processingCommand", "whereCommand", "booleanExpression", "regexBooleanExpression", "valueExpression", "operatorExpression", "primaryExpression", "functionExpression", "dataType", "rowCommand", "fields", "field", "fromCommand", "indexPattern", "clusterString", "indexString", "metadata", "metadataOption", "deprecated_metadata", "metricsCommand", "evalCommand", "statsCommand", "inlinestatsCommand", "qualifiedName", "qualifiedNamePattern", "qualifiedNamePatterns", "identifier", "identifierPattern", "constant", "params", "limitCommand", "sortCommand", "orderExpression", "keepCommand", "dropCommand", "renameCommand", "renameClause", "dissectCommand", "grokCommand", "mvExpandCommand", "commandOptions", "commandOption", "booleanValue", "numericValue", "decimalValue", "integerValue", "string", "comparisonOperator", "explainCommand", "subqueryExpression", "showCommand", "metaCommand", "enrichCommand", "enrichWithClause", "lookupCommand"]);
(0, _defineProperty2.default)(esql_parser, "_serializedATN", [4, 1, 124, 567, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 126, 8, 1, 10, 1, 12, 1, 129, 9, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 137, 8, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 153, 8, 3, 1, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 3, 5, 165, 8, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 5, 5, 172, 8, 5, 10, 5, 12, 5, 175, 9, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 3, 5, 182, 8, 5, 1, 5, 1, 5, 3, 5, 186, 8, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 5, 5, 194, 8, 5, 10, 5, 12, 5, 197, 9, 5, 1, 6, 1, 6, 3, 6, 201, 8, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 208, 8, 6, 1, 6, 1, 6, 1, 6, 3, 6, 213, 8, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 3, 7, 220, 8, 7, 1, 8, 1, 8, 1, 8, 1, 8, 3, 8, 226, 8, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 5, 8, 234, 8, 8, 10, 8, 12, 8, 237, 9, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 3, 9, 247, 8, 9, 1, 9, 1, 9, 1, 9, 5, 9, 252, 8, 9, 10, 9, 12, 9, 255, 9, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 5, 10, 263, 8, 10, 10, 10, 12, 10, 266, 9, 10, 3, 10, 268, 8, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 5, 13, 280, 8, 13, 10, 13, 12, 13, 283, 9, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 3, 14, 290, 8, 14, 1, 15, 1, 15, 1, 15, 1, 15, 5, 15, 296, 8, 15, 10, 15, 12, 15, 299, 9, 15, 1, 15, 3, 15, 302, 8, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3, 16, 309, 8, 16, 1, 17, 1, 17, 1, 18, 1, 18, 1, 19, 1, 19, 3, 19, 317, 8, 19, 1, 20, 1, 20, 1, 20, 1, 20, 5, 20, 323, 8, 20, 10, 20, 12, 20, 326, 9, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 22, 5, 22, 336, 8, 22, 10, 22, 12, 22, 339, 9, 22, 1, 22, 3, 22, 342, 8, 22, 1, 22, 1, 22, 3, 22, 346, 8, 22, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 3, 24, 353, 8, 24, 1, 24, 1, 24, 3, 24, 357, 8, 24, 1, 25, 1, 25, 1, 25, 1, 25, 3, 25, 363, 8, 25, 1, 26, 1, 26, 1, 26, 5, 26, 368, 8, 26, 10, 26, 12, 26, 371, 9, 26, 1, 27, 1, 27, 1, 27, 5, 27, 376, 8, 27, 10, 27, 12, 27, 379, 9, 27, 1, 28, 1, 28, 1, 28, 5, 28, 384, 8, 28, 10, 28, 12, 28, 387, 9, 28, 1, 29, 1, 29, 1, 30, 1, 30, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 5, 31, 406, 8, 31, 10, 31, 12, 31, 409, 9, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 5, 31, 417, 8, 31, 10, 31, 12, 31, 420, 9, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 5, 31, 428, 8, 31, 10, 31, 12, 31, 431, 9, 31, 1, 31, 1, 31, 3, 31, 435, 8, 31, 1, 32, 1, 32, 3, 32, 439, 8, 32, 1, 33, 1, 33, 1, 33, 1, 34, 1, 34, 1, 34, 1, 34, 5, 34, 448, 8, 34, 10, 34, 12, 34, 451, 9, 34, 1, 35, 1, 35, 3, 35, 455, 8, 35, 1, 35, 1, 35, 3, 35, 459, 8, 35, 1, 36, 1, 36, 1, 36, 1, 37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 38, 5, 38, 471, 8, 38, 10, 38, 12, 38, 474, 9, 38, 1, 39, 1, 39, 1, 39, 1, 39, 1, 40, 1, 40, 1, 40, 1, 40, 3, 40, 484, 8, 40, 1, 41, 1, 41, 1, 41, 1, 41, 1, 42, 1, 42, 1, 42, 1, 43, 1, 43, 1, 43, 5, 43, 496, 8, 43, 10, 43, 12, 43, 499, 9, 43, 1, 44, 1, 44, 1, 44, 1, 44, 1, 45, 1, 45, 1, 46, 1, 46, 3, 46, 509, 8, 46, 1, 47, 3, 47, 512, 8, 47, 1, 47, 1, 47, 1, 48, 3, 48, 517, 8, 48, 1, 48, 1, 48, 1, 49, 1, 49, 1, 50, 1, 50, 1, 51, 1, 51, 1, 51, 1, 52, 1, 52, 1, 52, 1, 52, 1, 53, 1, 53, 1, 53, 1, 54, 1, 54, 1, 54, 1, 55, 1, 55, 1, 55, 1, 55, 3, 55, 542, 8, 55, 1, 55, 1, 55, 1, 55, 1, 55, 5, 55, 548, 8, 55, 10, 55, 12, 55, 551, 9, 55, 3, 55, 553, 8, 55, 1, 56, 1, 56, 1, 56, 3, 56, 558, 8, 56, 1, 56, 1, 56, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 0, 4, 2, 10, 16, 18, 58, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 0, 8, 1, 0, 63, 64, 1, 0, 65, 67, 2, 0, 25, 25, 30, 30, 1, 0, 71, 72, 2, 0, 35, 35, 39, 39, 1, 0, 42, 43, 2, 0, 41, 41, 55, 55, 2, 0, 56, 56, 58, 62, 592, 0, 116, 1, 0, 0, 0, 2, 119, 1, 0, 0, 0, 4, 136, 1, 0, 0, 0, 6, 152, 1, 0, 0, 0, 8, 154, 1, 0, 0, 0, 10, 185, 1, 0, 0, 0, 12, 212, 1, 0, 0, 0, 14, 219, 1, 0, 0, 0, 16, 225, 1, 0, 0, 0, 18, 246, 1, 0, 0, 0, 20, 256, 1, 0, 0, 0, 22, 271, 1, 0, 0, 0, 24, 273, 1, 0, 0, 0, 26, 276, 1, 0, 0, 0, 28, 289, 1, 0, 0, 0, 30, 291, 1, 0, 0, 0, 32, 308, 1, 0, 0, 0, 34, 310, 1, 0, 0, 0, 36, 312, 1, 0, 0, 0, 38, 316, 1, 0, 0, 0, 40, 318, 1, 0, 0, 0, 42, 327, 1, 0, 0, 0, 44, 331, 1, 0, 0, 0, 46, 347, 1, 0, 0, 0, 48, 350, 1, 0, 0, 0, 50, 358, 1, 0, 0, 0, 52, 364, 1, 0, 0, 0, 54, 372, 1, 0, 0, 0, 56, 380, 1, 0, 0, 0, 58, 388, 1, 0, 0, 0, 60, 390, 1, 0, 0, 0, 62, 434, 1, 0, 0, 0, 64, 438, 1, 0, 0, 0, 66, 440, 1, 0, 0, 0, 68, 443, 1, 0, 0, 0, 70, 452, 1, 0, 0, 0, 72, 460, 1, 0, 0, 0, 74, 463, 1, 0, 0, 0, 76, 466, 1, 0, 0, 0, 78, 475, 1, 0, 0, 0, 80, 479, 1, 0, 0, 0, 82, 485, 1, 0, 0, 0, 84, 489, 1, 0, 0, 0, 86, 492, 1, 0, 0, 0, 88, 500, 1, 0, 0, 0, 90, 504, 1, 0, 0, 0, 92, 508, 1, 0, 0, 0, 94, 511, 1, 0, 0, 0, 96, 516, 1, 0, 0, 0, 98, 520, 1, 0, 0, 0, 100, 522, 1, 0, 0, 0, 102, 524, 1, 0, 0, 0, 104, 527, 1, 0, 0, 0, 106, 531, 1, 0, 0, 0, 108, 534, 1, 0, 0, 0, 110, 537, 1, 0, 0, 0, 112, 557, 1, 0, 0, 0, 114, 561, 1, 0, 0, 0, 116, 117, 3, 2, 1, 0, 117, 118, 5, 0, 0, 1, 118, 1, 1, 0, 0, 0, 119, 120, 6, 1, -1, 0, 120, 121, 3, 4, 2, 0, 121, 127, 1, 0, 0, 0, 122, 123, 10, 1, 0, 0, 123, 124, 5, 29, 0, 0, 124, 126, 3, 6, 3, 0, 125, 122, 1, 0, 0, 0, 126, 129, 1, 0, 0, 0, 127, 125, 1, 0, 0, 0, 127, 128, 1, 0, 0, 0, 128, 3, 1, 0, 0, 0, 129, 127, 1, 0, 0, 0, 130, 137, 3, 102, 51, 0, 131, 137, 3, 30, 15, 0, 132, 137, 3, 24, 12, 0, 133, 137, 3, 44, 22, 0, 134, 137, 3, 106, 53, 0, 135, 137, 3, 108, 54, 0, 136, 130, 1, 0, 0, 0, 136, 131, 1, 0, 0, 0, 136, 132, 1, 0, 0, 0, 136, 133, 1, 0, 0, 0, 136, 134, 1, 0, 0, 0, 136, 135, 1, 0, 0, 0, 137, 5, 1, 0, 0, 0, 138, 153, 3, 46, 23, 0, 139, 153, 3, 50, 25, 0, 140, 153, 3, 66, 33, 0, 141, 153, 3, 114, 57, 0, 142, 153, 3, 72, 36, 0, 143, 153, 3, 68, 34, 0, 144, 153, 3, 48, 24, 0, 145, 153, 3, 8, 4, 0, 146, 153, 3, 74, 37, 0, 147, 153, 3, 76, 38, 0, 148, 153, 3, 80, 40, 0, 149, 153, 3, 82, 41, 0, 150, 153, 3, 110, 55, 0, 151, 153, 3, 84, 42, 0, 152, 138, 1, 0, 0, 0, 152, 139, 1, 0, 0, 0, 152, 140, 1, 0, 0, 0, 152, 141, 1, 0, 0, 0, 152, 142, 1, 0, 0, 0, 152, 143, 1, 0, 0, 0, 152, 144, 1, 0, 0, 0, 152, 145, 1, 0, 0, 0, 152, 146, 1, 0, 0, 0, 152, 147, 1, 0, 0, 0, 152, 148, 1, 0, 0, 0, 152, 149, 1, 0, 0, 0, 152, 150, 1, 0, 0, 0, 152, 151, 1, 0, 0, 0, 153, 7, 1, 0, 0, 0, 154, 155, 5, 20, 0, 0, 155, 156, 3, 10, 5, 0, 156, 9, 1, 0, 0, 0, 157, 158, 6, 5, -1, 0, 158, 159, 5, 48, 0, 0, 159, 186, 3, 10, 5, 7, 160, 186, 3, 14, 7, 0, 161, 186, 3, 12, 6, 0, 162, 164, 3, 14, 7, 0, 163, 165, 5, 48, 0, 0, 164, 163, 1, 0, 0, 0, 164, 165, 1, 0, 0, 0, 165, 166, 1, 0, 0, 0, 166, 167, 5, 45, 0, 0, 167, 168, 5, 44, 0, 0, 168, 173, 3, 14, 7, 0, 169, 170, 5, 38, 0, 0, 170, 172, 3, 14, 7, 0, 171, 169, 1, 0, 0, 0, 172, 175, 1, 0, 0, 0, 173, 171, 1, 0, 0, 0, 173, 174, 1, 0, 0, 0, 174, 176, 1, 0, 0, 0, 175, 173, 1, 0, 0, 0, 176, 177, 5, 54, 0, 0, 177, 186, 1, 0, 0, 0, 178, 179, 3, 14, 7, 0, 179, 181, 5, 46, 0, 0, 180, 182, 5, 48, 0, 0, 181, 180, 1, 0, 0, 0, 181, 182, 1, 0, 0, 0, 182, 183, 1, 0, 0, 0, 183, 184, 5, 49, 0, 0, 184, 186, 1, 0, 0, 0, 185, 157, 1, 0, 0, 0, 185, 160, 1, 0, 0, 0, 185, 161, 1, 0, 0, 0, 185, 162, 1, 0, 0, 0, 185, 178, 1, 0, 0, 0, 186, 195, 1, 0, 0, 0, 187, 188, 10, 4, 0, 0, 188, 189, 5, 34, 0, 0, 189, 194, 3, 10, 5, 5, 190, 191, 10, 3, 0, 0, 191, 192, 5, 51, 0, 0, 192, 194, 3, 10, 5, 4, 193, 187, 1, 0, 0, 0, 193, 190, 1, 0, 0, 0, 194, 197, 1, 0, 0, 0, 195, 193, 1, 0, 0, 0, 195, 196, 1, 0, 0, 0, 196, 11, 1, 0, 0, 0, 197, 195, 1, 0, 0, 0, 198, 200, 3, 14, 7, 0, 199, 201, 5, 48, 0, 0, 200, 199, 1, 0, 0, 0, 200, 201, 1, 0, 0, 0, 201, 202, 1, 0, 0, 0, 202, 203, 5, 47, 0, 0, 203, 204, 3, 98, 49, 0, 204, 213, 1, 0, 0, 0, 205, 207, 3, 14, 7, 0, 206, 208, 5, 48, 0, 0, 207, 206, 1, 0, 0, 0, 207, 208, 1, 0, 0, 0, 208, 209, 1, 0, 0, 0, 209, 210, 5, 53, 0, 0, 210, 211, 3, 98, 49, 0, 211, 213, 1, 0, 0, 0, 212, 198, 1, 0, 0, 0, 212, 205, 1, 0, 0, 0, 213, 13, 1, 0, 0, 0, 214, 220, 3, 16, 8, 0, 215, 216, 3, 16, 8, 0, 216, 217, 3, 100, 50, 0, 217, 218, 3, 16, 8, 0, 218, 220, 1, 0, 0, 0, 219, 214, 1, 0, 0, 0, 219, 215, 1, 0, 0, 0, 220, 15, 1, 0, 0, 0, 221, 222, 6, 8, -1, 0, 222, 226, 3, 18, 9, 0, 223, 224, 7, 0, 0, 0, 224, 226, 3, 16, 8, 3, 225, 221, 1, 0, 0, 0, 225, 223, 1, 0, 0, 0, 226, 235, 1, 0, 0, 0, 227, 228, 10, 2, 0, 0, 228, 229, 7, 1, 0, 0, 229, 234, 3, 16, 8, 3, 230, 231, 10, 1, 0, 0, 231, 232, 7, 0, 0, 0, 232, 234, 3, 16, 8, 2, 233, 227, 1, 0, 0, 0, 233, 230, 1, 0, 0, 0, 234, 237, 1, 0, 0, 0, 235, 233, 1, 0, 0, 0, 235, 236, 1, 0, 0, 0, 236, 17, 1, 0, 0, 0, 237, 235, 1, 0, 0, 0, 238, 239, 6, 9, -1, 0, 239, 247, 3, 62, 31, 0, 240, 247, 3, 52, 26, 0, 241, 247, 3, 20, 10, 0, 242, 243, 5, 44, 0, 0, 243, 244, 3, 10, 5, 0, 244, 245, 5, 54, 0, 0, 245, 247, 1, 0, 0, 0, 246, 238, 1, 0, 0, 0, 246, 240, 1, 0, 0, 0, 246, 241, 1, 0, 0, 0, 246, 242, 1, 0, 0, 0, 247, 253, 1, 0, 0, 0, 248, 249, 10, 1, 0, 0, 249, 250, 5, 37, 0, 0, 250, 252, 3, 22, 11, 0, 251, 248, 1, 0, 0, 0, 252, 255, 1, 0, 0, 0, 253, 251, 1, 0, 0, 0, 253, 254, 1, 0, 0, 0, 254, 19, 1, 0, 0, 0, 255, 253, 1, 0, 0, 0, 256, 257, 3, 58, 29, 0, 257, 267, 5, 44, 0, 0, 258, 268, 5, 65, 0, 0, 259, 264, 3, 10, 5, 0, 260, 261, 5, 38, 0, 0, 261, 263, 3, 10, 5, 0, 262, 260, 1, 0, 0, 0, 263, 266, 1, 0, 0, 0, 264, 262, 1, 0, 0, 0, 264, 265, 1, 0, 0, 0, 265, 268, 1, 0, 0, 0, 266, 264, 1, 0, 0, 0, 267, 258, 1, 0, 0, 0, 267, 259, 1, 0, 0, 0, 267, 268, 1, 0, 0, 0, 268, 269, 1, 0, 0, 0, 269, 270, 5, 54, 0, 0, 270, 21, 1, 0, 0, 0, 271, 272, 3, 58, 29, 0, 272, 23, 1, 0, 0, 0, 273, 274, 5, 16, 0, 0, 274, 275, 3, 26, 13, 0, 275, 25, 1, 0, 0, 0, 276, 281, 3, 28, 14, 0, 277, 278, 5, 38, 0, 0, 278, 280, 3, 28, 14, 0, 279, 277, 1, 0, 0, 0, 280, 283, 1, 0, 0, 0, 281, 279, 1, 0, 0, 0, 281, 282, 1, 0, 0, 0, 282, 27, 1, 0, 0, 0, 283, 281, 1, 0, 0, 0, 284, 290, 3, 10, 5, 0, 285, 286, 3, 52, 26, 0, 286, 287, 5, 36, 0, 0, 287, 288, 3, 10, 5, 0, 288, 290, 1, 0, 0, 0, 289, 284, 1, 0, 0, 0, 289, 285, 1, 0, 0, 0, 290, 29, 1, 0, 0, 0, 291, 292, 5, 6, 0, 0, 292, 297, 3, 32, 16, 0, 293, 294, 5, 38, 0, 0, 294, 296, 3, 32, 16, 0, 295, 293, 1, 0, 0, 0, 296, 299, 1, 0, 0, 0, 297, 295, 1, 0, 0, 0, 297, 298, 1, 0, 0, 0, 298, 301, 1, 0, 0, 0, 299, 297, 1, 0, 0, 0, 300, 302, 3, 38, 19, 0, 301, 300, 1, 0, 0, 0, 301, 302, 1, 0, 0, 0, 302, 31, 1, 0, 0, 0, 303, 304, 3, 34, 17, 0, 304, 305, 5, 114, 0, 0, 305, 306, 3, 36, 18, 0, 306, 309, 1, 0, 0, 0, 307, 309, 3, 36, 18, 0, 308, 303, 1, 0, 0, 0, 308, 307, 1, 0, 0, 0, 309, 33, 1, 0, 0, 0, 310, 311, 5, 25, 0, 0, 311, 35, 1, 0, 0, 0, 312, 313, 7, 2, 0, 0, 313, 37, 1, 0, 0, 0, 314, 317, 3, 40, 20, 0, 315, 317, 3, 42, 21, 0, 316, 314, 1, 0, 0, 0, 316, 315, 1, 0, 0, 0, 317, 39, 1, 0, 0, 0, 318, 319, 5, 76, 0, 0, 319, 324, 5, 25, 0, 0, 320, 321, 5, 38, 0, 0, 321, 323, 5, 25, 0, 0, 322, 320, 1, 0, 0, 0, 323, 326, 1, 0, 0, 0, 324, 322, 1, 0, 0, 0, 324, 325, 1, 0, 0, 0, 325, 41, 1, 0, 0, 0, 326, 324, 1, 0, 0, 0, 327, 328, 5, 69, 0, 0, 328, 329, 3, 40, 20, 0, 329, 330, 5, 70, 0, 0, 330, 43, 1, 0, 0, 0, 331, 332, 5, 13, 0, 0, 332, 337, 3, 32, 16, 0, 333, 334, 5, 38, 0, 0, 334, 336, 3, 32, 16, 0, 335, 333, 1, 0, 0, 0, 336, 339, 1, 0, 0, 0, 337, 335, 1, 0, 0, 0, 337, 338, 1, 0, 0, 0, 338, 341, 1, 0, 0, 0, 339, 337, 1, 0, 0, 0, 340, 342, 3, 26, 13, 0, 341, 340, 1, 0, 0, 0, 341, 342, 1, 0, 0, 0, 342, 345, 1, 0, 0, 0, 343, 344, 5, 33, 0, 0, 344, 346, 3, 26, 13, 0, 345, 343, 1, 0, 0, 0, 345, 346, 1, 0, 0, 0, 346, 45, 1, 0, 0, 0, 347, 348, 5, 4, 0, 0, 348, 349, 3, 26, 13, 0, 349, 47, 1, 0, 0, 0, 350, 352, 5, 19, 0, 0, 351, 353, 3, 26, 13, 0, 352, 351, 1, 0, 0, 0, 352, 353, 1, 0, 0, 0, 353, 356, 1, 0, 0, 0, 354, 355, 5, 33, 0, 0, 355, 357, 3, 26, 13, 0, 356, 354, 1, 0, 0, 0, 356, 357, 1, 0, 0, 0, 357, 49, 1, 0, 0, 0, 358, 359, 5, 8, 0, 0, 359, 362, 3, 26, 13, 0, 360, 361, 5, 33, 0, 0, 361, 363, 3, 26, 13, 0, 362, 360, 1, 0, 0, 0, 362, 363, 1, 0, 0, 0, 363, 51, 1, 0, 0, 0, 364, 369, 3, 58, 29, 0, 365, 366, 5, 40, 0, 0, 366, 368, 3, 58, 29, 0, 367, 365, 1, 0, 0, 0, 368, 371, 1, 0, 0, 0, 369, 367, 1, 0, 0, 0, 369, 370, 1, 0, 0, 0, 370, 53, 1, 0, 0, 0, 371, 369, 1, 0, 0, 0, 372, 377, 3, 60, 30, 0, 373, 374, 5, 40, 0, 0, 374, 376, 3, 60, 30, 0, 375, 373, 1, 0, 0, 0, 376, 379, 1, 0, 0, 0, 377, 375, 1, 0, 0, 0, 377, 378, 1, 0, 0, 0, 378, 55, 1, 0, 0, 0, 379, 377, 1, 0, 0, 0, 380, 385, 3, 54, 27, 0, 381, 382, 5, 38, 0, 0, 382, 384, 3, 54, 27, 0, 383, 381, 1, 0, 0, 0, 384, 387, 1, 0, 0, 0, 385, 383, 1, 0, 0, 0, 385, 386, 1, 0, 0, 0, 386, 57, 1, 0, 0, 0, 387, 385, 1, 0, 0, 0, 388, 389, 7, 3, 0, 0, 389, 59, 1, 0, 0, 0, 390, 391, 5, 80, 0, 0, 391, 61, 1, 0, 0, 0, 392, 435, 5, 49, 0, 0, 393, 394, 3, 96, 48, 0, 394, 395, 5, 71, 0, 0, 395, 435, 1, 0, 0, 0, 396, 435, 3, 94, 47, 0, 397, 435, 3, 96, 48, 0, 398, 435, 3, 90, 45, 0, 399, 435, 3, 64, 32, 0, 400, 435, 3, 98, 49, 0, 401, 402, 5, 69, 0, 0, 402, 407, 3, 92, 46, 0, 403, 404, 5, 38, 0, 0, 404, 406, 3, 92, 46, 0, 405, 403, 1, 0, 0, 0, 406, 409, 1, 0, 0, 0, 407, 405, 1, 0, 0, 0, 407, 408, 1, 0, 0, 0, 408, 410, 1, 0, 0, 0, 409, 407, 1, 0, 0, 0, 410, 411, 5, 70, 0, 0, 411, 435, 1, 0, 0, 0, 412, 413, 5, 69, 0, 0, 413, 418, 3, 90, 45, 0, 414, 415, 5, 38, 0, 0, 415, 417, 3, 90, 45, 0, 416, 414, 1, 0, 0, 0, 417, 420, 1, 0, 0, 0, 418, 416, 1, 0, 0, 0, 418, 419, 1, 0, 0, 0, 419, 421, 1, 0, 0, 0, 420, 418, 1, 0, 0, 0, 421, 422, 5, 70, 0, 0, 422, 435, 1, 0, 0, 0, 423, 424, 5, 69, 0, 0, 424, 429, 3, 98, 49, 0, 425, 426, 5, 38, 0, 0, 426, 428, 3, 98, 49, 0, 427, 425, 1, 0, 0, 0, 428, 431, 1, 0, 0, 0, 429, 427, 1, 0, 0, 0, 429, 430, 1, 0, 0, 0, 430, 432, 1, 0, 0, 0, 431, 429, 1, 0, 0, 0, 432, 433, 5, 70, 0, 0, 433, 435, 1, 0, 0, 0, 434, 392, 1, 0, 0, 0, 434, 393, 1, 0, 0, 0, 434, 396, 1, 0, 0, 0, 434, 397, 1, 0, 0, 0, 434, 398, 1, 0, 0, 0, 434, 399, 1, 0, 0, 0, 434, 400, 1, 0, 0, 0, 434, 401, 1, 0, 0, 0, 434, 412, 1, 0, 0, 0, 434, 423, 1, 0, 0, 0, 435, 63, 1, 0, 0, 0, 436, 439, 5, 52, 0, 0, 437, 439, 5, 68, 0, 0, 438, 436, 1, 0, 0, 0, 438, 437, 1, 0, 0, 0, 439, 65, 1, 0, 0, 0, 440, 441, 5, 10, 0, 0, 441, 442, 5, 31, 0, 0, 442, 67, 1, 0, 0, 0, 443, 444, 5, 18, 0, 0, 444, 449, 3, 70, 35, 0, 445, 446, 5, 38, 0, 0, 446, 448, 3, 70, 35, 0, 447, 445, 1, 0, 0, 0, 448, 451, 1, 0, 0, 0, 449, 447, 1, 0, 0, 0, 449, 450, 1, 0, 0, 0, 450, 69, 1, 0, 0, 0, 451, 449, 1, 0, 0, 0, 452, 454, 3, 10, 5, 0, 453, 455, 7, 4, 0, 0, 454, 453, 1, 0, 0, 0, 454, 455, 1, 0, 0, 0, 455, 458, 1, 0, 0, 0, 456, 457, 5, 50, 0, 0, 457, 459, 7, 5, 0, 0, 458, 456, 1, 0, 0, 0, 458, 459, 1, 0, 0, 0, 459, 71, 1, 0, 0, 0, 460, 461, 5, 9, 0, 0, 461, 462, 3, 56, 28, 0, 462, 73, 1, 0, 0, 0, 463, 464, 5, 2, 0, 0, 464, 465, 3, 56, 28, 0, 465, 75, 1, 0, 0, 0, 466, 467, 5, 15, 0, 0, 467, 472, 3, 78, 39, 0, 468, 469, 5, 38, 0, 0, 469, 471, 3, 78, 39, 0, 470, 468, 1, 0, 0, 0, 471, 474, 1, 0, 0, 0, 472, 470, 1, 0, 0, 0, 472, 473, 1, 0, 0, 0, 473, 77, 1, 0, 0, 0, 474, 472, 1, 0, 0, 0, 475, 476, 3, 54, 27, 0, 476, 477, 5, 84, 0, 0, 477, 478, 3, 54, 27, 0, 478, 79, 1, 0, 0, 0, 479, 480, 5, 1, 0, 0, 480, 481, 3, 18, 9, 0, 481, 483, 3, 98, 49, 0, 482, 484, 3, 86, 43, 0, 483, 482, 1, 0, 0, 0, 483, 484, 1, 0, 0, 0, 484, 81, 1, 0, 0, 0, 485, 486, 5, 7, 0, 0, 486, 487, 3, 18, 9, 0, 487, 488, 3, 98, 49, 0, 488, 83, 1, 0, 0, 0, 489, 490, 5, 14, 0, 0, 490, 491, 3, 52, 26, 0, 491, 85, 1, 0, 0, 0, 492, 497, 3, 88, 44, 0, 493, 494, 5, 38, 0, 0, 494, 496, 3, 88, 44, 0, 495, 493, 1, 0, 0, 0, 496, 499, 1, 0, 0, 0, 497, 495, 1, 0, 0, 0, 497, 498, 1, 0, 0, 0, 498, 87, 1, 0, 0, 0, 499, 497, 1, 0, 0, 0, 500, 501, 3, 58, 29, 0, 501, 502, 5, 36, 0, 0, 502, 503, 3, 62, 31, 0, 503, 89, 1, 0, 0, 0, 504, 505, 7, 6, 0, 0, 505, 91, 1, 0, 0, 0, 506, 509, 3, 94, 47, 0, 507, 509, 3, 96, 48, 0, 508, 506, 1, 0, 0, 0, 508, 507, 1, 0, 0, 0, 509, 93, 1, 0, 0, 0, 510, 512, 7, 0, 0, 0, 511, 510, 1, 0, 0, 0, 511, 512, 1, 0, 0, 0, 512, 513, 1, 0, 0, 0, 513, 514, 5, 32, 0, 0, 514, 95, 1, 0, 0, 0, 515, 517, 7, 0, 0, 0, 516, 515, 1, 0, 0, 0, 516, 517, 1, 0, 0, 0, 517, 518, 1, 0, 0, 0, 518, 519, 5, 31, 0, 0, 519, 97, 1, 0, 0, 0, 520, 521, 5, 30, 0, 0, 521, 99, 1, 0, 0, 0, 522, 523, 7, 7, 0, 0, 523, 101, 1, 0, 0, 0, 524, 525, 5, 5, 0, 0, 525, 526, 3, 104, 52, 0, 526, 103, 1, 0, 0, 0, 527, 528, 5, 69, 0, 0, 528, 529, 3, 2, 1, 0, 529, 530, 5, 70, 0, 0, 530, 105, 1, 0, 0, 0, 531, 532, 5, 17, 0, 0, 532, 533, 5, 106, 0, 0, 533, 107, 1, 0, 0, 0, 534, 535, 5, 12, 0, 0, 535, 536, 5, 110, 0, 0, 536, 109, 1, 0, 0, 0, 537, 538, 5, 3, 0, 0, 538, 541, 5, 90, 0, 0, 539, 540, 5, 88, 0, 0, 540, 542, 3, 54, 27, 0, 541, 539, 1, 0, 0, 0, 541, 542, 1, 0, 0, 0, 542, 552, 1, 0, 0, 0, 543, 544, 5, 89, 0, 0, 544, 549, 3, 112, 56, 0, 545, 546, 5, 38, 0, 0, 546, 548, 3, 112, 56, 0, 547, 545, 1, 0, 0, 0, 548, 551, 1, 0, 0, 0, 549, 547, 1, 0, 0, 0, 549, 550, 1, 0, 0, 0, 550, 553, 1, 0, 0, 0, 551, 549, 1, 0, 0, 0, 552, 543, 1, 0, 0, 0, 552, 553, 1, 0, 0, 0, 553, 111, 1, 0, 0, 0, 554, 555, 3, 54, 27, 0, 555, 556, 5, 36, 0, 0, 556, 558, 1, 0, 0, 0, 557, 554, 1, 0, 0, 0, 557, 558, 1, 0, 0, 0, 558, 559, 1, 0, 0, 0, 559, 560, 3, 54, 27, 0, 560, 113, 1, 0, 0, 0, 561, 562, 5, 11, 0, 0, 562, 563, 3, 32, 16, 0, 563, 564, 5, 88, 0, 0, 564, 565, 3, 56, 28, 0, 565, 115, 1, 0, 0, 0, 54, 127, 136, 152, 164, 173, 181, 185, 193, 195, 200, 207, 212, 219, 225, 233, 235, 246, 253, 264, 267, 281, 289, 297, 301, 308, 316, 324, 337, 341, 345, 352, 356, 362, 369, 377, 385, 407, 418, 429, 434, 438, 449, 454, 458, 472, 483, 497, 508, 511, 516, 541, 549, 552, 557]);
(0, _defineProperty2.default)(esql_parser, "__ATN", void 0);
(0, _defineProperty2.default)(esql_parser, "DecisionsToDFA", _esql_parser._ATN.decisionToState.map((ds, index) => new _antlr.DFA(ds, index)));
class SingleStatementContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  query() {
    return this.getTypedRuleContext(QueryContext, 0);
  }
  EOF() {
    return this.getToken(esql_parser.EOF, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_singleStatement;
  }
  enterRule(listener) {
    if (listener.enterSingleStatement) {
      listener.enterSingleStatement(this);
    }
  }
  exitRule(listener) {
    if (listener.exitSingleStatement) {
      listener.exitSingleStatement(this);
    }
  }
}
exports.SingleStatementContext = SingleStatementContext;
class QueryContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  get ruleIndex() {
    return esql_parser.RULE_query;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
exports.QueryContext = QueryContext;
class CompositeQueryContext extends QueryContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  query() {
    return this.getTypedRuleContext(QueryContext, 0);
  }
  PIPE() {
    return this.getToken(esql_parser.PIPE, 0);
  }
  processingCommand() {
    return this.getTypedRuleContext(ProcessingCommandContext, 0);
  }
  enterRule(listener) {
    if (listener.enterCompositeQuery) {
      listener.enterCompositeQuery(this);
    }
  }
  exitRule(listener) {
    if (listener.exitCompositeQuery) {
      listener.exitCompositeQuery(this);
    }
  }
}
exports.CompositeQueryContext = CompositeQueryContext;
class SingleCommandQueryContext extends QueryContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  sourceCommand() {
    return this.getTypedRuleContext(SourceCommandContext, 0);
  }
  enterRule(listener) {
    if (listener.enterSingleCommandQuery) {
      listener.enterSingleCommandQuery(this);
    }
  }
  exitRule(listener) {
    if (listener.exitSingleCommandQuery) {
      listener.exitSingleCommandQuery(this);
    }
  }
}
exports.SingleCommandQueryContext = SingleCommandQueryContext;
class SourceCommandContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  explainCommand() {
    return this.getTypedRuleContext(ExplainCommandContext, 0);
  }
  fromCommand() {
    return this.getTypedRuleContext(FromCommandContext, 0);
  }
  rowCommand() {
    return this.getTypedRuleContext(RowCommandContext, 0);
  }
  metricsCommand() {
    return this.getTypedRuleContext(MetricsCommandContext, 0);
  }
  showCommand() {
    return this.getTypedRuleContext(ShowCommandContext, 0);
  }
  metaCommand() {
    return this.getTypedRuleContext(MetaCommandContext, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_sourceCommand;
  }
  enterRule(listener) {
    if (listener.enterSourceCommand) {
      listener.enterSourceCommand(this);
    }
  }
  exitRule(listener) {
    if (listener.exitSourceCommand) {
      listener.exitSourceCommand(this);
    }
  }
}
exports.SourceCommandContext = SourceCommandContext;
class ProcessingCommandContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  evalCommand() {
    return this.getTypedRuleContext(EvalCommandContext, 0);
  }
  inlinestatsCommand() {
    return this.getTypedRuleContext(InlinestatsCommandContext, 0);
  }
  limitCommand() {
    return this.getTypedRuleContext(LimitCommandContext, 0);
  }
  lookupCommand() {
    return this.getTypedRuleContext(LookupCommandContext, 0);
  }
  keepCommand() {
    return this.getTypedRuleContext(KeepCommandContext, 0);
  }
  sortCommand() {
    return this.getTypedRuleContext(SortCommandContext, 0);
  }
  statsCommand() {
    return this.getTypedRuleContext(StatsCommandContext, 0);
  }
  whereCommand() {
    return this.getTypedRuleContext(WhereCommandContext, 0);
  }
  dropCommand() {
    return this.getTypedRuleContext(DropCommandContext, 0);
  }
  renameCommand() {
    return this.getTypedRuleContext(RenameCommandContext, 0);
  }
  dissectCommand() {
    return this.getTypedRuleContext(DissectCommandContext, 0);
  }
  grokCommand() {
    return this.getTypedRuleContext(GrokCommandContext, 0);
  }
  enrichCommand() {
    return this.getTypedRuleContext(EnrichCommandContext, 0);
  }
  mvExpandCommand() {
    return this.getTypedRuleContext(MvExpandCommandContext, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_processingCommand;
  }
  enterRule(listener) {
    if (listener.enterProcessingCommand) {
      listener.enterProcessingCommand(this);
    }
  }
  exitRule(listener) {
    if (listener.exitProcessingCommand) {
      listener.exitProcessingCommand(this);
    }
  }
}
exports.ProcessingCommandContext = ProcessingCommandContext;
class WhereCommandContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  WHERE() {
    return this.getToken(esql_parser.WHERE, 0);
  }
  booleanExpression() {
    return this.getTypedRuleContext(BooleanExpressionContext, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_whereCommand;
  }
  enterRule(listener) {
    if (listener.enterWhereCommand) {
      listener.enterWhereCommand(this);
    }
  }
  exitRule(listener) {
    if (listener.exitWhereCommand) {
      listener.exitWhereCommand(this);
    }
  }
}
exports.WhereCommandContext = WhereCommandContext;
class BooleanExpressionContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  get ruleIndex() {
    return esql_parser.RULE_booleanExpression;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
exports.BooleanExpressionContext = BooleanExpressionContext;
class LogicalNotContext extends BooleanExpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  NOT() {
    return this.getToken(esql_parser.NOT, 0);
  }
  booleanExpression() {
    return this.getTypedRuleContext(BooleanExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener.enterLogicalNot) {
      listener.enterLogicalNot(this);
    }
  }
  exitRule(listener) {
    if (listener.exitLogicalNot) {
      listener.exitLogicalNot(this);
    }
  }
}
exports.LogicalNotContext = LogicalNotContext;
class BooleanDefaultContext extends BooleanExpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  valueExpression() {
    return this.getTypedRuleContext(ValueExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener.enterBooleanDefault) {
      listener.enterBooleanDefault(this);
    }
  }
  exitRule(listener) {
    if (listener.exitBooleanDefault) {
      listener.exitBooleanDefault(this);
    }
  }
}
exports.BooleanDefaultContext = BooleanDefaultContext;
class IsNullContext extends BooleanExpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  valueExpression() {
    return this.getTypedRuleContext(ValueExpressionContext, 0);
  }
  IS() {
    return this.getToken(esql_parser.IS, 0);
  }
  NULL() {
    return this.getToken(esql_parser.NULL, 0);
  }
  NOT() {
    return this.getToken(esql_parser.NOT, 0);
  }
  enterRule(listener) {
    if (listener.enterIsNull) {
      listener.enterIsNull(this);
    }
  }
  exitRule(listener) {
    if (listener.exitIsNull) {
      listener.exitIsNull(this);
    }
  }
}
exports.IsNullContext = IsNullContext;
class RegexExpressionContext extends BooleanExpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  regexBooleanExpression() {
    return this.getTypedRuleContext(RegexBooleanExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener.enterRegexExpression) {
      listener.enterRegexExpression(this);
    }
  }
  exitRule(listener) {
    if (listener.exitRegexExpression) {
      listener.exitRegexExpression(this);
    }
  }
}
exports.RegexExpressionContext = RegexExpressionContext;
class LogicalInContext extends BooleanExpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  valueExpression_list() {
    return this.getTypedRuleContexts(ValueExpressionContext);
  }
  valueExpression(i) {
    return this.getTypedRuleContext(ValueExpressionContext, i);
  }
  IN() {
    return this.getToken(esql_parser.IN, 0);
  }
  LP() {
    return this.getToken(esql_parser.LP, 0);
  }
  RP() {
    return this.getToken(esql_parser.RP, 0);
  }
  NOT() {
    return this.getToken(esql_parser.NOT, 0);
  }
  COMMA_list() {
    return this.getTokens(esql_parser.COMMA);
  }
  COMMA(i) {
    return this.getToken(esql_parser.COMMA, i);
  }
  enterRule(listener) {
    if (listener.enterLogicalIn) {
      listener.enterLogicalIn(this);
    }
  }
  exitRule(listener) {
    if (listener.exitLogicalIn) {
      listener.exitLogicalIn(this);
    }
  }
}
exports.LogicalInContext = LogicalInContext;
class LogicalBinaryContext extends BooleanExpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    (0, _defineProperty2.default)(this, "_left", void 0);
    (0, _defineProperty2.default)(this, "_operator", void 0);
    (0, _defineProperty2.default)(this, "_right", void 0);
    super.copyFrom(ctx);
  }
  booleanExpression_list() {
    return this.getTypedRuleContexts(BooleanExpressionContext);
  }
  booleanExpression(i) {
    return this.getTypedRuleContext(BooleanExpressionContext, i);
  }
  AND() {
    return this.getToken(esql_parser.AND, 0);
  }
  OR() {
    return this.getToken(esql_parser.OR, 0);
  }
  enterRule(listener) {
    if (listener.enterLogicalBinary) {
      listener.enterLogicalBinary(this);
    }
  }
  exitRule(listener) {
    if (listener.exitLogicalBinary) {
      listener.exitLogicalBinary(this);
    }
  }
}
exports.LogicalBinaryContext = LogicalBinaryContext;
class RegexBooleanExpressionContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    (0, _defineProperty2.default)(this, "_kind", void 0);
    (0, _defineProperty2.default)(this, "_pattern", void 0);
    this.parser = parser;
  }
  valueExpression() {
    return this.getTypedRuleContext(ValueExpressionContext, 0);
  }
  LIKE() {
    return this.getToken(esql_parser.LIKE, 0);
  }
  string_() {
    return this.getTypedRuleContext(StringContext, 0);
  }
  NOT() {
    return this.getToken(esql_parser.NOT, 0);
  }
  RLIKE() {
    return this.getToken(esql_parser.RLIKE, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_regexBooleanExpression;
  }
  enterRule(listener) {
    if (listener.enterRegexBooleanExpression) {
      listener.enterRegexBooleanExpression(this);
    }
  }
  exitRule(listener) {
    if (listener.exitRegexBooleanExpression) {
      listener.exitRegexBooleanExpression(this);
    }
  }
}
exports.RegexBooleanExpressionContext = RegexBooleanExpressionContext;
class ValueExpressionContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  get ruleIndex() {
    return esql_parser.RULE_valueExpression;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
exports.ValueExpressionContext = ValueExpressionContext;
class ValueExpressionDefaultContext extends ValueExpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  operatorExpression() {
    return this.getTypedRuleContext(OperatorExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener.enterValueExpressionDefault) {
      listener.enterValueExpressionDefault(this);
    }
  }
  exitRule(listener) {
    if (listener.exitValueExpressionDefault) {
      listener.exitValueExpressionDefault(this);
    }
  }
}
exports.ValueExpressionDefaultContext = ValueExpressionDefaultContext;
class ComparisonContext extends ValueExpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    (0, _defineProperty2.default)(this, "_left", void 0);
    (0, _defineProperty2.default)(this, "_right", void 0);
    super.copyFrom(ctx);
  }
  comparisonOperator() {
    return this.getTypedRuleContext(ComparisonOperatorContext, 0);
  }
  operatorExpression_list() {
    return this.getTypedRuleContexts(OperatorExpressionContext);
  }
  operatorExpression(i) {
    return this.getTypedRuleContext(OperatorExpressionContext, i);
  }
  enterRule(listener) {
    if (listener.enterComparison) {
      listener.enterComparison(this);
    }
  }
  exitRule(listener) {
    if (listener.exitComparison) {
      listener.exitComparison(this);
    }
  }
}
exports.ComparisonContext = ComparisonContext;
class OperatorExpressionContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  get ruleIndex() {
    return esql_parser.RULE_operatorExpression;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
exports.OperatorExpressionContext = OperatorExpressionContext;
class OperatorExpressionDefaultContext extends OperatorExpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  primaryExpression() {
    return this.getTypedRuleContext(PrimaryExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener.enterOperatorExpressionDefault) {
      listener.enterOperatorExpressionDefault(this);
    }
  }
  exitRule(listener) {
    if (listener.exitOperatorExpressionDefault) {
      listener.exitOperatorExpressionDefault(this);
    }
  }
}
exports.OperatorExpressionDefaultContext = OperatorExpressionDefaultContext;
class ArithmeticBinaryContext extends OperatorExpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    (0, _defineProperty2.default)(this, "_left", void 0);
    (0, _defineProperty2.default)(this, "_operator", void 0);
    (0, _defineProperty2.default)(this, "_right", void 0);
    super.copyFrom(ctx);
  }
  operatorExpression_list() {
    return this.getTypedRuleContexts(OperatorExpressionContext);
  }
  operatorExpression(i) {
    return this.getTypedRuleContext(OperatorExpressionContext, i);
  }
  ASTERISK() {
    return this.getToken(esql_parser.ASTERISK, 0);
  }
  SLASH() {
    return this.getToken(esql_parser.SLASH, 0);
  }
  PERCENT() {
    return this.getToken(esql_parser.PERCENT, 0);
  }
  PLUS() {
    return this.getToken(esql_parser.PLUS, 0);
  }
  MINUS() {
    return this.getToken(esql_parser.MINUS, 0);
  }
  enterRule(listener) {
    if (listener.enterArithmeticBinary) {
      listener.enterArithmeticBinary(this);
    }
  }
  exitRule(listener) {
    if (listener.exitArithmeticBinary) {
      listener.exitArithmeticBinary(this);
    }
  }
}
exports.ArithmeticBinaryContext = ArithmeticBinaryContext;
class ArithmeticUnaryContext extends OperatorExpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    (0, _defineProperty2.default)(this, "_operator", void 0);
    super.copyFrom(ctx);
  }
  operatorExpression() {
    return this.getTypedRuleContext(OperatorExpressionContext, 0);
  }
  MINUS() {
    return this.getToken(esql_parser.MINUS, 0);
  }
  PLUS() {
    return this.getToken(esql_parser.PLUS, 0);
  }
  enterRule(listener) {
    if (listener.enterArithmeticUnary) {
      listener.enterArithmeticUnary(this);
    }
  }
  exitRule(listener) {
    if (listener.exitArithmeticUnary) {
      listener.exitArithmeticUnary(this);
    }
  }
}
exports.ArithmeticUnaryContext = ArithmeticUnaryContext;
class PrimaryExpressionContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  get ruleIndex() {
    return esql_parser.RULE_primaryExpression;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
exports.PrimaryExpressionContext = PrimaryExpressionContext;
class DereferenceContext extends PrimaryExpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  qualifiedName() {
    return this.getTypedRuleContext(QualifiedNameContext, 0);
  }
  enterRule(listener) {
    if (listener.enterDereference) {
      listener.enterDereference(this);
    }
  }
  exitRule(listener) {
    if (listener.exitDereference) {
      listener.exitDereference(this);
    }
  }
}
exports.DereferenceContext = DereferenceContext;
class InlineCastContext extends PrimaryExpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  primaryExpression() {
    return this.getTypedRuleContext(PrimaryExpressionContext, 0);
  }
  CAST_OP() {
    return this.getToken(esql_parser.CAST_OP, 0);
  }
  dataType() {
    return this.getTypedRuleContext(DataTypeContext, 0);
  }
  enterRule(listener) {
    if (listener.enterInlineCast) {
      listener.enterInlineCast(this);
    }
  }
  exitRule(listener) {
    if (listener.exitInlineCast) {
      listener.exitInlineCast(this);
    }
  }
}
exports.InlineCastContext = InlineCastContext;
class ConstantDefaultContext extends PrimaryExpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  constant() {
    return this.getTypedRuleContext(ConstantContext, 0);
  }
  enterRule(listener) {
    if (listener.enterConstantDefault) {
      listener.enterConstantDefault(this);
    }
  }
  exitRule(listener) {
    if (listener.exitConstantDefault) {
      listener.exitConstantDefault(this);
    }
  }
}
exports.ConstantDefaultContext = ConstantDefaultContext;
class ParenthesizedExpressionContext extends PrimaryExpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  LP() {
    return this.getToken(esql_parser.LP, 0);
  }
  booleanExpression() {
    return this.getTypedRuleContext(BooleanExpressionContext, 0);
  }
  RP() {
    return this.getToken(esql_parser.RP, 0);
  }
  enterRule(listener) {
    if (listener.enterParenthesizedExpression) {
      listener.enterParenthesizedExpression(this);
    }
  }
  exitRule(listener) {
    if (listener.exitParenthesizedExpression) {
      listener.exitParenthesizedExpression(this);
    }
  }
}
exports.ParenthesizedExpressionContext = ParenthesizedExpressionContext;
class FunctionContext extends PrimaryExpressionContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  functionExpression() {
    return this.getTypedRuleContext(FunctionExpressionContext, 0);
  }
  enterRule(listener) {
    if (listener.enterFunction) {
      listener.enterFunction(this);
    }
  }
  exitRule(listener) {
    if (listener.exitFunction) {
      listener.exitFunction(this);
    }
  }
}
exports.FunctionContext = FunctionContext;
class FunctionExpressionContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  LP() {
    return this.getToken(esql_parser.LP, 0);
  }
  RP() {
    return this.getToken(esql_parser.RP, 0);
  }
  ASTERISK() {
    return this.getToken(esql_parser.ASTERISK, 0);
  }
  booleanExpression_list() {
    return this.getTypedRuleContexts(BooleanExpressionContext);
  }
  booleanExpression(i) {
    return this.getTypedRuleContext(BooleanExpressionContext, i);
  }
  COMMA_list() {
    return this.getTokens(esql_parser.COMMA);
  }
  COMMA(i) {
    return this.getToken(esql_parser.COMMA, i);
  }
  get ruleIndex() {
    return esql_parser.RULE_functionExpression;
  }
  enterRule(listener) {
    if (listener.enterFunctionExpression) {
      listener.enterFunctionExpression(this);
    }
  }
  exitRule(listener) {
    if (listener.exitFunctionExpression) {
      listener.exitFunctionExpression(this);
    }
  }
}
exports.FunctionExpressionContext = FunctionExpressionContext;
class DataTypeContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  get ruleIndex() {
    return esql_parser.RULE_dataType;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
exports.DataTypeContext = DataTypeContext;
class ToDataTypeContext extends DataTypeContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  enterRule(listener) {
    if (listener.enterToDataType) {
      listener.enterToDataType(this);
    }
  }
  exitRule(listener) {
    if (listener.exitToDataType) {
      listener.exitToDataType(this);
    }
  }
}
exports.ToDataTypeContext = ToDataTypeContext;
class RowCommandContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  ROW() {
    return this.getToken(esql_parser.ROW, 0);
  }
  fields() {
    return this.getTypedRuleContext(FieldsContext, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_rowCommand;
  }
  enterRule(listener) {
    if (listener.enterRowCommand) {
      listener.enterRowCommand(this);
    }
  }
  exitRule(listener) {
    if (listener.exitRowCommand) {
      listener.exitRowCommand(this);
    }
  }
}
exports.RowCommandContext = RowCommandContext;
class FieldsContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  field_list() {
    return this.getTypedRuleContexts(FieldContext);
  }
  field(i) {
    return this.getTypedRuleContext(FieldContext, i);
  }
  COMMA_list() {
    return this.getTokens(esql_parser.COMMA);
  }
  COMMA(i) {
    return this.getToken(esql_parser.COMMA, i);
  }
  get ruleIndex() {
    return esql_parser.RULE_fields;
  }
  enterRule(listener) {
    if (listener.enterFields) {
      listener.enterFields(this);
    }
  }
  exitRule(listener) {
    if (listener.exitFields) {
      listener.exitFields(this);
    }
  }
}
exports.FieldsContext = FieldsContext;
class FieldContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  booleanExpression() {
    return this.getTypedRuleContext(BooleanExpressionContext, 0);
  }
  qualifiedName() {
    return this.getTypedRuleContext(QualifiedNameContext, 0);
  }
  ASSIGN() {
    return this.getToken(esql_parser.ASSIGN, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_field;
  }
  enterRule(listener) {
    if (listener.enterField) {
      listener.enterField(this);
    }
  }
  exitRule(listener) {
    if (listener.exitField) {
      listener.exitField(this);
    }
  }
}
exports.FieldContext = FieldContext;
class FromCommandContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  FROM() {
    return this.getToken(esql_parser.FROM, 0);
  }
  indexPattern_list() {
    return this.getTypedRuleContexts(IndexPatternContext);
  }
  indexPattern(i) {
    return this.getTypedRuleContext(IndexPatternContext, i);
  }
  COMMA_list() {
    return this.getTokens(esql_parser.COMMA);
  }
  COMMA(i) {
    return this.getToken(esql_parser.COMMA, i);
  }
  metadata() {
    return this.getTypedRuleContext(MetadataContext, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_fromCommand;
  }
  enterRule(listener) {
    if (listener.enterFromCommand) {
      listener.enterFromCommand(this);
    }
  }
  exitRule(listener) {
    if (listener.exitFromCommand) {
      listener.exitFromCommand(this);
    }
  }
}
exports.FromCommandContext = FromCommandContext;
class IndexPatternContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  clusterString() {
    return this.getTypedRuleContext(ClusterStringContext, 0);
  }
  COLON() {
    return this.getToken(esql_parser.COLON, 0);
  }
  indexString() {
    return this.getTypedRuleContext(IndexStringContext, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_indexPattern;
  }
  enterRule(listener) {
    if (listener.enterIndexPattern) {
      listener.enterIndexPattern(this);
    }
  }
  exitRule(listener) {
    if (listener.exitIndexPattern) {
      listener.exitIndexPattern(this);
    }
  }
}
exports.IndexPatternContext = IndexPatternContext;
class ClusterStringContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  UNQUOTED_SOURCE() {
    return this.getToken(esql_parser.UNQUOTED_SOURCE, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_clusterString;
  }
  enterRule(listener) {
    if (listener.enterClusterString) {
      listener.enterClusterString(this);
    }
  }
  exitRule(listener) {
    if (listener.exitClusterString) {
      listener.exitClusterString(this);
    }
  }
}
exports.ClusterStringContext = ClusterStringContext;
class IndexStringContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  UNQUOTED_SOURCE() {
    return this.getToken(esql_parser.UNQUOTED_SOURCE, 0);
  }
  QUOTED_STRING() {
    return this.getToken(esql_parser.QUOTED_STRING, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_indexString;
  }
  enterRule(listener) {
    if (listener.enterIndexString) {
      listener.enterIndexString(this);
    }
  }
  exitRule(listener) {
    if (listener.exitIndexString) {
      listener.exitIndexString(this);
    }
  }
}
exports.IndexStringContext = IndexStringContext;
class MetadataContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  metadataOption() {
    return this.getTypedRuleContext(MetadataOptionContext, 0);
  }
  deprecated_metadata() {
    return this.getTypedRuleContext(Deprecated_metadataContext, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_metadata;
  }
  enterRule(listener) {
    if (listener.enterMetadata) {
      listener.enterMetadata(this);
    }
  }
  exitRule(listener) {
    if (listener.exitMetadata) {
      listener.exitMetadata(this);
    }
  }
}
exports.MetadataContext = MetadataContext;
class MetadataOptionContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  METADATA() {
    return this.getToken(esql_parser.METADATA, 0);
  }
  UNQUOTED_SOURCE_list() {
    return this.getTokens(esql_parser.UNQUOTED_SOURCE);
  }
  UNQUOTED_SOURCE(i) {
    return this.getToken(esql_parser.UNQUOTED_SOURCE, i);
  }
  COMMA_list() {
    return this.getTokens(esql_parser.COMMA);
  }
  COMMA(i) {
    return this.getToken(esql_parser.COMMA, i);
  }
  get ruleIndex() {
    return esql_parser.RULE_metadataOption;
  }
  enterRule(listener) {
    if (listener.enterMetadataOption) {
      listener.enterMetadataOption(this);
    }
  }
  exitRule(listener) {
    if (listener.exitMetadataOption) {
      listener.exitMetadataOption(this);
    }
  }
}
exports.MetadataOptionContext = MetadataOptionContext;
class Deprecated_metadataContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  OPENING_BRACKET() {
    return this.getToken(esql_parser.OPENING_BRACKET, 0);
  }
  metadataOption() {
    return this.getTypedRuleContext(MetadataOptionContext, 0);
  }
  CLOSING_BRACKET() {
    return this.getToken(esql_parser.CLOSING_BRACKET, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_deprecated_metadata;
  }
  enterRule(listener) {
    if (listener.enterDeprecated_metadata) {
      listener.enterDeprecated_metadata(this);
    }
  }
  exitRule(listener) {
    if (listener.exitDeprecated_metadata) {
      listener.exitDeprecated_metadata(this);
    }
  }
}
exports.Deprecated_metadataContext = Deprecated_metadataContext;
class MetricsCommandContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    (0, _defineProperty2.default)(this, "_aggregates", void 0);
    (0, _defineProperty2.default)(this, "_grouping", void 0);
    this.parser = parser;
  }
  METRICS() {
    return this.getToken(esql_parser.METRICS, 0);
  }
  indexPattern_list() {
    return this.getTypedRuleContexts(IndexPatternContext);
  }
  indexPattern(i) {
    return this.getTypedRuleContext(IndexPatternContext, i);
  }
  COMMA_list() {
    return this.getTokens(esql_parser.COMMA);
  }
  COMMA(i) {
    return this.getToken(esql_parser.COMMA, i);
  }
  BY() {
    return this.getToken(esql_parser.BY, 0);
  }
  fields_list() {
    return this.getTypedRuleContexts(FieldsContext);
  }
  fields(i) {
    return this.getTypedRuleContext(FieldsContext, i);
  }
  get ruleIndex() {
    return esql_parser.RULE_metricsCommand;
  }
  enterRule(listener) {
    if (listener.enterMetricsCommand) {
      listener.enterMetricsCommand(this);
    }
  }
  exitRule(listener) {
    if (listener.exitMetricsCommand) {
      listener.exitMetricsCommand(this);
    }
  }
}
exports.MetricsCommandContext = MetricsCommandContext;
class EvalCommandContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  EVAL() {
    return this.getToken(esql_parser.EVAL, 0);
  }
  fields() {
    return this.getTypedRuleContext(FieldsContext, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_evalCommand;
  }
  enterRule(listener) {
    if (listener.enterEvalCommand) {
      listener.enterEvalCommand(this);
    }
  }
  exitRule(listener) {
    if (listener.exitEvalCommand) {
      listener.exitEvalCommand(this);
    }
  }
}
exports.EvalCommandContext = EvalCommandContext;
class StatsCommandContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    (0, _defineProperty2.default)(this, "_stats", void 0);
    (0, _defineProperty2.default)(this, "_grouping", void 0);
    this.parser = parser;
  }
  STATS() {
    return this.getToken(esql_parser.STATS, 0);
  }
  BY() {
    return this.getToken(esql_parser.BY, 0);
  }
  fields_list() {
    return this.getTypedRuleContexts(FieldsContext);
  }
  fields(i) {
    return this.getTypedRuleContext(FieldsContext, i);
  }
  get ruleIndex() {
    return esql_parser.RULE_statsCommand;
  }
  enterRule(listener) {
    if (listener.enterStatsCommand) {
      listener.enterStatsCommand(this);
    }
  }
  exitRule(listener) {
    if (listener.exitStatsCommand) {
      listener.exitStatsCommand(this);
    }
  }
}
exports.StatsCommandContext = StatsCommandContext;
class InlinestatsCommandContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    (0, _defineProperty2.default)(this, "_stats", void 0);
    (0, _defineProperty2.default)(this, "_grouping", void 0);
    this.parser = parser;
  }
  INLINESTATS() {
    return this.getToken(esql_parser.INLINESTATS, 0);
  }
  fields_list() {
    return this.getTypedRuleContexts(FieldsContext);
  }
  fields(i) {
    return this.getTypedRuleContext(FieldsContext, i);
  }
  BY() {
    return this.getToken(esql_parser.BY, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_inlinestatsCommand;
  }
  enterRule(listener) {
    if (listener.enterInlinestatsCommand) {
      listener.enterInlinestatsCommand(this);
    }
  }
  exitRule(listener) {
    if (listener.exitInlinestatsCommand) {
      listener.exitInlinestatsCommand(this);
    }
  }
}
exports.InlinestatsCommandContext = InlinestatsCommandContext;
class QualifiedNameContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  identifier_list() {
    return this.getTypedRuleContexts(IdentifierContext);
  }
  identifier(i) {
    return this.getTypedRuleContext(IdentifierContext, i);
  }
  DOT_list() {
    return this.getTokens(esql_parser.DOT);
  }
  DOT(i) {
    return this.getToken(esql_parser.DOT, i);
  }
  get ruleIndex() {
    return esql_parser.RULE_qualifiedName;
  }
  enterRule(listener) {
    if (listener.enterQualifiedName) {
      listener.enterQualifiedName(this);
    }
  }
  exitRule(listener) {
    if (listener.exitQualifiedName) {
      listener.exitQualifiedName(this);
    }
  }
}
exports.QualifiedNameContext = QualifiedNameContext;
class QualifiedNamePatternContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  identifierPattern_list() {
    return this.getTypedRuleContexts(IdentifierPatternContext);
  }
  identifierPattern(i) {
    return this.getTypedRuleContext(IdentifierPatternContext, i);
  }
  DOT_list() {
    return this.getTokens(esql_parser.DOT);
  }
  DOT(i) {
    return this.getToken(esql_parser.DOT, i);
  }
  get ruleIndex() {
    return esql_parser.RULE_qualifiedNamePattern;
  }
  enterRule(listener) {
    if (listener.enterQualifiedNamePattern) {
      listener.enterQualifiedNamePattern(this);
    }
  }
  exitRule(listener) {
    if (listener.exitQualifiedNamePattern) {
      listener.exitQualifiedNamePattern(this);
    }
  }
}
exports.QualifiedNamePatternContext = QualifiedNamePatternContext;
class QualifiedNamePatternsContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  qualifiedNamePattern_list() {
    return this.getTypedRuleContexts(QualifiedNamePatternContext);
  }
  qualifiedNamePattern(i) {
    return this.getTypedRuleContext(QualifiedNamePatternContext, i);
  }
  COMMA_list() {
    return this.getTokens(esql_parser.COMMA);
  }
  COMMA(i) {
    return this.getToken(esql_parser.COMMA, i);
  }
  get ruleIndex() {
    return esql_parser.RULE_qualifiedNamePatterns;
  }
  enterRule(listener) {
    if (listener.enterQualifiedNamePatterns) {
      listener.enterQualifiedNamePatterns(this);
    }
  }
  exitRule(listener) {
    if (listener.exitQualifiedNamePatterns) {
      listener.exitQualifiedNamePatterns(this);
    }
  }
}
exports.QualifiedNamePatternsContext = QualifiedNamePatternsContext;
class IdentifierContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  UNQUOTED_IDENTIFIER() {
    return this.getToken(esql_parser.UNQUOTED_IDENTIFIER, 0);
  }
  QUOTED_IDENTIFIER() {
    return this.getToken(esql_parser.QUOTED_IDENTIFIER, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_identifier;
  }
  enterRule(listener) {
    if (listener.enterIdentifier) {
      listener.enterIdentifier(this);
    }
  }
  exitRule(listener) {
    if (listener.exitIdentifier) {
      listener.exitIdentifier(this);
    }
  }
}
exports.IdentifierContext = IdentifierContext;
class IdentifierPatternContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  ID_PATTERN() {
    return this.getToken(esql_parser.ID_PATTERN, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_identifierPattern;
  }
  enterRule(listener) {
    if (listener.enterIdentifierPattern) {
      listener.enterIdentifierPattern(this);
    }
  }
  exitRule(listener) {
    if (listener.exitIdentifierPattern) {
      listener.exitIdentifierPattern(this);
    }
  }
}
exports.IdentifierPatternContext = IdentifierPatternContext;
class ConstantContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  get ruleIndex() {
    return esql_parser.RULE_constant;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
exports.ConstantContext = ConstantContext;
class BooleanArrayLiteralContext extends ConstantContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  OPENING_BRACKET() {
    return this.getToken(esql_parser.OPENING_BRACKET, 0);
  }
  booleanValue_list() {
    return this.getTypedRuleContexts(BooleanValueContext);
  }
  booleanValue(i) {
    return this.getTypedRuleContext(BooleanValueContext, i);
  }
  CLOSING_BRACKET() {
    return this.getToken(esql_parser.CLOSING_BRACKET, 0);
  }
  COMMA_list() {
    return this.getTokens(esql_parser.COMMA);
  }
  COMMA(i) {
    return this.getToken(esql_parser.COMMA, i);
  }
  enterRule(listener) {
    if (listener.enterBooleanArrayLiteral) {
      listener.enterBooleanArrayLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener.exitBooleanArrayLiteral) {
      listener.exitBooleanArrayLiteral(this);
    }
  }
}
exports.BooleanArrayLiteralContext = BooleanArrayLiteralContext;
class DecimalLiteralContext extends ConstantContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  decimalValue() {
    return this.getTypedRuleContext(DecimalValueContext, 0);
  }
  enterRule(listener) {
    if (listener.enterDecimalLiteral) {
      listener.enterDecimalLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener.exitDecimalLiteral) {
      listener.exitDecimalLiteral(this);
    }
  }
}
exports.DecimalLiteralContext = DecimalLiteralContext;
class NullLiteralContext extends ConstantContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  NULL() {
    return this.getToken(esql_parser.NULL, 0);
  }
  enterRule(listener) {
    if (listener.enterNullLiteral) {
      listener.enterNullLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener.exitNullLiteral) {
      listener.exitNullLiteral(this);
    }
  }
}
exports.NullLiteralContext = NullLiteralContext;
class QualifiedIntegerLiteralContext extends ConstantContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  integerValue() {
    return this.getTypedRuleContext(IntegerValueContext, 0);
  }
  UNQUOTED_IDENTIFIER() {
    return this.getToken(esql_parser.UNQUOTED_IDENTIFIER, 0);
  }
  enterRule(listener) {
    if (listener.enterQualifiedIntegerLiteral) {
      listener.enterQualifiedIntegerLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener.exitQualifiedIntegerLiteral) {
      listener.exitQualifiedIntegerLiteral(this);
    }
  }
}
exports.QualifiedIntegerLiteralContext = QualifiedIntegerLiteralContext;
class StringArrayLiteralContext extends ConstantContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  OPENING_BRACKET() {
    return this.getToken(esql_parser.OPENING_BRACKET, 0);
  }
  string__list() {
    return this.getTypedRuleContexts(StringContext);
  }
  string_(i) {
    return this.getTypedRuleContext(StringContext, i);
  }
  CLOSING_BRACKET() {
    return this.getToken(esql_parser.CLOSING_BRACKET, 0);
  }
  COMMA_list() {
    return this.getTokens(esql_parser.COMMA);
  }
  COMMA(i) {
    return this.getToken(esql_parser.COMMA, i);
  }
  enterRule(listener) {
    if (listener.enterStringArrayLiteral) {
      listener.enterStringArrayLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener.exitStringArrayLiteral) {
      listener.exitStringArrayLiteral(this);
    }
  }
}
exports.StringArrayLiteralContext = StringArrayLiteralContext;
class StringLiteralContext extends ConstantContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  string_() {
    return this.getTypedRuleContext(StringContext, 0);
  }
  enterRule(listener) {
    if (listener.enterStringLiteral) {
      listener.enterStringLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener.exitStringLiteral) {
      listener.exitStringLiteral(this);
    }
  }
}
exports.StringLiteralContext = StringLiteralContext;
class NumericArrayLiteralContext extends ConstantContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  OPENING_BRACKET() {
    return this.getToken(esql_parser.OPENING_BRACKET, 0);
  }
  numericValue_list() {
    return this.getTypedRuleContexts(NumericValueContext);
  }
  numericValue(i) {
    return this.getTypedRuleContext(NumericValueContext, i);
  }
  CLOSING_BRACKET() {
    return this.getToken(esql_parser.CLOSING_BRACKET, 0);
  }
  COMMA_list() {
    return this.getTokens(esql_parser.COMMA);
  }
  COMMA(i) {
    return this.getToken(esql_parser.COMMA, i);
  }
  enterRule(listener) {
    if (listener.enterNumericArrayLiteral) {
      listener.enterNumericArrayLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener.exitNumericArrayLiteral) {
      listener.exitNumericArrayLiteral(this);
    }
  }
}
exports.NumericArrayLiteralContext = NumericArrayLiteralContext;
class InputParamsContext extends ConstantContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  params() {
    return this.getTypedRuleContext(ParamsContext, 0);
  }
  enterRule(listener) {
    if (listener.enterInputParams) {
      listener.enterInputParams(this);
    }
  }
  exitRule(listener) {
    if (listener.exitInputParams) {
      listener.exitInputParams(this);
    }
  }
}
exports.InputParamsContext = InputParamsContext;
class IntegerLiteralContext extends ConstantContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  integerValue() {
    return this.getTypedRuleContext(IntegerValueContext, 0);
  }
  enterRule(listener) {
    if (listener.enterIntegerLiteral) {
      listener.enterIntegerLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener.exitIntegerLiteral) {
      listener.exitIntegerLiteral(this);
    }
  }
}
exports.IntegerLiteralContext = IntegerLiteralContext;
class BooleanLiteralContext extends ConstantContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  booleanValue() {
    return this.getTypedRuleContext(BooleanValueContext, 0);
  }
  enterRule(listener) {
    if (listener.enterBooleanLiteral) {
      listener.enterBooleanLiteral(this);
    }
  }
  exitRule(listener) {
    if (listener.exitBooleanLiteral) {
      listener.exitBooleanLiteral(this);
    }
  }
}
exports.BooleanLiteralContext = BooleanLiteralContext;
class ParamsContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  get ruleIndex() {
    return esql_parser.RULE_params;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
exports.ParamsContext = ParamsContext;
class InputNamedOrPositionalParamContext extends ParamsContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  NAMED_OR_POSITIONAL_PARAM() {
    return this.getToken(esql_parser.NAMED_OR_POSITIONAL_PARAM, 0);
  }
  enterRule(listener) {
    if (listener.enterInputNamedOrPositionalParam) {
      listener.enterInputNamedOrPositionalParam(this);
    }
  }
  exitRule(listener) {
    if (listener.exitInputNamedOrPositionalParam) {
      listener.exitInputNamedOrPositionalParam(this);
    }
  }
}
exports.InputNamedOrPositionalParamContext = InputNamedOrPositionalParamContext;
class InputParamContext extends ParamsContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  PARAM() {
    return this.getToken(esql_parser.PARAM, 0);
  }
  enterRule(listener) {
    if (listener.enterInputParam) {
      listener.enterInputParam(this);
    }
  }
  exitRule(listener) {
    if (listener.exitInputParam) {
      listener.exitInputParam(this);
    }
  }
}
exports.InputParamContext = InputParamContext;
class LimitCommandContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  LIMIT() {
    return this.getToken(esql_parser.LIMIT, 0);
  }
  INTEGER_LITERAL() {
    return this.getToken(esql_parser.INTEGER_LITERAL, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_limitCommand;
  }
  enterRule(listener) {
    if (listener.enterLimitCommand) {
      listener.enterLimitCommand(this);
    }
  }
  exitRule(listener) {
    if (listener.exitLimitCommand) {
      listener.exitLimitCommand(this);
    }
  }
}
exports.LimitCommandContext = LimitCommandContext;
class SortCommandContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  SORT() {
    return this.getToken(esql_parser.SORT, 0);
  }
  orderExpression_list() {
    return this.getTypedRuleContexts(OrderExpressionContext);
  }
  orderExpression(i) {
    return this.getTypedRuleContext(OrderExpressionContext, i);
  }
  COMMA_list() {
    return this.getTokens(esql_parser.COMMA);
  }
  COMMA(i) {
    return this.getToken(esql_parser.COMMA, i);
  }
  get ruleIndex() {
    return esql_parser.RULE_sortCommand;
  }
  enterRule(listener) {
    if (listener.enterSortCommand) {
      listener.enterSortCommand(this);
    }
  }
  exitRule(listener) {
    if (listener.exitSortCommand) {
      listener.exitSortCommand(this);
    }
  }
}
exports.SortCommandContext = SortCommandContext;
class OrderExpressionContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    (0, _defineProperty2.default)(this, "_ordering", void 0);
    (0, _defineProperty2.default)(this, "_nullOrdering", void 0);
    this.parser = parser;
  }
  booleanExpression() {
    return this.getTypedRuleContext(BooleanExpressionContext, 0);
  }
  NULLS() {
    return this.getToken(esql_parser.NULLS, 0);
  }
  ASC() {
    return this.getToken(esql_parser.ASC, 0);
  }
  DESC() {
    return this.getToken(esql_parser.DESC, 0);
  }
  FIRST() {
    return this.getToken(esql_parser.FIRST, 0);
  }
  LAST() {
    return this.getToken(esql_parser.LAST, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_orderExpression;
  }
  enterRule(listener) {
    if (listener.enterOrderExpression) {
      listener.enterOrderExpression(this);
    }
  }
  exitRule(listener) {
    if (listener.exitOrderExpression) {
      listener.exitOrderExpression(this);
    }
  }
}
exports.OrderExpressionContext = OrderExpressionContext;
class KeepCommandContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  KEEP() {
    return this.getToken(esql_parser.KEEP, 0);
  }
  qualifiedNamePatterns() {
    return this.getTypedRuleContext(QualifiedNamePatternsContext, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_keepCommand;
  }
  enterRule(listener) {
    if (listener.enterKeepCommand) {
      listener.enterKeepCommand(this);
    }
  }
  exitRule(listener) {
    if (listener.exitKeepCommand) {
      listener.exitKeepCommand(this);
    }
  }
}
exports.KeepCommandContext = KeepCommandContext;
class DropCommandContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  DROP() {
    return this.getToken(esql_parser.DROP, 0);
  }
  qualifiedNamePatterns() {
    return this.getTypedRuleContext(QualifiedNamePatternsContext, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_dropCommand;
  }
  enterRule(listener) {
    if (listener.enterDropCommand) {
      listener.enterDropCommand(this);
    }
  }
  exitRule(listener) {
    if (listener.exitDropCommand) {
      listener.exitDropCommand(this);
    }
  }
}
exports.DropCommandContext = DropCommandContext;
class RenameCommandContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  RENAME() {
    return this.getToken(esql_parser.RENAME, 0);
  }
  renameClause_list() {
    return this.getTypedRuleContexts(RenameClauseContext);
  }
  renameClause(i) {
    return this.getTypedRuleContext(RenameClauseContext, i);
  }
  COMMA_list() {
    return this.getTokens(esql_parser.COMMA);
  }
  COMMA(i) {
    return this.getToken(esql_parser.COMMA, i);
  }
  get ruleIndex() {
    return esql_parser.RULE_renameCommand;
  }
  enterRule(listener) {
    if (listener.enterRenameCommand) {
      listener.enterRenameCommand(this);
    }
  }
  exitRule(listener) {
    if (listener.exitRenameCommand) {
      listener.exitRenameCommand(this);
    }
  }
}
exports.RenameCommandContext = RenameCommandContext;
class RenameClauseContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    (0, _defineProperty2.default)(this, "_oldName", void 0);
    (0, _defineProperty2.default)(this, "_newName", void 0);
    this.parser = parser;
  }
  AS() {
    return this.getToken(esql_parser.AS, 0);
  }
  qualifiedNamePattern_list() {
    return this.getTypedRuleContexts(QualifiedNamePatternContext);
  }
  qualifiedNamePattern(i) {
    return this.getTypedRuleContext(QualifiedNamePatternContext, i);
  }
  get ruleIndex() {
    return esql_parser.RULE_renameClause;
  }
  enterRule(listener) {
    if (listener.enterRenameClause) {
      listener.enterRenameClause(this);
    }
  }
  exitRule(listener) {
    if (listener.exitRenameClause) {
      listener.exitRenameClause(this);
    }
  }
}
exports.RenameClauseContext = RenameClauseContext;
class DissectCommandContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  DISSECT() {
    return this.getToken(esql_parser.DISSECT, 0);
  }
  primaryExpression() {
    return this.getTypedRuleContext(PrimaryExpressionContext, 0);
  }
  string_() {
    return this.getTypedRuleContext(StringContext, 0);
  }
  commandOptions() {
    return this.getTypedRuleContext(CommandOptionsContext, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_dissectCommand;
  }
  enterRule(listener) {
    if (listener.enterDissectCommand) {
      listener.enterDissectCommand(this);
    }
  }
  exitRule(listener) {
    if (listener.exitDissectCommand) {
      listener.exitDissectCommand(this);
    }
  }
}
exports.DissectCommandContext = DissectCommandContext;
class GrokCommandContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  GROK() {
    return this.getToken(esql_parser.GROK, 0);
  }
  primaryExpression() {
    return this.getTypedRuleContext(PrimaryExpressionContext, 0);
  }
  string_() {
    return this.getTypedRuleContext(StringContext, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_grokCommand;
  }
  enterRule(listener) {
    if (listener.enterGrokCommand) {
      listener.enterGrokCommand(this);
    }
  }
  exitRule(listener) {
    if (listener.exitGrokCommand) {
      listener.exitGrokCommand(this);
    }
  }
}
exports.GrokCommandContext = GrokCommandContext;
class MvExpandCommandContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  MV_EXPAND() {
    return this.getToken(esql_parser.MV_EXPAND, 0);
  }
  qualifiedName() {
    return this.getTypedRuleContext(QualifiedNameContext, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_mvExpandCommand;
  }
  enterRule(listener) {
    if (listener.enterMvExpandCommand) {
      listener.enterMvExpandCommand(this);
    }
  }
  exitRule(listener) {
    if (listener.exitMvExpandCommand) {
      listener.exitMvExpandCommand(this);
    }
  }
}
exports.MvExpandCommandContext = MvExpandCommandContext;
class CommandOptionsContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  commandOption_list() {
    return this.getTypedRuleContexts(CommandOptionContext);
  }
  commandOption(i) {
    return this.getTypedRuleContext(CommandOptionContext, i);
  }
  COMMA_list() {
    return this.getTokens(esql_parser.COMMA);
  }
  COMMA(i) {
    return this.getToken(esql_parser.COMMA, i);
  }
  get ruleIndex() {
    return esql_parser.RULE_commandOptions;
  }
  enterRule(listener) {
    if (listener.enterCommandOptions) {
      listener.enterCommandOptions(this);
    }
  }
  exitRule(listener) {
    if (listener.exitCommandOptions) {
      listener.exitCommandOptions(this);
    }
  }
}
exports.CommandOptionsContext = CommandOptionsContext;
class CommandOptionContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  identifier() {
    return this.getTypedRuleContext(IdentifierContext, 0);
  }
  ASSIGN() {
    return this.getToken(esql_parser.ASSIGN, 0);
  }
  constant() {
    return this.getTypedRuleContext(ConstantContext, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_commandOption;
  }
  enterRule(listener) {
    if (listener.enterCommandOption) {
      listener.enterCommandOption(this);
    }
  }
  exitRule(listener) {
    if (listener.exitCommandOption) {
      listener.exitCommandOption(this);
    }
  }
}
exports.CommandOptionContext = CommandOptionContext;
class BooleanValueContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  TRUE() {
    return this.getToken(esql_parser.TRUE, 0);
  }
  FALSE() {
    return this.getToken(esql_parser.FALSE, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_booleanValue;
  }
  enterRule(listener) {
    if (listener.enterBooleanValue) {
      listener.enterBooleanValue(this);
    }
  }
  exitRule(listener) {
    if (listener.exitBooleanValue) {
      listener.exitBooleanValue(this);
    }
  }
}
exports.BooleanValueContext = BooleanValueContext;
class NumericValueContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  decimalValue() {
    return this.getTypedRuleContext(DecimalValueContext, 0);
  }
  integerValue() {
    return this.getTypedRuleContext(IntegerValueContext, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_numericValue;
  }
  enterRule(listener) {
    if (listener.enterNumericValue) {
      listener.enterNumericValue(this);
    }
  }
  exitRule(listener) {
    if (listener.exitNumericValue) {
      listener.exitNumericValue(this);
    }
  }
}
exports.NumericValueContext = NumericValueContext;
class DecimalValueContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  DECIMAL_LITERAL() {
    return this.getToken(esql_parser.DECIMAL_LITERAL, 0);
  }
  PLUS() {
    return this.getToken(esql_parser.PLUS, 0);
  }
  MINUS() {
    return this.getToken(esql_parser.MINUS, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_decimalValue;
  }
  enterRule(listener) {
    if (listener.enterDecimalValue) {
      listener.enterDecimalValue(this);
    }
  }
  exitRule(listener) {
    if (listener.exitDecimalValue) {
      listener.exitDecimalValue(this);
    }
  }
}
exports.DecimalValueContext = DecimalValueContext;
class IntegerValueContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  INTEGER_LITERAL() {
    return this.getToken(esql_parser.INTEGER_LITERAL, 0);
  }
  PLUS() {
    return this.getToken(esql_parser.PLUS, 0);
  }
  MINUS() {
    return this.getToken(esql_parser.MINUS, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_integerValue;
  }
  enterRule(listener) {
    if (listener.enterIntegerValue) {
      listener.enterIntegerValue(this);
    }
  }
  exitRule(listener) {
    if (listener.exitIntegerValue) {
      listener.exitIntegerValue(this);
    }
  }
}
exports.IntegerValueContext = IntegerValueContext;
class StringContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  QUOTED_STRING() {
    return this.getToken(esql_parser.QUOTED_STRING, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_string;
  }
  enterRule(listener) {
    if (listener.enterString) {
      listener.enterString(this);
    }
  }
  exitRule(listener) {
    if (listener.exitString) {
      listener.exitString(this);
    }
  }
}
exports.StringContext = StringContext;
class ComparisonOperatorContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  EQ() {
    return this.getToken(esql_parser.EQ, 0);
  }
  NEQ() {
    return this.getToken(esql_parser.NEQ, 0);
  }
  LT() {
    return this.getToken(esql_parser.LT, 0);
  }
  LTE() {
    return this.getToken(esql_parser.LTE, 0);
  }
  GT() {
    return this.getToken(esql_parser.GT, 0);
  }
  GTE() {
    return this.getToken(esql_parser.GTE, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_comparisonOperator;
  }
  enterRule(listener) {
    if (listener.enterComparisonOperator) {
      listener.enterComparisonOperator(this);
    }
  }
  exitRule(listener) {
    if (listener.exitComparisonOperator) {
      listener.exitComparisonOperator(this);
    }
  }
}
exports.ComparisonOperatorContext = ComparisonOperatorContext;
class ExplainCommandContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  EXPLAIN() {
    return this.getToken(esql_parser.EXPLAIN, 0);
  }
  subqueryExpression() {
    return this.getTypedRuleContext(SubqueryExpressionContext, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_explainCommand;
  }
  enterRule(listener) {
    if (listener.enterExplainCommand) {
      listener.enterExplainCommand(this);
    }
  }
  exitRule(listener) {
    if (listener.exitExplainCommand) {
      listener.exitExplainCommand(this);
    }
  }
}
exports.ExplainCommandContext = ExplainCommandContext;
class SubqueryExpressionContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  OPENING_BRACKET() {
    return this.getToken(esql_parser.OPENING_BRACKET, 0);
  }
  query() {
    return this.getTypedRuleContext(QueryContext, 0);
  }
  CLOSING_BRACKET() {
    return this.getToken(esql_parser.CLOSING_BRACKET, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_subqueryExpression;
  }
  enterRule(listener) {
    if (listener.enterSubqueryExpression) {
      listener.enterSubqueryExpression(this);
    }
  }
  exitRule(listener) {
    if (listener.exitSubqueryExpression) {
      listener.exitSubqueryExpression(this);
    }
  }
}
exports.SubqueryExpressionContext = SubqueryExpressionContext;
class ShowCommandContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  get ruleIndex() {
    return esql_parser.RULE_showCommand;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
exports.ShowCommandContext = ShowCommandContext;
class ShowInfoContext extends ShowCommandContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  SHOW() {
    return this.getToken(esql_parser.SHOW, 0);
  }
  INFO() {
    return this.getToken(esql_parser.INFO, 0);
  }
  enterRule(listener) {
    if (listener.enterShowInfo) {
      listener.enterShowInfo(this);
    }
  }
  exitRule(listener) {
    if (listener.exitShowInfo) {
      listener.exitShowInfo(this);
    }
  }
}
exports.ShowInfoContext = ShowInfoContext;
class MetaCommandContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    this.parser = parser;
  }
  get ruleIndex() {
    return esql_parser.RULE_metaCommand;
  }
  copyFrom(ctx) {
    super.copyFrom(ctx);
  }
}
exports.MetaCommandContext = MetaCommandContext;
class MetaFunctionsContext extends MetaCommandContext {
  constructor(parser, ctx) {
    super(parser, ctx.parentCtx, ctx.invokingState);
    super.copyFrom(ctx);
  }
  META() {
    return this.getToken(esql_parser.META, 0);
  }
  FUNCTIONS() {
    return this.getToken(esql_parser.FUNCTIONS, 0);
  }
  enterRule(listener) {
    if (listener.enterMetaFunctions) {
      listener.enterMetaFunctions(this);
    }
  }
  exitRule(listener) {
    if (listener.exitMetaFunctions) {
      listener.exitMetaFunctions(this);
    }
  }
}
exports.MetaFunctionsContext = MetaFunctionsContext;
class EnrichCommandContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    (0, _defineProperty2.default)(this, "_policyName", void 0);
    (0, _defineProperty2.default)(this, "_matchField", void 0);
    this.parser = parser;
  }
  ENRICH() {
    return this.getToken(esql_parser.ENRICH, 0);
  }
  ENRICH_POLICY_NAME() {
    return this.getToken(esql_parser.ENRICH_POLICY_NAME, 0);
  }
  ON() {
    return this.getToken(esql_parser.ON, 0);
  }
  WITH() {
    return this.getToken(esql_parser.WITH, 0);
  }
  enrichWithClause_list() {
    return this.getTypedRuleContexts(EnrichWithClauseContext);
  }
  enrichWithClause(i) {
    return this.getTypedRuleContext(EnrichWithClauseContext, i);
  }
  qualifiedNamePattern() {
    return this.getTypedRuleContext(QualifiedNamePatternContext, 0);
  }
  COMMA_list() {
    return this.getTokens(esql_parser.COMMA);
  }
  COMMA(i) {
    return this.getToken(esql_parser.COMMA, i);
  }
  get ruleIndex() {
    return esql_parser.RULE_enrichCommand;
  }
  enterRule(listener) {
    if (listener.enterEnrichCommand) {
      listener.enterEnrichCommand(this);
    }
  }
  exitRule(listener) {
    if (listener.exitEnrichCommand) {
      listener.exitEnrichCommand(this);
    }
  }
}
exports.EnrichCommandContext = EnrichCommandContext;
class EnrichWithClauseContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    (0, _defineProperty2.default)(this, "_newName", void 0);
    (0, _defineProperty2.default)(this, "_enrichField", void 0);
    this.parser = parser;
  }
  qualifiedNamePattern_list() {
    return this.getTypedRuleContexts(QualifiedNamePatternContext);
  }
  qualifiedNamePattern(i) {
    return this.getTypedRuleContext(QualifiedNamePatternContext, i);
  }
  ASSIGN() {
    return this.getToken(esql_parser.ASSIGN, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_enrichWithClause;
  }
  enterRule(listener) {
    if (listener.enterEnrichWithClause) {
      listener.enterEnrichWithClause(this);
    }
  }
  exitRule(listener) {
    if (listener.exitEnrichWithClause) {
      listener.exitEnrichWithClause(this);
    }
  }
}
exports.EnrichWithClauseContext = EnrichWithClauseContext;
class LookupCommandContext extends _antlr.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    super(parent, invokingState);
    (0, _defineProperty2.default)(this, "_tableName", void 0);
    (0, _defineProperty2.default)(this, "_matchFields", void 0);
    this.parser = parser;
  }
  LOOKUP() {
    return this.getToken(esql_parser.LOOKUP, 0);
  }
  ON() {
    return this.getToken(esql_parser.ON, 0);
  }
  indexPattern() {
    return this.getTypedRuleContext(IndexPatternContext, 0);
  }
  qualifiedNamePatterns() {
    return this.getTypedRuleContext(QualifiedNamePatternsContext, 0);
  }
  get ruleIndex() {
    return esql_parser.RULE_lookupCommand;
  }
  enterRule(listener) {
    if (listener.enterLookupCommand) {
      listener.enterLookupCommand(this);
    }
  }
  exitRule(listener) {
    if (listener.exitLookupCommand) {
      listener.exitLookupCommand(this);
    }
  }
}
exports.LookupCommandContext = LookupCommandContext;