"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IdFieldEnum = exports.IdField = exports.DeleteAssetCriticalityRecord = exports.CreateSingleAssetCriticalityRequest = exports.CreateAssetCriticalityRecord = exports.AssetCriticalityRecordIdParts = exports.AssetCriticalityRecord = exports.AssetCriticalityLevelEnum = exports.AssetCriticalityLevel = exports.AssetCriticalityBulkUploadStats = exports.AssetCriticalityBulkUploadResponse = exports.AssetCriticalityBulkUploadErrorItem = void 0;
var _zod = require("zod");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Asset Criticality Common Schema
 *   version: 1
 */

const IdField = exports.IdField = _zod.z.enum(['host.name', 'user.name']);
const IdFieldEnum = exports.IdFieldEnum = IdField.enum;
const AssetCriticalityRecordIdParts = exports.AssetCriticalityRecordIdParts = _zod.z.object({
  /**
   * The ID value of the asset.
   */
  id_value: _zod.z.string(),
  /**
   * The field representing the ID.
   */
  id_field: IdField
});

/**
 * The criticality level of the asset.
 */

const AssetCriticalityLevel = exports.AssetCriticalityLevel = _zod.z.enum(['low_impact', 'medium_impact', 'high_impact', 'extreme_impact']);
const AssetCriticalityLevelEnum = exports.AssetCriticalityLevelEnum = AssetCriticalityLevel.enum;
const CreateAssetCriticalityRecord = exports.CreateAssetCriticalityRecord = AssetCriticalityRecordIdParts.merge(_zod.z.object({
  criticality_level: AssetCriticalityLevel
}));
const CreateSingleAssetCriticalityRequest = exports.CreateSingleAssetCriticalityRequest = CreateAssetCriticalityRecord.merge(_zod.z.object({
  /**
   * If 'wait_for' the request will wait for the index refresh.
   */
  refresh: _zod.z.literal('wait_for').optional()
}));
const DeleteAssetCriticalityRecord = exports.DeleteAssetCriticalityRecord = AssetCriticalityRecordIdParts.merge(_zod.z.object({
  /**
   * If 'wait_for' the request will wait for the index refresh.
   */
  refresh: _zod.z.literal('wait_for').optional()
}));
const AssetCriticalityRecord = exports.AssetCriticalityRecord = CreateAssetCriticalityRecord.merge(_zod.z.object({
  /**
   * The time the record was created or updated.
   */
  '@timestamp': _zod.z.string().datetime()
}));
const AssetCriticalityBulkUploadErrorItem = exports.AssetCriticalityBulkUploadErrorItem = _zod.z.object({
  message: _zod.z.string(),
  index: _zod.z.number().int()
});
const AssetCriticalityBulkUploadStats = exports.AssetCriticalityBulkUploadStats = _zod.z.object({
  successful: _zod.z.number().int(),
  failed: _zod.z.number().int(),
  total: _zod.z.number().int()
});
const AssetCriticalityBulkUploadResponse = exports.AssetCriticalityBulkUploadResponse = _zod.z.object({
  errors: _zod.z.array(AssetCriticalityBulkUploadErrorItem),
  stats: AssetCriticalityBulkUploadStats
});