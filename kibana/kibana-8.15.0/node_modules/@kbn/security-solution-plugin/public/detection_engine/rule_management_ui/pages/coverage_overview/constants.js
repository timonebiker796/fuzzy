"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ruleSourceFilterLabelMap = exports.ruleSourceFilterDefaultOptions = exports.ruleActivityFilterLabelMap = exports.ruleActivityFilterDefaultOptions = exports.coverageOverviewPanelWidth = exports.coverageOverviewLegendWidth = exports.coverageOverviewFilterWidth = exports.coverageOverviewCardColorThresholds = void 0;
var _detection_engine = require("../../../../../common/api/detection_engine");
var i18n = _interopRequireWildcard(require("./translations"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const coverageOverviewPanelWidth = exports.coverageOverviewPanelWidth = 160;
const coverageOverviewLegendWidth = exports.coverageOverviewLegendWidth = 380;
const coverageOverviewFilterWidth = exports.coverageOverviewFilterWidth = 300;

/**
 * Rules count -> color map
 *
 * A corresponding color is applied if rules count >= a specific threshold
 */
const coverageOverviewCardColorThresholds = exports.coverageOverviewCardColorThresholds = [{
  threshold: 10,
  color: '#00BFB3'
}, {
  threshold: 7,
  color: '#00BFB399'
}, {
  threshold: 3,
  color: '#00BFB34D'
}, {
  threshold: 1,
  color: '#00BFB326'
}];
const ruleActivityFilterDefaultOptions = exports.ruleActivityFilterDefaultOptions = [{
  label: _detection_engine.CoverageOverviewRuleActivity.Enabled
}, {
  label: _detection_engine.CoverageOverviewRuleActivity.Disabled
}];
const ruleActivityFilterLabelMap = exports.ruleActivityFilterLabelMap = {
  [_detection_engine.CoverageOverviewRuleActivity.Enabled]: i18n.CoverageOverviewEnabledRuleActivity,
  [_detection_engine.CoverageOverviewRuleActivity.Disabled]: i18n.CoverageOverviewDisabledRuleActivity
};
const ruleSourceFilterDefaultOptions = exports.ruleSourceFilterDefaultOptions = [{
  label: _detection_engine.CoverageOverviewRuleSource.Prebuilt
}, {
  label: _detection_engine.CoverageOverviewRuleSource.Custom
}];
const ruleSourceFilterLabelMap = exports.ruleSourceFilterLabelMap = {
  [_detection_engine.CoverageOverviewRuleSource.Prebuilt]: i18n.CoverageOverviewElasticRuleSource,
  [_detection_engine.CoverageOverviewRuleSource.Custom]: i18n.CoverageOverviewCustomRuleSource
};