"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CoverageOverviewMitreTechniquePanelPopover = void 0;
var _eui = require("@elastic/eui");
var _css = require("@emotion/css");
var _react = _interopRequireWildcard(require("react"));
var _user_info = require("../../../../detections/components/user_info");
var _popover_list_header = require("./shared_components/popover_list_header");
var _technique_panel = require("./technique_panel");
var i18n = _interopRequireWildcard(require("./translations"));
var _use_columns = require("../../components/rules_table/use_columns");
var _coverage_overview_dashboard_context = require("./coverage_overview_dashboard_context");
var _mitre_subtechnique = require("../../../rule_management/model/coverage_overview/mitre_subtechnique");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const CoverageOverviewMitreTechniquePanelPopoverComponent = ({
  technique
}) => {
  const [{
    loading: userInfoLoading,
    canUserCRUD
  }] = (0, _user_info.useUserData)();
  const [isPopoverOpen, setIsPopoverOpen] = (0, _react.useState)(false);
  const [isLoading, setIsLoading] = (0, _react.useState)(false);
  const closePopover = (0, _react.useCallback)(() => setIsPopoverOpen(false), []);
  const isEnableButtonDisabled = (0, _react.useMemo)(() => !canUserCRUD || technique.disabledRules.length === 0, [canUserCRUD, technique.disabledRules.length]);
  const isEnableButtonLoading = (0, _react.useMemo)(() => isLoading || userInfoLoading, [isLoading, userInfoLoading]);
  const {
    state: {
      showExpandedCells,
      filter: {
        activity
      }
    },
    actions: {
      enableAllDisabled
    }
  } = (0, _coverage_overview_dashboard_context.useCoverageOverviewDashboardContext)();
  const coveredSubtechniques = (0, _react.useMemo)(() => (0, _mitre_subtechnique.getNumOfCoveredSubtechniques)(technique, activity), [activity, technique]);
  const handleEnableAllDisabled = (0, _react.useCallback)(async () => {
    setIsLoading(true);
    const ruleIds = technique.disabledRules.map(rule => rule.id);
    await enableAllDisabled(ruleIds);
    setIsLoading(false);
    closePopover();
  }, [closePopover, enableAllDisabled, technique.disabledRules]);
  const TechniquePanel = /*#__PURE__*/_react.default.createElement(_technique_panel.CoverageOverviewMitreTechniquePanel, {
    setIsPopoverOpen: setIsPopoverOpen,
    isPopoverOpen: isPopoverOpen,
    technique: technique,
    isExpanded: showExpandedCells,
    coveredSubtechniques: coveredSubtechniques
  });
  const CoveredSubtechniquesLabel = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    color: "success",
    size: "s"
  }, /*#__PURE__*/_react.default.createElement("h4", null, i18n.COVERED_MITRE_SUBTECHNIQUES(coveredSubtechniques, technique.subtechniques.length))), [coveredSubtechniques, technique.subtechniques.length]);
  const enabledRuleListItems = (0, _react.useMemo)(() => technique.enabledRules.map(rule => ({
    label: /*#__PURE__*/_react.default.createElement(_use_columns.RuleLink, {
      name: rule.name,
      id: rule.id
    }),
    color: 'primary'
  })), [technique.enabledRules]);
  const disabledRuleListItems = (0, _react.useMemo)(() => technique.disabledRules.map(rule => ({
    label: /*#__PURE__*/_react.default.createElement(_use_columns.RuleLink, {
      name: rule.name,
      id: rule.id
    }),
    color: 'primary'
  })), [technique.disabledRules]);
  const EnabledRulesAccordionButton = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement(_popover_list_header.CoverageOverviewRuleListHeader, {
    listTitle: i18n.ENABLED_RULES_LIST_LABEL,
    listLength: technique.enabledRules.length
  }), [technique.enabledRules.length]);
  const DisabledRulesAccordionButton = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement(_popover_list_header.CoverageOverviewRuleListHeader, {
    listTitle: i18n.DISABLED_RULES_LIST_LABEL,
    listLength: technique.disabledRules.length
  }), [technique.disabledRules.length]);
  return /*#__PURE__*/_react.default.createElement(_eui.EuiPopover, {
    button: TechniquePanel,
    isOpen: isPopoverOpen,
    closePopover: closePopover,
    anchorPosition: "rightCenter",
    "data-test-subj": "coverageOverviewPopover",
    ownFocus: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiPopoverTitle, {
    className: (0, _css.css)`
          min-width: 30em;
        `
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    gutterSize: "xs",
    alignItems: "flexStart",
    direction: "column"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiButtonEmpty, {
    flush: "left",
    iconType: "popout",
    iconSide: "right",
    href: technique.reference,
    target: "_blank"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiText, null, /*#__PURE__*/_react.default.createElement("h3", null, technique.name)))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, CoveredSubtechniquesLabel))), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _css.cx)((0, _css.css)({
      maxHeight: '40em',
      padding: '5px 0px'
    }), 'eui-yScrollWithShadows')
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiAccordion, {
    id: "enabledRulesListAccordion",
    initialIsOpen: technique.enabledRules.length > 0,
    buttonContent: EnabledRulesAccordionButton
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiListGroup, {
    "data-test-subj": "coverageOverviewEnabledRulesList",
    flush: true,
    listItems: enabledRuleListItems,
    size: "s"
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiAccordion, {
    id: "disabledRulesListAccordion",
    initialIsOpen: technique.disabledRules.length > 0,
    buttonContent: DisabledRulesAccordionButton
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiListGroup, {
    "data-test-subj": "coverageOverviewDisabledRulesList",
    flush: true,
    listItems: disabledRuleListItems,
    size: "s"
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiPopoverFooter, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
    "data-test-subj": "enableAllDisabledButton",
    isLoading: isEnableButtonLoading,
    disabled: isEnableButtonDisabled,
    onClick: handleEnableAllDisabled,
    size: "s",
    iconType: "checkInCircleFilled"
  }, i18n.ENABLE_ALL_DISABLED)))));
};
const CoverageOverviewMitreTechniquePanelPopover = exports.CoverageOverviewMitreTechniquePanelPopover = /*#__PURE__*/(0, _react.memo)(CoverageOverviewMitreTechniquePanelPopoverComponent);