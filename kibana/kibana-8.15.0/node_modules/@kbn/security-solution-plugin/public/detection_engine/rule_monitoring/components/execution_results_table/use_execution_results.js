"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useExecutionResults = void 0;
var _reactQuery = require("@tanstack/react-query");
var _use_app_toasts = require("../../../../common/hooks/use_app_toasts");
var _rule_monitoring = require("../../../../../common/api/detection_engine/rule_monitoring");
var _api = require("../../api");
var _use_experimental_features = require("../../../../common/hooks/use_experimental_features");
var i18n = _interopRequireWildcard(require("./translations"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const useExecutionResults = args => {
  const {
    addError
  } = (0, _use_app_toasts.useAppToasts)();
  const isManualRuleRunEnabled = (0, _use_experimental_features.useIsExperimentalFeatureEnabled)('manualRuleRunEnabled');
  return (0, _reactQuery.useQuery)(['detectionEngine', 'ruleMonitoring', 'executionResults', args], ({
    signal
  }) => {
    let runTypeFilters = args.runTypeFilters;

    // if manual rule run is disabled, only show standard runs
    if (!isManualRuleRunEnabled) {
      runTypeFilters = [_rule_monitoring.RuleRunTypeEnum.standard];
    }
    return _api.api.fetchRuleExecutionResults({
      ...args,
      runTypeFilters,
      signal
    });
  }, {
    keepPreviousData: true,
    onError: e => {
      addError(e, {
        title: i18n.FETCH_ERROR
      });
    }
  });
};
exports.useExecutionResults = useExecutionResults;