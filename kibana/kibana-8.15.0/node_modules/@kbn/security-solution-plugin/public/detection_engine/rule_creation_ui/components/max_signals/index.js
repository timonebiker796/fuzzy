"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MaxSignals = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _css = require("@emotion/css");
var _constants = require("../../../../../common/constants");
var i18n = _interopRequireWildcard(require("./translations"));
var _kibana = require("../../../../common/lib/kibana");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const MAX_SIGNALS_FIELD_WIDTH = 200;
const MaxSignals = ({
  dataTestSubj,
  field,
  idAria,
  isDisabled,
  placeholder
}) => {
  const {
    setValue,
    value
  } = field;
  const {
    alerting
  } = (0, _kibana.useKibana)().services;
  const maxAlertsPerRun = alerting.getMaxAlertsPerRun();
  const [isInvalid, error] = (0, _react.useMemo)(() => {
    if (typeof value === 'number' && !isNaN(value) && value <= 0) {
      return [true, i18n.GREATER_THAN_ERROR];
    }
    return [false];
  }, [value]);
  const hasWarning = (0, _react.useMemo)(() => typeof value === 'number' && !isNaN(value) && value > maxAlertsPerRun, [maxAlertsPerRun, value]);
  const handleMaxSignalsChange = (0, _react.useCallback)(e => {
    const maxSignalsValue = e.target.value;
    // Has to handle an empty string as the field is optional
    setValue(maxSignalsValue !== '' ? Number(maxSignalsValue.trim()) : '');
  }, [setValue]);
  const helpText = (0, _react.useMemo)(() => {
    const textToRender = [];
    if (hasWarning) {
      textToRender.push( /*#__PURE__*/_react.default.createElement(_eui.EuiTextColor, {
        color: "warning"
      }, i18n.LESS_THAN_WARNING(maxAlertsPerRun)));
    }
    textToRender.push(i18n.MAX_SIGNALS_HELP_TEXT(_constants.DEFAULT_MAX_SIGNALS));
    return textToRender;
  }, [hasWarning, maxAlertsPerRun]);
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    css: (0, _css.css)`
        .euiFormControlLayout {
          width: ${MAX_SIGNALS_FIELD_WIDTH}px;
        }
      `,
    describedByIds: idAria ? [idAria] : undefined,
    fullWidth: true,
    helpText: helpText,
    label: field.label,
    labelAppend: field.labelAppend,
    isInvalid: isInvalid,
    error: error
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFieldNumber, {
    isInvalid: isInvalid,
    value: value,
    onChange: handleMaxSignalsChange,
    isLoading: field.isValidating,
    placeholder: placeholder,
    "data-test-subj": dataTestSubj,
    disabled: isDisabled,
    append: hasWarning ? /*#__PURE__*/_react.default.createElement(_eui.EuiIcon, {
      size: "s",
      type: "warning",
      color: "warning"
    }) : undefined
  }));
};
exports.MaxSignals = MaxSignals;
MaxSignals.displayName = 'MaxSignals';