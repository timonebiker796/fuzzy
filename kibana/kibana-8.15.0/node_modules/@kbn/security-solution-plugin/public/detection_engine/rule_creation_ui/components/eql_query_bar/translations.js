"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EQL_VALIDATION_REQUEST_ERROR = exports.EQL_VALIDATION_ERROR_POPOVER_LABEL = exports.EQL_VALIDATION_ERRORS_TITLE = exports.EQL_SETTINGS_TITLE = exports.EQL_OVERVIEW_LINK_TEXT = exports.EQL_OPTIONS_SIZE_LABEL = exports.EQL_OPTIONS_SIZE_HELPER = exports.EQL_OPTIONS_EVENT_TIMESTAMP_FIELD_LABEL = exports.EQL_OPTIONS_EVENT_TIMESTAMP_FIELD_HELPER = exports.EQL_OPTIONS_EVENT_TIEBREAKER_FIELD_LABEL = exports.EQL_OPTIONS_EVENT_TIEBREAKER_FIELD_HELPER = exports.EQL_OPTIONS_EVENT_CATEGORY_FIELD_LABEL = exports.EQL_OPTIONS_EVENT_CATEGORY_FIELD_HELPER = void 0;
var _i18n = require("@kbn/i18n");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const EQL_VALIDATION_REQUEST_ERROR = exports.EQL_VALIDATION_REQUEST_ERROR = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.eqlValidation.requestError', {
  defaultMessage: 'An error occurred while validating your EQL query'
});
const EQL_VALIDATION_ERRORS_TITLE = exports.EQL_VALIDATION_ERRORS_TITLE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.eqlValidation.title', {
  defaultMessage: 'EQL Validation Errors'
});
const EQL_VALIDATION_ERROR_POPOVER_LABEL = exports.EQL_VALIDATION_ERROR_POPOVER_LABEL = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.eqlValidation.showErrorsLabel', {
  defaultMessage: 'Show EQL Validation Errors'
});
const EQL_OVERVIEW_LINK_TEXT = exports.EQL_OVERVIEW_LINK_TEXT = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.eqlOverViewLink.text', {
  defaultMessage: 'Event Query Language (EQL) Overview'
});
const EQL_SETTINGS_TITLE = exports.EQL_SETTINGS_TITLE = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.eqlSettings.title', {
  defaultMessage: 'EQL settings'
});
const EQL_OPTIONS_SIZE_LABEL = exports.EQL_OPTIONS_SIZE_LABEL = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.eqlOptionsSize.label', {
  defaultMessage: 'Size'
});
const EQL_OPTIONS_SIZE_HELPER = exports.EQL_OPTIONS_SIZE_HELPER = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.eqlOptionsSize.text', {
  defaultMessage: 'For basic queries, the maximum number of matching events to return. For sequence queries, the maximum number of matching sequences to return.'
});
const EQL_OPTIONS_EVENT_CATEGORY_FIELD_LABEL = exports.EQL_OPTIONS_EVENT_CATEGORY_FIELD_LABEL = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.eqlOptionsEventCategoryField.label', {
  defaultMessage: 'Event category field'
});
const EQL_OPTIONS_EVENT_CATEGORY_FIELD_HELPER = exports.EQL_OPTIONS_EVENT_CATEGORY_FIELD_HELPER = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.eqlOptionsEventCategoryField.text', {
  defaultMessage: 'Field containing the event classification, such as process, file, or network. This field is typically mapped as a field type in the keyword family'
});
const EQL_OPTIONS_EVENT_TIEBREAKER_FIELD_LABEL = exports.EQL_OPTIONS_EVENT_TIEBREAKER_FIELD_LABEL = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.eqlOptionsEventTiebreakerField.label', {
  defaultMessage: 'Tiebreaker field'
});
const EQL_OPTIONS_EVENT_TIEBREAKER_FIELD_HELPER = exports.EQL_OPTIONS_EVENT_TIEBREAKER_FIELD_HELPER = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.eqlOptionsEventTiebreakerField.text', {
  defaultMessage: 'Field used to sort hits with the same timestamp in ascending, lexicographic order'
});
const EQL_OPTIONS_EVENT_TIMESTAMP_FIELD_LABEL = exports.EQL_OPTIONS_EVENT_TIMESTAMP_FIELD_LABEL = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.eqlOptionsEventTimestampField.label', {
  defaultMessage: 'Timestamp field'
});
const EQL_OPTIONS_EVENT_TIMESTAMP_FIELD_HELPER = exports.EQL_OPTIONS_EVENT_TIMESTAMP_FIELD_HELPER = _i18n.i18n.translate('xpack.securitySolution.detectionEngine.eqlOptionsEventTimestampField.text', {
  defaultMessage: 'Field containing event timestamp'
});