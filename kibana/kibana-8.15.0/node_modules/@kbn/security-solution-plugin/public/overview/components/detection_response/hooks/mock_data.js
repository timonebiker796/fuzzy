"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hostFilter = exports.dataProviderWithOrFilters = exports.dataProviderWithOneFilter = exports.dataProviderWithAndFilters = exports.ORFilterGroup = exports.ANDFilterGroup1 = void 0;
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const hostFilter = exports.hostFilter = {
  field: 'host.hostname',
  value: 'Host-u6ou715rzy'
};
const ANDFilterGroup1 = exports.ANDFilterGroup1 = [hostFilter, {
  field: 'kibana.alerts.workflow_status',
  value: 'open'
}];
const ANDFilterGroup2 = [hostFilter, {
  field: 'kibana.alerts.workflow_status',
  value: 'closed'
}];
const ANDFilterGroup3 = [hostFilter, {
  field: 'kibana.alerts.workflow_status',
  value: 'acknowledged'
}];
const ORFilterGroup = exports.ORFilterGroup = [ANDFilterGroup1, ANDFilterGroup2, ANDFilterGroup3];
const dataProviderWithOneFilter = exports.dataProviderWithOneFilter = [{
  and: [],
  enabled: true,
  id: 'mock-id',
  name: 'host.hostname',
  excluded: false,
  kqlQuery: '',
  queryMatch: {
    field: 'host.hostname',
    value: 'Host-u6ou715rzy',
    displayValue: 'Host-u6ou715rzy',
    operator: ':'
  }
}];
const dataProviderWithAndFilters = exports.dataProviderWithAndFilters = [{
  and: [{
    enabled: true,
    excluded: false,
    id: 'mock-id',
    kqlQuery: '',
    name: 'kibana.alerts.workflow_status',
    queryMatch: {
      field: 'kibana.alerts.workflow_status',
      operator: ':',
      value: 'open',
      displayValue: 'open'
    }
  }],
  enabled: true,
  id: 'mock-id',
  name: 'host.hostname',
  excluded: false,
  kqlQuery: '',
  queryMatch: {
    field: 'host.hostname',
    value: 'Host-u6ou715rzy',
    displayValue: 'Host-u6ou715rzy',
    operator: ':'
  }
}];
const dataProviderWithOrFilters = exports.dataProviderWithOrFilters = [{
  and: [{
    enabled: true,
    id: 'mock-id',
    name: 'kibana.alerts.workflow_status',
    excluded: false,
    kqlQuery: '',
    queryMatch: {
      field: 'kibana.alerts.workflow_status',
      value: 'open',
      displayValue: 'open',
      operator: ':'
    }
  }],
  enabled: true,
  id: 'mock-id',
  name: 'host.hostname',
  excluded: false,
  kqlQuery: '',
  queryMatch: {
    field: 'host.hostname',
    value: 'Host-u6ou715rzy',
    displayValue: 'Host-u6ou715rzy',
    operator: ':'
  }
}, {
  and: [{
    enabled: true,
    id: 'mock-id',
    name: 'kibana.alerts.workflow_status',
    excluded: false,
    kqlQuery: '',
    queryMatch: {
      field: 'kibana.alerts.workflow_status',
      value: 'closed',
      displayValue: 'closed',
      operator: ':'
    }
  }],
  enabled: true,
  id: 'mock-id',
  name: 'host.hostname',
  excluded: false,
  kqlQuery: '',
  queryMatch: {
    field: 'host.hostname',
    value: 'Host-u6ou715rzy',
    displayValue: 'Host-u6ou715rzy',
    operator: ':'
  }
}, {
  and: [{
    enabled: true,
    id: 'mock-id',
    name: 'kibana.alerts.workflow_status',
    excluded: false,
    kqlQuery: '',
    queryMatch: {
      field: 'kibana.alerts.workflow_status',
      value: 'acknowledged',
      displayValue: 'acknowledged',
      operator: ':'
    }
  }],
  enabled: true,
  id: 'mock-id',
  name: 'host.hostname',
  excluded: false,
  kqlQuery: '',
  queryMatch: {
    field: 'host.hostname',
    value: 'Host-u6ou715rzy',
    displayValue: 'Host-u6ou715rzy',
    operator: ':'
  }
}];