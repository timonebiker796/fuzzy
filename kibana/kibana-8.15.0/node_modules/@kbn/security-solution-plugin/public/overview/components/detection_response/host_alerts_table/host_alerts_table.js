"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HostAlertsTable = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _ruleDataUtils = require("@kbn/rule-data-utils");
var _use_navigate_to_alerts_page_with_filters = require("../../../../common/hooks/use_navigate_to_alerts_page_with_filters");
var _formatted_number = require("../../../../common/components/formatted_number");
var _header_section = require("../../../../common/components/header_section");
var _hover_visibility_container = require("../../../../common/components/hover_visibility_container");
var _inspect = require("../../../../common/components/inspect");
var _last_updated_at = require("../../../../common/components/last_updated_at");
var _links = require("../../../../common/components/links");
var _query_toggle = require("../../../../common/containers/query_toggle");
var i18n = _interopRequireWildcard(require("../translations"));
var _utils = require("../utils");
var _use_host_alerts_items = require("./use_host_alerts_items");
var _cell_actions = require("../../../../common/components/cell_actions");
var _use_global_filter_query = require("../../../../common/hooks/use_global_filter_query");
var _model = require("../../../../sourcerer/store/model");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const DETECTION_RESPONSE_HOST_SEVERITY_QUERY_ID = 'vulnerableHostsBySeverityQuery';
const HostAlertsTable = exports.HostAlertsTable = /*#__PURE__*/_react.default.memo(({
  signalIndexName
}) => {
  const openAlertsPageWithFilters = (0, _use_navigate_to_alerts_page_with_filters.useNavigateToAlertsPageWithFilters)();
  const {
    filterQuery
  } = (0, _use_global_filter_query.useGlobalFilterQuery)();
  const openHostInAlerts = (0, _react.useCallback)(({
    hostName,
    severity
  }) => openAlertsPageWithFilters([{
    title: i18n.OPEN_IN_ALERTS_TITLE_HOSTNAME,
    selectedOptions: [hostName],
    fieldName: 'host.name'
  }, ...(severity ? [{
    title: i18n.OPEN_IN_ALERTS_TITLE_SEVERITY,
    selectedOptions: [severity],
    fieldName: _ruleDataUtils.ALERT_SEVERITY
  }] : [])]), [openAlertsPageWithFilters]);
  const {
    toggleStatus,
    setToggleStatus
  } = (0, _query_toggle.useQueryToggle)(DETECTION_RESPONSE_HOST_SEVERITY_QUERY_ID);
  const {
    items,
    isLoading,
    updatedAt,
    pagination
  } = (0, _use_host_alerts_items.useHostAlertsItems)({
    skip: !toggleStatus,
    queryId: DETECTION_RESPONSE_HOST_SEVERITY_QUERY_ID,
    signalIndexName,
    filterQuery
  });
  const columns = (0, _react.useMemo)(() => getTableColumns(openHostInAlerts), [openHostInAlerts]);
  return /*#__PURE__*/_react.default.createElement(_hover_visibility_container.HoverVisibilityContainer, {
    show: true,
    targetClassNames: [_inspect.BUTTON_CLASS]
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiPanel, {
    hasBorder: true,
    "data-test-subj": "severityHostAlertsPanel"
  }, /*#__PURE__*/_react.default.createElement(_header_section.HeaderSection, {
    id: DETECTION_RESPONSE_HOST_SEVERITY_QUERY_ID,
    title: i18n.HOST_ALERTS_SECTION_TITLE,
    subtitle: /*#__PURE__*/_react.default.createElement(_last_updated_at.LastUpdatedAt, {
      updatedAt: updatedAt,
      isUpdating: isLoading
    }),
    titleSize: "s",
    toggleQuery: setToggleStatus,
    toggleStatus: toggleStatus,
    tooltip: i18n.HOST_TOOLTIP
  }), toggleStatus && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiBasicTable, {
    items: items,
    columns: columns,
    loading: isLoading,
    "data-test-subj": "severityHostAlertsTable",
    noItemsMessage: /*#__PURE__*/_react.default.createElement(_eui.EuiEmptyPrompt, {
      title: /*#__PURE__*/_react.default.createElement("h3", null, i18n.NO_ALERTS_FOUND),
      titleSize: "xs"
    })
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  }), pagination.pageCount > 1 && /*#__PURE__*/_react.default.createElement(_eui.EuiTablePagination, {
    "data-test-subj": "hostTablePaginator",
    activePage: pagination.currentPage,
    itemsPerPage: _utils.ITEMS_PER_PAGE,
    pageCount: pagination.pageCount,
    onChangePage: pagination.setPage,
    showPerPageOptions: false
  }))));
});
HostAlertsTable.displayName = 'HostAlertsTable';
const getTableColumns = handleClick => [{
  field: 'hostName',
  name: i18n.HOST_ALERTS_HOSTNAME_COLUMN,
  'data-test-subj': 'hostSeverityAlertsTable-hostName',
  render: hostName => /*#__PURE__*/_react.default.createElement(_eui.EuiToolTip, {
    title: i18n.OPEN_HOST_DETAIL_TOOLTIP,
    content: hostName,
    anchorClassName: "eui-textTruncate"
  }, /*#__PURE__*/_react.default.createElement(_links.HostDetailsLink, {
    hostName: hostName
  }))
}, {
  field: 'totalAlerts',
  name: i18n.ALERTS_TEXT,
  'data-test-subj': 'hostSeverityAlertsTable-totalAlerts',
  render: (totalAlerts, {
    hostName
  }) => /*#__PURE__*/_react.default.createElement(_cell_actions.SecurityCellActions, {
    data: {
      value: hostName,
      field: 'host.name'
    },
    mode: _cell_actions.CellActionsMode.HOVER_RIGHT,
    triggerId: _cell_actions.SecurityCellActionsTrigger.ALERTS_COUNT,
    sourcererScopeId: _model.SourcererScopeName.detections,
    metadata: {
      andFilters: [{
        field: 'kibana.alert.workflow_status',
        value: 'open'
      }]
    }
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiLink, {
    "data-test-subj": "hostSeverityAlertsTable-totalAlertsLink",
    disabled: totalAlerts === 0,
    onClick: () => handleClick({
      hostName
    })
  }, /*#__PURE__*/_react.default.createElement(_formatted_number.FormattedCount, {
    count: totalAlerts
  })))
}, {
  field: 'critical',
  name: i18n.STATUS_CRITICAL_LABEL,
  render: (count, {
    hostName
  }) => /*#__PURE__*/_react.default.createElement(_eui.EuiHealth, {
    "data-test-subj": "hostSeverityAlertsTable-critical",
    color: _utils.SEVERITY_COLOR.critical
  }, count > 0 ? /*#__PURE__*/_react.default.createElement(_cell_actions.SecurityCellActions, {
    data: {
      value: hostName,
      field: 'host.name'
    },
    mode: _cell_actions.CellActionsMode.HOVER_RIGHT,
    triggerId: _cell_actions.SecurityCellActionsTrigger.ALERTS_COUNT,
    sourcererScopeId: _model.SourcererScopeName.detections,
    metadata: {
      andFilters: [{
        field: 'kibana.alert.severity',
        value: 'critical'
      }, {
        field: 'kibana.alert.workflow_status',
        value: 'open'
      }]
    }
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiLink, {
    "data-test-subj": "hostSeverityAlertsTable-criticalLink",
    onClick: () => handleClick({
      hostName,
      severity: 'critical'
    })
  }, /*#__PURE__*/_react.default.createElement(_formatted_number.FormattedCount, {
    count: count
  }))) : /*#__PURE__*/_react.default.createElement(_formatted_number.FormattedCount, {
    count: count
  }))
}, {
  field: 'high',
  name: i18n.STATUS_HIGH_LABEL,
  render: (count, {
    hostName
  }) => /*#__PURE__*/_react.default.createElement(_eui.EuiHealth, {
    "data-test-subj": "hostSeverityAlertsTable-high",
    color: _utils.SEVERITY_COLOR.high
  }, count > 0 ? /*#__PURE__*/_react.default.createElement(_cell_actions.SecurityCellActions, {
    data: {
      value: hostName,
      field: 'host.name'
    },
    mode: _cell_actions.CellActionsMode.HOVER_RIGHT,
    triggerId: _cell_actions.SecurityCellActionsTrigger.ALERTS_COUNT,
    sourcererScopeId: _model.SourcererScopeName.detections,
    metadata: {
      andFilters: [{
        field: 'kibana.alert.severity',
        value: 'high'
      }, {
        field: 'kibana.alert.workflow_status',
        value: 'open'
      }]
    }
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiLink, {
    onClick: () => handleClick({
      hostName,
      severity: 'high'
    })
  }, /*#__PURE__*/_react.default.createElement(_formatted_number.FormattedCount, {
    count: count
  }))) : /*#__PURE__*/_react.default.createElement(_formatted_number.FormattedCount, {
    count: count
  }))
}, {
  field: 'medium',
  name: i18n.STATUS_MEDIUM_LABEL,
  render: (count, {
    hostName
  }) => /*#__PURE__*/_react.default.createElement(_eui.EuiHealth, {
    "data-test-subj": "hostSeverityAlertsTable-medium",
    color: _utils.SEVERITY_COLOR.medium
  }, count > 0 ? /*#__PURE__*/_react.default.createElement(_cell_actions.SecurityCellActions, {
    data: {
      value: hostName,
      field: 'host.name'
    },
    mode: _cell_actions.CellActionsMode.HOVER_RIGHT,
    triggerId: _cell_actions.SecurityCellActionsTrigger.ALERTS_COUNT,
    sourcererScopeId: _model.SourcererScopeName.detections,
    metadata: {
      andFilters: [{
        field: 'kibana.alert.severity',
        value: 'medium'
      }, {
        field: 'kibana.alert.workflow_status',
        value: 'open'
      }]
    }
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiLink, {
    onClick: () => handleClick({
      hostName,
      severity: 'medium'
    })
  }, /*#__PURE__*/_react.default.createElement(_formatted_number.FormattedCount, {
    count: count
  }))) : /*#__PURE__*/_react.default.createElement(_formatted_number.FormattedCount, {
    count: count
  }))
}, {
  field: 'low',
  name: i18n.STATUS_LOW_LABEL,
  render: (count, {
    hostName
  }) => /*#__PURE__*/_react.default.createElement(_eui.EuiHealth, {
    "data-test-subj": "hostSeverityAlertsTable-low",
    color: _utils.SEVERITY_COLOR.low
  }, count > 0 ? /*#__PURE__*/_react.default.createElement(_cell_actions.SecurityCellActions, {
    data: {
      value: hostName,
      field: 'host.name'
    },
    mode: _cell_actions.CellActionsMode.HOVER_RIGHT,
    triggerId: _cell_actions.SecurityCellActionsTrigger.ALERTS_COUNT,
    sourcererScopeId: _model.SourcererScopeName.detections,
    metadata: {
      andFilters: [{
        field: 'kibana.alert.severity',
        value: 'low'
      }, {
        field: 'kibana.alert.workflow_status',
        value: 'open'
      }]
    }
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiLink, {
    onClick: () => handleClick({
      hostName,
      severity: 'low'
    })
  }, /*#__PURE__*/_react.default.createElement(_formatted_number.FormattedCount, {
    count: count
  }))) : /*#__PURE__*/_react.default.createElement(_formatted_number.FormattedCount, {
    count: count
  }))
}];