"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAddToExistingCase = void 0;
var _common = require("@kbn/cases-plugin/common");
var _elasticAssistant = require("@kbn/elastic-assistant");
var _react = require("react");
var _kibana = require("../../../../common/lib/kibana");
var i18n = _interopRequireWildcard(require("./translations"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const useAddToExistingCase = ({
  canUserCreateAndReadCases,
  onClick
}) => {
  const {
    cases
  } = (0, _kibana.useKibana)().services;
  const {
    alertsIndexPattern
  } = (0, _elasticAssistant.useAssistantContext)();
  const {
    open: openSelectCaseModal
  } = cases.hooks.useCasesAddToExistingCaseModal({
    onClose: onClick,
    successToaster: {
      title: i18n.ADD_TO_CASE_SUCCESS
    }
  });
  const onAddToExistingCase = (0, _react.useCallback)(({
    alertIds,
    markdownComments,
    replacements
  }) => {
    const userCommentAttachments = markdownComments.map(x => ({
      comment: x,
      type: _common.AttachmentType.user
    }));
    const alertAttachments = alertIds.map(alertId => {
      var _replacements$alertId;
      return {
        alertId: replacements != null ? (_replacements$alertId = replacements[alertId]) !== null && _replacements$alertId !== void 0 ? _replacements$alertId : alertId : alertId,
        index: alertsIndexPattern !== null && alertsIndexPattern !== void 0 ? alertsIndexPattern : '',
        rule: {
          id: null,
          name: null
        },
        type: _common.AttachmentType.alert
      };
    });
    const attachments = [...userCommentAttachments, ...alertAttachments];
    openSelectCaseModal({
      getAttachments: () => attachments
    });
  }, [alertsIndexPattern, openSelectCaseModal]);
  return {
    disabled: !canUserCreateAndReadCases(),
    onAddToExistingCase
  };
};
exports.useAddToExistingCase = useAddToExistingCase;