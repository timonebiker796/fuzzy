"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Countdown = void 0;
var _eui = require("@elastic/eui");
var _react = require("@emotion/react");
var _react2 = _interopRequireWildcard(require("react"));
var _moment = _interopRequireDefault(require("moment"));
var _kibana = require("../../../../common/lib/kibana");
var _helpers = require("./last_times_popover/helpers");
var _info_popover_body = require("../info_popover_body");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const TEXT_COLOR = '#343741';
const CountdownComponent = ({
  approximateFutureTime,
  connectorIntervals
}) => {
  // theming:
  const {
    euiTheme
  } = (0, _eui.useEuiTheme)();
  const {
    theme
  } = (0, _kibana.useKibana)().services;
  const isDarkMode = (0, _react2.useMemo)(() => theme.getTheme().darkMode === true, [theme]);

  // popover state:
  const [isPopoverOpen, setIsPopoverOpen] = (0, _react2.useState)(false);
  const closePopover = (0, _react2.useCallback)(() => setIsPopoverOpen(false), []);
  const onClick = (0, _react2.useCallback)(() => setIsPopoverOpen(true), []);

  // state for the timer prefix, and timer text:
  const [prefix, setPrefix] = (0, _react2.useState)((0, _helpers.getTimerPrefix)(approximateFutureTime));
  const [timerText, setTimerText] = (0, _react2.useState)('');
  (0, _react2.useEffect)(() => {
    // periodically update the formatted date as time passes:
    if (approximateFutureTime === null) {
      return;
    }
    const intervalId = setInterval(() => {
      setPrefix((0, _helpers.getTimerPrefix)(approximateFutureTime));
      if (approximateFutureTime !== null) {
        const now = (0, _moment.default)();
        const duration = (0, _moment.default)(approximateFutureTime).isSameOrAfter(now) ? _moment.default.duration((0, _moment.default)(approximateFutureTime).diff(now)) : _moment.default.duration(now.diff(approximateFutureTime));
        const text = _moment.default.utc(duration.asMilliseconds()).format('mm:ss');
        setTimerText(text);
      }
    }, 1000);
    return () => clearInterval(intervalId);
  }, [approximateFutureTime]);
  const iconInQuestionButton = (0, _react2.useMemo)(() => /*#__PURE__*/_react2.default.createElement(_eui.EuiButtonIcon, {
    iconType: "questionInCircle",
    onClick: onClick
  }), [onClick]);
  if (connectorIntervals.length === 0) {
    return null; // don't render anything if there's no data
  }
  return /*#__PURE__*/_react2.default.createElement(_eui.EuiFlexGroup, {
    alignItems: "center",
    "data-test-subj": "countdown",
    gutterSize: "none",
    justifyContent: "spaceBetween"
  }, /*#__PURE__*/_react2.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react2.default.createElement(_eui.EuiOutsideClickDetector, {
    isDisabled: !isPopoverOpen,
    onOutsideClick: () => closePopover()
  }, /*#__PURE__*/_react2.default.createElement(_eui.EuiPopover, {
    anchorPosition: "upCenter",
    button: iconInQuestionButton,
    closePopover: closePopover,
    "data-test-subj": "infoPopover",
    isOpen: isPopoverOpen
  }, /*#__PURE__*/_react2.default.createElement(_info_popover_body.InfoPopoverBody, {
    connectorIntervals: connectorIntervals
  })))), /*#__PURE__*/_react2.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react2.default.createElement(_eui.EuiText, {
    color: isDarkMode ? 'subdued' : TEXT_COLOR,
    css: (0, _react.css)`
            font-weight: 400;
            margin-left: ${euiTheme.size.xs};
          `,
    "data-test-subj": "prefix",
    size: "s"
  }, prefix)), /*#__PURE__*/_react2.default.createElement(_eui.EuiFlexItem, {
    css: (0, _react.css)`
          margin-left: ${euiTheme.size.s};
        `,
    "data-test-subj": "timerText",
    grow: false
  }, timerText));
};
CountdownComponent.displayName = 'Countdown';
const Countdown = exports.Countdown = /*#__PURE__*/_react2.default.memo(CountdownComponent);