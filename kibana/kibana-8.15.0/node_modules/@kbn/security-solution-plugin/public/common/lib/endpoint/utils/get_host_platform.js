"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHostPlatform = void 0;
var _get_event_details_field_values = require("./get_event_details_field_values");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const isTimelineEventDetailsItems = data => {
  return Array.isArray(data);
};

/**
 * Retrieve a host's platform type from either ECS data or Event Details list of items
 * @param data
 */
const getHostPlatform = data => {
  let platform = '';
  if (isTimelineEventDetailsItems(data)) {
    platform = (0, _get_event_details_field_values.getAlertDetailsFieldValue)({
      category: 'host',
      field: 'host.os.platform'
    }, data) || (0, _get_event_details_field_values.getAlertDetailsFieldValue)({
      category: 'host',
      field: 'host.os.type'
    }, data) || (0, _get_event_details_field_values.getAlertDetailsFieldValue)({
      category: 'host',
      field: 'host.os.name'
    }, data);
  } else {
    var _data$host, _data$host$os, _data$host2, _data$host2$os, _data$host3, _data$host3$os;
    platform = ((_data$host = data.host) === null || _data$host === void 0 ? void 0 : (_data$host$os = _data$host.os) === null || _data$host$os === void 0 ? void 0 : _data$host$os.platform) || ((_data$host2 = data.host) === null || _data$host2 === void 0 ? void 0 : (_data$host2$os = _data$host2.os) === null || _data$host2$os === void 0 ? void 0 : _data$host2$os.type) || ((_data$host3 = data.host) === null || _data$host3 === void 0 ? void 0 : (_data$host3$os = _data$host3.os) === null || _data$host3$os === void 0 ? void 0 : _data$host3$os.name) || '';
  }
  return platform.toLowerCase();
};
exports.getHostPlatform = getHostPlatform;