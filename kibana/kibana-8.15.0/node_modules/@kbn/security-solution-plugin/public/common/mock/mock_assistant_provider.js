"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MockAssistantProviderComponent = exports.MockAssistantProvider = void 0;
var _coreHttpBrowserMocks = require("@kbn/core-http-browser-mocks");
var _action_type_registry = require("@kbn/triggers-actions-ui-plugin/public/application/action_type_registry.mock");
var _react = _interopRequireDefault(require("react"));
var _elasticAssistant = require("@kbn/elastic-assistant");
var _conversations = require("../../assistant/content/conversations");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

window.scrollTo = jest.fn();
window.HTMLElement.prototype.scrollIntoView = jest.fn();

/** A utility for wrapping children in the providers required to run tests */
const MockAssistantProviderComponent = ({
  assistantAvailability,
  children
}) => {
  const actionTypeRegistry = _action_type_registry.actionTypeRegistryMock.create();
  const mockHttp = _coreHttpBrowserMocks.httpServiceMock.createStartContract({
    basePath: '/test'
  });
  const mockNavigateToApp = jest.fn();
  const defaultAssistantAvailability = {
    hasAssistantPrivilege: false,
    hasConnectorsAllPrivilege: true,
    hasConnectorsReadPrivilege: true,
    hasUpdateAIAssistantAnonymization: true,
    isAssistantEnabled: true
  };
  return /*#__PURE__*/_react.default.createElement(_elasticAssistant.AssistantProvider, {
    actionTypeRegistry: actionTypeRegistry,
    assistantAvailability: assistantAvailability !== null && assistantAvailability !== void 0 ? assistantAvailability : defaultAssistantAvailability,
    augmentMessageCodeBlocks: jest.fn(() => []),
    basePath: 'https://localhost:5601/kbn',
    docLinks: {
      ELASTIC_WEBSITE_URL: 'https://www.elastic.co/',
      DOC_LINK_VERSION: 'current'
    },
    getComments: jest.fn(() => []),
    http: mockHttp,
    navigateToApp: mockNavigateToApp,
    baseConversations: _conversations.BASE_SECURITY_CONVERSATIONS,
    currentAppId: 'test'
  }, children);
};
exports.MockAssistantProviderComponent = MockAssistantProviderComponent;
MockAssistantProviderComponent.displayName = 'MockAssistantProviderComponent';
const MockAssistantProvider = exports.MockAssistantProvider = /*#__PURE__*/_react.default.memo(MockAssistantProviderComponent);