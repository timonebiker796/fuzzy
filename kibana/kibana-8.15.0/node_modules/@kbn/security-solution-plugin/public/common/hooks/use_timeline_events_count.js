"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTimelineEventsCountPortal = exports.useEqlEventsCountPortal = exports.TimelineEventsCountBadge = exports.EqlEventsCountBadge = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactReversePortal = require("react-reverse-portal");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/**
 * A singleton portal for rendering content in the global header
 */
const timelineEventsCountPortalNodeSingleton = (0, _reactReversePortal.createHtmlPortalNode)();
const eqlEventsCountPortalNodeSingleton = (0, _reactReversePortal.createHtmlPortalNode)();
const useTimelineEventsCountPortal = () => {
  const [timelineEventsCountPortalNode] = (0, _react.useState)(timelineEventsCountPortalNodeSingleton);
  return {
    portalNode: timelineEventsCountPortalNode
  };
};
exports.useTimelineEventsCountPortal = useTimelineEventsCountPortal;
const TimelineEventsCountBadge = exports.TimelineEventsCountBadge = /*#__PURE__*/_react.default.memo(() => {
  const {
    portalNode
  } = useTimelineEventsCountPortal();
  return /*#__PURE__*/_react.default.createElement(_reactReversePortal.OutPortal, {
    node: portalNode
  });
});
TimelineEventsCountBadge.displayName = 'TimelineEventsCountBadge';
const useEqlEventsCountPortal = () => {
  const [eqlEventsCountPortalNode] = (0, _react.useState)(eqlEventsCountPortalNodeSingleton);
  return {
    portalNode: eqlEventsCountPortalNode
  };
};
exports.useEqlEventsCountPortal = useEqlEventsCountPortal;
const EqlEventsCountBadge = exports.EqlEventsCountBadge = /*#__PURE__*/_react.default.memo(() => {
  const {
    portalNode
  } = useEqlEventsCountPortal();
  return /*#__PURE__*/_react.default.createElement(_reactReversePortal.OutPortal, {
    node: portalNode
  });
});
EqlEventsCountBadge.displayName = 'EqlEventsCountBadge';