"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnomaliesUserTable = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _eui = require("@elastic/eui");
var _use_anomalies_table_data = require("../anomaly/use_anomalies_table_data");
var _header_section = require("../../header_section");
var _has_ml_user_permissions = require("../../../../../common/machine_learning/has_ml_user_permissions");
var i18n = _interopRequireWildcard(require("./translations"));
var _loader = require("../../loader");
var _use_ml_capabilities = require("../hooks/use_ml_capabilities");
var _basic_table = require("./basic_table");
var _get_criteria_from_users_type = require("../criteria/get_criteria_from_users_type");
var _panel = require("../../panel");
var _convert_anomalies_to_users = require("./convert_anomalies_to_users");
var _get_anomalies_user_table_columns = require("./get_anomalies_user_table_columns");
var _query_toggle = require("../../../containers/query_toggle");
var _job_id_filter = require("./job_id_filter");
var _select_interval = require("./select_interval");
var _use_selector = require("../../../hooks/use_selector");
var _store = require("../../../../explore/users/store");
var _use_installed_security_jobs = require("../hooks/use_installed_security_jobs");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const sorting = {
  sort: {
    field: 'anomaly.severity',
    direction: 'desc'
  }
};
const AnomaliesUserTableComponent = ({
  startDate,
  endDate,
  userName,
  skip,
  type
}) => {
  const dispatch = (0, _reactRedux.useDispatch)();
  const capabilities = (0, _use_ml_capabilities.useMlCapabilities)();
  const {
    toggleStatus,
    setToggleStatus
  } = (0, _query_toggle.useQueryToggle)(`AnomaliesUserTable`);
  const [querySkip, setQuerySkip] = (0, _react.useState)(skip || !toggleStatus);
  (0, _react.useEffect)(() => {
    setQuerySkip(skip || !toggleStatus);
  }, [skip, toggleStatus]);
  const toggleQuery = (0, _react.useCallback)(status => {
    setToggleStatus(status);
    // toggle on = skipQuery false
    setQuerySkip(!status);
  }, [setQuerySkip, setToggleStatus]);
  const {
    jobNameById,
    loading: loadingJobs
  } = (0, _use_installed_security_jobs.useInstalledSecurityJobNameById)();
  const jobIds = (0, _react.useMemo)(() => Object.keys(jobNameById), [jobNameById]);
  const getAnomaliesUserTableFilterQuerySelector = (0, _react.useMemo)(() => _store.usersSelectors.usersAnomaliesJobIdFilterSelector(), []);
  const selectedJobIds = (0, _use_selector.useDeepEqualSelector)(state => getAnomaliesUserTableFilterQuerySelector(state, type));
  const onSelectJobId = (0, _react.useCallback)(newSelection => {
    dispatch(_store.usersActions.updateUsersAnomaliesJobIdFilter({
      jobIds: newSelection,
      usersType: type
    }));
  }, [dispatch, type]);
  const getAnomaliesUserTableIntervalQuerySelector = (0, _react.useMemo)(() => _store.usersSelectors.usersAnomaliesIntervalSelector(), []);
  const selectedInterval = (0, _use_selector.useDeepEqualSelector)(state => getAnomaliesUserTableIntervalQuerySelector(state, type));
  const onSelectInterval = (0, _react.useCallback)(newInterval => {
    dispatch(_store.usersActions.updateUsersAnomaliesInterval({
      interval: newInterval,
      usersType: type
    }));
  }, [dispatch, type]);
  const [loadingTable, tableData] = (0, _use_anomalies_table_data.useAnomaliesTableData)({
    startDate,
    endDate,
    skip: querySkip,
    criteriaFields: (0, _get_criteria_from_users_type.getCriteriaFromUsersType)(type, userName),
    filterQuery: {
      exists: {
        field: 'user.name'
      }
    },
    jobIds: selectedJobIds.length > 0 ? selectedJobIds : jobIds,
    aggregationInterval: selectedInterval
  });
  const users = (0, _convert_anomalies_to_users.convertAnomaliesToUsers)(tableData, jobNameById, userName);
  const columns = (0, _get_anomalies_user_table_columns.getAnomaliesUserTableColumnsCurated)(type, startDate, endDate);
  const pagination = {
    initialPageIndex: 0,
    initialPageSize: 10,
    totalItemCount: users.length,
    pageSizeOptions: [5, 10, 20, 50],
    showPerPageOptions: true
  };
  if (!(0, _has_ml_user_permissions.hasMlUserPermissions)(capabilities)) {
    return null;
  } else {
    return /*#__PURE__*/_react.default.createElement(_panel.Panel, {
      loading: loadingTable || loadingJobs,
      "data-test-subj": "user-anomalies-tab"
    }, /*#__PURE__*/_react.default.createElement(_header_section.HeaderSection, {
      subtitle: `${i18n.SHOWING}: ${pagination.totalItemCount.toLocaleString()} ${i18n.UNIT(pagination.totalItemCount)}`,
      title: i18n.ANOMALIES,
      toggleQuery: toggleQuery,
      toggleStatus: toggleStatus,
      tooltip: i18n.TOOLTIP,
      isInspectDisabled: skip,
      headerFilters: /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_select_interval.SelectInterval, {
        interval: selectedInterval,
        onChange: onSelectInterval
      })), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
        grow: false
      }, /*#__PURE__*/_react.default.createElement(_job_id_filter.JobIdFilter, {
        title: i18n.JOB_ID,
        onSelect: onSelectJobId,
        selectedJobIds: selectedJobIds,
        jobIds: jobIds,
        jobNameById: jobNameById
      })))
    }), toggleStatus && /*#__PURE__*/_react.default.createElement(_basic_table.BasicTable, {
      "data-test-subj": "user-anomalies-table"
      // @ts-expect-error the Columns<T, U> type is not as specific as EUI's...
      ,
      columns: columns,
      items: users,
      pagination: pagination,
      sorting: sorting
    }), (loadingTable || loadingJobs) && /*#__PURE__*/_react.default.createElement(_loader.Loader, {
      "data-test-subj": "anomalies-user-table-loading-panel",
      overlay: true,
      size: "xl"
    }));
  }
};
const AnomaliesUserTable = exports.AnomaliesUserTable = /*#__PURE__*/_react.default.memo(AnomaliesUserTableComponent);