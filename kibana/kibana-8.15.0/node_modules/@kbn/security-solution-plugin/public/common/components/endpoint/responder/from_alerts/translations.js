"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NOT_FROM_ENDPOINT_HOST_TOOLTIP = exports.METADATA_API_ERROR_TOOLTIP = exports.LOADING_ENDPOINT_DATA_TOOLTIP = exports.HOST_ENDPOINT_UNENROLLED_TOOLTIP = void 0;
var _i18n = require("@kbn/i18n");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const NOT_FROM_ENDPOINT_HOST_TOOLTIP = exports.NOT_FROM_ENDPOINT_HOST_TOOLTIP = _i18n.i18n.translate('xpack.securitySolution.endpoint.detections.takeAction.responseActionConsole.notSupportedTooltip', {
  defaultMessage: 'Add the Elastic Defend integration via Elastic Agent to enable this feature'
});
const HOST_ENDPOINT_UNENROLLED_TOOLTIP = exports.HOST_ENDPOINT_UNENROLLED_TOOLTIP = _i18n.i18n.translate('xpack.securitySolution.endpoint.detections.takeAction.responseActionConsole.unenrolledTooltip', {
  defaultMessage: 'Host is no longer enrolled with the Elastic Defend integration'
});
const LOADING_ENDPOINT_DATA_TOOLTIP = exports.LOADING_ENDPOINT_DATA_TOOLTIP = _i18n.i18n.translate('xpack.securitySolution.endpoint.detections.takeAction.responseActionConsole.loadingTooltip', {
  defaultMessage: 'Loading'
});
const METADATA_API_ERROR_TOOLTIP = exports.METADATA_API_ERROR_TOOLTIP = _i18n.i18n.translate('xpack.securitySolution.endpoint.detections.takeAction.responseActionConsole.generalMetadataErrorTooltip', {
  defaultMessage: 'Failed to retrieve Endpoint metadata'
});