"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.manageQuery = manageQuery;
exports.useQueryInspector = void 0;
var _fp = require("lodash/fp");
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function manageQuery(WrappedComponent) {
  var _WrappedComponent$dis;
  const ManageQuery = props => {
    const {
      deleteQuery,
      id,
      inspect = null,
      loading,
      refetch,
      setQuery
    } = props;
    useQueryInspector({
      deleteQuery,
      inspect,
      loading,
      queryId: id,
      refetch,
      setQuery
    });
    const otherProps = (0, _fp.omit)(['refetch', 'setQuery'], props);
    // @ts-expect-error upgrade typescript v4.9.5
    return /*#__PURE__*/_react.default.createElement(WrappedComponent, otherProps);
  };
  ManageQuery.displayName = `ManageQuery (${(_WrappedComponent$dis = WrappedComponent === null || WrappedComponent === void 0 ? void 0 : WrappedComponent.displayName) !== null && _WrappedComponent$dis !== void 0 ? _WrappedComponent$dis : 'Unknown'})`;
  return ManageQuery;
}
const useQueryInspector = ({
  setQuery,
  deleteQuery,
  refetch,
  inspect,
  loading,
  queryId
}) => {
  (0, _react.useEffect)(() => {
    setQuery({
      id: queryId,
      inspect: inspect !== null && inspect !== void 0 ? inspect : null,
      loading,
      refetch
    });
  }, [deleteQuery, setQuery, queryId, refetch, inspect, loading]);
  (0, _react.useEffect)(() => {
    return () => {
      if (deleteQuery) {
        deleteQuery({
          id: queryId
        });
      }
    };
  }, [deleteQuery, queryId]);
};
exports.useQueryInspector = useQueryInspector;