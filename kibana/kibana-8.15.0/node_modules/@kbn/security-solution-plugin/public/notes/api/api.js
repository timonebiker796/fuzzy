"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchNotesByDocumentIds = exports.fetchNotes = exports.deleteNotes = exports.createNote = void 0;
var _kibana = require("../../common/lib/kibana");
var _constants = require("../../../common/constants");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/**
 * Adds a new note.
 * This code is very close to the persistNote found in x-pack/plugins/security_solution/public/timelines/containers/notes/api.ts.
 * // TODO remove the old method when the transition to the new notes system is complete
 */
const createNote = async ({
  note
}) => {
  try {
    const response = await _kibana.KibanaServices.get().http.patch(_constants.NOTE_URL, {
      method: 'PATCH',
      body: JSON.stringify({
        note
      }),
      version: '2023-10-31'
    });
    return response.data.persistNote.note;
  } catch (err) {
    throw new Error(`Failed to stringify query: ${JSON.stringify(err)}`);
  }
};
exports.createNote = createNote;
const fetchNotes = async ({
  page,
  perPage,
  sortField,
  sortOrder,
  filter,
  search
}) => {
  const response = await _kibana.KibanaServices.get().http.get(_constants.NOTE_URL, {
    query: {
      page,
      perPage,
      sortField,
      sortOrder,
      filter,
      search
    },
    version: '2023-10-31'
  });
  return response;
};

/**
 * Fetches all the notes for an array of document ids
 */
exports.fetchNotes = fetchNotes;
const fetchNotesByDocumentIds = async documentIds => {
  const response = await _kibana.KibanaServices.get().http.get(_constants.NOTE_URL, {
    query: {
      documentIds
    },
    version: '2023-10-31'
  });
  return response;
};

/**
 * Deletes multiple notes
 */
exports.fetchNotesByDocumentIds = fetchNotesByDocumentIds;
const deleteNotes = async noteIds => {
  const response = await _kibana.KibanaServices.get().http.delete(_constants.NOTE_URL, {
    body: JSON.stringify({
      noteIds
    }),
    version: '2023-10-31'
  });
  return response;
};
exports.deleteNotes = deleteNotes;