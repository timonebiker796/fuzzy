"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoteManagementPage = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _reactRedux = require("react-redux");
var _formatted_date = require("../../common/components/formatted_date");
var _ = require("..");
var _search_row = require("../components/search_row");
var _utility_bar = require("../components/utility_bar");
var _delete_confirm_modal = require("../components/delete_confirm_modal");
var i18n = _interopRequireWildcard(require("../components/translations"));
var _open_event_in_timeline = require("../components/open_event_in_timeline");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

// TODO unify this type from the api with the one in public/common/lib/note

const columns = onOpenTimeline => {
  return [{
    field: 'created',
    name: i18n.CREATED_COLUMN,
    sortable: true,
    render: created => /*#__PURE__*/_react.default.createElement(_formatted_date.FormattedRelativePreferenceDate, {
      value: created
    })
  }, {
    field: 'createdBy',
    name: i18n.CREATED_BY_COLUMN
  }, {
    field: 'eventId',
    name: i18n.EVENT_ID_COLUMN,
    sortable: true,
    render: eventId => /*#__PURE__*/_react.default.createElement(_open_event_in_timeline.OpenEventInTimeline, {
      eventId: eventId
    })
  }, {
    field: 'timelineId',
    name: i18n.TIMELINE_ID_COLUMN,
    render: timelineId => timelineId ? /*#__PURE__*/_react.default.createElement(_eui.EuiLink, {
      onClick: () => onOpenTimeline({
        timelineId,
        duplicate: false
      })
    }, i18n.OPEN_TIMELINE) : null
  }, {
    field: 'note',
    name: i18n.NOTE_CONTENT_COLUMN
  }];
};
const pageSizeOptions = [10, 25, 50, 100];

/**
 * Allows user to search and delete notes.
 * This component uses the same slices of state as the notes functionality of the rest of the Security Solution applicaiton.
 * Therefore, changes made in this page (like fetching or deleting notes) will have an impact everywhere.
 */
const NoteManagementPage = ({
  onOpenTimeline
}) => {
  const dispatch = (0, _reactRedux.useDispatch)();
  const notes = (0, _reactRedux.useSelector)(_.selectAllNotes);
  const pagination = (0, _reactRedux.useSelector)(_.selectNotesPagination);
  const sort = (0, _reactRedux.useSelector)(_.selectNotesTableSort);
  const notesSearch = (0, _reactRedux.useSelector)(_.selectNotesTableSearch);
  const pendingDeleteIds = (0, _reactRedux.useSelector)(_.selectNotesTablePendingDeleteIds);
  const isDeleteModalVisible = pendingDeleteIds.length > 0;
  const fetchNotesStatus = (0, _reactRedux.useSelector)(_.selectFetchNotesStatus);
  const fetchLoading = fetchNotesStatus === _.ReqStatus.Loading;
  const fetchError = fetchNotesStatus === _.ReqStatus.Failed;
  const fetchErrorData = (0, _reactRedux.useSelector)(_.selectFetchNotesError);
  const fetchData = (0, _react.useCallback)(() => {
    dispatch((0, _.fetchNotes)({
      page: pagination.page,
      perPage: pagination.perPage,
      sortField: sort.field,
      sortOrder: sort.direction,
      filter: '',
      search: notesSearch
    }));
  }, [dispatch, pagination.page, pagination.perPage, sort.field, sort.direction, notesSearch]);
  (0, _react.useEffect)(() => {
    fetchData();
  }, [fetchData]);
  const onTableChange = (0, _react.useCallback)(({
    page,
    sort: newSort
  }) => {
    if (page) {
      dispatch((0, _.userSelectedPage)(page.index + 1));
      dispatch((0, _.userSelectedPerPage)(page.size));
    }
    if (newSort) {
      dispatch((0, _.userSortedNotes)({
        field: newSort.field,
        direction: newSort.direction
      }));
    }
  }, [dispatch]);
  const selectRowForDeletion = (0, _react.useCallback)(id => {
    dispatch((0, _.userSelectedRowForDeletion)(id));
  }, [dispatch]);
  const onSelectionChange = (0, _react.useCallback)(selection => {
    const rowIds = selection.map(item => item.noteId);
    dispatch((0, _.userSelectedRow)(rowIds));
  }, [dispatch]);
  const itemIdSelector = (0, _react.useCallback)(item => {
    return item.noteId;
  }, []);
  const columnWithActions = (0, _react.useMemo)(() => {
    const actions = [{
      name: i18n.DELETE,
      description: i18n.DELETE_SINGLE_NOTE_DESCRIPTION,
      color: 'primary',
      icon: 'trash',
      type: 'icon',
      onClick: note => selectRowForDeletion(note.noteId)
    }];
    return [...columns(onOpenTimeline), {
      name: 'actions',
      actions
    }];
  }, [selectRowForDeletion, onOpenTimeline]);
  const currentPagination = (0, _react.useMemo)(() => {
    return {
      pageIndex: pagination.page - 1,
      pageSize: pagination.perPage,
      totalItemCount: pagination.total,
      pageSizeOptions
    };
  }, [pagination]);
  const selection = (0, _react.useMemo)(() => {
    return {
      onSelectionChange,
      selectable: () => true
    };
  }, [onSelectionChange]);
  const sorting = (0, _react.useMemo)(() => {
    return {
      sort
    };
  }, [sort]);
  if (fetchError) {
    return /*#__PURE__*/_react.default.createElement(_eui.EuiEmptyPrompt, {
      iconType: "error",
      color: "danger",
      title: /*#__PURE__*/_react.default.createElement("h2", null, i18n.TABLE_ERROR),
      body: /*#__PURE__*/_react.default.createElement("p", null, fetchErrorData)
    });
  }
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_search_row.SearchRow, null), /*#__PURE__*/_react.default.createElement(_utility_bar.NotesUtilityBar, null), /*#__PURE__*/_react.default.createElement(_eui.EuiBasicTable, {
    items: notes,
    pagination: currentPagination,
    columns: columnWithActions,
    onChange: onTableChange,
    selection: selection,
    sorting: sorting,
    itemId: itemIdSelector,
    loading: fetchLoading
  }), isDeleteModalVisible && /*#__PURE__*/_react.default.createElement(_delete_confirm_modal.DeleteConfirmModal, null));
};
exports.NoteManagementPage = NoteManagementPage;
NoteManagementPage.displayName = 'NoteManagementPage';