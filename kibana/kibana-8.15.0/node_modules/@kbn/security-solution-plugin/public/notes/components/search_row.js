"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SearchRow = void 0;
var _eui = require("@elastic/eui");
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _ = require("..");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const SearchRowContainer = _styledComponents.default.div`
  &:not(:last-child) {
    margin-bottom: ${props => props.theme.eui.euiSizeL};
  }
`;
SearchRowContainer.displayName = 'SearchRowContainer';
const SearchRowFlexGroup = (0, _styledComponents.default)(_eui.EuiFlexGroup)`
  margin-bottom: ${props => props.theme.eui.euiSizeXS};
`;
SearchRowFlexGroup.displayName = 'SearchRowFlexGroup';
const SearchRow = exports.SearchRow = /*#__PURE__*/_react.default.memo(() => {
  const dispatch = (0, _reactRedux.useDispatch)();
  const searchBox = (0, _react.useMemo)(() => ({
    placeholder: 'Search note contents',
    incremental: false,
    'data-test-subj': 'notes-search-bar'
  }), []);
  const onQueryChange = (0, _react.useCallback)(({
    queryText
  }) => {
    dispatch((0, _.userSearchedNotes)(queryText.trim()));
  }, [dispatch]);
  return /*#__PURE__*/_react.default.createElement(SearchRowContainer, null, /*#__PURE__*/_react.default.createElement(SearchRowFlexGroup, {
    gutterSize: "s"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSearchBar, {
    box: searchBox,
    onChange: onQueryChange,
    defaultQuery: ""
  }))));
});
SearchRow.displayName = 'SearchRow';