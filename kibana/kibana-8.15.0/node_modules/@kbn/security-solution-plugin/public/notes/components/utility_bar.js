"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NotesUtilityBar = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _eui = require("@elastic/eui");
var _utility_bar = require("../../common/components/utility_bar");
var _ = require("..");
var i18n = _interopRequireWildcard(require("./translations"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const NotesUtilityBar = exports.NotesUtilityBar = /*#__PURE__*/_react.default.memo(() => {
  const dispatch = (0, _reactRedux.useDispatch)();
  const pagination = (0, _reactRedux.useSelector)(_.selectNotesPagination);
  const sort = (0, _reactRedux.useSelector)(_.selectNotesTableSort);
  const selectedItems = (0, _reactRedux.useSelector)(_.selectNotesTableSelectedIds);
  const resultsCount = (0, _react.useMemo)(() => {
    const {
      perPage,
      page,
      total
    } = pagination;
    const startOfCurrentPage = perPage * (page - 1) + 1;
    const endOfCurrentPage = Math.min(perPage * page, total);
    return perPage === 0 ? 'All' : `${startOfCurrentPage}-${endOfCurrentPage} of ${total}`;
  }, [pagination]);
  const deleteSelectedNotes = (0, _react.useCallback)(() => {
    dispatch((0, _.userSelectedBulkDelete)());
  }, [dispatch]);
  const notesSearch = (0, _reactRedux.useSelector)(_.selectNotesTableSearch);
  const BulkActionPopoverContent = (0, _react.useCallback)(() => {
    return /*#__PURE__*/_react.default.createElement(_eui.EuiContextMenuItem, {
      "data-test-subj": "notes-management-delete-notes",
      onClick: deleteSelectedNotes,
      disabled: selectedItems.length === 0,
      icon: "trash",
      key: "DeleteItemKey"
    }, i18n.DELETE_SELECTED);
  }, [deleteSelectedNotes, selectedItems.length]);
  const refresh = (0, _react.useCallback)(() => {
    dispatch((0, _.fetchNotes)({
      page: pagination.page,
      perPage: pagination.perPage,
      sortField: sort.field,
      sortOrder: sort.direction,
      filter: '',
      search: notesSearch
    }));
  }, [dispatch, pagination.page, pagination.perPage, sort.field, sort.direction, notesSearch]);
  return /*#__PURE__*/_react.default.createElement(_utility_bar.UtilityBar, {
    border: true
  }, /*#__PURE__*/_react.default.createElement(_utility_bar.UtilityBarSection, null, /*#__PURE__*/_react.default.createElement(_utility_bar.UtilityBarGroup, null, /*#__PURE__*/_react.default.createElement(_utility_bar.UtilityBarText, {
    "data-test-subj": "notes-management-pagination-count"
  }, `Showing: ${resultsCount}`)), /*#__PURE__*/_react.default.createElement(_utility_bar.UtilityBarGroup, null, /*#__PURE__*/_react.default.createElement(_utility_bar.UtilityBarText, {
    "data-test-subj": "notes-management-selected-count"
  }, selectedItems.length > 0 ? `${selectedItems.length} selected` : ''), /*#__PURE__*/_react.default.createElement(_utility_bar.UtilityBarAction, {
    dataTestSubj: "notes-management-utility-bar-actions",
    iconSide: "right",
    iconType: "arrowDown",
    popoverContent: BulkActionPopoverContent
  }, /*#__PURE__*/_react.default.createElement("span", {
    "data-test-subj": "notes-management-utility-bar-action-button"
  }, i18n.BATCH_ACTIONS)), /*#__PURE__*/_react.default.createElement(_utility_bar.UtilityBarAction, {
    dataTestSubj: "notes-management-utility-bar-refresh-button",
    iconSide: "right",
    iconType: "refresh",
    onClick: refresh
  }, i18n.REFRESH))));
});
NotesUtilityBar.displayName = 'NotesUtilityBar';