"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Cases = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _common = require("@kbn/cases-plugin/common");
var _expandableFlyout = require("@kbn/expandable-flyout");
var _endpoint = require("../../common/components/endpoint");
var _use_experimental_features = require("../../common/hooks/use_experimental_features");
var _panel_keys = require("../../flyout/document_details/shared/constants/panel_keys");
var _guided_onboarding_tour = require("../../common/components/guided_onboarding_tour");
var _tour_config = require("../../common/components/guided_onboarding_tour/tour_config");
var _timeline = require("../../../common/types/timeline");
var _link_to = require("../../common/components/link_to");
var _kibana = require("../../common/lib/kibana");
var _constants = require("../../../common/constants");
var _store = require("../../timelines/store");
var _containers = require("../../sourcerer/containers");
var _model = require("../../sourcerer/store/model");
var _page_wrapper = require("../../common/components/page_wrapper");
var _routing = require("../../management/common/routing");
var _spy_routes = require("../../common/utils/route/spy_routes");
var _use_insert_timeline = require("../components/use_insert_timeline");
var timelineMarkdownPlugin = _interopRequireWildcard(require("../../common/components/markdown_editor/plugins/timeline"));
var _side_panel = require("../../timelines/components/side_panel");
var _use_fetch_alert_data = require("./use_fetch_alert_data");
var _use_upselling = require("../../common/hooks/use_upselling");
var _use_fetch_notes = require("../../notes/hooks/use_fetch_notes");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const TimelineDetailsPanel = () => {
  const {
    browserFields,
    runtimeMappings
  } = (0, _containers.useSourcererDataView)(_model.SourcererScopeName.detections);
  return /*#__PURE__*/_react.default.createElement(_side_panel.DetailsPanel, {
    browserFields: browserFields,
    entityType: "events",
    isFlyoutView: true,
    runtimeMappings: runtimeMappings,
    scopeId: _timeline.TimelineId.casePage
  });
};
const CaseContainerComponent = () => {
  const {
    cases,
    telemetry
  } = (0, _kibana.useKibana)().services;
  const {
    getAppUrl,
    navigateTo
  } = (0, _kibana.useNavigation)();
  const userCasesPermissions = cases.helpers.canUseCases([_constants.APP_ID]);
  const dispatch = (0, _reactRedux.useDispatch)();
  const {
    formatUrl: detectionsFormatUrl,
    search: detectionsUrlSearch
  } = (0, _link_to.useFormatUrl)(_constants.SecurityPageName.rules);
  const {
    openFlyout
  } = (0, _expandableFlyout.useExpandableFlyoutApi)();
  const expandableFlyoutDisabled = (0, _use_experimental_features.useIsExperimentalFeatureEnabled)('expandableFlyoutDisabled');
  const getDetectionsRuleDetailsHref = (0, _react.useCallback)(ruleId => detectionsFormatUrl((0, _link_to.getRuleDetailsUrl)(ruleId !== null && ruleId !== void 0 ? ruleId : '', detectionsUrlSearch)), [detectionsFormatUrl, detectionsUrlSearch]);
  const interactionsUpsellingMessage = (0, _use_upselling.useUpsellingMessage)('investigation_guide_interactions');
  const showAlertDetails = (0, _react.useCallback)((alertId, index) => {
    if (!expandableFlyoutDisabled) {
      openFlyout({
        right: {
          id: _panel_keys.DocumentDetailsRightPanelKey,
          params: {
            id: alertId,
            indexName: index,
            scopeId: _timeline.TimelineId.casePage
          }
        }
      });
      telemetry.reportDetailsFlyoutOpened({
        location: _timeline.TimelineId.casePage,
        panel: 'right'
      });
    }
    // TODO remove when https://github.com/elastic/security-team/issues/7462 is merged
    // support of old flyout in cases page
    else {
      dispatch(_store.timelineActions.toggleDetailPanel({
        panelView: 'eventDetail',
        id: _timeline.TimelineId.casePage,
        params: {
          eventId: alertId,
          indexName: index
        }
      }));
    }
  }, [dispatch, expandableFlyoutDisabled, openFlyout, telemetry]);
  const {
    onLoad: onAlertsTableLoaded
  } = (0, _use_fetch_notes.useFetchNotes)();
  const endpointDetailsHref = endpointId => getAppUrl({
    path: (0, _routing.getEndpointDetailsPath)({
      name: 'endpointActivityLog',
      selected_endpoint: endpointId
    })
  });
  const refreshRef = (0, _react.useRef)(null);
  const {
    activeStep,
    endTourStep,
    isTourShown
  } = (0, _guided_onboarding_tour.useTourContext)();
  const isTourActive = (0, _react.useMemo)(() => activeStep === _tour_config.AlertsCasesTourSteps.viewCase && isTourShown(_tour_config.SecurityStepId.alertsCases), [activeStep, isTourShown]);
  (0, _react.useEffect)(() => {
    if (isTourActive) endTourStep(_tour_config.SecurityStepId.alertsCases);
  }, [endTourStep, isTourActive]);
  (0, _react.useEffect)(() => {
    dispatch(_store.timelineActions.createTimeline({
      id: _timeline.TimelineId.casePage,
      columns: [],
      dataViewId: null,
      indexNames: [],
      expandedDetail: {},
      show: false
    }));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return /*#__PURE__*/_react.default.createElement(_page_wrapper.SecuritySolutionPageWrapper, {
    noPadding: true
  }, /*#__PURE__*/_react.default.createElement(_endpoint.CaseDetailsRefreshContext.Provider, {
    value: refreshRef
  }, cases.ui.getCases({
    basePath: _constants.CASES_PATH,
    owner: [_constants.APP_ID],
    features: {
      metrics: [_common.CaseMetricsFeature.ALERTS_COUNT, _common.CaseMetricsFeature.ALERTS_USERS, _common.CaseMetricsFeature.ALERTS_HOSTS, _common.CaseMetricsFeature.CONNECTORS, _common.CaseMetricsFeature.LIFESPAN],
      alerts: {
        isExperimental: false
      }
    },
    refreshRef,
    actionsNavigation: {
      href: endpointDetailsHref,
      onClick: (endpointId, e) => {
        if (e) {
          e.preventDefault();
        }
        return navigateTo({
          path: (0, _routing.getEndpointDetailsPath)({
            name: 'endpointActivityLog',
            selected_endpoint: endpointId
          })
        });
      }
    },
    ruleDetailsNavigation: {
      href: getDetectionsRuleDetailsHref,
      onClick: async (ruleId, e) => {
        if (e) {
          e.preventDefault();
        }
        return navigateTo({
          deepLinkId: _constants.SecurityPageName.rules,
          path: (0, _link_to.getRuleDetailsUrl)(ruleId !== null && ruleId !== void 0 ? ruleId : '')
        });
      }
    },
    showAlertDetails,
    timelineIntegration: {
      editor_plugins: {
        parsingPlugin: timelineMarkdownPlugin.parser,
        processingPluginRenderer: timelineMarkdownPlugin.renderer,
        uiPlugin: timelineMarkdownPlugin.plugin({
          interactionsUpsellingMessage
        })
      },
      hooks: {
        useInsertTimeline: _use_insert_timeline.useInsertTimeline
      },
      ui: {
        renderTimelineDetailsPanel: TimelineDetailsPanel
      }
    },
    useFetchAlertData: _use_fetch_alert_data.useFetchAlertData,
    onAlertsTableLoaded,
    permissions: userCasesPermissions
  })), /*#__PURE__*/_react.default.createElement(_spy_routes.SpyRoute, {
    pageName: _constants.SecurityPageName.case
  }));
};
const Cases = exports.Cases = /*#__PURE__*/_react.default.memo(CaseContainerComponent);