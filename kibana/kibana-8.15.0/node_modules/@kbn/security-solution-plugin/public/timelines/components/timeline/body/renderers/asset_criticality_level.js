"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AssetCriticalityLevel = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _fp = require("lodash/fp");
var _asset_criticality = require("../../../../../entity_analytics/components/asset_criticality");
var _draggables = require("../../../../../common/components/draggables");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const AssetCriticalityLevelComponent = ({
  contextId,
  eventId,
  fieldName,
  fieldType,
  isAggregatable,
  isDraggable,
  value
}) => {
  const color = (0, _fp.isString)(value) ? _asset_criticality.CRITICALITY_LEVEL_COLOR[value] : 'normal';
  const stringValue = (0, _fp.isString)(value) ? value : '';
  const badge = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement(_eui.EuiBadge, {
    color: color,
    "data-test-subj": "AssetCriticalityLevel-score-badge"
  }, (0, _fp.startCase)(stringValue)), [color, stringValue]);
  return isDraggable ? /*#__PURE__*/_react.default.createElement(_draggables.DefaultDraggable, {
    field: fieldName,
    id: `alert-details-value-default-draggable-${contextId}-${eventId}-${fieldName}-${value}`,
    fieldType: fieldType,
    isAggregatable: isAggregatable,
    isDraggable: isDraggable,
    value: `${value}`,
    tooltipContent: fieldName
  }, badge) : badge;
};
const AssetCriticalityLevel = exports.AssetCriticalityLevel = /*#__PURE__*/_react.default.memo(AssetCriticalityLevelComponent);
AssetCriticalityLevel.displayName = 'AssetCriticalityLevel';