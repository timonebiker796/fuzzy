"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RegistryEventDetailsLine = void 0;
var _eui = require("@elastic/eui");
var _react = _interopRequireWildcard(require("react"));
var _draggables = require("../../../../../../common/components/draggables");
var _helpers = require("../helpers");
var _process_draggable = require("../process_draggable");
var _user_host_working_dir = require("../user_host_working_dir");
var i18n = _interopRequireWildcard(require("./translations"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const RegistryEventDetailsLineComponent = ({
  contextId,
  hostName,
  id,
  isDraggable,
  processName,
  processPid,
  registryKey,
  registryPath,
  text,
  userDomain,
  userName
}) => {
  const registryKeyTooltipContent = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", null, 'registry.key'), /*#__PURE__*/_react.default.createElement("div", null, registryKey)), [registryKey]);
  const registryPathTooltipContent = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", null, 'registry.path'), /*#__PURE__*/_react.default.createElement("div", null, registryPath)), [registryPath]);
  if ((0, _helpers.isNillEmptyOrNotFinite)(registryKey)) {
    return null;
  }
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    alignItems: "center",
    justifyContent: "center",
    gutterSize: "none",
    wrap: true
  }, /*#__PURE__*/_react.default.createElement(_user_host_working_dir.UserHostWorkingDir, {
    contextId: contextId,
    eventId: id,
    hostName: hostName,
    isDraggable: isDraggable,
    userDomain: userDomain,
    userName: userName,
    workingDirectory: undefined
  }), !(0, _helpers.isNillEmptyOrNotFinite)(registryKey) && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_helpers.TokensFlexItem, {
    component: "span",
    "data-test-subj": "text",
    grow: false
  }, text), /*#__PURE__*/_react.default.createElement(_helpers.TokensFlexItem, {
    component: "span",
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_draggables.DraggableBadge, {
    contextId: contextId,
    eventId: id,
    field: "registry.key",
    isDraggable: isDraggable,
    tooltipContent: registryKeyTooltipContent,
    value: registryKey,
    isAggregatable: true,
    fieldType: "keyword"
  }))), !(0, _helpers.isNillEmptyOrNotFinite)(registryPath) && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_helpers.TokensFlexItem, {
    component: "span",
    "data-test-subj": "with-new-value",
    grow: false
  }, i18n.WITH_NEW_VALUE), /*#__PURE__*/_react.default.createElement(_helpers.TokensFlexItem, {
    component: "span",
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_draggables.DraggableBadge, {
    contextId: contextId,
    eventId: id,
    field: "registry.path",
    isDraggable: isDraggable,
    tooltipContent: registryPathTooltipContent,
    value: registryPath,
    isAggregatable: true,
    fieldType: "keyword"
  }))), /*#__PURE__*/_react.default.createElement(_helpers.TokensFlexItem, {
    component: "span",
    grow: false
  }, i18n.VIA), /*#__PURE__*/_react.default.createElement(_helpers.TokensFlexItem, {
    component: "span",
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_process_draggable.ProcessDraggableWithNonExistentProcess, {
    contextId: contextId,
    endgamePid: undefined,
    endgameProcessName: undefined,
    eventId: id,
    isDraggable: isDraggable,
    processPid: processPid,
    processName: processName,
    processExecutable: undefined
  }))));
};
const RegistryEventDetailsLine = exports.RegistryEventDetailsLine = /*#__PURE__*/_react.default.memo(RegistryEventDetailsLineComponent);