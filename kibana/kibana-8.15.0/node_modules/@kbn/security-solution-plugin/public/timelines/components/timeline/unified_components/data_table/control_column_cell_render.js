"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimelineControlColumnCellRender = void 0;
var _react = _interopRequireWildcard(require("react"));
var _helpers = require("../../body/helpers");
var _header_actions = require("../../../../../common/components/header_actions");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const noOp = () => {};
const TimelineControlColumnCellRender = exports.TimelineControlColumnCellRender = /*#__PURE__*/(0, _react.memo)(function TimelineControlColumnCellRender(props) {
  const {
    rowIndex,
    pinnedEventIds
  } = props;
  const isPinned = (0, _react.useMemo)(() => (0, _helpers.eventIsPinned)({
    eventId: props.eventId,
    pinnedEventIds
  }), [props.eventId, pinnedEventIds]);
  return /*#__PURE__*/_react.default.createElement(_header_actions.Actions, {
    action: props.action,
    columnId: props.columnId,
    columnValues: "columnValues",
    data: props.data,
    ecsData: props.ecsData,
    eventId: props.eventId,
    eventIdToNoteIds: props.eventIdToNoteIds,
    index: rowIndex,
    isEventPinned: isPinned,
    isEventViewer: false,
    refetch: props.refetch,
    rowIndex: rowIndex,
    setEventsDeleted: noOp,
    setEventsLoading: noOp,
    onEventDetailsPanelOpened: noOp,
    onRowSelected: noOp,
    onRuleChange: noOp,
    showCheckboxes: false,
    showNotes: true,
    timelineId: props.timelineId,
    ariaRowindex: rowIndex,
    checked: false,
    loadingEventIds: props.loadingEventIds,
    toggleShowNotes: props.toggleShowNotes,
    disableExpandAction: true,
    disablePinAction: false
  });
});