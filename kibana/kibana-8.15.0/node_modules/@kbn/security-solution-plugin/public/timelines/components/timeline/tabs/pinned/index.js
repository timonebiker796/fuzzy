"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PinnedTabContentComponent = void 0;
var _fp = require("lodash/fp");
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _reactRedux = require("react-redux");
var _fastDeepEqual = _interopRequireDefault(require("fast-deep-equal"));
var _unifiedDataTable = require("@kbn/unified-data-table");
var _expandableFlyout = require("@kbn/expandable-flyout");
var _panel_keys = require("../../../../../flyout/document_details/shared/constants/panel_keys");
var _kibana = require("../../../../../common/lib/kibana");
var _store = require("../../../../store");
var _containers = require("../../../../containers");
var _default_headers = require("../../body/column_headers/default_headers");
var _body = require("../../body");
var _footer = require("../../footer");
var _default_config = require("../../../../../detections/components/alerts_table/default_config");
var _event_details_width_context = require("../../../../../common/components/events_viewer/event_details_width_context");
var _model = require("../../../../../sourcerer/store/model");
var _defaults = require("../../../../store/defaults");
var _use_experimental_features = require("../../../../../common/hooks/use_experimental_features");
var _containers2 = require("../../../../../sourcerer/containers");
var _use_full_screen = require("../../../../../common/containers/use_full_screen");
var _helpers = require("../../helpers");
var _timeline = require("../../../../../../common/types/timeline");
var _side_panel = require("../../../side_panel");
var _exit_full_screen = require("../../../../../common/components/exit_full_screen");
var _unified_timeline_body = require("../../body/unified_timeline_body");
var _layout = require("../shared/layout");
var _use_timeline_columns = require("../shared/use_timeline_columns");
var _use_timeline_control_columns = require("../shared/use_timeline_control_columns");
var _left = require("../../../../../flyout/document_details/left");
var _use_notes_in_flyout = require("../../properties/use_notes_in_flyout");
var _notes_flyout = require("../../properties/notes_flyout");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const ExitFullScreenContainer = _styledComponents.default.div`
  width: 180px;
`;
const trailingControlColumns = []; // stable reference

const rowDetailColumn = [{
  id: 'row-details',
  columnHeaderType: 'not-filtered',
  width: 0,
  headerCellRender: () => null,
  rowCellRender: () => null
}];
const PinnedTabContentComponent = ({
  columns,
  timelineId,
  itemsPerPage,
  itemsPerPageOptions,
  pinnedEventIds,
  onEventClosed,
  renderCellValue,
  rowRenderers,
  showExpandedDetails,
  sort,
  expandedDetail,
  eventIdToNoteIds
}) => {
  const {
    telemetry
  } = (0, _kibana.useKibana)().services;
  const {
    browserFields,
    dataViewId,
    loading: loadingSourcerer,
    runtimeMappings,
    selectedPatterns
  } = (0, _containers2.useSourcererDataView)(_model.SourcererScopeName.timeline);
  const {
    setTimelineFullScreen,
    timelineFullScreen
  } = (0, _use_full_screen.useTimelineFullScreen)();
  const unifiedComponentsInTimelineDisabled = (0, _use_experimental_features.useIsExperimentalFeatureEnabled)('unifiedComponentsInTimelineDisabled');
  const filterQuery = (0, _react.useMemo)(() => {
    if ((0, _fp.isEmpty)(pinnedEventIds)) {
      return '';
    }
    const filterObj = Object.entries(pinnedEventIds).reduce((acc, [pinnedId, isPinned]) => {
      if (isPinned) {
        return {
          ...acc,
          bool: {
            ...acc.bool,
            should: [...acc.bool.should, {
              match_phrase: {
                _id: pinnedId
              }
            }]
          }
        };
      }
      return acc;
    }, {
      bool: {
        should: [],
        minimum_should_match: 1
      }
    });
    try {
      return JSON.stringify(filterObj);
    } catch {
      return '';
    }
  }, [pinnedEventIds]);
  const timelineQueryFields = (0, _react.useMemo)(() => {
    const columnsHeader = (0, _fp.isEmpty)(columns) ? _default_headers.defaultHeaders : columns;
    const columnFields = columnsHeader.map(c => c.id);
    return [...columnFields, ..._default_config.requiredFieldsForActions];
  }, [columns]);
  const timelineQuerySortField = (0, _react.useMemo)(() => sort.map(({
    columnId,
    columnType,
    esTypes,
    sortDirection
  }) => ({
    field: columnId,
    type: columnType,
    direction: sortDirection,
    esTypes: esTypes !== null && esTypes !== void 0 ? esTypes : []
  })), [sort]);
  const {
    augmentedColumnHeaders
  } = (0, _use_timeline_columns.useTimelineColumns)(columns);
  const [queryLoadingState, {
    events,
    totalCount,
    pageInfo,
    loadPage,
    refreshedAt,
    refetch
  }] = (0, _containers.useTimelineEvents)({
    endDate: '',
    id: `pinned-${timelineId}`,
    indexNames: selectedPatterns,
    dataViewId,
    fields: timelineQueryFields,
    limit: itemsPerPage,
    filterQuery,
    runtimeMappings,
    skip: filterQuery === '',
    startDate: '',
    sort: timelineQuerySortField,
    timerangeKind: undefined
  });
  const expandableFlyoutDisabled = (0, _use_experimental_features.useIsExperimentalFeatureEnabled)('expandableFlyoutDisabled');
  const {
    openFlyout
  } = (0, _expandableFlyout.useExpandableFlyoutApi)();
  const securitySolutionNotesEnabled = (0, _use_experimental_features.useIsExperimentalFeatureEnabled)('securitySolutionNotesEnabled');
  const {
    associateNote,
    notes,
    isNotesFlyoutVisible,
    closeNotesFlyout,
    showNotesFlyout,
    eventId: noteEventId,
    setNotesEventId
  } = (0, _use_notes_in_flyout.useNotesInFlyout)({
    eventIdToNoteIds,
    refetch,
    timelineId,
    activeTab: _timeline.TimelineTabs.pinned
  });
  const onToggleShowNotes = (0, _react.useCallback)(eventId => {
    const indexName = selectedPatterns.join(',');
    if (eventId && !expandableFlyoutDisabled && securitySolutionNotesEnabled) {
      openFlyout({
        right: {
          id: _panel_keys.DocumentDetailsRightPanelKey,
          params: {
            id: eventId,
            indexName,
            scopeId: timelineId
          }
        },
        left: {
          id: _panel_keys.DocumentDetailsLeftPanelKey,
          path: {
            tab: _left.LeftPanelNotesTab
          },
          params: {
            id: eventId,
            indexName,
            scopeId: timelineId
          }
        }
      });
      telemetry.reportOpenNoteInExpandableFlyoutClicked({
        location: timelineId
      });
      telemetry.reportDetailsFlyoutOpened({
        location: timelineId,
        panel: 'left'
      });
    } else {
      if (eventId) {
        setNotesEventId(eventId);
        showNotesFlyout();
      }
    }
  }, [expandableFlyoutDisabled, openFlyout, securitySolutionNotesEnabled, selectedPatterns, telemetry, timelineId, setNotesEventId, showNotesFlyout]);
  const leadingControlColumns = (0, _use_timeline_control_columns.useTimelineControlColumn)({
    columns,
    sort,
    timelineId,
    activeTab: _timeline.TimelineTabs.pinned,
    refetch,
    events,
    pinnedEventIds,
    eventIdToNoteIds,
    onToggleShowNotes
  });
  const isQueryLoading = (0, _react.useMemo)(() => [_unifiedDataTable.DataLoadingState.loading, _unifiedDataTable.DataLoadingState.loadingMore].includes(queryLoadingState), [queryLoadingState]);
  const handleOnPanelClosed = (0, _react.useCallback)(() => {
    onEventClosed({
      tabType: _timeline.TimelineTabs.pinned,
      id: timelineId
    });
  }, [timelineId, onEventClosed]);
  const NotesFlyoutMemo = (0, _react.useMemo)(() => {
    return /*#__PURE__*/_react.default.createElement(_notes_flyout.NotesFlyout, {
      associateNote: associateNote,
      eventId: noteEventId,
      show: isNotesFlyoutVisible,
      notes: notes,
      onClose: closeNotesFlyout,
      onCancel: closeNotesFlyout,
      timelineId: timelineId
    });
  }, [associateNote, closeNotesFlyout, isNotesFlyoutVisible, noteEventId, notes, timelineId]);
  if (!unifiedComponentsInTimelineDisabled) {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, NotesFlyoutMemo, /*#__PURE__*/_react.default.createElement(_unified_timeline_body.UnifiedTimelineBody, {
      header: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null),
      columns: augmentedColumnHeaders,
      rowRenderers: rowRenderers,
      timelineId: timelineId,
      itemsPerPage: itemsPerPage,
      itemsPerPageOptions: itemsPerPageOptions,
      sort: sort,
      events: events,
      refetch: refetch,
      dataLoadingState: queryLoadingState,
      totalCount: events.length,
      onEventClosed: onEventClosed,
      expandedDetail: expandedDetail,
      showExpandedDetails: showExpandedDetails,
      onChangePage: loadPage,
      activeTab: _timeline.TimelineTabs.pinned,
      updatedAt: refreshedAt,
      isTextBasedQuery: false,
      pageInfo: pageInfo,
      leadingControlColumns: leadingControlColumns,
      trailingControlColumns: rowDetailColumn
    }));
  }
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, NotesFlyoutMemo, /*#__PURE__*/_react.default.createElement(_layout.FullWidthFlexGroup, {
    "data-test-subj": `${_timeline.TimelineTabs.pinned}-tab`
  }, /*#__PURE__*/_react.default.createElement(_layout.ScrollableFlexItem, {
    grow: 2
  }, timelineFullScreen && setTimelineFullScreen != null && /*#__PURE__*/_react.default.createElement(ExitFullScreenContainer, null, /*#__PURE__*/_react.default.createElement(_exit_full_screen.ExitFullScreen, {
    fullScreen: timelineFullScreen,
    setFullScreen: setTimelineFullScreen
  })), /*#__PURE__*/_react.default.createElement(_event_details_width_context.EventDetailsWidthProvider, null, /*#__PURE__*/_react.default.createElement(_layout.StyledEuiFlyoutBody, {
    "data-test-subj": `${_timeline.TimelineTabs.pinned}-tab-flyout-body`,
    className: "timeline-flyout-body"
  }, /*#__PURE__*/_react.default.createElement(_body.StatefulBody, {
    activePage: pageInfo.activePage,
    browserFields: browserFields,
    data: events,
    id: timelineId,
    refetch: refetch,
    renderCellValue: renderCellValue,
    rowRenderers: rowRenderers,
    sort: sort,
    tabType: _timeline.TimelineTabs.pinned,
    totalPages: (0, _helpers.calculateTotalPages)({
      itemsCount: totalCount,
      itemsPerPage
    }),
    leadingControlColumns: leadingControlColumns,
    trailingControlColumns: trailingControlColumns
  })), /*#__PURE__*/_react.default.createElement(_layout.StyledEuiFlyoutFooter, {
    "data-test-subj": `${_timeline.TimelineTabs.pinned}-tab-flyout-footer`,
    className: "timeline-flyout-footer"
  }, /*#__PURE__*/_react.default.createElement(_footer.Footer, {
    activePage: pageInfo.activePage,
    "data-test-subj": "timeline-footer",
    updatedAt: refreshedAt,
    height: _footer.footerHeight,
    id: timelineId,
    isLive: false,
    isLoading: isQueryLoading || loadingSourcerer,
    itemsCount: events.length,
    itemsPerPage: itemsPerPage,
    itemsPerPageOptions: itemsPerPageOptions,
    onChangePage: loadPage,
    totalCount: totalCount
  })))), showExpandedDetails && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_layout.VerticalRule, null), /*#__PURE__*/_react.default.createElement(_layout.ScrollableFlexItem, {
    grow: 1
  }, /*#__PURE__*/_react.default.createElement(_side_panel.DetailsPanel, {
    browserFields: browserFields,
    handleOnPanelClosed: handleOnPanelClosed,
    runtimeMappings: runtimeMappings,
    tabType: _timeline.TimelineTabs.pinned,
    scopeId: timelineId
  })))));
};
exports.PinnedTabContentComponent = PinnedTabContentComponent;
const makeMapStateToProps = () => {
  const getTimeline = _store.timelineSelectors.getTimelineByIdSelector();
  const mapStateToProps = (state, {
    timelineId
  }) => {
    var _getTimeline, _expandedDetail$Timel;
    const timeline = (_getTimeline = getTimeline(state, timelineId)) !== null && _getTimeline !== void 0 ? _getTimeline : _defaults.timelineDefaults;
    const {
      columns,
      expandedDetail,
      itemsPerPage,
      itemsPerPageOptions,
      pinnedEventIds,
      sort,
      eventIdToNoteIds
    } = timeline;
    return {
      columns,
      timelineId,
      itemsPerPage,
      itemsPerPageOptions,
      pinnedEventIds,
      showExpandedDetails: !!expandedDetail[_timeline.TimelineTabs.pinned] && !!((_expandedDetail$Timel = expandedDetail[_timeline.TimelineTabs.pinned]) !== null && _expandedDetail$Timel !== void 0 && _expandedDetail$Timel.panelView),
      sort,
      expandedDetail,
      eventIdToNoteIds
    };
  };
  return mapStateToProps;
};
const mapDispatchToProps = (dispatch, {
  timelineId
}) => ({
  onEventClosed: args => {
    dispatch(_store.timelineActions.toggleDetailPanel(args));
  }
});
const connector = (0, _reactRedux.connect)(makeMapStateToProps, mapDispatchToProps);
const PinnedTabContent = exports.default = connector( /*#__PURE__*/(0, _react.memo)(PinnedTabContentComponent, (prevProps, nextProps) => prevProps.itemsPerPage === nextProps.itemsPerPage && prevProps.onEventClosed === nextProps.onEventClosed && prevProps.showExpandedDetails === nextProps.showExpandedDetails && prevProps.timelineId === nextProps.timelineId && (0, _fastDeepEqual.default)(prevProps.columns, nextProps.columns) && (0, _fastDeepEqual.default)(prevProps.eventIdToNoteIds, nextProps.eventIdToNoteIds) && (0, _fastDeepEqual.default)(prevProps.itemsPerPageOptions, nextProps.itemsPerPageOptions) && (0, _fastDeepEqual.default)(prevProps.pinnedEventIds, nextProps.pinnedEventIds) && (0, _fastDeepEqual.default)(prevProps.sort, nextProps.sort)));

// eslint-disable-next-line import/no-default-export