"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EventColumnView = void 0;
var _react = _interopRequireWildcard(require("react"));
var _styles = require("../../styles");
var _data_driven_columns = require("../data_driven_columns");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const EventColumnView = exports.EventColumnView = /*#__PURE__*/_react.default.memo(({
  id,
  actionsColumnWidth,
  ariaRowindex,
  columnHeaders,
  data,
  ecsData,
  eventIdToNoteIds,
  isEventPinned = false,
  isEventViewer = false,
  loadingEventIds,
  notesCount,
  onEventDetailsPanelOpened,
  onRowSelected,
  refetch,
  hasRowRenderers,
  onRuleChange,
  renderCellValue,
  selectedEventIds,
  showCheckboxes,
  showNotes,
  tabType,
  timelineId,
  toggleShowNotes,
  leadingControlColumns,
  trailingControlColumns,
  setEventsLoading,
  setEventsDeleted
}) => {
  // Each action button shall announce itself to screen readers via an `aria-label`
  // in the following format:
  // "button description, for the event in row {ariaRowindex}, with columns {columnValues}",
  // so we combine the column values here:
  const columnValues = (0, _react.useMemo)(() => columnHeaders.map(header => {
    var _getMappedNonEcsValue;
    return (_getMappedNonEcsValue = (0, _data_driven_columns.getMappedNonEcsValue)({
      data,
      fieldName: header.id
    })) !== null && _getMappedNonEcsValue !== void 0 ? _getMappedNonEcsValue : [];
  }).join(' '), [columnHeaders, data]);
  const leadingActionCells = (0, _react.useMemo)(() => leadingControlColumns ? leadingControlColumns.map(column => column.rowCellRender) : [], [leadingControlColumns]);
  const LeadingActions = (0, _react.useMemo)(() => leadingActionCells.map((Action, index) => {
    const width = leadingControlColumns[index].width ? leadingControlColumns[index].width : actionsColumnWidth;
    return /*#__PURE__*/_react.default.createElement(_styles.EventsTdGroupActions, {
      width: width,
      "data-test-subj": "event-actions-container",
      tabIndex: 0,
      key: index
    }, Action && /*#__PURE__*/_react.default.createElement(Action, {
      width: width,
      rowIndex: ariaRowindex,
      ariaRowindex: ariaRowindex,
      checked: Object.keys(selectedEventIds).includes(id),
      columnId: leadingControlColumns[index].id || '',
      columnValues: columnValues,
      onRowSelected: onRowSelected,
      "data-test-subj": "actions",
      eventId: id,
      data: data,
      index: index,
      ecsData: ecsData,
      loadingEventIds: loadingEventIds,
      onEventDetailsPanelOpened: onEventDetailsPanelOpened,
      showCheckboxes: showCheckboxes,
      eventIdToNoteIds: eventIdToNoteIds,
      isEventPinned: isEventPinned,
      isEventViewer: isEventViewer,
      onRuleChange: onRuleChange,
      refetch: refetch,
      showNotes: showNotes,
      tabType: tabType,
      timelineId: timelineId,
      toggleShowNotes: toggleShowNotes,
      setEventsLoading: setEventsLoading,
      setEventsDeleted: setEventsDeleted,
      disablePinAction: false
    }));
  }), [actionsColumnWidth, ariaRowindex, columnValues, data, ecsData, eventIdToNoteIds, id, isEventPinned, isEventViewer, leadingActionCells, leadingControlColumns, loadingEventIds, onEventDetailsPanelOpened, onRowSelected, onRuleChange, refetch, selectedEventIds, showCheckboxes, tabType, timelineId, toggleShowNotes, setEventsLoading, setEventsDeleted, showNotes]);
  return /*#__PURE__*/_react.default.createElement(_styles.EventsTrData, {
    "data-test-subj": "event-column-view"
  }, LeadingActions, /*#__PURE__*/_react.default.createElement(_data_driven_columns.DataDrivenColumns, {
    id: id,
    actionsColumnWidth: actionsColumnWidth,
    ariaRowindex: ariaRowindex,
    columnHeaders: columnHeaders,
    data: data,
    ecsData: ecsData,
    hasRowRenderers: hasRowRenderers,
    notesCount: notesCount,
    renderCellValue: renderCellValue,
    tabType: tabType,
    timelineId: timelineId,
    trailingControlColumns: trailingControlColumns,
    leadingControlColumns: leadingControlColumns,
    checked: Object.keys(selectedEventIds).includes(id),
    columnValues: columnValues,
    onRowSelected: onRowSelected,
    "data-test-subj": "actions",
    loadingEventIds: loadingEventIds,
    onEventDetailsPanelOpened: onEventDetailsPanelOpened,
    showCheckboxes: showCheckboxes,
    eventIdToNoteIds: eventIdToNoteIds,
    isEventPinned: isEventPinned,
    isEventViewer: isEventViewer,
    refetch: refetch,
    onRuleChange: onRuleChange,
    selectedEventIds: selectedEventIds,
    showNotes: showNotes,
    toggleShowNotes: toggleShowNotes,
    setEventsLoading: setEventsLoading,
    setEventsDeleted: setEventsDeleted
  }));
});
EventColumnView.displayName = 'EventColumnView';