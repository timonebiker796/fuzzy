"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useBasicDataFromDetailsData = exports.getAlertIndexAlias = void 0;
var _fp = require("lodash/fp");
var _react = require("react");
var _get_event_details_field_values = require("../../../../common/lib/endpoint/utils/get_event_details_field_values");
var _constants = require("../../../../../common/constants");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const useBasicDataFromDetailsData = data => {
  const isAlert = (0, _fp.some)({
    category: 'kibana',
    field: 'kibana.alert.rule.uuid'
  }, data);
  const ruleId = (0, _react.useMemo)(() => isAlert ? (0, _get_event_details_field_values.getAlertDetailsFieldValue)({
    category: 'kibana',
    field: 'kibana.alert.rule.uuid'
  }, data) : (0, _get_event_details_field_values.getAlertDetailsFieldValue)({
    category: 'signal',
    field: 'signal.rule.id'
  }, data), [isAlert, data]);
  const ruleName = (0, _react.useMemo)(() => (0, _get_event_details_field_values.getAlertDetailsFieldValue)({
    category: 'kibana',
    field: 'kibana.alert.rule.name'
  }, data), [data]);
  const ruleDescription = (0, _react.useMemo)(() => (0, _get_event_details_field_values.getAlertDetailsFieldValue)({
    category: 'kibana',
    field: 'kibana.alert.rule.description'
  }, data), [data]);
  const alertId = (0, _react.useMemo)(() => (0, _get_event_details_field_values.getAlertDetailsFieldValue)({
    category: '_id',
    field: '_id'
  }, data), [data]);
  const indexName = (0, _react.useMemo)(() => (0, _get_event_details_field_values.getAlertDetailsFieldValue)({
    category: '_index',
    field: '_index'
  }, data), [data]);
  const alertUrl = (0, _react.useMemo)(() => (0, _get_event_details_field_values.getAlertDetailsFieldValue)({
    category: 'kibana',
    field: 'kibana.alert.url'
  }, data), [data]);
  const agentId = (0, _react.useMemo)(() => (0, _get_event_details_field_values.getAlertDetailsFieldValue)({
    category: 'agent',
    field: 'agent.id'
  }, data), [data]);
  const hostName = (0, _react.useMemo)(() => (0, _get_event_details_field_values.getAlertDetailsFieldValue)({
    category: 'host',
    field: 'host.name'
  }, data), [data]);
  const userName = (0, _react.useMemo)(() => (0, _get_event_details_field_values.getAlertDetailsFieldValue)({
    category: 'user',
    field: 'user.name'
  }, data), [data]);
  const timestamp = (0, _react.useMemo)(() => (0, _get_event_details_field_values.getAlertDetailsFieldValue)({
    category: 'base',
    field: '@timestamp'
  }, data), [data]);
  return (0, _react.useMemo)(() => ({
    agentId,
    alertId,
    alertUrl,
    data,
    hostName,
    indexName,
    isAlert,
    ruleDescription,
    ruleId,
    ruleName,
    timestamp,
    userName
  }), [agentId, alertId, alertUrl, data, hostName, indexName, isAlert, ruleDescription, ruleId, ruleName, timestamp, userName]);
};

/*
The referenced alert _index in the flyout uses the `.internal.` such as
`.internal.alerts-security.alerts-spaceId` in the alert page flyout and
.internal.preview.alerts-security.alerts-spaceId` in the rule creation preview flyout
but we always want to use their respective aliase indices rather than accessing their backing .internal. indices.
*/
exports.useBasicDataFromDetailsData = useBasicDataFromDetailsData;
const getAlertIndexAlias = (index, spaceId = 'default') => {
  if (index.startsWith(`.internal${_constants.DEFAULT_ALERTS_INDEX}`)) {
    return `${_constants.DEFAULT_ALERTS_INDEX}-${spaceId}`;
  } else if (index.startsWith(`.internal${_constants.DEFAULT_PREVIEW_INDEX}`)) {
    return `${_constants.DEFAULT_PREVIEW_INDEX}-${spaceId}`;
  }
};
exports.getAlertIndexAlias = getAlertIndexAlias;