"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.QueryTabContentComponent = void 0;
var _fp = require("lodash/fp");
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _fastDeepEqual = _interopRequireDefault(require("fast-deep-equal"));
var _common = require("@kbn/data-plugin/common");
var _unifiedDataTable = require("@kbn/unified-data-table");
var _expandableFlyout = require("@kbn/expandable-flyout");
var _panel_keys = require("../../../../../flyout/document_details/shared/constants/panel_keys");
var _left = require("../../../../../flyout/document_details/left");
var _use_selector = require("../../../../../common/hooks/use_selector");
var _use_experimental_features = require("../../../../../common/hooks/use_experimental_features");
var _use_timeline_data_filters = require("../../../../containers/use_timeline_data_filters");
var _constants = require("../../../../../common/store/inputs/constants");
var _use_invalid_filter_query = require("../../../../../common/hooks/use_invalid_filter_query");
var _store = require("../../../../store");
var _containers = require("../../../../containers");
var _kibana = require("../../../../../common/lib/kibana");
var _body = require("../../body");
var _footer = require("../../footer");
var _header = require("./header");
var _helpers = require("../../helpers");
var _kuery = require("../../../../../common/lib/kuery");
var _refetch_timeline = require("../../refetch_timeline");
var _timeline = require("../../../../../../common/types/timeline");
var _event_details_width_context = require("../../../../../common/components/events_viewer/event_details_width_context");
var _store2 = require("../../../../../common/store");
var _model = require("../../../../../sourcerer/store/model");
var _defaults = require("../../../../store/defaults");
var _containers2 = require("../../../../../sourcerer/containers");
var _helpers2 = require("../../../../../helpers");
var _side_panel = require("../../../side_panel");
var _unified_timeline_body = require("../../body/unified_timeline_body");
var _layout = require("../shared/layout");
var _utils = require("../shared/utils");
var _use_timeline_columns = require("../shared/use_timeline_columns");
var _use_timeline_control_columns = require("../shared/use_timeline_control_columns");
var _notes_flyout = require("../../properties/notes_flyout");
var _use_notes_in_flyout = require("../../properties/use_notes_in_flyout");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const compareQueryProps = (prevProps, nextProps) => prevProps.kqlMode === nextProps.kqlMode && prevProps.kqlQueryExpression === nextProps.kqlQueryExpression && (0, _fastDeepEqual.default)(prevProps.filters, nextProps.filters);
const QueryTabContentComponent = ({
  activeTab,
  columns,
  dataProviders,
  end,
  filters,
  timelineId,
  isLive,
  itemsPerPage,
  itemsPerPageOptions,
  kqlMode,
  kqlQueryExpression,
  kqlQueryLanguage,
  onEventClosed,
  renderCellValue,
  rowRenderers,
  show,
  showCallOutUnauthorizedMsg,
  showExpandedDetails,
  start,
  status,
  sort,
  timerangeKind,
  expandedDetail,
  pinnedEventIds,
  eventIdToNoteIds
}) => {
  var _pageInfo$activePage;
  const dispatch = (0, _reactRedux.useDispatch)();
  const {
    browserFields,
    dataViewId,
    loading: loadingSourcerer,
    indexPattern,
    runtimeMappings,
    // important to get selectedPatterns from useSourcererDataView
    // in order to include the exclude filters in the search that are not stored in the timeline
    selectedPatterns
  } = (0, _containers2.useSourcererDataView)(_model.SourcererScopeName.timeline);
  const {
    uiSettings,
    telemetry,
    timelineDataService
  } = (0, _kibana.useKibana)().services;
  const {
    query: {
      filterManager: timelineFilterManager
    }
  } = timelineDataService;
  const unifiedComponentsInTimelineDisabled = (0, _use_experimental_features.useIsExperimentalFeatureEnabled)('unifiedComponentsInTimelineDisabled');
  const getManageTimeline = (0, _react.useMemo)(() => _store.timelineSelectors.getTimelineByIdSelector(), []);
  const currentTimeline = (0, _use_selector.useDeepEqualSelector)(state => getManageTimeline(state, timelineId !== null && timelineId !== void 0 ? timelineId : _timeline.TimelineId.active));
  const {
    sampleSize
  } = currentTimeline;
  const esQueryConfig = (0, _react.useMemo)(() => (0, _common.getEsQueryConfig)(uiSettings), [uiSettings]);
  const kqlQuery = (0, _react.useMemo)(() => ({
    query: kqlQueryExpression.trim(),
    language: kqlQueryLanguage
  }), [kqlQueryExpression, kqlQueryLanguage]);
  const combinedQueries = (0, _react.useMemo)(() => {
    return (0, _kuery.combineQueries)({
      config: esQueryConfig,
      dataProviders,
      indexPattern,
      browserFields,
      filters,
      kqlQuery,
      kqlMode
    });
  }, [esQueryConfig, dataProviders, indexPattern, browserFields, filters, kqlQuery, kqlMode]);
  (0, _use_invalid_filter_query.useInvalidFilterQuery)({
    id: timelineId,
    filterQuery: combinedQueries === null || combinedQueries === void 0 ? void 0 : combinedQueries.filterQuery,
    kqlError: combinedQueries === null || combinedQueries === void 0 ? void 0 : combinedQueries.kqlError,
    query: kqlQuery,
    startDate: start,
    endDate: end
  });
  const isBlankTimeline = (0, _fp.isEmpty)(dataProviders) && (0, _fp.isEmpty)(filters) && (0, _fp.isEmpty)(kqlQuery.query) && (combinedQueries === null || combinedQueries === void 0 ? void 0 : combinedQueries.filterQuery) === undefined;
  const canQueryTimeline = (0, _react.useMemo)(() => combinedQueries != null && loadingSourcerer != null && !loadingSourcerer && !(0, _fp.isEmpty)(start) && !(0, _fp.isEmpty)(end) && (combinedQueries === null || combinedQueries === void 0 ? void 0 : combinedQueries.filterQuery) !== undefined, [combinedQueries, end, loadingSourcerer, start]);
  const timelineQuerySortField = (0, _react.useMemo)(() => {
    return sort.map(({
      columnId,
      columnType,
      esTypes,
      sortDirection
    }) => ({
      field: columnId,
      direction: sortDirection,
      esTypes: esTypes !== null && esTypes !== void 0 ? esTypes : [],
      type: columnType
    }));
  }, [sort]);
  const {
    augmentedColumnHeaders,
    defaultColumns,
    timelineQueryFieldsFromColumns
  } = (0, _use_timeline_columns.useTimelineColumns)(columns);
  const [dataLoadingState, {
    events,
    inspect,
    totalCount,
    pageInfo,
    loadPage,
    refreshedAt,
    refetch
  }] = (0, _containers.useTimelineEvents)({
    dataViewId,
    endDate: end,
    fields: timelineQueryFieldsFromColumns,
    filterQuery: combinedQueries === null || combinedQueries === void 0 ? void 0 : combinedQueries.filterQuery,
    id: timelineId,
    indexNames: selectedPatterns,
    language: kqlQuery.language,
    limit: !unifiedComponentsInTimelineDisabled ? sampleSize : itemsPerPage,
    runtimeMappings,
    skip: !canQueryTimeline,
    sort: timelineQuerySortField,
    startDate: start,
    timerangeKind
  });
  const expandableFlyoutDisabled = (0, _use_experimental_features.useIsExperimentalFeatureEnabled)('expandableFlyoutDisabled');
  const {
    openFlyout
  } = (0, _expandableFlyout.useExpandableFlyoutApi)();
  const securitySolutionNotesEnabled = (0, _use_experimental_features.useIsExperimentalFeatureEnabled)('securitySolutionNotesEnabled');
  const {
    associateNote,
    notes,
    isNotesFlyoutVisible,
    closeNotesFlyout,
    showNotesFlyout,
    eventId: noteEventId,
    setNotesEventId
  } = (0, _use_notes_in_flyout.useNotesInFlyout)({
    eventIdToNoteIds,
    refetch,
    timelineId,
    activeTab
  });
  const onToggleShowNotes = (0, _react.useCallback)(eventId => {
    const indexName = selectedPatterns.join(',');
    if (eventId && !expandableFlyoutDisabled && securitySolutionNotesEnabled) {
      openFlyout({
        right: {
          id: _panel_keys.DocumentDetailsRightPanelKey,
          params: {
            id: eventId,
            indexName,
            scopeId: timelineId
          }
        },
        left: {
          id: _panel_keys.DocumentDetailsLeftPanelKey,
          path: {
            tab: _left.LeftPanelNotesTab
          },
          params: {
            id: eventId,
            indexName,
            scopeId: timelineId
          }
        }
      });
      telemetry.reportOpenNoteInExpandableFlyoutClicked({
        location: timelineId
      });
      telemetry.reportDetailsFlyoutOpened({
        location: timelineId,
        panel: 'left'
      });
    } else {
      if (eventId) {
        setNotesEventId(eventId);
        showNotesFlyout();
      }
    }
  }, [expandableFlyoutDisabled, openFlyout, securitySolutionNotesEnabled, selectedPatterns, telemetry, timelineId, showNotesFlyout, setNotesEventId]);
  const leadingControlColumns = (0, _use_timeline_control_columns.useTimelineControlColumn)({
    columns,
    sort,
    timelineId,
    activeTab: _timeline.TimelineTabs.query,
    refetch,
    events,
    pinnedEventIds,
    eventIdToNoteIds,
    onToggleShowNotes
  });
  (0, _react.useEffect)(() => {
    dispatch(_store.timelineActions.initializeTimelineSettings({
      id: timelineId,
      defaultColumns
    }));
  }, [dispatch, timelineId, defaultColumns]);
  const isQueryLoading = (0, _react.useMemo)(() => [_unifiedDataTable.DataLoadingState.loading, _unifiedDataTable.DataLoadingState.loadingMore].includes(dataLoadingState), [dataLoadingState]);
  const handleOnPanelClosed = (0, _react.useCallback)(() => {
    onEventClosed({
      tabType: _timeline.TimelineTabs.query,
      id: timelineId
    });
  }, [onEventClosed, timelineId]);
  (0, _react.useEffect)(() => {
    dispatch(_store.timelineActions.updateIsLoading({
      id: timelineId,
      isLoading: isQueryLoading || loadingSourcerer
    }));
  }, [loadingSourcerer, timelineId, isQueryLoading, dispatch]);

  // NOTE: The timeline is blank after browser FORWARD navigation (after using back button to navigate to
  // the previous page from the timeline), yet we still see total count. This is because the timeline
  // is not getting refreshed when using browser navigation.
  const showEventsCountBadge = !isBlankTimeline && totalCount >= 0;

  // <Synchronisation of the timeline data service>
  // Sync the timerange
  const timelineFilters = (0, _use_timeline_data_filters.useTimelineDataFilters)((0, _helpers2.isActiveTimeline)(timelineId));
  (0, _react.useEffect)(() => {
    timelineDataService.query.timefilter.timefilter.setTime({
      from: timelineFilters.from,
      to: timelineFilters.to
    });
  }, [timelineDataService.query.timefilter.timefilter, timelineFilters.from, timelineFilters.to]);

  // Sync the base query
  (0, _react.useEffect)(() => {
    timelineDataService.query.queryString.setQuery(
    // We're using the base query of all combined queries here, to account for all
    // of timeline's query dependencies (data providers, query etc.)
    (combinedQueries === null || combinedQueries === void 0 ? void 0 : combinedQueries.baseKqlQuery) || {
      language: kqlQueryLanguage,
      query: ''
    });
  }, [timelineDataService, combinedQueries, kqlQueryLanguage]);
  // </Synchronisation of the timeline data service>

  const NotesFlyoutMemo = (0, _react.useMemo)(() => {
    return /*#__PURE__*/_react.default.createElement(_notes_flyout.NotesFlyout, {
      associateNote: associateNote,
      eventId: noteEventId,
      show: isNotesFlyoutVisible,
      notes: notes,
      onClose: closeNotesFlyout,
      onCancel: closeNotesFlyout,
      timelineId: timelineId
    });
  }, [associateNote, closeNotesFlyout, isNotesFlyoutVisible, noteEventId, notes, timelineId]);
  if (!unifiedComponentsInTimelineDisabled) {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_refetch_timeline.TimelineRefetch, {
      id: `${timelineId}-${_timeline.TimelineTabs.query}`,
      inputId: _constants.InputsModelId.timeline,
      inspect: inspect,
      loading: isQueryLoading,
      refetch: refetch,
      skip: !canQueryTimeline
    }), NotesFlyoutMemo, /*#__PURE__*/_react.default.createElement(_unified_timeline_body.UnifiedTimelineBody, {
      header: /*#__PURE__*/_react.default.createElement(_header.QueryTabHeader, {
        activeTab: activeTab,
        filterManager: timelineFilterManager,
        show: show && activeTab === _timeline.TimelineTabs.query,
        showCallOutUnauthorizedMsg: showCallOutUnauthorizedMsg,
        status: status,
        timelineId: timelineId,
        showEventsCountBadge: showEventsCountBadge,
        totalCount: totalCount
      }),
      columns: augmentedColumnHeaders,
      rowRenderers: rowRenderers,
      timelineId: timelineId,
      itemsPerPage: itemsPerPage,
      itemsPerPageOptions: itemsPerPageOptions,
      sort: sort,
      events: events,
      refetch: refetch,
      dataLoadingState: dataLoadingState,
      totalCount: isBlankTimeline ? 0 : totalCount,
      onEventClosed: onEventClosed,
      expandedDetail: expandedDetail,
      showExpandedDetails: showExpandedDetails,
      leadingControlColumns: leadingControlColumns,
      onChangePage: loadPage,
      activeTab: activeTab,
      updatedAt: refreshedAt,
      isTextBasedQuery: false,
      pageInfo: pageInfo
    }));
  }
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_refetch_timeline.TimelineRefetch, {
    id: `${timelineId}-${_timeline.TimelineTabs.query}`,
    inputId: _constants.InputsModelId.timeline,
    inspect: inspect,
    loading: isQueryLoading,
    refetch: refetch,
    skip: !canQueryTimeline
  }), NotesFlyoutMemo, /*#__PURE__*/_react.default.createElement(_layout.FullWidthFlexGroup, {
    gutterSize: "none"
  }, /*#__PURE__*/_react.default.createElement(_layout.ScrollableFlexItem, {
    grow: 2
  }, /*#__PURE__*/_react.default.createElement(_header.QueryTabHeader, {
    activeTab: activeTab,
    filterManager: timelineFilterManager,
    show: show && activeTab === _timeline.TimelineTabs.query,
    showCallOutUnauthorizedMsg: showCallOutUnauthorizedMsg,
    status: status,
    timelineId: timelineId,
    showEventsCountBadge: showEventsCountBadge,
    totalCount: totalCount
  }), /*#__PURE__*/_react.default.createElement(_event_details_width_context.EventDetailsWidthProvider, null, /*#__PURE__*/_react.default.createElement(_layout.StyledEuiFlyoutBody, {
    "data-test-subj": `${_timeline.TimelineTabs.query}-tab-flyout-body`,
    className: "timeline-flyout-body"
  }, /*#__PURE__*/_react.default.createElement(_body.StatefulBody, {
    activePage: pageInfo.activePage,
    browserFields: browserFields,
    data: isBlankTimeline ? _utils.TIMELINE_EMPTY_EVENTS : events,
    id: timelineId,
    refetch: refetch,
    renderCellValue: renderCellValue,
    rowRenderers: rowRenderers,
    sort: sort,
    tabType: _timeline.TimelineTabs.query,
    totalPages: (0, _helpers.calculateTotalPages)({
      itemsCount: totalCount,
      itemsPerPage
    }),
    leadingControlColumns: leadingControlColumns,
    trailingControlColumns: _utils.timelineEmptyTrailingControlColumns,
    onToggleShowNotes: onToggleShowNotes
  })), /*#__PURE__*/_react.default.createElement(_layout.StyledEuiFlyoutFooter, {
    "data-test-subj": `${_timeline.TimelineTabs.query}-tab-flyout-footer`,
    className: "timeline-flyout-footer"
  }, !isBlankTimeline && /*#__PURE__*/_react.default.createElement(_footer.Footer, {
    activePage: (_pageInfo$activePage = pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.activePage) !== null && _pageInfo$activePage !== void 0 ? _pageInfo$activePage : 0,
    "data-test-subj": "timeline-footer",
    updatedAt: refreshedAt,
    height: _footer.footerHeight,
    id: timelineId,
    isLive: isLive,
    isLoading: isQueryLoading || loadingSourcerer,
    itemsCount: isBlankTimeline ? 0 : events.length,
    itemsPerPage: itemsPerPage,
    itemsPerPageOptions: itemsPerPageOptions,
    onChangePage: loadPage,
    totalCount: isBlankTimeline ? 0 : totalCount
  })))), showExpandedDetails && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_layout.VerticalRule, null), /*#__PURE__*/_react.default.createElement(_layout.ScrollableFlexItem, {
    grow: 1
  }, /*#__PURE__*/_react.default.createElement(_side_panel.DetailsPanel, {
    browserFields: browserFields,
    handleOnPanelClosed: handleOnPanelClosed,
    runtimeMappings: runtimeMappings,
    tabType: _timeline.TimelineTabs.query,
    scopeId: timelineId
  })))));
};
exports.QueryTabContentComponent = QueryTabContentComponent;
const makeMapStateToProps = () => {
  const getShowCallOutUnauthorizedMsg = _store.timelineSelectors.getShowCallOutUnauthorizedMsg();
  const getTimeline = _store.timelineSelectors.getTimelineByIdSelector();
  const getKqlQueryTimeline = _store.timelineSelectors.getKqlFilterKuerySelector();
  const getInputsTimeline = _store2.inputsSelectors.getTimelineSelector();
  const mapStateToProps = (state, {
    timelineId
  }) => {
    var _getTimeline, _kqlQueryTimeline$exp, _kqlQueryTimeline$exp2, _kqlQueryTimeline$kin, _expandedDetail$Timel;
    const timeline = (_getTimeline = getTimeline(state, timelineId)) !== null && _getTimeline !== void 0 ? _getTimeline : _defaults.timelineDefaults;
    const input = getInputsTimeline(state);
    const {
      activeTab,
      columns,
      dataProviders,
      pinnedEventIds,
      eventIdToNoteIds,
      expandedDetail,
      filters,
      itemsPerPage,
      itemsPerPageOptions,
      kqlMode,
      show,
      sort,
      status,
      timelineType
    } = timeline;
    const kqlQueryTimeline = getKqlQueryTimeline(state, timelineId);
    const timelineFilter = kqlMode === 'filter' ? filters || [] : [];

    // return events on empty search
    const kqlQueryExpression = (0, _fp.isEmpty)(dataProviders) && (0, _fp.isEmpty)((_kqlQueryTimeline$exp = kqlQueryTimeline === null || kqlQueryTimeline === void 0 ? void 0 : kqlQueryTimeline.expression) !== null && _kqlQueryTimeline$exp !== void 0 ? _kqlQueryTimeline$exp : '') && timelineType === 'template' ? ' ' : (_kqlQueryTimeline$exp2 = kqlQueryTimeline === null || kqlQueryTimeline === void 0 ? void 0 : kqlQueryTimeline.expression) !== null && _kqlQueryTimeline$exp2 !== void 0 ? _kqlQueryTimeline$exp2 : '';
    const kqlQueryLanguage = (0, _fp.isEmpty)(dataProviders) && timelineType === 'template' ? 'kuery' : (_kqlQueryTimeline$kin = kqlQueryTimeline === null || kqlQueryTimeline === void 0 ? void 0 : kqlQueryTimeline.kind) !== null && _kqlQueryTimeline$kin !== void 0 ? _kqlQueryTimeline$kin : 'kuery';
    return {
      activeTab,
      columns,
      dataProviders,
      end: input.timerange.to,
      expandedDetail,
      filters: timelineFilter,
      timelineId,
      pinnedEventIds,
      eventIdToNoteIds,
      isLive: input.policy.kind === 'interval',
      itemsPerPage,
      itemsPerPageOptions,
      kqlMode,
      kqlQueryExpression,
      kqlQueryLanguage,
      showCallOutUnauthorizedMsg: getShowCallOutUnauthorizedMsg(state),
      show,
      showExpandedDetails: !!expandedDetail[_timeline.TimelineTabs.query] && !!((_expandedDetail$Timel = expandedDetail[_timeline.TimelineTabs.query]) !== null && _expandedDetail$Timel !== void 0 && _expandedDetail$Timel.panelView),
      sort,
      start: input.timerange.from,
      status,
      timerangeKind: input.timerange.kind
    };
  };
  return mapStateToProps;
};
const mapDispatchToProps = (dispatch, {
  timelineId
}) => ({
  onEventClosed: args => {
    dispatch(_store.timelineActions.toggleDetailPanel(args));
  }
});
const connector = (0, _reactRedux.connect)(makeMapStateToProps, mapDispatchToProps);
const QueryTabContent = exports.default = connector( /*#__PURE__*/_react.default.memo(QueryTabContentComponent, (prevProps, nextProps) => compareQueryProps(prevProps, nextProps) && prevProps.activeTab === nextProps.activeTab && (0, _utils.isTimerangeSame)(prevProps, nextProps) && prevProps.isLive === nextProps.isLive && prevProps.itemsPerPage === nextProps.itemsPerPage && prevProps.onEventClosed === nextProps.onEventClosed && prevProps.show === nextProps.show && prevProps.showCallOutUnauthorizedMsg === nextProps.showCallOutUnauthorizedMsg && prevProps.showExpandedDetails === nextProps.showExpandedDetails && prevProps.status === nextProps.status && prevProps.status === nextProps.status && prevProps.timelineId === nextProps.timelineId && (0, _fastDeepEqual.default)(prevProps.eventIdToNoteIds, nextProps.eventIdToNoteIds) && (0, _fastDeepEqual.default)(prevProps.columns, nextProps.columns) && (0, _fastDeepEqual.default)(prevProps.pinnedEventIds, nextProps.pinnedEventIds) && (0, _fastDeepEqual.default)(prevProps.dataProviders, nextProps.dataProviders) && (0, _fastDeepEqual.default)(prevProps.itemsPerPageOptions, nextProps.itemsPerPageOptions) && (0, _fastDeepEqual.default)(prevProps.sort, nextProps.sort)));

// eslint-disable-next-line import/no-default-export