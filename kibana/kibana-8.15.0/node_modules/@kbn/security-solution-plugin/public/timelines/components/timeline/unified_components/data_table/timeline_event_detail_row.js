"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimelineEventDetailRow = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _styles = require("../../styles");
var _stateful_row_renderer = require("../../body/events/stateful_row_renderer");
var _use_timeline_unified_data_table_context = require("./use_timeline_unified_data_table_context");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/** This offset begins at two, because the header row counts as "row 1", and aria-rowindex starts at "1" */
const ARIA_ROW_INDEX_OFFSET = 2;
/**
 * Renders the additional row for the timeline
 * This additional row is used to render:
 * - the row renderers
 * - the notes and text area when notes are being created.
 *
 * This components is also responsible for styling that additional row when
 * a event/alert is expanded (i.e. when flyout is open and user is viewing the details of the event)
 *
 * */
const TimelineEventDetailRow = exports.TimelineEventDetailRow = /*#__PURE__*/(0, _react.memo)(function TimelineEventDetailRow({
  rowIndex,
  event,
  setCellProps,
  timelineId,
  enabledRowRenderers
}) {
  var _ctx$expanded2;
  const containerRef = (0, _react.useRef)(null);

  /*
   * Ideally, unified data table could have handled the styling of trailing columns when a row is expanded.
   * But, a trailing column can have arbitrary design and that is why it is best for consumer to handle the styling
   * as we are doing below
   *
   * */
  const ctx = (0, _use_timeline_unified_data_table_context.useTimelineUnifiedDataTableContext)();
  (0, _react.useEffect)(() => {
    var _ctx$expanded;
    setCellProps === null || setCellProps === void 0 ? void 0 : setCellProps({
      className: ((_ctx$expanded = ctx.expanded) === null || _ctx$expanded === void 0 ? void 0 : _ctx$expanded.id) === event._id ? 'unifiedDataTable__cell--expanded' : '',
      style: {
        width: '100%',
        height: 'auto'
      }
    });
  }, [(_ctx$expanded2 = ctx.expanded) === null || _ctx$expanded2 === void 0 ? void 0 : _ctx$expanded2.id, setCellProps, rowIndex, event._id]);
  if (!enabledRowRenderers || enabledRowRenderers.length === 0) return null;
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    justifyContent: "center",
    alignItems: "center",
    "data-test-subj": `timeline-row-renderer-${rowIndex}`
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_styles.EventsTrSupplement, null, /*#__PURE__*/_react.default.createElement(_stateful_row_renderer.StatefulRowRenderer, {
    ariaRowindex: rowIndex + ARIA_ROW_INDEX_OFFSET,
    containerRef: containerRef,
    event: event,
    lastFocusedAriaColindex: rowIndex - 1,
    rowRenderers: enabledRowRenderers,
    timelineId: timelineId
  }))));
});