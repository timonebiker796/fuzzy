"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TabsContent = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _eui = require("@elastic/eui");
var _fp = require("lodash/fp");
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _use_esql_availability = require("../../../../common/hooks/esql/use_esql_availability");
var _timeline = require("../../../../../common/types/timeline");
var _timeline2 = require("../../../../../common/api/timeline");
var _use_selector = require("../../../../common/hooks/use_selector");
var _use_timeline_events_count = require("../../../../common/hooks/use_timeline_events_count");
var _store = require("../../../store");
var _selectors = require("./selectors");
var i18n = _interopRequireWildcard(require("./translations"));
var _use_license = require("../../../../common/hooks/use_license");
var _actions = require("../../../store/actions");
var _selectors2 = require("../../../store/selectors");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } /*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
const HideShowContainer = _styledComponents.default.div.attrs(({
  $isVisible = false,
  isOverflowYScroll = false
}) => ({
  style: {
    display: $isVisible ? 'flex' : 'none',
    overflow: isOverflowYScroll ? 'hidden scroll' : 'hidden'
  }
}))`
  flex: 1;
`;

/**
 * A HOC which supplies React.Suspense with a fallback component
 * @param Component A component deferred by `React.lazy`
 * @param fallback A fallback component to render while things load. Default is EuiSekeleton for all tabs
 */
const tabWithSuspense = (Component, fallback = /*#__PURE__*/_react.default.createElement(_eui.EuiSkeletonText, {
  lines: 10
})) => {
  var _Component$displayNam;
  const Comp = /*#__PURE__*/_react.default.forwardRef((props, ref) => /*#__PURE__*/_react.default.createElement(_react.Suspense, {
    fallback: fallback
  }, /*#__PURE__*/_react.default.createElement(Component, (0, _extends2.default)({}, props, {
    ref: ref
  }))));
  Comp.displayName = `${(_Component$displayNam = Component.displayName) !== null && _Component$displayNam !== void 0 ? _Component$displayNam : 'Tab'}WithSuspense`;
  return Comp;
};
const QueryTab = tabWithSuspense( /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./query')))));
const EqlTab = tabWithSuspense( /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./eql')))));
const GraphTab = tabWithSuspense( /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./graph')))));
const NotesTab = tabWithSuspense( /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./notes')))));
const PinnedTab = tabWithSuspense( /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./pinned')))));
const SessionTab = tabWithSuspense( /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./session')))));
const EsqlTab = tabWithSuspense( /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./esql')))));
const ActiveTimelineTab = /*#__PURE__*/(0, _react.memo)(({
  activeTimelineTab,
  renderCellValue,
  rowRenderers,
  timelineId,
  timelineType,
  showTimeline
}) => {
  const {
    isTimelineEsqlEnabledByFeatureFlag,
    isEsqlAdvancedSettingEnabled
  } = (0, _use_esql_availability.useEsqlAvailability)();
  const timelineESQLSavedSearch = (0, _use_selector.useShallowEqualSelector)(state => (0, _selectors2.selectTimelineESQLSavedSearchId)(state, timelineId));
  const shouldShowESQLTab = (0, _react.useMemo)(() => {
    // disabling esql feature from feature flag should unequivocally hide the tab
    // irrespective of the fact that the advanced setting is enabled or
    // not or existing esql query is present or not
    if (!isTimelineEsqlEnabledByFeatureFlag) {
      return false;
    }
    return isEsqlAdvancedSettingEnabled || timelineESQLSavedSearch != null;
  }, [isEsqlAdvancedSettingEnabled, isTimelineEsqlEnabledByFeatureFlag, timelineESQLSavedSearch]);
  const getTab = (0, _react.useCallback)(tab => {
    switch (tab) {
      case _timeline.TimelineTabs.graph:
        return /*#__PURE__*/_react.default.createElement(GraphTab, {
          timelineId: timelineId
        });
      case _timeline.TimelineTabs.notes:
        return /*#__PURE__*/_react.default.createElement(NotesTab, {
          timelineId: timelineId
        });
      case _timeline.TimelineTabs.session:
        return /*#__PURE__*/_react.default.createElement(SessionTab, {
          timelineId: timelineId
        });
      default:
        return null;
    }
  }, [timelineId]);
  const isGraphOrNotesTabs = (0, _react.useMemo)(() => [_timeline.TimelineTabs.graph, _timeline.TimelineTabs.notes, _timeline.TimelineTabs.session].includes(activeTimelineTab), [activeTimelineTab]);

  /* Future developer -> why are we doing that
   * It is really expansive to re-render the QueryTab because the drag/drop
   * Therefore, we are only hiding its dom when switching to another tab
   * to avoid mounting/un-mounting === re-render
   */
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(HideShowContainer, {
    $isVisible: _timeline.TimelineTabs.query === activeTimelineTab,
    "data-test-subj": `timeline-tab-content-${_timeline.TimelineTabs.query}`
  }, /*#__PURE__*/_react.default.createElement(QueryTab, {
    renderCellValue: renderCellValue,
    rowRenderers: rowRenderers,
    timelineId: timelineId
  })), showTimeline && shouldShowESQLTab && activeTimelineTab === _timeline.TimelineTabs.esql && /*#__PURE__*/_react.default.createElement(HideShowContainer, {
    $isVisible: true,
    "data-test-subj": `timeline-tab-content-${_timeline.TimelineTabs.esql}`
  }, /*#__PURE__*/_react.default.createElement(EsqlTab, {
    timelineId: timelineId
  })), /*#__PURE__*/_react.default.createElement(HideShowContainer, {
    $isVisible: _timeline.TimelineTabs.pinned === activeTimelineTab,
    "data-test-subj": `timeline-tab-content-${_timeline.TimelineTabs.pinned}`
  }, /*#__PURE__*/_react.default.createElement(PinnedTab, {
    renderCellValue: renderCellValue,
    rowRenderers: rowRenderers,
    timelineId: timelineId
  })), timelineType === _timeline2.TimelineType.default && /*#__PURE__*/_react.default.createElement(HideShowContainer, {
    $isVisible: _timeline.TimelineTabs.eql === activeTimelineTab,
    "data-test-subj": `timeline-tab-content-${_timeline.TimelineTabs.eql}`
  }, /*#__PURE__*/_react.default.createElement(EqlTab, {
    renderCellValue: renderCellValue,
    rowRenderers: rowRenderers,
    timelineId: timelineId
  })), /*#__PURE__*/_react.default.createElement(HideShowContainer, {
    $isVisible: isGraphOrNotesTabs,
    isOverflowYScroll: activeTimelineTab === _timeline.TimelineTabs.session,
    "data-test-subj": `timeline-tab-content-${_timeline.TimelineTabs.graph}-${_timeline.TimelineTabs.notes}`
  }, isGraphOrNotesTabs && getTab(activeTimelineTab)));
});
ActiveTimelineTab.displayName = 'ActiveTimelineTab';
const CountBadge = (0, _styledComponents.default)(_eui.EuiBadge)`
  margin-left: ${({
  theme
}) => theme.eui.euiSizeS};
`;
const StyledEuiTab = (0, _styledComponents.default)(_eui.EuiTab)`
  .euiTab__content {
    align-items: center;
    display: flex;
    flex-direction: row;
    white-space: pre;
  }

  :focus {
    text-decoration: none;

    > span > span {
      text-decoration: underline;
    }
  }
`;
const StyledEuiTabs = (0, _styledComponents.default)(_eui.EuiTabs)`
  padding-inline: ${props => props.theme.eui.euiSizeM};
`;
const TabsContentComponent = ({
  renderCellValue,
  rowRenderers,
  timelineId,
  timelineFullScreen,
  timelineType,
  graphEventId,
  sessionViewConfig,
  timelineDescription
}) => {
  const dispatch = (0, _reactRedux.useDispatch)();
  const getActiveTab = (0, _react.useMemo)(() => (0, _selectors.getActiveTabSelector)(), []);
  const getShowTimeline = (0, _react.useMemo)(() => (0, _selectors.getShowTimelineSelector)(), []);
  const getNumberOfPinnedEvents = (0, _react.useMemo)(() => (0, _selectors.getPinnedEventSelector)(), []);
  const getAppNotes = (0, _react.useMemo)(() => (0, _selectors.getNotesSelector)(), []);
  const getTimelineNoteIds = (0, _react.useMemo)(() => (0, _selectors.getNoteIdsSelector)(), []);
  const getTimelinePinnedEventNotes = (0, _react.useMemo)(() => (0, _selectors.getEventIdToNoteIdsSelector)(), []);
  const {
    isEsqlAdvancedSettingEnabled,
    isTimelineEsqlEnabledByFeatureFlag
  } = (0, _use_esql_availability.useEsqlAvailability)();
  const timelineESQLSavedSearch = (0, _use_selector.useShallowEqualSelector)(state => (0, _selectors2.selectTimelineESQLSavedSearchId)(state, timelineId));
  const activeTab = (0, _use_selector.useShallowEqualSelector)(state => getActiveTab(state, timelineId));
  const showTimeline = (0, _use_selector.useShallowEqualSelector)(state => getShowTimeline(state, timelineId));
  const shouldShowESQLTab = (0, _react.useMemo)(() => {
    // disabling esql feature from feature flag should unequivocally hide the tab
    // irrespective of the fact that the advanced setting is enabled or
    // not or existing esql query is present or not
    if (!isTimelineEsqlEnabledByFeatureFlag) {
      return false;
    }
    return isEsqlAdvancedSettingEnabled || timelineESQLSavedSearch != null;
  }, [isEsqlAdvancedSettingEnabled, isTimelineEsqlEnabledByFeatureFlag, timelineESQLSavedSearch]);
  const numberOfPinnedEvents = (0, _use_selector.useShallowEqualSelector)(state => getNumberOfPinnedEvents(state, timelineId));
  const globalTimelineNoteIds = (0, _use_selector.useDeepEqualSelector)(state => getTimelineNoteIds(state, timelineId));
  const eventIdToNoteIds = (0, _use_selector.useDeepEqualSelector)(state => getTimelinePinnedEventNotes(state, timelineId));
  const appNotes = (0, _use_selector.useDeepEqualSelector)(state => getAppNotes(state));
  const isEnterprisePlus = (0, _use_license.useLicense)().isEnterprise();
  const allTimelineNoteIds = (0, _react.useMemo)(() => {
    const eventNoteIds = Object.values(eventIdToNoteIds).reduce((acc, v) => [...acc, ...v], []);
    return [...globalTimelineNoteIds, ...eventNoteIds];
  }, [globalTimelineNoteIds, eventIdToNoteIds]);
  const numberOfNotes = (0, _react.useMemo)(() => appNotes.filter(appNote => allTimelineNoteIds.includes(appNote.id)).length + ((0, _fp.isEmpty)(timelineDescription) ? 0 : 1), [appNotes, allTimelineNoteIds, timelineDescription]);
  const setActiveTab = (0, _react.useCallback)(tab => {
    dispatch(_store.timelineActions.setActiveTabTimeline({
      id: timelineId,
      activeTab: tab
    }));
  }, [dispatch, timelineId]);
  const setQueryAsActiveTab = (0, _react.useCallback)(() => {
    setActiveTab(_timeline.TimelineTabs.query);
  }, [setActiveTab]);
  const setEqlAsActiveTab = (0, _react.useCallback)(() => {
    setActiveTab(_timeline.TimelineTabs.eql);
  }, [setActiveTab]);
  const setGraphAsActiveTab = (0, _react.useCallback)(() => {
    setActiveTab(_timeline.TimelineTabs.graph);
  }, [setActiveTab]);
  const setNotesAsActiveTab = (0, _react.useCallback)(() => {
    setActiveTab(_timeline.TimelineTabs.notes);
  }, [setActiveTab]);
  const setPinnedAsActiveTab = (0, _react.useCallback)(() => {
    setActiveTab(_timeline.TimelineTabs.pinned);
  }, [setActiveTab]);
  const setSessionAsActiveTab = (0, _react.useCallback)(() => {
    setActiveTab(_timeline.TimelineTabs.session);
  }, [setActiveTab]);
  const setEsqlAsActiveTab = (0, _react.useCallback)(() => {
    dispatch((0, _actions.initializeTimelineSettings)({
      id: timelineId
    }));
    setActiveTab(_timeline.TimelineTabs.esql);
  }, [setActiveTab, dispatch, timelineId]);
  (0, _react.useEffect)(() => {
    if (!graphEventId && activeTab === _timeline.TimelineTabs.graph) {
      setQueryAsActiveTab();
    }
  }, [activeTab, graphEventId, setQueryAsActiveTab]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, !timelineFullScreen && /*#__PURE__*/_react.default.createElement(StyledEuiTabs, {
    className: "eui-scrollBar"
  }, /*#__PURE__*/_react.default.createElement(StyledEuiTab, {
    "data-test-subj": `timelineTabs-${_timeline.TimelineTabs.query}`,
    onClick: setQueryAsActiveTab,
    isSelected: activeTab === _timeline.TimelineTabs.query,
    disabled: false,
    key: _timeline.TimelineTabs.query
  }, /*#__PURE__*/_react.default.createElement("span", null, i18n.QUERY_TAB), showTimeline && /*#__PURE__*/_react.default.createElement(_use_timeline_events_count.TimelineEventsCountBadge, null)), shouldShowESQLTab && /*#__PURE__*/_react.default.createElement(StyledEuiTab, {
    "data-test-subj": `timelineTabs-${_timeline.TimelineTabs.esql}`,
    onClick: setEsqlAsActiveTab,
    isSelected: activeTab === _timeline.TimelineTabs.esql,
    disabled: false,
    key: _timeline.TimelineTabs.esql
  }, /*#__PURE__*/_react.default.createElement("span", null, i18n.DISCOVER_ESQL_IN_TIMELINE_TAB)), timelineType === _timeline2.TimelineType.default && /*#__PURE__*/_react.default.createElement(StyledEuiTab, {
    "data-test-subj": `timelineTabs-${_timeline.TimelineTabs.eql}`,
    onClick: setEqlAsActiveTab,
    isSelected: activeTab === _timeline.TimelineTabs.eql,
    disabled: false,
    key: _timeline.TimelineTabs.eql
  }, /*#__PURE__*/_react.default.createElement("span", null, i18n.EQL_TAB), showTimeline && /*#__PURE__*/_react.default.createElement(_use_timeline_events_count.EqlEventsCountBadge, null)), /*#__PURE__*/_react.default.createElement(_eui.EuiTab, {
    "data-test-subj": `timelineTabs-${_timeline.TimelineTabs.graph}`,
    onClick: setGraphAsActiveTab,
    isSelected: activeTab === _timeline.TimelineTabs.graph,
    disabled: !graphEventId,
    key: _timeline.TimelineTabs.graph
  }, i18n.ANALYZER_TAB), isEnterprisePlus && /*#__PURE__*/_react.default.createElement(_eui.EuiTab, {
    "data-test-subj": `timelineTabs-${_timeline.TimelineTabs.session}`,
    onClick: setSessionAsActiveTab,
    isSelected: activeTab === _timeline.TimelineTabs.session,
    disabled: sessionViewConfig === null,
    key: _timeline.TimelineTabs.session
  }, i18n.SESSION_TAB), /*#__PURE__*/_react.default.createElement(StyledEuiTab, {
    "data-test-subj": `timelineTabs-${_timeline.TimelineTabs.notes}`,
    onClick: setNotesAsActiveTab,
    isSelected: activeTab === _timeline.TimelineTabs.notes,
    disabled: timelineType === _timeline2.TimelineType.template,
    key: _timeline.TimelineTabs.notes
  }, /*#__PURE__*/_react.default.createElement("span", null, i18n.NOTES_TAB), showTimeline && numberOfNotes > 0 && timelineType === _timeline2.TimelineType.default && /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(CountBadge, null, numberOfNotes))), /*#__PURE__*/_react.default.createElement(StyledEuiTab, {
    "data-test-subj": `timelineTabs-${_timeline.TimelineTabs.pinned}`,
    onClick: setPinnedAsActiveTab,
    disabled: timelineType === _timeline2.TimelineType.template,
    isSelected: activeTab === _timeline.TimelineTabs.pinned,
    key: _timeline.TimelineTabs.pinned
  }, /*#__PURE__*/_react.default.createElement("span", null, i18n.PINNED_TAB), showTimeline && numberOfPinnedEvents > 0 && timelineType === _timeline2.TimelineType.default && /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(CountBadge, null, numberOfPinnedEvents)))), /*#__PURE__*/_react.default.createElement(ActiveTimelineTab, {
    activeTimelineTab: activeTab,
    renderCellValue: renderCellValue,
    rowRenderers: rowRenderers,
    timelineId: timelineId,
    timelineType: timelineType,
    timelineDescription: timelineDescription,
    showTimeline: showTimeline
  }));
};
const TabsContent = exports.TabsContent = /*#__PURE__*/(0, _react.memo)(TabsContentComponent);