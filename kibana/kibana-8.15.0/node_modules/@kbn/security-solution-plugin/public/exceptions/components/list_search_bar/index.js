"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ListsSearchBar = exports.EXCEPTIONS_SEARCH_SCHEMA = void 0;
var _react = _interopRequireDefault(require("react"));
var _eui = require("@elastic/eui");
var i18n = _interopRequireWildcard(require("../../translations"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

// TODO replace this component with the @Kbn/securitysolution-exception-list-components
const EXCEPTIONS_SEARCH_SCHEMA = exports.EXCEPTIONS_SEARCH_SCHEMA = {
  strict: true,
  fields: {
    created_by: {
      type: 'string'
    },
    name: {
      type: 'string'
    },
    type: {
      type: 'string'
    },
    list_id: {
      type: 'string'
    },
    tags: {
      type: 'string'
    }
  }
};
const ListsSearchBar = exports.ListsSearchBar = /*#__PURE__*/_react.default.memo(({
  onSearch
}) => {
  return /*#__PURE__*/_react.default.createElement(_eui.EuiSearchBar, {
    "data-test-subj": "exceptionsHeaderSearch",
    "aria-label": i18n.EXCEPTIONS_LISTS_SEARCH_PLACEHOLDER,
    onChange: onSearch,
    box: {
      [`data-test-subj`]: 'exceptionsHeaderSearchInput',
      placeholder: i18n.EXCEPTION_LIST_SEARCH_PLACEHOLDER,
      incremental: false,
      schema: EXCEPTIONS_SEARCH_SCHEMA
    }
  });
});
ListsSearchBar.displayName = 'ListsSearchBar';