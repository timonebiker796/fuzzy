"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NodeEventsInCategory = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _i18n = require("@kbn/i18n");
var _eui = require("@elastic/eui");
var _reactRedux = require("react-redux");
var _i18nReact = require("@kbn/i18n-react");
var _styles = require("../styles");
var _styles2 = require("./styles");
var _breadcrumbs = require("./breadcrumbs");
var eventModel = _interopRequireWildcard(require("../../../../common/endpoint/models/event"));
var selectors = _interopRequireWildcard(require("../../store/selectors"));
var _panel_loading = require("./panel_loading");
var _descriptive_name = require("./descriptive_name");
var _use_link_props = require("../use_link_props");
var _use_formatted_date = require("./use_formatted_date");
var _expand_dotted = require("../../../../common/utils/expand_dotted");
var _action = require("../../store/data/action");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/**
 * Render a list of events that are related to `nodeID` and that have a category of `eventType`.
 */
// eslint-disable-next-line react/display-name
const NodeEventsInCategory = exports.NodeEventsInCategory = /*#__PURE__*/(0, _react.memo)(function ({
  id,
  nodeID,
  eventCategory
}) {
  const node = (0, _reactRedux.useSelector)(state => selectors.graphNodeForID(state.analyzer[id])(nodeID));
  const isLoading = (0, _reactRedux.useSelector)(state => selectors.isLoadingNodeEventsInCategory(state.analyzer[id]));
  const hasError = (0, _reactRedux.useSelector)(state => selectors.hadErrorLoadingNodeEventsInCategory(state.analyzer[id]));
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, isLoading ? /*#__PURE__*/_react.default.createElement(_styles.StyledPanel, {
    hasBorder: true
  }, /*#__PURE__*/_react.default.createElement(_panel_loading.PanelLoading, {
    id: id
  })) : /*#__PURE__*/_react.default.createElement(_styles.StyledPanel, {
    hasBorder: true,
    "data-test-subj": "resolver:panel:events-in-category"
  }, hasError || !node ? /*#__PURE__*/_react.default.createElement(_eui.EuiCallOut, {
    title: _i18n.i18n.translate('xpack.securitySolution.endpoint.resolver.panel.nodeEventsByType.errorPrimary', {
      defaultMessage: 'Unable to load events.'
    }),
    color: "danger",
    iconType: "warning",
    "data-test-subj": "resolver:nodeEventsInCategory:error"
  }, /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.securitySolution.endpoint.resolver.panel.nodeEventsByType.errorSecondary",
    defaultMessage: "An error occurred when fetching the events."
  }))) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(NodeEventsInCategoryBreadcrumbs, {
    id: id,
    nodeName: node.name,
    eventCategory: eventCategory,
    nodeID: nodeID
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "l"
  }), /*#__PURE__*/_react.default.createElement(NodeEventList, {
    id: id,
    eventCategory: eventCategory,
    nodeID: nodeID
  }))));
});

/**
 * Rendered for each event in the list.
 */
// eslint-disable-next-line react/display-name
const NodeEventsListItem = /*#__PURE__*/(0, _react.memo)(function ({
  id,
  event,
  nodeID,
  eventCategory
}) {
  const expandedEvent = (0, _expand_dotted.expandDottedObject)(event);
  const timestamp = eventModel.eventTimestamp(expandedEvent);
  const eventID = eventModel.eventID(expandedEvent);
  const winlogRecordID = eventModel.winlogRecordID(expandedEvent);
  const date = (0, _use_formatted_date.useFormattedDate)(timestamp) || _i18n.i18n.translate('xpack.securitySolution.enpdoint.resolver.panelutils.noTimestampRetrieved', {
    defaultMessage: 'No timestamp retrieved'
  });
  const linkProps = (0, _use_link_props.useLinkProps)(id, {
    panelView: 'eventDetail',
    panelParameters: {
      nodeID,
      eventCategory,
      eventID,
      eventTimestamp: String(timestamp),
      winlogRecordID: String(winlogRecordID)
    }
  });
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiText, null, /*#__PURE__*/_react.default.createElement(_styles2.BoldCode, null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.securitySolution.endpoint.resolver.panel.relatedEventDetail.categoryAndType",
    values: {
      category: eventModel.eventCategory(expandedEvent).join(', '),
      eventType: eventModel.eventType(expandedEvent).join(', ')
    },
    defaultMessage: "{category} {eventType}"
  })), /*#__PURE__*/_react.default.createElement(_styles2.StyledTime, {
    dateTime: date
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.securitySolution.endpoint.resolver.panel.relatedEventDetail.atTime",
    values: {
      date
    },
    defaultMessage: "@ {date}"
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "xs"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiButtonEmpty, (0, _extends2.default)({
    "data-test-subj": "resolver:panel:node-events-in-category:event-link"
  }, linkProps), /*#__PURE__*/_react.default.createElement(_descriptive_name.DescriptiveName, {
    event: expandedEvent
  })));
});

/**
 * Renders a list of events with a separator in between.
 */
const NodeEventList = /*#__PURE__*/(0, _react.memo)(function NodeEventList({
  id,
  eventCategory,
  nodeID
}) {
  const events = (0, _reactRedux.useSelector)(state => selectors.nodeEventsInCategory(state.analyzer[id]));
  const dispatch = (0, _reactRedux.useDispatch)();
  const handleLoadMore = (0, _react.useCallback)(() => {
    dispatch((0, _action.userRequestedAdditionalRelatedEvents)({
      id
    }));
  }, [dispatch, id]);
  const isLoading = (0, _reactRedux.useSelector)(state => selectors.isLoadingMoreNodeEventsInCategory(state.analyzer[id]));
  const hasMore = (0, _reactRedux.useSelector)(state => selectors.lastRelatedEventResponseContainsCursor(state.analyzer[id]));
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, events.map((event, index) => /*#__PURE__*/_react.default.createElement(_react.Fragment, {
    key: index
  }, /*#__PURE__*/_react.default.createElement(NodeEventsListItem, {
    id: id,
    nodeID: nodeID,
    eventCategory: eventCategory,
    event: event
  }), index === events.length - 1 ? null : /*#__PURE__*/_react.default.createElement(_eui.EuiHorizontalRule, {
    margin: "m"
  }))), hasMore && /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
    color: 'primary',
    size: "s",
    fill: true,
    onClick: handleLoadMore,
    isLoading: isLoading,
    "data-test-subj": "resolver:nodeEventsInCategory:loadMore"
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.securitySolution.endpoint.resolver.panel.nodeEventsByType.loadMore",
    defaultMessage: "Load More Data"
  }))));
});

/**
 * Renders `Breadcrumbs`.
 */
// eslint-disable-next-line react/display-name
const NodeEventsInCategoryBreadcrumbs = /*#__PURE__*/(0, _react.memo)(function ({
  id,
  nodeName,
  eventCategory,
  nodeID
}) {
  const eventCount = (0, _reactRedux.useSelector)(state => selectors.totalRelatedEventCountForNode(state.analyzer[id])(nodeID));
  const eventsInCategoryCount = (0, _reactRedux.useSelector)(state => selectors.relatedEventCountOfTypeForNode(state.analyzer[id])(nodeID, eventCategory));
  const nodesLinkNavProps = (0, _use_link_props.useLinkProps)(id, {
    panelView: 'nodes'
  });
  const nodeDetailNavProps = (0, _use_link_props.useLinkProps)(id, {
    panelView: 'nodeDetail',
    panelParameters: {
      nodeID
    }
  });
  const nodeEventsNavProps = (0, _use_link_props.useLinkProps)(id, {
    panelView: 'nodeEvents',
    panelParameters: {
      nodeID
    }
  });
  return /*#__PURE__*/_react.default.createElement(_breadcrumbs.Breadcrumbs, {
    breadcrumbs: [{
      text: _i18n.i18n.translate('xpack.securitySolution.endpoint.resolver.panel.processEventListByType.events', {
        defaultMessage: 'Events'
      }),
      'data-test-subj': 'resolver:node-events-in-category:breadcrumbs:node-list-link',
      ...nodesLinkNavProps
    }, {
      text: nodeName,
      ...nodeDetailNavProps
    }, {
      text: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
        id: "xpack.securitySolution.endpoint.resolver.panel.relatedEventList.numberOfEvents",
        values: {
          totalCount: eventCount
        },
        defaultMessage: "{totalCount} Events"
      }),
      ...nodeEventsNavProps
    }, {
      text: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
        id: "xpack.securitySolution.endpoint.resolver.panel.relatedEventList.countByCategory",
        values: {
          count: eventsInCategoryCount,
          category: eventCategory
        },
        defaultMessage: "{count} {category}"
      })
    }]
  });
});