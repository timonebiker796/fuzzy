"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RelatedEventsFetcher = RelatedEventsFetcher;
var _lodash = require("lodash");
var selectors = _interopRequireWildcard(require("../selectors"));
var _action = require("../data/action");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function RelatedEventsFetcher(dataAccessLayer, api) {
  const last = {};
  // Call this after each state change.
  // This fetches the ResolverTree for the current entityID
  // if the entityID changes while
  return async id => {
    const state = api.getState();
    if (!last[id]) {
      last[id] = undefined;
    }
    const newParams = selectors.panelViewAndParameters(state.analyzer[id]);
    const isLoadingMoreEvents = selectors.isLoadingMoreNodeEventsInCategory(state.analyzer[id]);
    const indices = selectors.eventIndices(state.analyzer[id]);
    const oldParams = last[id];
    const detectedBounds = selectors.detectedBounds(state.analyzer[id]);
    const agentId = selectors.agentId(state.analyzer[id]);
    const timeRangeFilters = detectedBounds !== undefined ? undefined : selectors.timeRangeFilters(state.analyzer[id]);
    // Update this each time before fetching data (or even if we don't fetch data) so that subsequent actions that call this (concurrently) will have up to date info.
    last[id] = newParams;
    async function fetchEvents({
      nodeID,
      eventCategory,
      cursor
    }) {
      let result = null;
      try {
        if (cursor) {
          result = await dataAccessLayer.eventsWithEntityIDAndCategory({
            entityID: nodeID,
            category: eventCategory,
            after: cursor,
            indexPatterns: indices,
            timeRange: timeRangeFilters,
            agentId
          });
        } else {
          result = await dataAccessLayer.eventsWithEntityIDAndCategory({
            entityID: nodeID,
            category: eventCategory,
            indexPatterns: indices,
            timeRange: timeRangeFilters,
            agentId
          });
        }
      } catch (error) {
        api.dispatch((0, _action.serverFailedToReturnNodeEventsInCategory)({
          id,
          nodeID,
          eventCategory,
          cursor
        }));
      }
      if (result) {
        api.dispatch((0, _action.serverReturnedNodeEventsInCategory)({
          id,
          events: result.events,
          eventCategory,
          cursor: result.nextEvent,
          nodeID,
          agentId
        }));
      }
    }

    // If the panel view params have changed and the current panel view is either `nodeEventsInCategory` or `eventDetail`, then fetch the related events for that nodeID.
    if (!(0, _lodash.isEqual)(newParams, oldParams)) {
      if (newParams.panelView === 'nodeEventsInCategory') {
        const nodeID = newParams.panelParameters.nodeID;
        await fetchEvents({
          nodeID,
          eventCategory: newParams.panelParameters.eventCategory,
          cursor: null
        });
      }
    } else if (isLoadingMoreEvents) {
      const nodeEventsInCategory = state.analyzer[id].data.nodeEventsInCategory;
      if (nodeEventsInCategory !== undefined) {
        await fetchEvents(nodeEventsInCategory);
      }
    }
  };
}