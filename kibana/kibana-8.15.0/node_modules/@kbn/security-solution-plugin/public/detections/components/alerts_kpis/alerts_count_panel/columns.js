"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSingleGroupByAlertsCountTableColumns = exports.getMultiGroupAlertsCountTableColumns = void 0;
var _react = _interopRequireDefault(require("react"));
var _numeral = _interopRequireDefault(require("@elastic/numeral"));
var _securitysolutionDataTable = require("@kbn/securitysolution-data-table");
var _draggables = require("../../../../common/components/draggables");
var i18n = _interopRequireWildcard(require("./translations"));
var _helpers = require("./helpers");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const getSingleGroupByAlertsCountTableColumns = ({
  defaultNumberFormat,
  stackByField0
}) => [{
  'data-test-subj': 'stackByField0Key',
  field: 'key',
  name: stackByField0,
  render: function DraggableStackOptionField(value) {
    return /*#__PURE__*/_react.default.createElement(_draggables.DefaultDraggable, {
      isDraggable: false,
      field: stackByField0,
      hideTopN: true,
      id: `alert-count-draggable-stackByField0-${stackByField0}-${value}`,
      value: value,
      tooltipContent: null,
      scopeId: _securitysolutionDataTable.TableId.alertsOnAlertsPage
    });
  },
  truncateText: false
}, {
  'data-test-subj': 'doc_count',
  dataType: 'number',
  field: 'doc_count',
  name: i18n.COUNT_TABLE_COLUMN_TITLE,
  render: item => (0, _numeral.default)(item).format(defaultNumberFormat),
  sortable: true,
  textOnly: true
}];
exports.getSingleGroupByAlertsCountTableColumns = getSingleGroupByAlertsCountTableColumns;
const getMultiGroupAlertsCountTableColumns = ({
  defaultNumberFormat,
  stackByField0,
  stackByField1
}) => [{
  'data-test-subj': 'stackByField0Key',
  field: 'key',
  name: i18n.COLUMN_LABEL({
    fieldName: stackByField0,
    topN: _helpers.DEFAULT_STACK_BY_FIELD0_SIZE
  }),
  render: function DraggableStackOptionField(value) {
    return /*#__PURE__*/_react.default.createElement(_draggables.DefaultDraggable, {
      isDraggable: false,
      field: stackByField0,
      hideTopN: true,
      id: `alert-count-draggable-stackByField0-${stackByField0}-${stackByField1}-${value}`,
      value: value,
      tooltipContent: null,
      scopeId: _securitysolutionDataTable.TableId.alertsOnAlertsPage
    });
  },
  truncateText: false
}, {
  'data-test-subj': 'stackByField1Key',
  field: 'stackByField1Key',
  name: i18n.COLUMN_LABEL({
    fieldName: stackByField1 !== null && stackByField1 !== void 0 ? stackByField1 : '',
    topN: _helpers.DEFAULT_STACK_BY_FIELD1_SIZE
  }),
  render: function DraggableStackOptionField(value) {
    return /*#__PURE__*/_react.default.createElement(_draggables.DefaultDraggable, {
      isDraggable: false,
      field: stackByField1 !== null && stackByField1 !== void 0 ? stackByField1 : '',
      hideTopN: true,
      id: `alert-count-draggable-stackByField1-${stackByField0}-${stackByField1}-${value}`,
      value: value,
      tooltipContent: null,
      scopeId: _securitysolutionDataTable.TableId.alertsOnAlertsPage
    });
  },
  truncateText: false
}, {
  'data-test-subj': 'stackByField1DocCount',
  dataType: 'number',
  field: 'stackByField1DocCount',
  name: i18n.COUNT_TABLE_COLUMN_TITLE,
  render: item => (0, _numeral.default)(item).format(defaultNumberFormat),
  sortable: true,
  textOnly: true
}];
exports.getMultiGroupAlertsCountTableColumns = getMultiGroupAlertsCountTableColumns;