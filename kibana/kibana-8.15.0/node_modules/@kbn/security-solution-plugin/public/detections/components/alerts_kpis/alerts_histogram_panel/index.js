"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DETECTIONS_HISTOGRAM_ID = exports.AlertsHistogramPanel = void 0;
var _eui = require("@elastic/eui");
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _fp = require("lodash/fp");
var _uuid = require("uuid");
var _lodash = require("lodash");
var _use_global_time = require("../../../../common/containers/use_global_time");
var _constants = require("../../../../../common/constants");
var _header_section = require("../../../../common/components/header_section");
var _link_to = require("../../../../common/components/link_to");
var _kibana = require("../../../../common/lib/kibana");
var _helpers = require("./helpers");
var i18n = _interopRequireWildcard(require("./translations"));
var _links = require("../../../../common/components/links");
var _types = require("../../../../app/types");
var _config = require("../common/config");
var _components = require("../common/components");
var _query_toggle = require("../../../../common/containers/query_toggle");
var _translations2 = require("../common/translations");
var _use_experimental_features = require("../../../../common/hooks/use_experimental_features");
var _alerts_histogram = require("../../../../common/components/visualization_actions/lens_attributes/common/alerts/alerts_histogram");
var _model = require("../../../../sourcerer/store/model");
var _visualization_embeddable = require("../../../../common/components/visualization_actions/visualization_embeddable");
var _use_alert_histogram_count = require("../../../hooks/alerts_visualization/use_alert_histogram_count");
var _use_visualization_response = require("../../../../common/components/visualization_actions/use_visualization_response");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const DETECTIONS_HISTOGRAM_ID = exports.DETECTIONS_HISTOGRAM_ID = 'detections-histogram';
const ViewAlertsFlexItem = (0, _styledComponents.default)(_eui.EuiFlexItem)`
  margin-left: ${({
  theme
}) => theme.eui.euiSizeL};
`;
const CHART_HEIGHT = 155; // px

const AlertsHistogramPanel = exports.AlertsHistogramPanel = /*#__PURE__*/(0, _react.memo)(({
  alignHeader,
  chartHeight = CHART_HEIGHT,
  comboboxRef,
  defaultStackByOption = _config.DEFAULT_STACK_BY_FIELD,
  extraActions,
  filters,
  headerChildren,
  inspectTitle,
  onFieldSelected,
  onlyField,
  paddingSize = 'm',
  panelHeight = _config.PANEL_HEIGHT,
  setComboboxInputRef,
  showGroupByPlaceholder = false,
  showLinkToAlerts = false,
  showStackBy = true,
  showTotalAlertsCount = false,
  stackByLabel,
  stackByWidth,
  title = i18n.HISTOGRAM_HEADER,
  titleSize = 'm',
  hideQueryToggle = false,
  isExpanded,
  setIsExpanded
}) => {
  const {
    to,
    from
  } = (0, _use_global_time.useGlobalTime)();

  // create a unique, but stable (across re-renders) query id
  const uniqueQueryId = (0, _react.useMemo)(() => `${DETECTIONS_HISTOGRAM_ID}-${(0, _uuid.v4)()}`, []);
  const visualizationId = `alerts-trend-embeddable-${uniqueQueryId}`;
  const [isInitialLoading, setIsInitialLoading] = (0, _react.useState)(true);
  const [selectedStackByOption, setSelectedStackByOption] = (0, _react.useState)(onlyField == null ? defaultStackByOption : onlyField);
  const isAlertsPageChartsEnabled = (0, _use_experimental_features.useIsExperimentalFeatureEnabled)('alertsPageChartsEnabled');
  const onSelect = (0, _react.useCallback)(field => {
    setSelectedStackByOption(field);
    if (onFieldSelected != null) {
      onFieldSelected(field);
    }
  }, [onFieldSelected]);
  (0, _react.useEffect)(() => {
    setSelectedStackByOption(onlyField == null ? defaultStackByOption : onlyField);
  }, [defaultStackByOption, onlyField]);
  const {
    toggleStatus,
    setToggleStatus
  } = (0, _query_toggle.useQueryToggle)(DETECTIONS_HISTOGRAM_ID);
  const toggleQuery = (0, _react.useCallback)(newToggleStatus => {
    if (isAlertsPageChartsEnabled && setIsExpanded !== undefined) {
      setIsExpanded(newToggleStatus);
    } else {
      setToggleStatus(newToggleStatus);
    }
  }, [setToggleStatus, setIsExpanded, isAlertsPageChartsEnabled]);
  const timerange = (0, _react.useMemo)(() => ({
    from,
    to
  }), [from, to]);
  const kibana = (0, _kibana.useKibana)();
  const {
    navigateToApp
  } = kibana.services.application;
  const {
    formatUrl,
    search: urlSearch
  } = (0, _link_to.useFormatUrl)(_types.SecurityPageName.alerts);
  const {
    loading: isLoadingAlerts
  } = (0, _use_visualization_response.useVisualizationResponse)({
    visualizationId
  });
  const totalAlerts = (0, _use_alert_histogram_count.useAlertHistogramCount)({
    visualizationId
  });
  const goToDetectionEngine = (0, _react.useCallback)(ev => {
    ev.preventDefault();
    navigateToApp(_constants.APP_UI_ID, {
      deepLinkId: _types.SecurityPageName.alerts,
      path: (0, _link_to.getDetectionEngineUrl)(urlSearch)
    });
  }, [navigateToApp, urlSearch]);
  (0, _react.useEffect)(() => {
    let canceled = false;
    if (!canceled && !(0, _helpers.showInitialLoadingSpinner)({
      isInitialLoading,
      isLoadingAlerts
    })) {
      setIsInitialLoading(false);
    }
    return () => {
      canceled = true; // prevent long running data fetches from updating state after unmounting
    };
  }, [isInitialLoading, isLoadingAlerts, setIsInitialLoading]);
  const linkButton = (0, _react.useMemo)(() => {
    if (showLinkToAlerts) {
      return /*#__PURE__*/_react.default.createElement(ViewAlertsFlexItem, {
        grow: false
      }, /*#__PURE__*/_react.default.createElement(_links.LinkButton, {
        "data-test-subj": "alerts-histogram-panel-go-to-alerts-page",
        onClick: goToDetectionEngine,
        href: formatUrl((0, _link_to.getDetectionEngineUrl)())
      }, i18n.VIEW_ALERTS));
    }
  }, [showLinkToAlerts, goToDetectionEngine, formatUrl]);
  const titleText = (0, _react.useMemo)(() => onlyField == null ? title : i18n.TOP(onlyField), [onlyField, title]);
  const showHistogram = (0, _react.useMemo)(() => {
    if (isAlertsPageChartsEnabled) {
      if (isExpanded !== undefined) {
        // alerts page
        return isExpanded;
      } else {
        // rule details page and overview page
        return toggleStatus;
      }
    } else {
      return toggleStatus;
    }
  }, [isAlertsPageChartsEnabled, isExpanded, toggleStatus]);
  const {
    responses,
    loading
  } = (0, _use_visualization_response.useVisualizationResponse)({
    visualizationId
  });
  const embeddedDataLoaded = !loading && !(0, _fp.isEmpty)(responses);
  const aggregationBucketsCount = (0, _react.useMemo)(() => loading ? 0 : (0, _lodash.sumBy)(responses, responseItem => {
    var _responseItem$aggrega;
    return (0, _lodash.sumBy)(Object.values((_responseItem$aggrega = responseItem.aggregations) !== null && _responseItem$aggrega !== void 0 ? _responseItem$aggrega : {}), 'buckets.length');
  }), [loading, responses]);
  const embeddedDataAvailable = !!aggregationBucketsCount;
  const subtitle = showHistogram ? (0, _helpers.createEmbeddedDataSubtitle)(embeddedDataLoaded, embeddedDataAvailable, totalAlerts) : (0, _helpers.createGenericSubtitle)(isInitialLoading, showTotalAlertsCount, totalAlerts);
  return /*#__PURE__*/_react.default.createElement(_components.KpiPanel, {
    height: panelHeight,
    hasBorder: true,
    paddingSize: paddingSize,
    "data-test-subj": "alerts-histogram-panel",
    $toggleStatus: showHistogram
  }, /*#__PURE__*/_react.default.createElement(_header_section.HeaderSection, {
    alignHeader: alignHeader,
    id: uniqueQueryId,
    inspectTitle: inspectTitle,
    outerDirection: "column",
    title: titleText,
    titleSize: titleSize,
    toggleStatus: showHistogram,
    toggleQuery: hideQueryToggle ? undefined : toggleQuery,
    showInspectButton: false,
    subtitle: subtitle,
    isInspectDisabled: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    alignItems: "flexStart",
    "data-test-subj": "panelFlexGroup",
    gutterSize: "none"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, showStackBy && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_components.StackByComboBox, {
    "data-test-subj": "stackByComboBox",
    inputRef: setComboboxInputRef,
    onSelect: onSelect,
    prepend: stackByLabel,
    ref: comboboxRef,
    selected: selectedStackByOption,
    useLensCompatibleFields: true,
    width: stackByWidth
  }), showGroupByPlaceholder && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    "data-test-subj": "placeholderSpacer",
    size: "s"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiToolTip, {
    "data-test-subj": "placeholderTooltip",
    content: i18n.NOT_AVAILABLE_TOOLTIP
  }, /*#__PURE__*/_react.default.createElement(_components.StackByComboBox, {
    "data-test-subj": "stackByPlaceholder",
    isDisabled: true,
    onSelect: _fp.noop,
    prepend: _translations2.GROUP_BY_TOP_LABEL,
    selected: "",
    useLensCompatibleFields: true,
    width: stackByWidth
  })))), headerChildren != null && headerChildren), linkButton)), showHistogram ? /*#__PURE__*/_react.default.createElement(_visualization_embeddable.VisualizationEmbeddable, {
    "data-test-subj": "embeddable-matrix-histogram",
    extraActions: extraActions,
    extraOptions: {
      filters
    },
    getLensAttributes: _alerts_histogram.getAlertsHistogramLensAttributes,
    height: chartHeight !== null && chartHeight !== void 0 ? chartHeight : CHART_HEIGHT,
    id: visualizationId,
    inspectTitle: inspectTitle !== null && inspectTitle !== void 0 ? inspectTitle : title,
    scopeId: _model.SourcererScopeName.detections,
    stackByField: selectedStackByOption,
    timerange: timerange
  }) : null);
});
AlertsHistogramPanel.displayName = 'AlertsHistogramPanel';