"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TakeActionDropdown = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _securitysolutionDataTable = require("@kbn/securitysolution-data-table");
var _get_event_details_field_values = require("../../../common/lib/endpoint/utils/get_event_details_field_values");
var _tour_step = require("../../../common/components/guided_onboarding_tour/tour_step");
var _tour_config = require("../../../common/components/guided_onboarding_tour/tour_config");
var _helpers = require("../../../helpers");
var _translations = require("../alerts_table/additional_filters_action/translations");
var _use_add_exception_actions = require("../alerts_table/timeline_actions/use_add_exception_actions");
var _use_alerts_actions = require("../alerts_table/timeline_actions/use_alerts_actions");
var _use_investigate_in_timeline = require("../alerts_table/timeline_actions/use_investigate_in_timeline");
var _use_event_filter_action = require("../alerts_table/timeline_actions/use_event_filter_action");
var _responder = require("../../../common/components/endpoint/responder");
var _host_isolation = require("../../../common/components/endpoint/host_isolation");
var _user_privileges = require("../../../common/components/user_privileges");
var _use_add_to_case_actions = require("../alerts_table/timeline_actions/use_add_to_case_actions");
var _kibana = require("../../../common/lib/kibana");
var _osquery_action_item = require("../osquery/osquery_action_item");
var _use_alert_tags_actions = require("../alerts_table/timeline_actions/use_alert_tags_actions");
var _use_alert_assignees_actions = require("../alerts_table/timeline_actions/use_alert_assignees_actions");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

// eslint-disable-next-line react/display-name
const TakeActionDropdown = exports.TakeActionDropdown = /*#__PURE__*/_react.default.memo(({
  detailsData,
  ecsData,
  handleOnEventClosed,
  isHostIsolationPanelOpen,
  loadingEventDetails,
  onAddEventFilterClick,
  onAddExceptionTypeClick,
  onAddIsolationStatusClick,
  refetch,
  refetchFlyoutData,
  onOsqueryClick,
  scopeId
}) => {
  var _detailsData$map;
  const {
    loading: endpointPrivilegesLoading,
    canWriteEventFilters
  } = (0, _user_privileges.useUserPrivileges)().endpointPrivileges;
  const canCreateEndpointEventFilters = (0, _react.useMemo)(() => !endpointPrivilegesLoading && canWriteEventFilters, [canWriteEventFilters, endpointPrivilegesLoading]);
  const {
    osquery
  } = (0, _kibana.useKibana)().services;
  const [isPopoverOpen, setIsPopoverOpen] = (0, _react.useState)(false);
  const actionsData = (0, _react.useMemo)(() => [{
    category: 'kibana',
    field: 'kibana.alert.rule.uuid',
    name: 'ruleId'
  }, {
    category: 'kibana',
    field: 'kibana.alert.rule.name',
    name: 'ruleName'
  }, {
    category: 'kibana',
    field: 'kibana.alert.workflow_status',
    name: 'alertStatus'
  }, {
    category: 'event',
    field: 'event.kind',
    name: 'eventKind'
  }, {
    category: '_id',
    field: '_id',
    name: 'eventId'
  }].reduce((acc, curr) => ({
    ...acc,
    [curr.name]: (0, _get_event_details_field_values.getAlertDetailsFieldValue)({
      category: curr.category,
      field: curr.field
    }, detailsData)
  }), {}), [detailsData]);
  const isEvent = actionsData.eventKind === 'event';
  const isAgentEndpoint = (0, _react.useMemo)(() => {
    var _ecsData$agent, _ecsData$agent$type;
    return ecsData === null || ecsData === void 0 ? void 0 : (_ecsData$agent = ecsData.agent) === null || _ecsData$agent === void 0 ? void 0 : (_ecsData$agent$type = _ecsData$agent.type) === null || _ecsData$agent$type === void 0 ? void 0 : _ecsData$agent$type.includes('endpoint');
  }, [ecsData]);
  const isEndpointEvent = (0, _react.useMemo)(() => isEvent && isAgentEndpoint, [isEvent, isAgentEndpoint]);
  const osqueryAgentId = (0, _react.useMemo)(() => (0, _get_event_details_field_values.getAlertDetailsFieldValue)({
    category: 'agent',
    field: 'agent.id'
  }, detailsData), [detailsData]);
  const togglePopoverHandler = (0, _react.useCallback)(() => {
    setIsPopoverOpen(!isPopoverOpen);
  }, [isPopoverOpen]);
  const closePopoverHandler = (0, _react.useCallback)(() => {
    setIsPopoverOpen(false);
  }, []);
  const closePopoverAndFlyout = (0, _react.useCallback)(() => {
    handleOnEventClosed();
    setIsPopoverOpen(false);
  }, [handleOnEventClosed]);
  const handleOnAddIsolationStatusClick = (0, _react.useCallback)(action => {
    onAddIsolationStatusClick(action);
    setIsPopoverOpen(false);
  }, [onAddIsolationStatusClick]);
  const hostIsolationActionItems = (0, _host_isolation.useHostIsolationAction)({
    closePopover: closePopoverHandler,
    detailsData,
    onAddIsolationStatusClick: handleOnAddIsolationStatusClick,
    isHostIsolationPanelOpen
  });
  const endpointResponseActionsConsoleItems = (0, _responder.useResponderActionItem)(detailsData, closePopoverHandler);
  const handleOnAddExceptionTypeClick = (0, _react.useCallback)(type => {
    onAddExceptionTypeClick(type);
    setIsPopoverOpen(false);
  }, [onAddExceptionTypeClick]);
  const {
    exceptionActionItems
  } = (0, _use_add_exception_actions.useAlertExceptionActions)({
    isEndpointAlert: Boolean(isAgentEndpoint),
    onAddExceptionTypeClick: handleOnAddExceptionTypeClick
  });
  const handleOnAddEventFilterClick = (0, _react.useCallback)(() => {
    onAddEventFilterClick();
    setIsPopoverOpen(false);
  }, [onAddEventFilterClick]);
  const {
    eventFilterActionItems
  } = (0, _use_event_filter_action.useEventFilterAction)({
    onAddEventFilterClick: handleOnAddEventFilterClick
  });
  const onMenuItemClick = (0, _react.useCallback)(() => {
    closePopoverHandler();
  }, [closePopoverHandler]);
  const {
    actionItems: statusActionItems
  } = (0, _use_alerts_actions.useAlertsActions)({
    alertStatus: actionsData.alertStatus,
    closePopover: closePopoverAndFlyout,
    eventId: actionsData.eventId,
    refetch,
    scopeId
  });
  const {
    alertTagsItems,
    alertTagsPanels
  } = (0, _use_alert_tags_actions.useAlertTagsActions)({
    closePopover: closePopoverHandler,
    ecsRowData: ecsData !== null && ecsData !== void 0 ? ecsData : {
      _id: actionsData.eventId
    },
    refetch
  });
  const onAssigneesUpdate = (0, _react.useCallback)(() => {
    if (refetch) {
      refetch();
    }
    if (refetchFlyoutData) {
      refetchFlyoutData();
    }
  }, [refetch, refetchFlyoutData]);
  const {
    alertAssigneesItems,
    alertAssigneesPanels
  } = (0, _use_alert_assignees_actions.useAlertAssigneesActions)({
    closePopover: closePopoverHandler,
    ecsRowData: ecsData !== null && ecsData !== void 0 ? ecsData : {
      _id: actionsData.eventId
    },
    refetch: onAssigneesUpdate
  });
  const {
    investigateInTimelineActionItems
  } = (0, _use_investigate_in_timeline.useInvestigateInTimeline)({
    ecsRowData: ecsData,
    onInvestigateInTimelineAlertClick: closePopoverHandler
  });
  const osqueryAvailable = osquery === null || osquery === void 0 ? void 0 : osquery.isOsqueryAvailable({
    agentId: osqueryAgentId
  });
  const handleOnOsqueryClick = (0, _react.useCallback)(() => {
    onOsqueryClick(osqueryAgentId);
    setIsPopoverOpen(false);
  }, [onOsqueryClick, setIsPopoverOpen, osqueryAgentId]);
  const osqueryActionItem = (0, _react.useMemo)(() => (0, _osquery_action_item.getOsqueryActionItem)({
    handleClick: handleOnOsqueryClick
  }), [handleOnOsqueryClick]);
  const alertsActionItems = (0, _react.useMemo)(() => !isEvent && actionsData.ruleId ? [...statusActionItems, ...alertTagsItems, ...alertAssigneesItems, ...exceptionActionItems] : isEndpointEvent && canCreateEndpointEventFilters ? eventFilterActionItems : [], [eventFilterActionItems, isEndpointEvent, canCreateEndpointEventFilters, exceptionActionItems, statusActionItems, isEvent, actionsData.ruleId, alertTagsItems, alertAssigneesItems]);
  const isInDetections = [_securitysolutionDataTable.TableId.alertsOnAlertsPage, _securitysolutionDataTable.TableId.alertsOnRuleDetailsPage].includes(scopeId);
  const {
    addToCaseActionItems,
    handleAddToNewCaseClick
  } = (0, _use_add_to_case_actions.useAddToCaseActions)({
    ecsData,
    nonEcsData: (_detailsData$map = detailsData === null || detailsData === void 0 ? void 0 : detailsData.map(d => ({
      field: d.field,
      value: d.values
    }))) !== null && _detailsData$map !== void 0 ? _detailsData$map : [],
    onMenuItemClick,
    onSuccess: refetchFlyoutData,
    isActiveTimelines: (0, _helpers.isActiveTimeline)(scopeId),
    isInDetections,
    refetch
  });
  const items = (0, _react.useMemo)(() => [...addToCaseActionItems, ...alertsActionItems, ...hostIsolationActionItems, ...endpointResponseActionsConsoleItems, ...(osqueryAvailable ? [osqueryActionItem] : []), ...investigateInTimelineActionItems], [addToCaseActionItems, alertsActionItems, hostIsolationActionItems, endpointResponseActionsConsoleItems, osqueryAvailable, osqueryActionItem, investigateInTimelineActionItems]);
  const panels = [{
    id: 0,
    items
  }, ...alertTagsPanels, ...alertAssigneesPanels];
  const takeActionButton = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement(_tour_step.GuidedOnboardingTourStep, {
    onClick: handleAddToNewCaseClick,
    step: _tour_config.AlertsCasesTourSteps.addAlertToCase,
    tourId: _tour_config.SecurityStepId.alertsCases
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
    "data-test-subj": "take-action-dropdown-btn",
    fill: true,
    iconSide: "right",
    iconType: "arrowDown",
    onClick: togglePopoverHandler
  }, _translations.TAKE_ACTION)), [handleAddToNewCaseClick, togglePopoverHandler]);
  return items.length && !loadingEventDetails && ecsData ? /*#__PURE__*/_react.default.createElement(_eui.EuiPopover, {
    id: "AlertTakeActionPanel",
    button: takeActionButton,
    isOpen: isPopoverOpen,
    closePopover: closePopoverHandler,
    panelPaddingSize: "none",
    anchorPosition: "downLeft",
    repositionOnScroll: true
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiContextMenu, {
    size: "s",
    initialPanelId: 0,
    panels: panels,
    "data-test-subj": "takeActionPanelMenu"
  })) : null;
});