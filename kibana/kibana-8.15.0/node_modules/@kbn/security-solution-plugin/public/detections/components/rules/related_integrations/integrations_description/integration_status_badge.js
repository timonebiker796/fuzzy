"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IntegrationStatusBadge = void 0;
var _react = _interopRequireDefault(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _eui = require("@elastic/eui");
var i18n = _interopRequireWildcard(require("../translations"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const PaddedBadge = (0, _styledComponents.default)(_eui.EuiBadge)`
  margin-left: 5px;
`;
const IntegrationStatusBadgeComponent = ({
  integration
}) => {
  const {
    installationStatus
  } = integration;
  if (!installationStatus.isKnown) {
    return null;
  }
  const {
    isInstalled,
    isEnabled
  } = installationStatus;
  const color = isEnabled ? 'success' : isInstalled ? 'primary' : undefined;
  const tooltipText = isInstalled ? isEnabled ? i18n.INTEGRATIONS_ENABLED_TOOLTIP : i18n.INTEGRATIONS_INSTALLED_TOOLTIP : i18n.INTEGRATIONS_UNINSTALLED_TOOLTIP;
  const statusText = isEnabled ? i18n.INTEGRATIONS_ENABLED : isInstalled ? i18n.INTEGRATIONS_DISABLED : i18n.INTEGRATIONS_UNINSTALLED;
  return /*#__PURE__*/_react.default.createElement(_eui.EuiToolTip, {
    content: tooltipText
  }, /*#__PURE__*/_react.default.createElement(PaddedBadge, {
    color: color,
    "data-test-subj": 'statusBadge'
  }, statusText));
};
const IntegrationStatusBadge = exports.IntegrationStatusBadge = /*#__PURE__*/_react.default.memo(IntegrationStatusBadgeComponent);
IntegrationStatusBadge.displayName = 'IntegrationStatusBadge';