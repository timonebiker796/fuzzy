"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createToggleColumnCellActionFactory = void 0;
var _i18n = require("@kbn/i18n");
var _actions = require("@kbn/cell-actions/actions");
var _securitysolutionDataTable = require("@kbn/securitysolution-data-table");
var _utils = require("../../utils");
var _helpers = require("../../../../helpers");
var _defaults = require("../../../../timelines/store/defaults");
var _store = require("../../../../timelines/store");
var _constants = require("../../../../timelines/components/timeline/body/constants");
var _constants2 = require("../../constants");
var _alert_table_scope_config = require("../../../../common/lib/triggers_actions_ui/alert_table_scope_config");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const ICON = 'listAdd';
const COLUMN_TOGGLE = _i18n.i18n.translate('xpack.securitySolution.actions.toggleColumnToggle.label', {
  defaultMessage: 'Toggle column in table'
});
const NESTED_COLUMN = field => _i18n.i18n.translate('xpack.securitySolution.actions.toggleColumnToggle.nestedLabel', {
  values: {
    field
  },
  defaultMessage: 'The {field} field is an object, and is broken down into nested fields which can be added as columns'
});
const createToggleColumnCellActionFactory = exports.createToggleColumnCellActionFactory = (0, _actions.createCellActionFactory)(({
  store,
  services
}) => ({
  type: _constants2.SecurityCellActionType.TOGGLE_COLUMN,
  getIconType: () => ICON,
  getDisplayName: () => COLUMN_TOGGLE,
  getDisplayNameTooltip: ({
    data,
    metadata
  }) => {
    var _data$;
    return metadata !== null && metadata !== void 0 && metadata.isObjectArray ? NESTED_COLUMN((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$.field.name) : COLUMN_TOGGLE;
  },
  isCompatible: async ({
    data,
    metadata
  }) => {
    var _data$2;
    const field = (_data$2 = data[0]) === null || _data$2 === void 0 ? void 0 : _data$2.field;
    return data.length === 1 && (0, _utils.fieldHasCellActions)(field.name) && !!(metadata !== null && metadata !== void 0 && metadata.scopeId) && ((0, _helpers.isTimelineScope)(metadata.scopeId) || (0, _helpers.isInTableScope)(metadata.scopeId));
  },
  execute: async ({
    metadata,
    data
  }) => {
    var _data$3, _selector;
    const field = (_data$3 = data[0]) === null || _data$3 === void 0 ? void 0 : _data$3.field;
    const scopeId = metadata === null || metadata === void 0 ? void 0 : metadata.scopeId;
    if (!scopeId) return;
    const scopedActions = (0, _helpers.getScopedActions)(scopeId);
    if (!scopedActions) {
      return;
    }
    const alertTableConfigurationId = (0, _alert_table_scope_config.getAlertConfigIdByScopeId)(scopeId);
    if (alertTableConfigurationId) {
      var _services$triggersAct;
      (_services$triggersAct = services.triggersActionsUi.alertsTableConfigurationRegistry.getActions(alertTableConfigurationId)) === null || _services$triggersAct === void 0 ? void 0 : _services$triggersAct.toggleColumn(field.name);
      return;
    }
    const selector = (0, _helpers.isTimelineScope)(scopeId) ? _store.timelineSelectors.getTimelineByIdSelector() : _securitysolutionDataTable.dataTableSelectors.getTableByIdSelector();
    const defaults = (0, _helpers.isTimelineScope)(scopeId) ? _defaults.timelineDefaults : _securitysolutionDataTable.tableDefaults;
    const {
      columns
    } = (_selector = selector(store.getState(), scopeId)) !== null && _selector !== void 0 ? _selector : defaults;
    if (columns.some(c => c.id === field.name)) {
      store.dispatch(scopedActions.removeColumn({
        columnId: field.name,
        id: scopeId
      }));
    } else {
      store.dispatch(scopedActions.upsertColumn({
        column: {
          columnHeaderType: _securitysolutionDataTable.defaultColumnHeaderType,
          id: field.name,
          initialWidth: _constants.DEFAULT_COLUMN_MIN_WIDTH
        },
        id: scopeId,
        index: 1
      }));
    }
  }
}));