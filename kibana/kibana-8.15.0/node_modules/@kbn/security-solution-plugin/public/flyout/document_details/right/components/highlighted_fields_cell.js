"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HighlightedFieldsCell = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _expandableFlyout = require("@kbn/expandable-flyout");
var _agent_status = require("../../../../common/components/endpoint/agents/agent_status");
var _context = require("../../shared/context");
var _use_experimental_features = require("../../../../common/hooks/use_experimental_features");
var _constants = require("../../../../timelines/components/timeline/body/renderers/constants");
var _panel_keys = require("../../shared/constants/panel_keys");
var _left = require("../../left");
var _kibana = require("../../../../common/lib/kibana");
var _entities_details = require("../../left/components/entities_details");
var _test_ids = require("./test_ids");
var _constants2 = require("../../../../../common/endpoint/service/response_actions/constants");
var _host_right = require("../../../entity_details/host_right");
var _host_entity_overview = require("./host_entity_overview");
var _user_right = require("../../../entity_details/user_right");
var _user_entity_overview = require("./user_entity_overview");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/**
 * // Currently we can use the same component for both host name and username
 */
const LinkFieldCell = ({
  field,
  value
}) => {
  const {
    scopeId,
    eventId,
    indexName
  } = (0, _context.useDocumentDetailsContext)();
  const {
    openLeftPanel,
    openPreviewPanel
  } = (0, _expandableFlyout.useExpandableFlyoutApi)();
  const isPreviewEnabled = !(0, _use_experimental_features.useIsExperimentalFeatureEnabled)('entityAlertPreviewDisabled');
  const {
    telemetry
  } = (0, _kibana.useKibana)().services;
  const goToInsightsEntities = (0, _react.useCallback)(() => {
    openLeftPanel({
      id: _panel_keys.DocumentDetailsLeftPanelKey,
      path: {
        tab: _left.LeftPanelInsightsTab,
        subTab: _entities_details.ENTITIES_TAB_ID
      },
      params: {
        id: eventId,
        indexName,
        scopeId
      }
    });
  }, [eventId, indexName, openLeftPanel, scopeId]);
  const openHostPreview = (0, _react.useCallback)(() => {
    openPreviewPanel({
      id: _host_right.HostPreviewPanelKey,
      params: {
        hostName: value,
        scopeId,
        banner: _host_entity_overview.HOST_PREVIEW_BANNER
      }
    });
    telemetry.reportDetailsFlyoutOpened({
      location: scopeId,
      panel: 'preview'
    });
  }, [openPreviewPanel, value, scopeId, telemetry]);
  const openUserPreview = (0, _react.useCallback)(() => {
    openPreviewPanel({
      id: _user_right.UserPreviewPanelKey,
      params: {
        userName: value,
        scopeId,
        banner: _user_entity_overview.USER_PREVIEW_BANNER
      }
    });
    telemetry.reportDetailsFlyoutOpened({
      location: scopeId,
      panel: 'preview'
    });
  }, [openPreviewPanel, value, scopeId, telemetry]);
  const onClick = (0, _react.useMemo)(() => {
    if (isPreviewEnabled && field === _constants.HOST_NAME_FIELD_NAME) {
      return openHostPreview;
    }
    if (isPreviewEnabled && field === _constants.USER_NAME_FIELD_NAME) {
      return openUserPreview;
    }
    return goToInsightsEntities;
  }, [isPreviewEnabled, field, openHostPreview, openUserPreview, goToInsightsEntities]);
  return /*#__PURE__*/_react.default.createElement(_eui.EuiLink, {
    onClick: onClick,
    "data-test-subj": _test_ids.HIGHLIGHTED_FIELDS_LINKED_CELL_TEST_ID
  }, value);
};
/**
 * Renders a component in the highlighted fields table cell based on the field name
 */
const HighlightedFieldsCell = ({
  values,
  field,
  originalField
}) => {
  const isSentinelOneAgentIdField = (0, _react.useMemo)(() => originalField === _constants2.RESPONSE_ACTIONS_ALERT_AGENT_ID_FIELD.sentinel_one, [originalField]);
  const isCrowdstrikeAgentIdField = (0, _react.useMemo)(() => originalField === _constants2.RESPONSE_ACTIONS_ALERT_AGENT_ID_FIELD.crowdstrike, [originalField]);
  const agentType = (0, _react.useMemo)(() => {
    if (isSentinelOneAgentIdField) {
      return 'sentinel_one';
    }
    if (isCrowdstrikeAgentIdField) {
      return 'crowdstrike';
    }
    return 'endpoint';
  }, [isCrowdstrikeAgentIdField, isSentinelOneAgentIdField]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, values != null && values.map((value, i) => {
    return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
      grow: false,
      key: `${i}-${value}`,
      "data-test-subj": `${value}-${_test_ids.HIGHLIGHTED_FIELDS_CELL_TEST_ID}`
    }, field === _constants.HOST_NAME_FIELD_NAME || field === _constants.USER_NAME_FIELD_NAME ? /*#__PURE__*/_react.default.createElement(LinkFieldCell, {
      field: field,
      value: value
    }) : field === _constants.AGENT_STATUS_FIELD_NAME ? /*#__PURE__*/_react.default.createElement(_agent_status.AgentStatus, {
      agentId: String(value !== null && value !== void 0 ? value : ''),
      agentType: agentType,
      "data-test-subj": _test_ids.HIGHLIGHTED_FIELDS_AGENT_STATUS_CELL_TEST_ID
    }) : /*#__PURE__*/_react.default.createElement("span", {
      "data-test-subj": _test_ids.HIGHLIGHTED_FIELDS_BASIC_CELL_TEST_ID
    }, value));
  }));
};
exports.HighlightedFieldsCell = HighlightedFieldsCell;