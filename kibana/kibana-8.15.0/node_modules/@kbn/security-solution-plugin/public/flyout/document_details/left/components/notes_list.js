"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NotesList = exports.NO_NOTES = exports.FETCH_NOTES_ERROR = exports.DELETE_NOTE_ERROR = exports.DELETE_NOTE = exports.ADDED_A_NOTE = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _reactRedux = require("react-redux");
var _i18nReact = require("@kbn/i18n-react");
var _i18n = require("@kbn/i18n");
var _markdown_editor = require("../../../../common/components/markdown_editor");
var _use_experimental_features = require("../../../../common/hooks/use_experimental_features");
var _helpers = require("../../../../timelines/components/open_timeline/helpers");
var _test_ids = require("./test_ids");
var _notes = require("../../../../notes/store/notes.slice");
var _use_app_toasts = require("../../../../common/hooks/use_app_toasts");
var _user_privileges = require("../../../../common/components/user_privileges");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const ADDED_A_NOTE = exports.ADDED_A_NOTE = _i18n.i18n.translate('xpack.securitySolution.notes.addedANoteLabel', {
  defaultMessage: 'added a note'
});
const FETCH_NOTES_ERROR = exports.FETCH_NOTES_ERROR = _i18n.i18n.translate('xpack.securitySolution.notes.fetchNotesErrorLabel', {
  defaultMessage: 'Error fetching notes'
});
const NO_NOTES = exports.NO_NOTES = _i18n.i18n.translate('xpack.securitySolution.notes.noNotesLabel', {
  defaultMessage: 'No notes have been created for this document'
});
const DELETE_NOTE = exports.DELETE_NOTE = _i18n.i18n.translate('xpack.securitySolution.notes.deleteNoteLabel', {
  defaultMessage: 'Delete note'
});
const DELETE_NOTE_ERROR = exports.DELETE_NOTE_ERROR = _i18n.i18n.translate('xpack.securitySolution.notes.deleteNoteErrorLabel', {
  defaultMessage: 'Error deleting note'
});
/**
 * Renders a list of notes for the document.
 * If a note belongs to a timeline, a timeline icon will be shown the top right corner.
 * Also, a delete icon is shown in the top right corner to delete a note.
 * When a note is being created, the component renders a loading spinner when the new note is about to be added.
 */
const NotesList = exports.NotesList = /*#__PURE__*/(0, _react.memo)(({
  eventId
}) => {
  const dispatch = (0, _reactRedux.useDispatch)();
  const {
    addError: addErrorToast
  } = (0, _use_app_toasts.useAppToasts)();
  const {
    kibanaSecuritySolutionsPrivileges
  } = (0, _user_privileges.useUserPrivileges)();
  const canDeleteNotes = kibanaSecuritySolutionsPrivileges.crud;
  const unifiedComponentsInTimelineDisabled = (0, _use_experimental_features.useIsExperimentalFeatureEnabled)('unifiedComponentsInTimelineDisabled');
  const fetchStatus = (0, _reactRedux.useSelector)(state => (0, _notes.selectFetchNotesByDocumentIdsStatus)(state));
  const fetchError = (0, _reactRedux.useSelector)(state => (0, _notes.selectFetchNotesByDocumentIdsError)(state));
  const notes = (0, _reactRedux.useSelector)(state => (0, _notes.selectSortedNotesByDocumentId)(state, {
    documentId: eventId,
    sort: {
      field: 'created',
      direction: 'desc'
    }
  }));
  const createStatus = (0, _reactRedux.useSelector)(state => (0, _notes.selectCreateNoteStatus)(state));
  const deleteStatus = (0, _reactRedux.useSelector)(state => (0, _notes.selectDeleteNotesStatus)(state));
  const deleteError = (0, _reactRedux.useSelector)(state => (0, _notes.selectDeleteNotesError)(state));
  const [deletingNoteId, setDeletingNoteId] = (0, _react.useState)('');
  const deleteNoteFc = (0, _react.useCallback)(noteId => {
    setDeletingNoteId(noteId);
    dispatch((0, _notes.deleteNotes)({
      ids: [noteId]
    }));
  }, [dispatch]);
  const queryTimelineById = (0, _helpers.useQueryTimelineById)();
  const openTimeline = (0, _react.useCallback)(({
    timelineId
  }) => queryTimelineById({
    duplicate: false,
    onOpenTimeline: undefined,
    timelineId,
    timelineType: undefined,
    unifiedComponentsInTimelineDisabled
  }), [queryTimelineById, unifiedComponentsInTimelineDisabled]);

  // show a toast if the fetch notes call fails
  (0, _react.useEffect)(() => {
    if (fetchStatus === _notes.ReqStatus.Failed && fetchError) {
      addErrorToast(null, {
        title: FETCH_NOTES_ERROR
      });
    }
  }, [addErrorToast, fetchError, fetchStatus]);
  (0, _react.useEffect)(() => {
    if (deleteStatus === _notes.ReqStatus.Failed && deleteError) {
      addErrorToast(null, {
        title: DELETE_NOTE_ERROR
      });
    }
  }, [addErrorToast, deleteError, deleteStatus]);
  if (fetchStatus === _notes.ReqStatus.Loading) {
    return /*#__PURE__*/_react.default.createElement(_eui.EuiLoadingElastic, {
      "data-test-subj": _test_ids.NOTES_LOADING_TEST_ID,
      size: "xxl"
    });
  }
  if (fetchStatus === _notes.ReqStatus.Succeeded && notes.length === 0) {
    return /*#__PURE__*/_react.default.createElement("p", null, NO_NOTES);
  }
  return /*#__PURE__*/_react.default.createElement(_eui.EuiCommentList, null, notes.map((note, index) => /*#__PURE__*/_react.default.createElement(_eui.EuiComment, {
    "data-test-subj": `${_test_ids.NOTES_COMMENT_TEST_ID}-${index}`,
    key: note.noteId,
    username: note.createdBy,
    timestamp: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, note.created && /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedRelative, {
      value: new Date(note.created)
    })),
    event: ADDED_A_NOTE,
    actions: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, note.timelineId && note.timelineId.length > 0 && /*#__PURE__*/_react.default.createElement(_eui.EuiButtonIcon, {
      "data-test-subj": `${_test_ids.OPEN_TIMELINE_BUTTON_TEST_ID}-${index}`,
      title: "Open timeline",
      "aria-label": "Open timeline",
      color: "text",
      iconType: "timeline",
      onClick: () => openTimeline(note)
    }), canDeleteNotes && /*#__PURE__*/_react.default.createElement(_eui.EuiButtonIcon, {
      "data-test-subj": `${_test_ids.DELETE_NOTE_BUTTON_TEST_ID}-${index}`,
      title: DELETE_NOTE,
      "aria-label": DELETE_NOTE,
      color: "text",
      iconType: "trash",
      onClick: () => deleteNoteFc(note.noteId),
      disabled: deletingNoteId !== note.noteId && deleteStatus === _notes.ReqStatus.Loading,
      isLoading: deletingNoteId === note.noteId && deleteStatus === _notes.ReqStatus.Loading
    })),
    timelineAvatar: /*#__PURE__*/_react.default.createElement(_eui.EuiAvatar, {
      "data-test-subj": `${_test_ids.NOTE_AVATAR_TEST_ID}-${index}`,
      size: "l",
      name: note.updatedBy || '?'
    })
  }, /*#__PURE__*/_react.default.createElement(_markdown_editor.MarkdownRenderer, null, note.note || ''))), createStatus === _notes.ReqStatus.Loading && /*#__PURE__*/_react.default.createElement(_eui.EuiLoadingElastic, {
    size: "xxl",
    "data-test-subj": _test_ids.ADD_NOTE_LOADING_TEST_ID
  }));
});
NotesList.displayName = 'NotesList';