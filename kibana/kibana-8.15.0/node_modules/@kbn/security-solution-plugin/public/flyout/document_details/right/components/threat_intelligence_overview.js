"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ThreatIntelligenceOverview = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _expandableFlyout = require("@kbn/expandable-flyout");
var _i18nReact = require("@kbn/i18n-react");
var _expandable_panel = require("../../../shared/components/expandable_panel");
var _use_fetch_threat_intelligence = require("../hooks/use_fetch_threat_intelligence");
var _insights_summary_row = require("./insights_summary_row");
var _context = require("../../shared/context");
var _test_ids = require("./test_ids");
var _panel_keys = require("../../shared/constants/panel_keys");
var _left = require("../../left");
var _threat_intelligence_details = require("../../left/components/threat_intelligence_details");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/**
 * Threat intelligence section under Insights section, overview tab.
 * The component fetches the necessary data, then pass it down to the InsightsSubSection component for loading and error state,
 * and the SummaryPanel component for data rendering.
 */
const ThreatIntelligenceOverview = () => {
  const {
    eventId,
    indexName,
    scopeId,
    dataFormattedForFieldBrowser,
    isPreviewMode
  } = (0, _context.useDocumentDetailsContext)();
  const {
    openLeftPanel
  } = (0, _expandableFlyout.useExpandableFlyoutApi)();
  const goToThreatIntelligenceTab = (0, _react.useCallback)(() => {
    openLeftPanel({
      id: _panel_keys.DocumentDetailsLeftPanelKey,
      path: {
        tab: _left.LeftPanelInsightsTab,
        subTab: _threat_intelligence_details.THREAT_INTELLIGENCE_TAB_ID
      },
      params: {
        id: eventId,
        indexName,
        scopeId
      }
    });
  }, [eventId, openLeftPanel, indexName, scopeId]);
  const {
    loading,
    threatMatchesCount,
    threatEnrichmentsCount
  } = (0, _use_fetch_threat_intelligence.useFetchThreatIntelligence)({
    dataFormattedForFieldBrowser
  });
  const link = (0, _react.useMemo)(() => !isPreviewMode ? {
    callback: goToThreatIntelligenceTab,
    tooltip: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.securitySolution.flyout.right.insights.threatIntelligence.threatIntelligenceTooltip",
      defaultMessage: "Show all threat intelligence"
    })
  } : undefined, [isPreviewMode, goToThreatIntelligenceTab]);
  return /*#__PURE__*/_react.default.createElement(_expandable_panel.ExpandablePanel, {
    header: {
      title: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
        id: "xpack.securitySolution.flyout.right.insights.threatIntelligence.threatIntelligenceTitle",
        defaultMessage: "Threat intelligence"
      }),
      link,
      iconType: !isPreviewMode ? 'arrowStart' : undefined
    },
    "data-test-subj": _test_ids.INSIGHTS_THREAT_INTELLIGENCE_TEST_ID,
    content: {
      loading
    }
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    direction: "column",
    gutterSize: "none",
    "data-test-subj": `${_test_ids.INSIGHTS_THREAT_INTELLIGENCE_TEST_ID}Container`
  }, /*#__PURE__*/_react.default.createElement(_insights_summary_row.InsightsSummaryRow, {
    icon: 'warning',
    value: threatMatchesCount,
    text: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.securitySolution.flyout.right.insights.threatIntelligence.threatMatchDescription",
      defaultMessage: "threat {count, plural, one {match} other {matches}} detected",
      values: {
        count: threatMatchesCount
      }
    }),
    "data-test-subj": _test_ids.INSIGHTS_THREAT_INTELLIGENCE_TEST_ID
  }), /*#__PURE__*/_react.default.createElement(_insights_summary_row.InsightsSummaryRow, {
    icon: 'warning',
    value: threatEnrichmentsCount,
    text: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.securitySolution.flyout.right.insights.threatIntelligence.threatEnrichmentDescription",
      defaultMessage: "{count, plural, one {field} other {fields}} enriched with threat intelligence",
      values: {
        count: threatEnrichmentsCount
      }
    }),
    "data-test-subj": _test_ids.INSIGHTS_THREAT_INTELLIGENCE_TEST_ID
  })));
};
exports.ThreatIntelligenceOverview = ThreatIntelligenceOverview;
ThreatIntelligenceOverview.displayName = 'ThreatIntelligenceOverview';