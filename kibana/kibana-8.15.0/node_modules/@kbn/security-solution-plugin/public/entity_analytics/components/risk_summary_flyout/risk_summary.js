"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FlyoutRiskSummary = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _react2 = require("@emotion/react");
var _i18nReact = require("@kbn/i18n-react");
var _uiTheme = require("@kbn/ui-theme");
var _datemath = _interopRequireDefault(require("@kbn/datemath"));
var _i18n = require("@kbn/i18n");
var _constants = require("../../../../common/constants");
var _kibana_react = require("../../../common/lib/kibana/kibana_react");
var _left_panel_header = require("../../../flyout/entity_details/shared/components/left_panel/left_panel_header");
var _inspect = require("../../../common/components/inspect");
var _constants2 = require("../../../timelines/components/side_panel/new_user_detail/constants");
var _formatted_date = require("../../../common/components/formatted_date");
var _risk_engine = require("../../../../common/entity_analytics/risk_engine");
var _visualization_embeddable = require("../../../common/components/visualization_actions/visualization_embeddable");
var _expandable_panel = require("../../../flyout/shared/components/expandable_panel");
var _risk_score_summary = require("../../lens_attributes/risk_score_summary");
var _common = require("./common");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const FlyoutRiskSummaryComponent = ({
  riskScoreData,
  recalculatingScore,
  queryId,
  openDetailsPanel,
  isPreviewMode
}) => {
  var _entityData$risk2;
  const {
    telemetry
  } = (0, _kibana_react.useKibana)().services;
  const {
    data
  } = riskScoreData;
  const riskData = data && data.length > 0 ? data[0] : undefined;
  const entityData = (0, _common.getEntityData)(riskData);
  const {
    euiTheme
  } = (0, _eui.useEuiTheme)();
  const lensAttributes = (0, _react.useMemo)(() => {
    var _entityData$name, _entityData$risk;
    const entityName = (_entityData$name = entityData === null || entityData === void 0 ? void 0 : entityData.name) !== null && _entityData$name !== void 0 ? _entityData$name : '';
    const fieldName = (0, _common.isUserRiskData)(riskData) ? 'user.name' : 'host.name';
    return (0, _risk_score_summary.getRiskScoreSummaryAttributes)({
      severity: entityData === null || entityData === void 0 ? void 0 : (_entityData$risk = entityData.risk) === null || _entityData$risk === void 0 ? void 0 : _entityData$risk.calculated_level,
      query: `${fieldName}: ${entityName}`,
      spaceId: 'default',
      riskEntity: (0, _common.isUserRiskData)(riskData) ? _risk_engine.RiskScoreEntity.user : _risk_engine.RiskScoreEntity.host
    });
  }, [entityData === null || entityData === void 0 ? void 0 : entityData.name, entityData === null || entityData === void 0 ? void 0 : (_entityData$risk2 = entityData.risk) === null || _entityData$risk2 === void 0 ? void 0 : _entityData$risk2.calculated_level, riskData]);
  const xsFontSize = (0, _eui.useEuiFontSize)('xxs').fontSize;
  const [isAssetCriticalityEnabled] = (0, _kibana_react.useUiSetting$)(_constants.ENABLE_ASSET_CRITICALITY_SETTING);
  const columns = (0, _react.useMemo)(() => (0, _common.buildColumns)(isAssetCriticalityEnabled), [isAssetCriticalityEnabled]);
  const rows = (0, _react.useMemo)(() => (0, _common.getItems)(entityData, isAssetCriticalityEnabled), [entityData, isAssetCriticalityEnabled]);
  const onToggle = (0, _react.useCallback)(isOpen => {
    const entity = (0, _common.isUserRiskData)(riskData) ? 'user' : 'host';
    telemetry.reportToggleRiskSummaryClicked({
      entity,
      action: isOpen ? 'show' : 'hide'
    });
  }, [riskData, telemetry]);
  const casesAttachmentMetadata = (0, _react.useMemo)(() => ({
    description: _i18n.i18n.translate('xpack.securitySolution.flyout.entityDetails.riskSummary.casesAttachmentLabel', {
      defaultMessage: 'Risk score for {entityType, select, user {user} other {host}} {entityName}',
      values: {
        entityName: entityData === null || entityData === void 0 ? void 0 : entityData.name,
        entityType: (0, _common.isUserRiskData)(riskData) ? 'user' : 'host'
      }
    })
  }), [entityData === null || entityData === void 0 ? void 0 : entityData.name, riskData]);
  const riskDataTimestamp = riskData === null || riskData === void 0 ? void 0 : riskData['@timestamp'];
  const timerange = (0, _react.useMemo)(() => {
    var _dateMath$parse$toISO, _dateMath$parse, _dateMath$parse$toISO2, _dateMath$parse2;
    const from = (_dateMath$parse$toISO = (_dateMath$parse = _datemath.default.parse(_common.LAST_30_DAYS.from)) === null || _dateMath$parse === void 0 ? void 0 : _dateMath$parse.toISOString()) !== null && _dateMath$parse$toISO !== void 0 ? _dateMath$parse$toISO : _common.LAST_30_DAYS.from;
    const to = (_dateMath$parse$toISO2 = (_dateMath$parse2 = _datemath.default.parse(_common.LAST_30_DAYS.to)) === null || _dateMath$parse2 === void 0 ? void 0 : _dateMath$parse2.toISOString()) !== null && _dateMath$parse$toISO2 !== void 0 ? _dateMath$parse$toISO2 : _common.LAST_30_DAYS.to;
    return {
      from,
      to
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [riskDataTimestamp]); // Update the timerange whenever the risk score timestamp changes to include new entries

  return /*#__PURE__*/_react.default.createElement(_eui.EuiAccordion, {
    onToggle: onToggle,
    initialIsOpen: true,
    id: 'risk_summary',
    buttonProps: {
      css: (0, _react2.css)`
          color: ${euiTheme.colors.primary};
        `
    },
    buttonContent: /*#__PURE__*/_react.default.createElement(_eui.EuiTitle, {
      size: "xs"
    }, /*#__PURE__*/_react.default.createElement("h3", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.securitySolution.flyout.entityDetails.title",
      defaultMessage: "{entity} risk summary",
      values: {
        entity: (0, _common.isUserRiskData)(riskData) ? 'User' : 'Host'
      }
    }))),
    extraAction: /*#__PURE__*/_react.default.createElement("span", {
      "data-test-subj": "risk-summary-updatedAt",
      css: (0, _react2.css)`
            font-size: ${xsFontSize};
          `
    }, riskData && /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.securitySolution.flyout.entityDetails.riskUpdatedTime",
      defaultMessage: "Updated {time}",
      values: {
        time: /*#__PURE__*/_react.default.createElement(_formatted_date.FormattedRelativePreferenceDate, {
          value: riskData['@timestamp'],
          dateFormat: "MMM D, YYYY",
          relativeThresholdInHrs: _constants2.ONE_WEEK_IN_HOURS
        })
      }
    }))
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  }), /*#__PURE__*/_react.default.createElement(_expandable_panel.ExpandablePanel, {
    "data-test-subj": "riskInputs",
    header: {
      title: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
        id: "xpack.securitySolution.flyout.entityDetails.riskInputs",
        defaultMessage: "View risk contributions"
      }),
      link: riskScoreData.loading ? undefined : {
        callback: openDetailsPanel ? () => openDetailsPanel(_left_panel_header.EntityDetailsLeftPanelTab.RISK_INPUTS) : undefined,
        tooltip: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
          id: "xpack.securitySolution.flyout.entityDetails.showAllRiskInputs",
          defaultMessage: "Show all risk inputs"
        })
      },
      iconType: !isPreviewMode ? 'arrowStart' : undefined
    },
    expand: {
      expandable: false
    }
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    gutterSize: "m",
    direction: "row",
    wrap: true
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: 1
  }, /*#__PURE__*/_react.default.createElement("div", {
    // Improve Visualization loading state by predefining the size
    // Set min-width for a fluid layout
    css: (0, _react2.css)`
                height: ${_common.LENS_VISUALIZATION_HEIGHT}px;
                min-width: ${_common.LENS_VISUALIZATION_MIN_WIDTH}px;
              `
  }, riskData && /*#__PURE__*/_react.default.createElement(_visualization_embeddable.VisualizationEmbeddable, {
    applyGlobalQueriesAndFilters: false,
    applyPageAndTabsFilters: false,
    lensAttributes: lensAttributes,
    id: `RiskSummary-risk_score_metric`,
    timerange: timerange,
    width: '100%',
    height: _common.LENS_VISUALIZATION_HEIGHT,
    disableOnClickFilter: true,
    inspectTitle: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.securitySolution.flyout.entityDetails.inspectVisualizationTitle",
      defaultMessage: "Risk Summary Visualization"
    }),
    casesAttachmentMetadata: casesAttachmentMetadata
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: 3,
    css: (0, _react2.css)`
              min-width: ${_common.SUMMARY_TABLE_MIN_WIDTH}px;
            `
  }, /*#__PURE__*/_react.default.createElement(_inspect.InspectButtonContainer, null, /*#__PURE__*/_react.default.createElement("div", {
    // Anchors the position absolute inspect button (nearest positioned ancestor)
    css: (0, _react2.css)`
                  position: relative;
                `
  }, /*#__PURE__*/_react.default.createElement("div", {
    // Position the inspect button above the table
    css: (0, _react2.css)`
                    position: absolute;
                    right: 0;
                    top: -${_uiTheme.euiThemeVars.euiSize};
                  `
  }, /*#__PURE__*/_react.default.createElement(_inspect.InspectButton, {
    queryId: queryId,
    title: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.securitySolution.flyout.entityDetails.inspectTableTitle",
      defaultMessage: "Risk Summary Table"
    })
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiBasicTable, {
    "data-test-subj": "risk-summary-table",
    responsiveBreakpoint: false,
    columns: columns,
    items: rows,
    compressed: true,
    loading: riskScoreData.loading || recalculatingScore
  })))))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  }));
};
const FlyoutRiskSummary = exports.FlyoutRiskSummary = /*#__PURE__*/_react.default.memo(FlyoutRiskSummaryComponent);
FlyoutRiskSummary.displayName = 'RiskSummary';