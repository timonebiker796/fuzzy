"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerAgentStatusRoute = exports.getAgentStatusRouteHandler = void 0;
var _error_handler = require("../error_handler");
var _get_agent_status_route = require("../../../../common/api/endpoint/agent/get_agent_status_route");
var _constants = require("../../../../common/endpoint/constants");
var _with_endpoint_authz = require("../with_endpoint_authz");
var _custom_http_request_error = require("../../../utils/custom_http_request_error");
var _services = require("../../services");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const registerAgentStatusRoute = (router, endpointContext) => {
  router.versioned.get({
    access: 'internal',
    path: _constants.AGENT_STATUS_ROUTE,
    options: {
      authRequired: true,
      tags: ['access:securitySolution']
    }
  }).addVersion({
    version: '1',
    validate: {
      request: _get_agent_status_route.EndpointAgentStatusRequestSchema
    }
  }, (0, _with_endpoint_authz.withEndpointAuthz)({
    all: ['canReadSecuritySolution']
  }, endpointContext.logFactory.get('agentStatusRoute'), getAgentStatusRouteHandler(endpointContext)));
};
exports.registerAgentStatusRoute = registerAgentStatusRoute;
const getAgentStatusRouteHandler = endpointContext => {
  const logger = endpointContext.logFactory.get('agentStatusRoute');
  return async (context, request, response) => {
    const {
      agentType = 'endpoint',
      agentIds: _agentIds
    } = request.query;
    const agentIds = Array.isArray(_agentIds) ? _agentIds : [_agentIds];
    logger.debug(`Retrieving status for: agentType [${agentType}], agentIds: [${agentIds.join(', ')}]`);

    // Note: because our API schemas are defined as module static variables (as opposed to a
    //        `getter` function), we need to include this additional validation here, since
    //        `agent_type` is included in the schema independent of the feature flag
    if (agentType === 'sentinel_one' && !endpointContext.experimentalFeatures.responseActionsSentinelOneV1Enabled || agentType === 'crowdstrike' && !endpointContext.experimentalFeatures.responseActionsCrowdstrikeManualHostIsolationEnabled) {
      return (0, _error_handler.errorHandler)(logger, response, new _custom_http_request_error.CustomHttpRequestError(`[request query.agent_type]: feature is disabled`, 400));
    }
    const esClient = (await context.core).elasticsearch.client.asInternalUser;
    const soClient = (await context.core).savedObjects.client;
    const connectorActionsClient = (await context.actions).getActionsClient();
    const agentStatusClient = (0, _services.getAgentStatusClient)(agentType, {
      esClient,
      soClient,
      connectorActionsClient,
      endpointService: endpointContext.service
    });
    const data = await agentStatusClient.getAgentStatuses(agentIds);
    try {
      return response.ok({
        body: {
          data
        }
      });
    } catch (e) {
      return (0, _error_handler.errorHandler)(logger, response, e);
    }
  };
};
exports.getAgentStatusRouteHandler = getAgentStatusRouteHandler;