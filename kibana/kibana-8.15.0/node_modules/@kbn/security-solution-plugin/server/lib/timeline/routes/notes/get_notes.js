"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNotesRoute = void 0;
var _securitysolutionEsUtils = require("@kbn/securitysolution-es-utils");
var _constants = require("../../../../../common/constants");
var _utils = require("../../../detection_engine/routes/utils");
var _common = require("../../utils/common");
var _notes = require("../../saved_object/notes");
var _notes2 = require("../../saved_object_mappings/notes");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const getNotesRoute = (router, _, security) => {
  router.versioned.get({
    path: _constants.NOTE_URL,
    options: {
      tags: ['access:securitySolution']
    },
    access: 'public'
  }).addVersion({
    validate: {
      request: {
        query: _common.getNotesPaginated
      }
    },
    version: '2023-10-31'
  }, async (context, request, response) => {
    try {
      var _queryParams$document;
      const queryParams = request.query;
      const frameworkRequest = await (0, _common.buildFrameworkRequest)(context, security, request);
      const documentIds = (_queryParams$document = queryParams.documentIds) !== null && _queryParams$document !== void 0 ? _queryParams$document : null;
      if (documentIds != null) {
        if (Array.isArray(documentIds)) {
          const docIdSearchString = documentIds === null || documentIds === void 0 ? void 0 : documentIds.join(' | ');
          const options = {
            type: _notes2.noteSavedObjectType,
            search: docIdSearchString,
            page: 1,
            perPage: _notes.MAX_UNASSOCIATED_NOTES
          };
          const res = await (0, _notes.getAllSavedNote)(frameworkRequest, options);
          return response.ok({
            body: res !== null && res !== void 0 ? res : {}
          });
        } else {
          const options = {
            type: _notes2.noteSavedObjectType,
            search: documentIds,
            page: 1,
            perPage: _notes.MAX_UNASSOCIATED_NOTES
          };
          const res = await (0, _notes.getAllSavedNote)(frameworkRequest, options);
          return response.ok({
            body: res !== null && res !== void 0 ? res : {}
          });
        }
      } else {
        const perPage = queryParams !== null && queryParams !== void 0 && queryParams.perPage ? parseInt(queryParams.perPage, 10) : 10;
        const page = queryParams !== null && queryParams !== void 0 && queryParams.page ? parseInt(queryParams.page, 10) : 1;
        const search = queryParams === null || queryParams === void 0 ? void 0 : queryParams.search;
        const sortField = queryParams === null || queryParams === void 0 ? void 0 : queryParams.sortField;
        const sortOrder = queryParams === null || queryParams === void 0 ? void 0 : queryParams.sortOrder;
        const filter = queryParams === null || queryParams === void 0 ? void 0 : queryParams.filter;
        const options = {
          type: _notes2.noteSavedObjectType,
          perPage,
          page,
          search,
          sortField,
          sortOrder,
          filter
        };
        const res = await (0, _notes.getAllSavedNote)(frameworkRequest, options);
        return response.ok({
          body: res !== null && res !== void 0 ? res : {}
        });
      }
    } catch (err) {
      const error = (0, _securitysolutionEsUtils.transformError)(err);
      const siemResponse = (0, _utils.buildSiemResponse)(response);
      return siemResponse.error({
        body: error.message,
        statusCode: error.statusCode
      });
    }
  });
};
exports.getNotesRoute = getNotesRoute;