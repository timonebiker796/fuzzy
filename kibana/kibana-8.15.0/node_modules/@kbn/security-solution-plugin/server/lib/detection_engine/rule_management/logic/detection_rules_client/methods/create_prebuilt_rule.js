"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPrebuiltRule = void 0;
var _zodHelpers = require("@kbn/zod-helpers");
var _rule_schema = require("../../../../../../../common/api/detection_engine/model/rule_schema");
var _rule_converters = require("../../../normalization/rule_converters");
var _utils = require("../utils");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const createPrebuiltRule = async (rulesClient, args, mlAuthz) => {
  const {
    params
  } = args;
  await (0, _utils.validateMlAuth)(mlAuthz, params.type);
  const internalRule = (0, _rule_converters.convertCreateAPIToInternalSchema)(params, {
    immutable: true,
    defaultEnabled: false
  });
  const rule = await rulesClient.create({
    data: internalRule
  });

  /* Trying to convert the rule to a RuleResponse object */
  const parseResult = _rule_schema.RuleResponse.safeParse((0, _rule_converters.internalRuleToAPIResponse)(rule));
  if (!parseResult.success) {
    throw new _utils.RuleResponseValidationError({
      message: (0, _zodHelpers.stringifyZodError)(parseResult.error),
      ruleId: rule.params.ruleId
    });
  }
  return parseResult.data;
};
exports.createPrebuiltRule = createPrebuiltRule;