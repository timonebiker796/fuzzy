"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.importRule = void 0;
var _zodHelpers = require("@kbn/zod-helpers");
var _utils = require("../../../../routes/utils");
var _rule_converters = require("../../../normalization/rule_converters");
var _rule_schema = require("../../../../../../../common/api/detection_engine/model/rule_schema");
var _utils2 = require("../utils");
var _read_rules = require("../read_rules");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const importRule = async (rulesClient, importRulePayload, mlAuthz) => {
  const {
    ruleToImport,
    overwriteRules,
    allowMissingConnectorSecrets
  } = importRulePayload;
  await (0, _utils2.validateMlAuth)(mlAuthz, ruleToImport.type);
  const existingRule = await (0, _read_rules.readRules)({
    rulesClient,
    ruleId: ruleToImport.rule_id,
    id: undefined
  });
  if (existingRule && !overwriteRules) {
    throw (0, _utils.createBulkErrorObject)({
      ruleId: existingRule.params.ruleId,
      statusCode: 409,
      message: `rule_id: "${existingRule.params.ruleId}" already exists`
    });
  }
  let importedInternalRule;
  if (existingRule && overwriteRules) {
    const ruleUpdateParams = (0, _rule_converters.convertUpdateAPIToInternalSchema)({
      existingRule,
      ruleUpdate: ruleToImport
    });
    importedInternalRule = await rulesClient.update({
      id: existingRule.id,
      data: ruleUpdateParams
    });
  } else {
    /* Rule does not exist, so we'll create it */
    const ruleCreateParams = (0, _rule_converters.convertCreateAPIToInternalSchema)(ruleToImport, {
      immutable: false
    });
    importedInternalRule = await rulesClient.create({
      data: ruleCreateParams,
      allowMissingConnectorSecrets
    });
  }

  /* Trying to convert an internal rule to a RuleResponse object */
  const parseResult = _rule_schema.RuleResponse.safeParse((0, _rule_converters.internalRuleToAPIResponse)(importedInternalRule));
  if (!parseResult.success) {
    throw new _utils2.RuleResponseValidationError({
      message: (0, _zodHelpers.stringifyZodError)(parseResult.error),
      ruleId: importedInternalRule.params.ruleId
    });
  }
  return parseResult.data;
};
exports.importRule = importRule;