"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateMlAuth = exports.toggleRuleEnabledOnUpdate = exports.RuleResponseValidationError = exports.ClientError = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _validation = require("../../../../machine_learning/validation");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/* eslint-disable max-classes-per-file */

const toggleRuleEnabledOnUpdate = async (rulesClient, existingRule, updatedRuleEnabled) => {
  if (existingRule.enabled && updatedRuleEnabled === false) {
    await rulesClient.disable({
      id: existingRule.id
    });
    return {
      enabled: false
    };
  }
  if (!existingRule.enabled && updatedRuleEnabled === true) {
    await rulesClient.enable({
      id: existingRule.id
    });
    return {
      enabled: true
    };
  }
  return {
    enabled: existingRule.enabled
  };
};
exports.toggleRuleEnabledOnUpdate = toggleRuleEnabledOnUpdate;
const validateMlAuth = async (mlAuthz, ruleType) => {
  (0, _validation.throwAuthzError)(await mlAuthz.validateRuleType(ruleType));
};
exports.validateMlAuth = validateMlAuth;
class ClientError extends Error {
  constructor(message, statusCode) {
    super(message);
    (0, _defineProperty2.default)(this, "statusCode", void 0);
    this.statusCode = statusCode;
  }
}

/**
 * Represents an error that occurred while validating a RuleResponse object.
 * Includes the ruleId (rule signature id) of the rule that failed validation.
 * Thrown when a rule does not match the RuleResponse schema.
 * @param message - The error message
 * @param ruleId - The rule signature id of the rule that failed validation
 * @extends Error
 */
exports.ClientError = ClientError;
class RuleResponseValidationError extends Error {
  constructor({
    message,
    ruleId
  }) {
    super(message);
    (0, _defineProperty2.default)(this, "ruleId", void 0);
    this.ruleId = ruleId;
  }
}
exports.RuleResponseValidationError = RuleResponseValidationError;