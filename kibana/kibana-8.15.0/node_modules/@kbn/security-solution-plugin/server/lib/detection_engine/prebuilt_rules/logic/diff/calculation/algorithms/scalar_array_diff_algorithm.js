"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scalarArrayDiffAlgorithm = void 0;
var _lodash = require("lodash");
var _utility_types = require("../../../../../../../../common/utility_types");
var _prebuilt_rules = require("../../../../../../../../common/api/detection_engine/prebuilt_rules");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/**
 * Diff algorithm used for arrays of scalar values (eg. numbers, strings, booleans, etc.)
 *
 * NOTE: Diffing logic will be agnostic to array order
 */
const scalarArrayDiffAlgorithm = versions => {
  const {
    base_version: baseVersion,
    current_version: currentVersion,
    target_version: targetVersion
  } = versions;
  const diffOutcome = (0, _prebuilt_rules.determineOrderAgnosticDiffOutcome)(baseVersion, currentVersion, targetVersion);
  const valueCanUpdate = (0, _prebuilt_rules.determineIfValueCanUpdate)(diffOutcome);
  const {
    mergeOutcome,
    mergedVersion
  } = mergeVersions({
    baseVersion,
    currentVersion,
    targetVersion,
    diffOutcome
  });
  return {
    base_version: baseVersion,
    current_version: currentVersion,
    target_version: targetVersion,
    merged_version: mergedVersion,
    diff_outcome: diffOutcome,
    merge_outcome: mergeOutcome,
    has_update: valueCanUpdate,
    has_conflict: mergeOutcome === _prebuilt_rules.ThreeWayMergeOutcome.Conflict
  };
};
exports.scalarArrayDiffAlgorithm = scalarArrayDiffAlgorithm;
const mergeVersions = ({
  baseVersion,
  currentVersion,
  targetVersion,
  diffOutcome
}) => {
  const dedupedBaseVersion = baseVersion !== _prebuilt_rules.MissingVersion ? (0, _lodash.uniq)(baseVersion) : _prebuilt_rules.MissingVersion;
  const dedupedCurrentVersion = (0, _lodash.uniq)(currentVersion);
  const dedupedTargetVersion = (0, _lodash.uniq)(targetVersion);
  switch (diffOutcome) {
    case _prebuilt_rules.ThreeWayDiffOutcome.StockValueNoUpdate:
    case _prebuilt_rules.ThreeWayDiffOutcome.CustomizedValueNoUpdate:
    case _prebuilt_rules.ThreeWayDiffOutcome.CustomizedValueSameUpdate:
      {
        return {
          mergeOutcome: _prebuilt_rules.ThreeWayMergeOutcome.Current,
          mergedVersion: dedupedCurrentVersion
        };
      }
    case _prebuilt_rules.ThreeWayDiffOutcome.StockValueCanUpdate:
      {
        return {
          mergeOutcome: _prebuilt_rules.ThreeWayMergeOutcome.Target,
          mergedVersion: dedupedTargetVersion
        };
      }
    case _prebuilt_rules.ThreeWayDiffOutcome.CustomizedValueCanUpdate:
      {
        if (dedupedBaseVersion === _prebuilt_rules.MissingVersion) {
          return {
            mergeOutcome: _prebuilt_rules.ThreeWayMergeOutcome.Merged,
            mergedVersion: (0, _lodash.union)(currentVersion, targetVersion)
          };
        }
        const addedCurrent = (0, _lodash.difference)(dedupedCurrentVersion, dedupedBaseVersion);
        const removedCurrent = (0, _lodash.difference)(dedupedBaseVersion, dedupedCurrentVersion);
        const addedTarget = (0, _lodash.difference)(dedupedTargetVersion, dedupedBaseVersion);
        const removedTarget = (0, _lodash.difference)(dedupedBaseVersion, dedupedTargetVersion);
        const bothAdded = (0, _lodash.union)(addedCurrent, addedTarget);
        const bothRemoved = (0, _lodash.union)(removedCurrent, removedTarget);
        const merged = (0, _lodash.difference)((0, _lodash.union)(dedupedBaseVersion, bothAdded), bothRemoved);
        return {
          mergeOutcome: _prebuilt_rules.ThreeWayMergeOutcome.Merged,
          mergedVersion: merged
        };
      }
    default:
      return (0, _utility_types.assertUnreachable)(diffOutcome);
  }
};