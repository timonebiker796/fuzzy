"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bulkScheduleBackfill = void 0;
var _validations = require("../../../logic/bulk_actions/validations");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const bulkScheduleBackfill = async ({
  rules,
  isDryRun,
  rulesClient,
  mlAuthz,
  runPayload,
  experimentalFeatures
}) => {
  const errors = [];

  // In the first step, we validate if it is possible to schedule backfill for the rules
  const validatedRules = [];
  await Promise.all(rules.map(async rule => {
    try {
      await (0, _validations.validateBulkScheduleBackfill)({
        mlAuthz,
        rule,
        experimentalFeatures
      });
      validatedRules.push(rule);
    } catch (error) {
      errors.push({
        item: rule,
        error
      });
    }
  }));
  if (isDryRun || validatedRules.length === 0) {
    return {
      backfilled: validatedRules,
      errors
    };
  }

  // Then if it's not a dry run, we schedule backfill for the rules that passed the validation
  const params = validatedRules.map(({
    id
  }) => ({
    ruleId: id,
    start: runPayload.start_date,
    end: runPayload.end_date
  }));

  // Perform actual schedule using the rulesClient
  const results = await rulesClient.scheduleBackfill(params);
  return results.reduce((acc, backfillResult) => {
    if ('error' in backfillResult) {
      var _validatedRules$find, _ref, _backfillRule$name;
      const ruleName = (_validatedRules$find = validatedRules.find(rule => rule.id === backfillResult.error.rule.id)) === null || _validatedRules$find === void 0 ? void 0 : _validatedRules$find.name;
      const backfillError = backfillResult.error;
      const backfillRule = backfillError.rule;
      const error = {
        message: backfillError.message,
        status: backfillError.status,
        rule: {
          id: backfillRule.id,
          name: (_ref = (_backfillRule$name = backfillRule.name) !== null && _backfillRule$name !== void 0 ? _backfillRule$name : ruleName) !== null && _ref !== void 0 ? _ref : ''
        }
      };
      acc.errors.push(error);
    } else {
      const backfillRule = validatedRules.find(rule => rule.id === backfillResult.rule.id);
      if (backfillRule) {
        acc.backfilled.push(backfillRule);
      }
    }
    return acc;
  }, {
    backfilled: [],
    errors
  });
};
exports.bulkScheduleBackfill = bulkScheduleBackfill;