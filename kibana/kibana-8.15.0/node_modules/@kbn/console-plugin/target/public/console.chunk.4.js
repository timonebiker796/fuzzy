(window.console_bundle_jsonpfunction=window.console_bundle_jsonpfunction||[]).push([[4],{114:function(e,t,s){"use strict";s.r(t),s.d(t,"DevToolsSettingsModal",(function(){return b}));var a=s(1),l=s.n(a),o=s(2),n=s(6),i=s(28),c=s(26),r=s(79),u=s(5);const d=e=>n.i18n.translate("console.settingsPage.refreshInterval.everyNMinutesTimeInterval",{defaultMessage:"Every {value} {value, plural, one {minute} other {minutes}}",values:{value:e}}),g=[0,1,10,20,60].map((e=>({value:(6e4*e).toString(),inputDisplay:0===e?n.i18n.translate("console.settingsPage.refreshInterval.onceTimeInterval",{defaultMessage:"Once, when console loads"}):60===e?n.i18n.translate("console.settingsPage.refreshInterval.everyHourTimeInterval",{defaultMessage:"Every hour"}):d(e)}))),b=e=>{const[t,s]=Object(o.useState)(e.settings.fontSize),[a,d]=Object(o.useState)(e.settings.wrapMode),[b,j]=Object(o.useState)(e.settings.autocomplete.fields),[O,m]=Object(o.useState)(e.settings.autocomplete.indices),[p,f]=Object(o.useState)(e.settings.autocomplete.templates),[M,x]=Object(o.useState)(e.settings.autocomplete.dataStreams),[S,h]=Object(o.useState)(e.settings.polling),[y,v]=Object(o.useState)(e.settings.pollInterval),[E,F]=Object(o.useState)(e.settings.tripleQuotes),[P,w]=Object(o.useState)(e.settings.isHistoryEnabled),[C,L]=Object(o.useState)(e.settings.isKeyboardShortcutsEnabled),[k,T]=Object(o.useState)(e.settings.isAccessibilityOverlayEnabled),I=[{id:"fields",label:n.i18n.translate("console.settingsPage.fieldsLabelText",{defaultMessage:"Fields"}),stateSetter:j},{id:"indices",label:n.i18n.translate("console.settingsPage.indicesAndAliasesLabelText",{defaultMessage:"Indices and aliases"}),stateSetter:m},{id:"templates",label:n.i18n.translate("console.settingsPage.templatesLabelText",{defaultMessage:"Templates"}),stateSetter:f},{id:"dataStreams",label:n.i18n.translate("console.settingsPage.dataStreamsLabelText",{defaultMessage:"Data streams"}),stateSetter:x}],R={fields:b,indices:O,templates:p,dataStreams:M},A=Object(o.useCallback)((e=>{const t=parseInt(e,10);h(!!t),v(t)}),[]),B=Object(o.useCallback)((t=>{e.editorInstance&&(Object(r.b)(e.editorInstance),L(t))}),[e.editorInstance]),H=Object(o.useCallback)((e=>T(e)),[]),q=Object(o.useCallback)((e=>w(e)),[]),D=b||O||p||M?Object(u.jsx)(o.Fragment,null,Object(u.jsx)(c.EuiFormRow,{label:Object(u.jsx)(i.FormattedMessage,{id:"console.settingsPage.refreshingDataLabel",defaultMessage:"Refresh frequency"}),helpText:Object(u.jsx)(i.FormattedMessage,{id:"console.settingsPage.refreshingDataDescription",defaultMessage:"Console refreshes autocomplete suggestions by querying Elasticsearch. Use less frequent refreshes to reduce bandwidth costs."})},Object(u.jsx)(c.EuiSuperSelect,{options:g,valueOfSelected:y.toString(),onChange:A})),Object(u.jsx)(c.EuiButton,{"data-test-subj":"autocompletePolling",id:"autocompletePolling",onClick:()=>{e.refreshAutocompleteSettings({fields:b,indices:O,templates:p,dataStreams:M})}},Object(u.jsx)(i.FormattedMessage,{defaultMessage:"Refresh autocomplete suggestions",id:"console.settingsPage.refreshButtonLabel"}))):void 0;return Object(u.jsx)(c.EuiModal,{"data-test-subj":"devToolsSettingsModal",className:"conApp__settingsModal",onClose:e.onClose},Object(u.jsx)(c.EuiModalHeader,null,Object(u.jsx)(c.EuiModalHeaderTitle,null,Object(u.jsx)(i.FormattedMessage,{id:"console.settingsPage.pageTitle",defaultMessage:"Console settings"}))),Object(u.jsx)(c.EuiModalBody,null,Object(u.jsx)(c.EuiFormRow,{label:Object(u.jsx)(i.FormattedMessage,{id:"console.settingsPage.fontSizeLabel",defaultMessage:"Font size"})},Object(u.jsx)(c.EuiFieldNumber,{autoFocus:!0,"data-test-subj":"setting-font-size-input",value:t,min:6,max:50,onChange:e=>{const t=parseInt(e.target.value,10);t&&s(t)}})),Object(u.jsx)(c.EuiFormRow,null,Object(u.jsx)(c.EuiSwitch,{checked:a,"data-test-subj":"settingsWrapLines",id:"wrapLines",label:Object(u.jsx)(i.FormattedMessage,{defaultMessage:"Wrap long lines",id:"console.settingsPage.wrapLongLinesLabelText"}),onChange:e=>d(e.target.checked)})),Object(u.jsx)(c.EuiFormRow,{label:Object(u.jsx)(i.FormattedMessage,{id:"console.settingsPage.jsonSyntaxLabel",defaultMessage:"JSON syntax"})},Object(u.jsx)(c.EuiSwitch,{checked:E,"data-test-subj":"tripleQuotes",id:"tripleQuotes",label:Object(u.jsx)(i.FormattedMessage,{defaultMessage:"Use triple quotes in output",id:"console.settingsPage.tripleQuotesMessage"}),onChange:e=>F(e.target.checked)})),Object(u.jsx)(c.EuiFormRow,{label:Object(u.jsx)(i.FormattedMessage,{id:"console.settingsPage.historyLabel",defaultMessage:"History"})},Object(u.jsx)(c.EuiSwitch,{checked:P,label:Object(u.jsx)(i.FormattedMessage,{defaultMessage:"Save requests to history",id:"console.settingsPage.saveRequestsToHistoryLabel"}),onChange:e=>q(e.target.checked)})),Object(u.jsx)(c.EuiFormRow,{label:Object(u.jsx)(i.FormattedMessage,{id:"console.settingsPage.keyboardShortcutsLabel",defaultMessage:"Keyboard shortcuts"})},Object(u.jsx)(c.EuiSwitch,{checked:C,label:Object(u.jsx)(i.FormattedMessage,{defaultMessage:"Enable keyboard shortcuts",id:"console.settingsPage.enableKeyboardShortcutsLabel"}),onChange:e=>B(e.target.checked)})),Object(u.jsx)(c.EuiFormRow,{label:Object(u.jsx)(i.FormattedMessage,{id:"console.settingsPage.accessibilityOverlayLabel",defaultMessage:"Accessibility overlay"})},Object(u.jsx)(c.EuiSwitch,{"data-test-subj":"enableA11yOverlay",checked:k,label:Object(u.jsx)(i.FormattedMessage,{defaultMessage:"Enable accessibility overlay",id:"console.settingsPage.enableAccessibilityOverlayLabel"}),onChange:e=>H(e.target.checked)})),Object(u.jsx)(c.EuiFormRow,{labelType:"legend",label:Object(u.jsx)(i.FormattedMessage,{id:"console.settingsPage.autocompleteLabel",defaultMessage:"Autocomplete"})},Object(u.jsx)(c.EuiCheckboxGroup,{options:I.map((e=>{const{stateSetter:t,...s}=e;return s})),idToSelectedMap:R,onChange:e=>{(e=>{const t=l.a.find(I,(t=>t.id===e));t&&t.stateSetter(!R[e])})(e)}})),D),Object(u.jsx)(c.EuiModalFooter,null,Object(u.jsx)(c.EuiButtonEmpty,{"data-test-subj":"settingsCancelButton",onClick:e.onClose},Object(u.jsx)(i.FormattedMessage,{id:"console.settingsPage.cancelButtonLabel",defaultMessage:"Cancel"})),Object(u.jsx)(c.EuiButton,{fill:!0,"data-test-subj":"settings-save-button",onClick:function(){e.onSaveSettings({fontSize:t,wrapMode:a,autocomplete:{fields:b,indices:O,templates:p,dataStreams:M},polling:S,pollInterval:y,tripleQuotes:E,isHistoryEnabled:P,isKeyboardShortcutsEnabled:C,isAccessibilityOverlayEnabled:k})}},Object(u.jsx)(i.FormattedMessage,{id:"console.settingsPage.saveButtonLabel",defaultMessage:"Save"}))))}}}]);