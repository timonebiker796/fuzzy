"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RemoveLifecyclePolicyConfirmModal = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _i18n = require("@kbn/i18n");
var _i18nReact = require("@kbn/i18n-react");
var _eui = require("@elastic/eui");
var _api = require("../../application/services/api");
var _api_errors = require("../../application/services/api_errors");
var _notification = require("../../application/services/notification");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

class RemoveLifecyclePolicyConfirmModal extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "removePolicy", async () => {
      const {
        indexNames,
        closeModal,
        reloadIndices
      } = this.props;
      try {
        await (0, _api.removeLifecycleForIndex)(indexNames);
        closeModal();
        _notification.toasts.addSuccess(_i18n.i18n.translate('xpack.indexLifecycleMgmt.indexManagementTable.removeLifecyclePolicyConfirmModal.removePolicySuccess', {
          defaultMessage: 'Removed lifecycle policy from {count, plural, one {index} other {indices}}',
          values: {
            count: indexNames.length
          }
        }));
        reloadIndices();
      } catch (err) {
        (0, _api_errors.showApiError)(err, _i18n.i18n.translate('xpack.indexLifecycleMgmt.indexManagementTable.removeLifecyclePolicyConfirmModal.removePolicyToIndexError', {
          defaultMessage: 'Error removing policy'
        }));
      }
    });
  }
  render() {
    const {
      closeModal,
      indexNames
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_eui.EuiConfirmModal, {
      title: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
        id: "xpack.indexLifecycleMgmt.indexManagementTable.removeLifecyclePolicyConfirmModal.modalTitle",
        defaultMessage: "Remove lifecycle policy from {count, plural, one {index} other {indices}}",
        values: {
          count: indexNames.length
        }
      }),
      onCancel: closeModal,
      onConfirm: this.removePolicy,
      cancelButtonText: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
        id: "xpack.indexLifecycleMgmt.indexManagementTable.removeLifecyclePolicyConfirmModal.cancelButtonText",
        defaultMessage: "Cancel"
      }),
      buttonColor: "danger",
      confirmButtonText: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
        id: "xpack.indexLifecycleMgmt.indexManagementTable.removeLifecyclePolicyConfirmModal.removePolicyButtonText",
        defaultMessage: "Remove policy"
      })
    }, /*#__PURE__*/_react.default.createElement(_react.Fragment, null, /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.indexLifecycleMgmt.indexManagementTable.removeLifecyclePolicyConfirmModal.removeMessage",
      defaultMessage: "You are about to remove the index lifecycle policy from {count, plural, one {this index} other {these indices}}. This operation cannot be undone.",
      values: {
        count: indexNames.length
      }
    })), /*#__PURE__*/_react.default.createElement("ul", null, indexNames.map(indexName => /*#__PURE__*/_react.default.createElement("li", {
      key: indexName
    }, indexName)))));
  }
}
exports.RemoveLifecyclePolicyConfirmModal = RemoveLifecyclePolicyConfirmModal;