"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReinstallButton = ReinstallButton;
var _eui = require("@elastic/eui");
var _react = _interopRequireWildcard(require("react"));
var _i18nReact = require("@kbn/i18n-react");
var _types = require("../../../../../types");
var _hooks = require("../../../../../hooks");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function ReinstallButton(props) {
  const {
    name,
    title,
    version,
    installSource
  } = props;
  const canInstallPackages = (0, _hooks.useAuthz)().integrations.installPackages;
  const installPackage = (0, _hooks.useInstallPackage)();
  const getPackageInstallStatus = (0, _hooks.useGetPackageInstallStatus)();
  const {
    status: installationStatus
  } = getPackageInstallStatus(name);
  const isReinstalling = installationStatus === _types.InstallStatus.reinstalling;
  const isUploadedPackage = installSource === 'upload';
  const handleClickReinstall = (0, _react.useCallback)(() => {
    installPackage({
      name,
      version,
      title,
      isReinstall: true
    });
  }, [installPackage, name, title, version]);
  const reinstallButton = /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
    iconType: "refresh",
    isLoading: isReinstalling,
    onClick: handleClickReinstall,
    disabled: isUploadedPackage
  }, isReinstalling ? /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.fleet.integrations.installPackage.reinstallingPackageButtonLabel",
    defaultMessage: "Reinstalling {title}",
    values: {
      title
    }
  }) : /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.fleet.integrations.installPackage.reinstallPackageButtonLabel",
    defaultMessage: "Reinstall {title}",
    values: {
      title
    }
  }));
  return canInstallPackages ? /*#__PURE__*/_react.default.createElement(_react.Fragment, null, isUploadedPackage ? /*#__PURE__*/_react.default.createElement(_eui.EuiToolTip, {
    content: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.fleet.integrations.installPackage.uploadedTooltip",
      defaultMessage: "This integration was installed by upload and cannot be automatically reinstalled. Please upload it again to reinstall."
    })
  }, reinstallButton) : reinstallButton) : null;
}