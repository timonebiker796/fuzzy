"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inProgressTitleColor = exports.inProgressTitle = exports.inProgressDescription = exports.getAction = exports.formattedTime = void 0;
var _react = _interopRequireDefault(require("react"));
var _i18nReact = require("@kbn/i18n-react");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const inProgressTitleColor = exports.inProgressTitleColor = '#0077CC';
const actionNames = {
  POLICY_REASSIGN: {
    inProgressText: 'Reassigning',
    completedText: 'assigned to a new policy',
    cancelledText: 'assignment'
  },
  UPGRADE: {
    inProgressText: 'Upgrading',
    completedText: 'upgraded',
    cancelledText: 'upgrade'
  },
  UNENROLL: {
    inProgressText: 'Unenrolling',
    completedText: 'unenrolled',
    cancelledText: 'unenrollment'
  },
  FORCE_UNENROLL: {
    inProgressText: 'Force unenrolling',
    completedText: 'force unenrolled',
    cancelledText: 'force unenrollment'
  },
  UPDATE_TAGS: {
    inProgressText: 'Updating tags of',
    completedText: 'updated tags',
    cancelledText: 'update tags'
  },
  CANCEL: {
    inProgressText: 'Cancelling',
    completedText: 'cancelled',
    cancelledText: ''
  },
  REQUEST_DIAGNOSTICS: {
    inProgressText: 'Requesting diagnostics for',
    completedText: 'requested diagnostics',
    cancelledText: 'request diagnostics'
  },
  SETTINGS: {
    inProgressText: 'Updating settings of',
    completedText: 'updated settings',
    cancelledText: 'update settings'
  },
  POLICY_CHANGE: {
    inProgressText: 'Applying policy change on',
    completedText: 'applied policy change',
    cancelledText: 'policy change'
  },
  INPUT_ACTION: {
    inProgressText: 'Input action in progress of',
    completedText: 'input action completed',
    cancelledText: 'input action'
  },
  ACTION: {
    inProgressText: 'Actioning',
    completedText: 'actioned',
    cancelledText: 'action'
  }
};
const getAction = type => {
  var _actionNames;
  return (_actionNames = actionNames[type !== null && type !== void 0 ? type : 'ACTION']) !== null && _actionNames !== void 0 ? _actionNames : actionNames.ACTION;
};
exports.getAction = getAction;
const inProgressTitle = action => /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
  id: "xpack.fleet.agentActivity.inProgressTitle",
  defaultMessage: "{inProgressText} {nbAgents} {agents} {reassignText}{upgradeText}{failuresText}",
  values: {
    nbAgents: action.nbAgentsAck >= action.nbAgentsActioned ? action.nbAgentsAck : action.nbAgentsAck === 0 ? action.nbAgentsActioned : action.nbAgentsActioned - action.nbAgentsAck + ' of ' + action.nbAgentsActioned,
    agents: action.nbAgentsActioned === 1 ? 'agent' : 'agents',
    inProgressText: getAction(action.type).inProgressText,
    reassignText: action.type === 'POLICY_REASSIGN' && action.newPolicyId ? `to ${action.newPolicyId}` : '',
    upgradeText: action.type === 'UPGRADE' ? `to version ${action.version}` : '',
    failuresText: action.nbAgentsFailed > 0 ? `, has ${action.nbAgentsFailed} failure(s)` : ''
  }
});
exports.inProgressTitle = inProgressTitle;
const inProgressDescription = time => /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
  id: "xpack.fleet.agentActivityFlyout.startedDescription",
  defaultMessage: "Started on {date}.",
  values: {
    date: formattedTime(time)
  }
});
exports.inProgressDescription = inProgressDescription;
const formattedTime = time => {
  return time ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedDate, {
    value: time,
    year: "numeric",
    month: "short",
    day: "2-digit"
  }), "\xA0", /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedTime, {
    value: time
  })) : null;
};
exports.formattedTime = formattedTime;