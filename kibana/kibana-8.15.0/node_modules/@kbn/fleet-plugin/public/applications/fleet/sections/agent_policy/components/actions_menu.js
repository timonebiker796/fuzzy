"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AgentPolicyActionMenu = void 0;
var _react = _interopRequireWildcard(require("react"));
var _i18nReact = require("@kbn/i18n-react");
var _eui = require("@elastic/eui");
var _hooks = require("../../../hooks");
var _components = require("../../../components");
var _constants = require("../../../constants");
var _services = require("../../../services");
var _components2 = require("../../agents/components");
var _agent_policy_yaml_flyout = require("./agent_policy_yaml_flyout");
var _agent_policy_copy_provider = require("./agent_policy_copy_provider");
var _agent_policy_delete_provider = require("./agent_policy_delete_provider");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const AgentPolicyActionMenu = exports.AgentPolicyActionMenu = /*#__PURE__*/(0, _react.memo)(({
  agentPolicy,
  onCopySuccess,
  fullButton = false,
  enrollmentFlyoutOpenByDefault = false,
  onCancelEnrollment
}) => {
  var _agentPolicy$package_3;
  const authz = (0, _hooks.useAuthz)();
  const [isYamlFlyoutOpen, setIsYamlFlyoutOpen] = (0, _react.useState)(false);
  const [isEnrollmentFlyoutOpen, setIsEnrollmentFlyoutOpen] = (0, _react.useState)(enrollmentFlyoutOpenByDefault);
  const [isUninstallCommandFlyoutOpen, setIsUninstallCommandFlyoutOpen] = (0, _react.useState)(false);
  const [isUpgradeAgentsModalOpen, setIsUpgradeAgentsModalOpen] = (0, _react.useState)(false);
  const {
    agentTamperProtectionEnabled
  } = _services.ExperimentalFeaturesService.get();
  const isFleetServerPolicy = (0, _react.useMemo)(() => {
    var _agentPolicy$package_, _agentPolicy$package_2;
    return (_agentPolicy$package_ = (_agentPolicy$package_2 = agentPolicy.package_policies) === null || _agentPolicy$package_2 === void 0 ? void 0 : _agentPolicy$package_2.some(packagePolicy => {
      var _packagePolicy$packag;
      return ((_packagePolicy$packag = packagePolicy.package) === null || _packagePolicy$packag === void 0 ? void 0 : _packagePolicy$packag.name) === _constants.FLEET_SERVER_PACKAGE;
    })) !== null && _agentPolicy$package_ !== void 0 ? _agentPolicy$package_ : false;
  }, [agentPolicy]);
  const hasManagedPackagePolicy = 'package_policies' in agentPolicy && (agentPolicy === null || agentPolicy === void 0 ? void 0 : (_agentPolicy$package_3 = agentPolicy.package_policies) === null || _agentPolicy$package_3 === void 0 ? void 0 : _agentPolicy$package_3.some(packagePolicy => packagePolicy.is_managed));
  const [isContextMenuOpen, setIsContextMenuOpen] = (0, _react.useState)(false);
  const onContextMenuChange = (0, _react.useCallback)(open => {
    setIsContextMenuOpen(open);
  }, [setIsContextMenuOpen]);
  const onClose = (0, _react.useMemo)(() => {
    if (onCancelEnrollment) {
      return onCancelEnrollment;
    } else {
      return () => setIsEnrollmentFlyoutOpen(false);
    }
  }, [onCancelEnrollment, setIsEnrollmentFlyoutOpen]);
  return /*#__PURE__*/_react.default.createElement(_agent_policy_copy_provider.AgentPolicyCopyProvider, null, copyAgentPolicyPrompt => {
    const viewPolicyItem = /*#__PURE__*/_react.default.createElement(_eui.EuiContextMenuItem, {
      icon: "inspect",
      onClick: () => {
        setIsContextMenuOpen(false);
        setIsYamlFlyoutOpen(!isYamlFlyoutOpen);
      },
      key: "viewPolicy"
    }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.fleet.agentPolicyActionMenu.viewPolicyText",
      defaultMessage: "View policy"
    }));
    const menuItems = agentPolicy !== null && agentPolicy !== void 0 && agentPolicy.is_managed ? [viewPolicyItem] : [/*#__PURE__*/_react.default.createElement(_eui.EuiContextMenuItem, {
      icon: "plusInCircle",
      disabled: isFleetServerPolicy && !authz.fleet.addFleetServers || !isFleetServerPolicy && !authz.fleet.addAgents,
      "data-test-subj": "agentPolicyActionMenuAddAgentButton",
      onClick: () => {
        setIsContextMenuOpen(false);
        setIsEnrollmentFlyoutOpen(true);
      },
      key: "enrollAgents"
    }, isFleetServerPolicy ? /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.fleet.agentPolicyActionMenu.addFleetServerActionText",
      defaultMessage: "Add Fleet Server"
    }) : /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.fleet.agentPolicyActionMenu.enrollAgentActionText",
      defaultMessage: "Add agent"
    })), viewPolicyItem, /*#__PURE__*/_react.default.createElement(_eui.EuiContextMenuItem, {
      disabled: !authz.integrations.writeIntegrationPolicies,
      icon: "copy",
      onClick: () => {
        setIsContextMenuOpen(false);
        copyAgentPolicyPrompt(agentPolicy, onCopySuccess);
      },
      key: "copyPolicy"
    }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.fleet.agentPolicyActionMenu.copyPolicyActionText",
      defaultMessage: "Duplicate policy"
    })), /*#__PURE__*/_react.default.createElement(_agent_policy_delete_provider.AgentPolicyDeleteProvider, {
      hasFleetServer: (0, _services.policyHasFleetServer)(agentPolicy),
      key: "deletePolicy",
      packagePolicies: agentPolicy.package_policies
    }, deleteAgentPolicyPrompt => /*#__PURE__*/_react.default.createElement(_eui.EuiContextMenuItem, {
      "data-test-subj": "agentPolicyActionMenuDeleteButton",
      disabled: !authz.fleet.allAgentPolicies || hasManagedPackagePolicy,
      toolTipContent: hasManagedPackagePolicy ? /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
        id: "xpack.fleet.policyForm.deletePolicyActionText.disabled",
        defaultMessage: "Agent policy with managed package policies cannot be deleted.",
        "data-test-subj": "agentPolicyActionMenuDeleteButtonDisabledTooltip"
      }) : undefined,
      icon: "trash",
      onClick: () => {
        deleteAgentPolicyPrompt(agentPolicy.id);
      }
    }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.fleet.agentPolicyActionMenu.deletePolicyActionText",
      defaultMessage: "Delete policy"
    })))];
    if (authz.fleet.allAgents && !(agentPolicy !== null && agentPolicy !== void 0 && agentPolicy.is_managed)) {
      menuItems.push( /*#__PURE__*/_react.default.createElement(_eui.EuiContextMenuItem, {
        icon: "refresh",
        onClick: () => {
          setIsUpgradeAgentsModalOpen(true);
        },
        key: "upgradeAgents",
        "data-test-subj": "agentPolicyActionMenuUpgradeAgentsButton"
      }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
        id: "xpack.fleet.agentPolicyActionMenu.upgradeAgentsActionText",
        defaultMessage: "Upgrade agents on this policy"
      })));
    }
    if (authz.fleet.allAgents && agentTamperProtectionEnabled && !(agentPolicy !== null && agentPolicy !== void 0 && agentPolicy.is_managed)) {
      menuItems.push( /*#__PURE__*/_react.default.createElement(_eui.EuiContextMenuItem, {
        icon: "minusInCircle",
        onClick: () => {
          setIsContextMenuOpen(false);
          setIsUninstallCommandFlyoutOpen(true);
        },
        key: "getUninstallCommand",
        "data-test-subj": "uninstall-agents-command-menu-item"
      }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
        id: "xpack.fleet.agentPolicyActionMenu.getUninstallCommand",
        defaultMessage: "Uninstall agents on this policy"
      })));
    }
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, isYamlFlyoutOpen && /*#__PURE__*/_react.default.createElement(_eui.EuiPortal, null, /*#__PURE__*/_react.default.createElement(_agent_policy_yaml_flyout.AgentPolicyYamlFlyout, {
      policyId: agentPolicy.id,
      onClose: () => setIsYamlFlyoutOpen(false)
    })), isEnrollmentFlyoutOpen && /*#__PURE__*/_react.default.createElement(_eui.EuiPortal, null, /*#__PURE__*/_react.default.createElement(_components.AgentEnrollmentFlyout, {
      agentPolicy: agentPolicy,
      onClose: onClose
    })), isUpgradeAgentsModalOpen && /*#__PURE__*/_react.default.createElement(_eui.EuiPortal, null, /*#__PURE__*/_react.default.createElement(_components2.AgentUpgradeAgentModal, {
      agents: `policy_id: ${agentPolicy.id}`,
      agentCount: agentPolicy.agents || 0,
      onClose: () => {
        setIsUpgradeAgentsModalOpen(false);
      }
    })), isUninstallCommandFlyoutOpen && /*#__PURE__*/_react.default.createElement(_components.UninstallCommandFlyout, {
      target: "agent",
      policyId: agentPolicy.id,
      onClose: () => setIsUninstallCommandFlyoutOpen(false)
    }), /*#__PURE__*/_react.default.createElement(_components.ContextMenuActions, {
      isOpen: isContextMenuOpen,
      onChange: onContextMenuChange,
      button: fullButton ? {
        props: {
          iconType: 'arrowDown',
          iconSide: 'right'
        },
        children: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
          id: "xpack.fleet.agentPolicyActionMenu.buttonText",
          defaultMessage: "Actions"
        })
      } : undefined,
      items: menuItems
    }));
  });
});