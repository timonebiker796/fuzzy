"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UpgradePackagePolicyPage = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRouterDom = require("react-router-dom");
var _edit_package_policy_page = require("../edit_package_policy_page");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const UpgradePackagePolicyPage = exports.UpgradePackagePolicyPage = /*#__PURE__*/(0, _react.memo)(() => {
  const {
    params: {
      packagePolicyId,
      policyId
    }
  } = (0, _reactRouterDom.useRouteMatch)();
  const {
    search
  } = (0, _reactRouterDom.useLocation)();
  const qs = new URLSearchParams(search);
  const fromQs = qs.get('from');
  let from;

  // Shorten query strings to make them more presentable in the URL
  if (fromQs && fromQs === 'fleet-policy-list') {
    from = 'upgrade-from-fleet-policy-list';
  } else if (fromQs && fromQs === 'integrations-policy-list') {
    from = 'upgrade-from-integrations-policy-list';
  }
  return /*#__PURE__*/_react.default.createElement(_edit_package_policy_page.EditPackagePolicyForm, {
    packagePolicyId: packagePolicyId,
    policyId: policyId,
    from: from,
    forceUpgrade: true
  });
});