"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AgentPolicyDebugger = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _reactQuery = require("@tanstack/react-query");
var _i18nReact = require("@kbn/i18n-react");
var _i18n = require("@kbn/i18n");
var _hooks = require("../../../hooks");
var _constants = require("../../../constants");
var _services = require("../../../services");
var _components = require("../../agent_policy/components");
var _ = require("..");
var _code_block = require("./code_block");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const fetchAgentPolicies = async () => {
  const response = await (0, _hooks.sendGetAgentPolicies)({
    full: true,
    perPage: _constants.SO_SEARCH_LIMIT,
    sortOrder: 'asc'
  });
  if (response.error) {
    throw new Error(response.error.message);
  }
  return response;
};
const AgentPolicyDebugger = () => {
  var _data$data$items, _data$data;
  const {
    getHref
  } = (0, _hooks.useLink)();
  const [selectedPolicyId, setSelectedPolicyId] = (0, _react.useState)();

  // TODO: Depending on the number of agent policies, this might need to be switched to
  // `useInfinite` query with an infinite scrolling approach in the dropdown options.
  const {
    data,
    status
  } = (0, _reactQuery.useQuery)(['debug-agent-policies'], fetchAgentPolicies);
  const agentPolicies = (_data$data$items = data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.items) !== null && _data$data$items !== void 0 ? _data$data$items : [];
  const comboBoxOptions = agentPolicies.map(policy => ({
    label: `${policy.name} - ${policy.id}`,
    value: policy.id
  }));
  const selectedOptions = selectedPolicyId ? [comboBoxOptions.find(option => option.value === selectedPolicyId)] : [];
  const selectedAgentPolicy = agentPolicies.find(policy => policy.id === selectedPolicyId);
  const onDelete = () => {
    setSelectedPolicyId(undefined);
    _.queryClient.invalidateQueries(['debug-agent-policies']);
  };
  if (status === 'error') {
    return /*#__PURE__*/_react.default.createElement(_eui.EuiCallOut, {
      title: "Error",
      color: "danger"
    }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.fleet.debug.agentPolicyDebugger.fetchError",
      defaultMessage: "Error fetching Agent Policies"
    }));
  }
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.fleet.debug.agentPolicyDebugger.description",
    defaultMessage: "Search for an Agent Policy using its name or {codeId} value. Use the code block below to diagnose any potential issues with the policy's configuration.",
    values: {
      codeId: /*#__PURE__*/_react.default.createElement(_eui.EuiCode, null, "id")
    }
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    alignItems: "center",
    justifyContent: "flexStart"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false,
    css: `
            min-width: 600px;
          `
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiComboBox, {
    "aria-label": _i18n.i18n.translate('xpack.fleet.debug.agentPolicyDebugger.selectLabel', {
      defaultMessage: 'Select an Agent Policy'
    }),
    placeholder: _i18n.i18n.translate('xpack.fleet.debug.agentPolicyDebugger.selectLabel', {
      defaultMessage: 'Select an Agent Policy'
    }),
    fullWidth: true,
    options: comboBoxOptions,
    singleSelection: {
      asPlainText: true
    },
    selectedOptions: selectedOptions,
    isLoading: status === 'loading',
    onChange: newSelectedOptions => {
      // Handle "clear" action
      if (!newSelectedOptions.length) {
        setSelectedPolicyId(undefined);
      } else {
        setSelectedPolicyId(newSelectedOptions[0].value);
      }
    }
  })), selectedPolicyId && /*#__PURE__*/_react.default.createElement(_components.AgentPolicyDeleteProvider, {
    hasFleetServer: (0, _services.policyHasFleetServer)(selectedAgentPolicy)
  }, deleteAgentPolicyPrompt => {
    return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
      grow: false
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
      color: "danger",
      onClick: () => deleteAgentPolicyPrompt(selectedPolicyId, onDelete)
    }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.fleet.policyForm.deletePolicyActionText",
      defaultMessage: "Delete policy"
    }))));
  })), selectedPolicyId && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiLink, {
    target: "_blank",
    href: getHref('policy_details', {
      policyId: selectedPolicyId
    })
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.fleet.debug.agentPolicyDebugger.viewAgentPolicyLink",
    defaultMessage: "View Agent Policy in Fleet UI"
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  }), /*#__PURE__*/_react.default.createElement(_code_block.CodeBlock, {
    value: JSON.stringify(selectedAgentPolicy, null, 2)
  })));
};
exports.AgentPolicyDebugger = AgentPolicyDebugger;