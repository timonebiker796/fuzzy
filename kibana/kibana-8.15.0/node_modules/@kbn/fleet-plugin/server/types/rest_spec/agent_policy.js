"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UpdateAgentPolicyRequestSchema = exports.GetOneAgentPolicyRequestSchema = exports.GetK8sManifestRequestSchema = exports.GetFullAgentPolicyRequestSchema = exports.GetAgentPoliciesRequestSchema = exports.DeleteAgentPolicyRequestSchema = exports.CreateAgentPolicyRequestSchema = exports.CopyAgentPolicyRequestSchema = exports.BulkGetAgentPoliciesRequestSchema = void 0;
var _configSchema = require("@kbn/config-schema");
var _models = require("../models");
var _constants = require("../../constants");
var _filter_utils = require("../../routes/utils/filter_utils");
var _common = require("./common");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const GetAgentPoliciesRequestSchema = exports.GetAgentPoliciesRequestSchema = {
  query: _configSchema.schema.object({
    page: _configSchema.schema.maybe(_configSchema.schema.number({
      defaultValue: 1
    })),
    perPage: _configSchema.schema.maybe(_configSchema.schema.number({
      defaultValue: 20
    })),
    sortField: _configSchema.schema.maybe(_configSchema.schema.string()),
    sortOrder: _configSchema.schema.maybe(_configSchema.schema.oneOf([_configSchema.schema.literal('desc'), _configSchema.schema.literal('asc')])),
    showUpgradeable: _configSchema.schema.maybe(_configSchema.schema.boolean()),
    kuery: _configSchema.schema.maybe(_configSchema.schema.string({
      validate: value => {
        const validationObj = (0, _filter_utils.validateKuery)(value, [_constants.AGENT_POLICY_SAVED_OBJECT_TYPE], _constants.AGENT_POLICY_MAPPINGS, true);
        if (validationObj !== null && validationObj !== void 0 && validationObj.error) {
          return validationObj === null || validationObj === void 0 ? void 0 : validationObj.error;
        }
      }
    })),
    noAgentCount: _configSchema.schema.maybe(_configSchema.schema.boolean()),
    full: _configSchema.schema.maybe(_configSchema.schema.boolean())
  })
};
const BulkGetAgentPoliciesRequestSchema = exports.BulkGetAgentPoliciesRequestSchema = {
  body: _common.BulkRequestBodySchema.extends({
    full: _configSchema.schema.maybe(_configSchema.schema.boolean())
  })
};
const GetOneAgentPolicyRequestSchema = exports.GetOneAgentPolicyRequestSchema = {
  params: _configSchema.schema.object({
    agentPolicyId: _configSchema.schema.string()
  })
};
const CreateAgentPolicyRequestSchema = exports.CreateAgentPolicyRequestSchema = {
  body: _models.NewAgentPolicySchema,
  query: _configSchema.schema.object({
    sys_monitoring: _configSchema.schema.maybe(_configSchema.schema.boolean())
  })
};
const UpdateAgentPolicyRequestSchema = exports.UpdateAgentPolicyRequestSchema = {
  ...GetOneAgentPolicyRequestSchema,
  body: _models.NewAgentPolicySchema.extends({
    force: _configSchema.schema.maybe(_configSchema.schema.boolean())
  })
};
const CopyAgentPolicyRequestSchema = exports.CopyAgentPolicyRequestSchema = {
  ...GetOneAgentPolicyRequestSchema,
  body: _configSchema.schema.object({
    name: _configSchema.schema.string({
      minLength: 1
    }),
    description: _configSchema.schema.maybe(_configSchema.schema.string())
  })
};
const DeleteAgentPolicyRequestSchema = exports.DeleteAgentPolicyRequestSchema = {
  body: _configSchema.schema.object({
    agentPolicyId: _configSchema.schema.string(),
    force: _configSchema.schema.maybe(_configSchema.schema.boolean())
  })
};
const GetFullAgentPolicyRequestSchema = exports.GetFullAgentPolicyRequestSchema = {
  params: _configSchema.schema.object({
    agentPolicyId: _configSchema.schema.string()
  }),
  query: _configSchema.schema.object({
    download: _configSchema.schema.maybe(_configSchema.schema.boolean()),
    standalone: _configSchema.schema.maybe(_configSchema.schema.boolean()),
    kubernetes: _configSchema.schema.maybe(_configSchema.schema.boolean())
  })
};
const GetK8sManifestRequestSchema = exports.GetK8sManifestRequestSchema = {
  query: _configSchema.schema.object({
    download: _configSchema.schema.maybe(_configSchema.schema.boolean()),
    fleetServer: _configSchema.schema.maybe(_configSchema.schema.string()),
    enrolToken: _configSchema.schema.maybe(_configSchema.schema.string())
  })
};