"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateAgentHandler = exports.putAgentsReassignHandlerDeprecated = exports.postRetrieveAgentsByActionsHandler = exports.postBulkAgentReassignHandler = exports.postAgentsReassignHandler = exports.getAvailableVersionsHandler = exports.getAgentsHandler = exports.getAgentUploadsHandler = exports.getAgentUploadFileHandler = exports.getAgentTagsHandler = exports.getAgentStatusForAgentPolicyHandler = exports.getAgentHandler = exports.getAgentDataHandler = exports.getActionStatusHandler = exports.deleteAgentUploadFileHandler = exports.deleteAgentHandler = exports.bulkUpdateAgentTagsHandler = void 0;
exports.verifyNamespace = verifyNamespace;
var _lodash = require("lodash");
var _server = require("@kbn/core/server");
var _coreSavedObjectsUtilsServer = require("@kbn/core-saved-objects-utils-server");
var _errors = require("../../errors");
var _agents = _interopRequireWildcard(require("../../services/agents"));
var AgentService = _agents;
var _agent_metrics = require("../../services/agents/agent_metrics");
var _services = require("../../services");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function verifyNamespace(agent, currentNamespace) {
  var _agent$namespaces, _agent$namespaces2;
  if (!_services.appContextService.getExperimentalFeatures().useSpaceAwareness) {
    return;
  }
  const isInNamespace = currentNamespace && ((_agent$namespaces = agent.namespaces) === null || _agent$namespaces === void 0 ? void 0 : _agent$namespaces.includes(currentNamespace)) || !currentNamespace && (!agent.namespaces || agent.namespaces.length === 0 || ((_agent$namespaces2 = agent.namespaces) === null || _agent$namespaces2 === void 0 ? void 0 : _agent$namespaces2.includes(_coreSavedObjectsUtilsServer.DEFAULT_NAMESPACE_STRING)));
  if (!isInNamespace) {
    throw new _errors.FleetNotFoundError(`${agent.id} not found in namespace`);
  }
}
const getAgentHandler = async (context, request, response) => {
  try {
    const [coreContext, fleetContext] = await Promise.all([context.core, context.fleet]);
    const esClientCurrentUser = coreContext.elasticsearch.client.asCurrentUser;
    let agent = await fleetContext.agentClient.asCurrentUser.getAgent(request.params.agentId);
    verifyNamespace(agent, coreContext.savedObjects.client.getCurrentNamespace());
    if (request.query.withMetrics) {
      agent = (await (0, _agent_metrics.fetchAndAssignAgentMetrics)(esClientCurrentUser, [agent]))[0];
    }
    const body = {
      item: agent
    };
    return response.ok({
      body
    });
  } catch (error) {
    if (_server.SavedObjectsErrorHelpers.isNotFoundError(error)) {
      return response.notFound({
        body: {
          message: `Agent ${request.params.agentId} not found`
        }
      });
    }
    return (0, _errors.defaultFleetErrorHandler)({
      error,
      response
    });
  }
};
exports.getAgentHandler = getAgentHandler;
const deleteAgentHandler = async (context, request, response) => {
  try {
    const coreContext = await context.core;
    const esClient = coreContext.elasticsearch.client.asInternalUser;
    await AgentService.deleteAgent(esClient, request.params.agentId);
    const body = {
      action: 'deleted'
    };
    return response.ok({
      body
    });
  } catch (error) {
    if (error.isBoom) {
      return response.customError({
        statusCode: error.output.statusCode,
        body: {
          message: `Agent ${request.params.agentId} not found`
        }
      });
    }
    return (0, _errors.defaultFleetErrorHandler)({
      error,
      response
    });
  }
};
exports.deleteAgentHandler = deleteAgentHandler;
const updateAgentHandler = async (context, request, response) => {
  const coreContext = await context.core;
  const esClient = coreContext.elasticsearch.client.asInternalUser;
  const soClient = coreContext.savedObjects.client;
  const partialAgent = {};
  if (request.body.user_provided_metadata) {
    partialAgent.user_provided_metadata = request.body.user_provided_metadata;
  }
  if (request.body.tags) {
    partialAgent.tags = (0, _lodash.uniq)(request.body.tags);
  }
  try {
    await AgentService.updateAgent(esClient, request.params.agentId, partialAgent);
    const body = {
      item: await AgentService.getAgentById(esClient, soClient, request.params.agentId)
    };
    return response.ok({
      body
    });
  } catch (error) {
    if (error.isBoom && error.output.statusCode === 404) {
      return response.notFound({
        body: {
          message: `Agent ${request.params.agentId} not found`
        }
      });
    }
    return (0, _errors.defaultFleetErrorHandler)({
      error,
      response
    });
  }
};
exports.updateAgentHandler = updateAgentHandler;
const bulkUpdateAgentTagsHandler = async (context, request, response) => {
  const coreContext = await context.core;
  const esClient = coreContext.elasticsearch.client.asInternalUser;
  const soClient = coreContext.savedObjects.client;
  const agentOptions = Array.isArray(request.body.agents) ? {
    agentIds: request.body.agents
  } : {
    kuery: request.body.agents,
    showInactive: request.body.includeInactive
  };
  try {
    var _request$body$tagsToA, _request$body$tagsToR;
    const results = await AgentService.updateAgentTags(soClient, esClient, {
      ...agentOptions,
      batchSize: request.body.batchSize
    }, (_request$body$tagsToA = request.body.tagsToAdd) !== null && _request$body$tagsToA !== void 0 ? _request$body$tagsToA : [], (_request$body$tagsToR = request.body.tagsToRemove) !== null && _request$body$tagsToR !== void 0 ? _request$body$tagsToR : []);
    return response.ok({
      body: {
        actionId: results.actionId
      }
    });
  } catch (error) {
    return (0, _errors.defaultFleetErrorHandler)({
      error,
      response
    });
  }
};
exports.bulkUpdateAgentTagsHandler = bulkUpdateAgentTagsHandler;
const getAgentsHandler = async (context, request, response) => {
  const [coreContext, fleetContext] = await Promise.all([context.core, context.fleet]);
  const {
    agentClient
  } = fleetContext;
  const esClientCurrentUser = coreContext.elasticsearch.client.asCurrentUser;
  try {
    const agentRes = await agentClient.asCurrentUser.listAgents({
      page: request.query.page,
      perPage: request.query.perPage,
      showInactive: request.query.showInactive,
      showUpgradeable: request.query.showUpgradeable,
      kuery: request.query.kuery,
      sortField: request.query.sortField,
      sortOrder: request.query.sortOrder,
      getStatusSummary: request.query.getStatusSummary
    });
    const {
      total,
      page,
      perPage,
      statusSummary
    } = agentRes;
    let {
      agents
    } = agentRes;

    // Assign metrics
    if (request.query.withMetrics) {
      agents = await (0, _agent_metrics.fetchAndAssignAgentMetrics)(esClientCurrentUser, agents);
    }
    const body = {
      list: agents,
      // deprecated
      items: agents,
      total,
      page,
      perPage,
      ...(statusSummary ? {
        statusSummary
      } : {})
    };
    return response.ok({
      body
    });
  } catch (error) {
    return (0, _errors.defaultFleetErrorHandler)({
      error,
      response
    });
  }
};
exports.getAgentsHandler = getAgentsHandler;
const getAgentTagsHandler = async (context, request, response) => {
  const coreContext = await context.core;
  const esClient = coreContext.elasticsearch.client.asInternalUser;
  const soClient = coreContext.savedObjects.client;
  try {
    const tags = await AgentService.getAgentTags(soClient, esClient, {
      showInactive: request.query.showInactive,
      kuery: request.query.kuery
    });
    const body = {
      items: tags
    };
    return response.ok({
      body
    });
  } catch (error) {
    return (0, _errors.defaultFleetErrorHandler)({
      error,
      response
    });
  }
};
exports.getAgentTagsHandler = getAgentTagsHandler;
const putAgentsReassignHandlerDeprecated = async (context, request, response) => {
  const coreContext = await context.core;
  const soClient = coreContext.savedObjects.client;
  const esClient = coreContext.elasticsearch.client.asInternalUser;
  try {
    await AgentService.reassignAgent(soClient, esClient, request.params.agentId, request.body.policy_id);
    const body = {};
    return response.ok({
      body
    });
  } catch (error) {
    return (0, _errors.defaultFleetErrorHandler)({
      error,
      response
    });
  }
};
exports.putAgentsReassignHandlerDeprecated = putAgentsReassignHandlerDeprecated;
const postAgentsReassignHandler = async (context, request, response) => {
  const coreContext = await context.core;
  const soClient = coreContext.savedObjects.client;
  const esClient = coreContext.elasticsearch.client.asInternalUser;
  try {
    await AgentService.reassignAgent(soClient, esClient, request.params.agentId, request.body.policy_id);
    const body = {};
    return response.ok({
      body
    });
  } catch (error) {
    return (0, _errors.defaultFleetErrorHandler)({
      error,
      response
    });
  }
};
exports.postAgentsReassignHandler = postAgentsReassignHandler;
const postBulkAgentReassignHandler = async (context, request, response) => {
  const coreContext = await context.core;
  const soClient = coreContext.savedObjects.client;
  const esClient = coreContext.elasticsearch.client.asInternalUser;
  const agentOptions = Array.isArray(request.body.agents) ? {
    agentIds: request.body.agents
  } : {
    kuery: request.body.agents,
    showInactive: request.body.includeInactive
  };
  try {
    const results = await AgentService.reassignAgents(soClient, esClient, {
      ...agentOptions,
      batchSize: request.body.batchSize
    }, request.body.policy_id);
    return response.ok({
      body: {
        actionId: results.actionId
      }
    });
  } catch (error) {
    return (0, _errors.defaultFleetErrorHandler)({
      error,
      response
    });
  }
};
exports.postBulkAgentReassignHandler = postBulkAgentReassignHandler;
const getAgentStatusForAgentPolicyHandler = async (context, request, response) => {
  try {
    const [coreContext, fleetContext] = await Promise.all([context.core, context.fleet]);
    const esClient = coreContext.elasticsearch.client.asInternalUser;
    const soClient = fleetContext.internalSoClient;
    const results = await (0, _agents.getAgentStatusForAgentPolicy)(esClient, soClient, request.query.policyId, request.query.kuery, coreContext.savedObjects.client.getCurrentNamespace());
    const body = {
      results
    };
    return response.ok({
      body
    });
  } catch (error) {
    return (0, _errors.defaultFleetErrorHandler)({
      error,
      response
    });
  }
};
exports.getAgentStatusForAgentPolicyHandler = getAgentStatusForAgentPolicyHandler;
const getAgentDataHandler = async (context, request, response) => {
  const coreContext = await context.core;
  const esClient = coreContext.elasticsearch.client.asCurrentUser;
  try {
    const returnDataPreview = request.query.previewData;
    const agentIds = isStringArray(request.query.agentsIds) ? request.query.agentsIds : [request.query.agentsIds];
    const {
      items,
      dataPreview
    } = await AgentService.getIncomingDataByAgentsId(esClient, agentIds, returnDataPreview);
    const body = {
      items,
      dataPreview
    };
    return response.ok({
      body
    });
  } catch (error) {
    return (0, _errors.defaultFleetErrorHandler)({
      error,
      response
    });
  }
};
exports.getAgentDataHandler = getAgentDataHandler;
function isStringArray(arr) {
  return Array.isArray(arr) && arr.every(p => typeof p === 'string');
}
const getAvailableVersionsHandler = async (context, request, response) => {
  try {
    const availableVersions = await AgentService.getAvailableVersions();
    const body = {
      items: availableVersions
    };
    return response.ok({
      body
    });
  } catch (error) {
    return (0, _errors.defaultFleetErrorHandler)({
      error,
      response
    });
  }
};
exports.getAvailableVersionsHandler = getAvailableVersionsHandler;
const getActionStatusHandler = async (context, request, response) => {
  const coreContext = await context.core;
  const esClient = coreContext.elasticsearch.client.asInternalUser;
  try {
    const actionStatuses = await AgentService.getActionStatuses(esClient, request.query);
    const body = {
      items: actionStatuses
    };
    return response.ok({
      body
    });
  } catch (error) {
    return (0, _errors.defaultFleetErrorHandler)({
      error,
      response
    });
  }
};
exports.getActionStatusHandler = getActionStatusHandler;
const postRetrieveAgentsByActionsHandler = async (context, request, response) => {
  const coreContext = await context.core;
  const esClient = coreContext.elasticsearch.client.asInternalUser;
  try {
    const agents = await AgentService.getAgentsByActionsIds(esClient, request.body.actionIds);
    const body = {
      items: agents
    };
    return response.ok({
      body
    });
  } catch (error) {
    return (0, _errors.defaultFleetErrorHandler)({
      error,
      response
    });
  }
};
exports.postRetrieveAgentsByActionsHandler = postRetrieveAgentsByActionsHandler;
const getAgentUploadsHandler = async (context, request, response) => {
  const coreContext = await context.core;
  const esClient = coreContext.elasticsearch.client.asInternalUser;
  try {
    const body = {
      items: await AgentService.getAgentUploads(esClient, request.params.agentId)
    };
    return response.ok({
      body
    });
  } catch (error) {
    return (0, _errors.defaultFleetErrorHandler)({
      error,
      response
    });
  }
};
exports.getAgentUploadsHandler = getAgentUploadsHandler;
const getAgentUploadFileHandler = async (context, request, response) => {
  const coreContext = await context.core;
  const esClient = coreContext.elasticsearch.client.asInternalUser;
  try {
    const resp = await AgentService.getAgentUploadFile(esClient, request.params.fileId, request.params.fileName);
    return response.ok(resp);
  } catch (error) {
    return (0, _errors.defaultFleetErrorHandler)({
      error,
      response
    });
  }
};
exports.getAgentUploadFileHandler = getAgentUploadFileHandler;
const deleteAgentUploadFileHandler = async (context, request, response) => {
  const coreContext = await context.core;
  const esClient = coreContext.elasticsearch.client.asInternalUser;
  try {
    const resp = await AgentService.deleteAgentUploadFile(esClient, request.params.fileId);
    return response.ok({
      body: resp
    });
  } catch (error) {
    return (0, _errors.defaultFleetErrorHandler)({
      error,
      response
    });
  }
};
exports.deleteAgentUploadFileHandler = deleteAgentUploadFileHandler;