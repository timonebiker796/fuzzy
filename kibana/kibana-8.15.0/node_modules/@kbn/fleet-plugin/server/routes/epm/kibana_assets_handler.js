"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.installPackageKibanaAssetsHandler = exports.deletePackageKibanaAssetsHandler = void 0;
var _errors = require("../../errors");
var _services = require("../../services");
var _install = require("../../services/epm/kibana/assets/install");
var _get = require("../../services/epm/packages/get");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const installPackageKibanaAssetsHandler = async (context, request, response) => {
  try {
    var _installedPkgWithAsse;
    const fleetContext = await context.fleet;
    const savedObjectsClient = fleetContext.internalSoClient;
    const logger = _services.appContextService.getLogger();
    const spaceId = fleetContext.spaceId;
    const {
      pkgName,
      pkgVersion
    } = request.params;
    const installedPkgWithAssets = await (0, _get.getInstalledPackageWithAssets)({
      savedObjectsClient,
      pkgName,
      logger
    });
    const installation = await (0, _get.getInstallationObject)({
      pkgName,
      savedObjectsClient
    });
    if (!installation || !installedPkgWithAssets || (installedPkgWithAssets === null || installedPkgWithAssets === void 0 ? void 0 : installedPkgWithAssets.installation.version) !== pkgVersion) {
      throw new _errors.FleetNotFoundError('Requested version is not installed');
    }
    const {
      packageInfo
    } = installedPkgWithAssets;
    await (0, _install.installKibanaAssetsAndReferences)({
      savedObjectsClient,
      logger,
      pkgName,
      pkgTitle: packageInfo.title,
      installAsAdditionalSpace: true,
      spaceId,
      assetTags: (_installedPkgWithAsse = installedPkgWithAssets.packageInfo) === null || _installedPkgWithAsse === void 0 ? void 0 : _installedPkgWithAsse.asset_tags,
      installedPkg: installation,
      packageInstallContext: {
        packageInfo,
        paths: installedPkgWithAssets.paths,
        assetsMap: installedPkgWithAssets.assetsMap
      }
    });
    return response.ok({
      body: {
        success: true
      }
    });
  } catch (error) {
    return await (0, _errors.defaultFleetErrorHandler)({
      error,
      response
    });
  }
};
exports.installPackageKibanaAssetsHandler = installPackageKibanaAssetsHandler;
const deletePackageKibanaAssetsHandler = async (context, request, response) => {
  try {
    const fleetContext = await context.fleet;
    const savedObjectsClient = fleetContext.internalSoClient;
    const logger = _services.appContextService.getLogger();
    const spaceId = fleetContext.spaceId;
    const {
      pkgName,
      pkgVersion
    } = request.params;
    const installation = await (0, _get.getInstallationObject)({
      pkgName,
      savedObjectsClient
    });
    if (!installation || installation.attributes.version !== pkgVersion) {
      throw new _errors.FleetNotFoundError('Version is not installed');
    }
    await (0, _install.deleteKibanaAssetsAndReferencesForSpace)({
      savedObjectsClient,
      logger,
      pkgName,
      spaceId,
      installedPkg: installation
    });
    return response.ok({
      body: {
        success: true
      }
    });
  } catch (error) {
    return await (0, _errors.defaultFleetErrorHandler)({
      error,
      response
    });
  }
};
exports.deletePackageKibanaAssetsHandler = deletePackageKibanaAssetsHandler;