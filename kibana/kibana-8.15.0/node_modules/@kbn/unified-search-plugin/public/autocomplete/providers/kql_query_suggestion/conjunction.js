"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setupGetConjunctionSuggestions = void 0;
var _react = _interopRequireDefault(require("react"));
var _i18nReact = require("@kbn/i18n-react");
var _query_suggestion_provider = require("../query_suggestion_provider");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

const bothArgumentsText = /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
  id: "unifiedSearch.kueryAutocomplete.andOperatorDescription.bothArgumentsText",
  defaultMessage: "both arguments",
  description: "Part of unifiedSearch.kueryAutocomplete.andOperatorDescription. Full text: 'Requires both arguments to be true'"
});
const oneOrMoreArgumentsText = /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
  id: "unifiedSearch.kueryAutocomplete.orOperatorDescription.oneOrMoreArgumentsText",
  defaultMessage: "one or more arguments",
  description: "Part of unifiedSearch.kueryAutocomplete.orOperatorDescription. Full text: 'Requires one or more arguments to be true'"
});
const conjunctions = {
  and: /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "unifiedSearch.kueryAutocomplete.andOperatorDescription",
    defaultMessage: "Requires {bothArguments} to be true",
    values: {
      bothArguments: /*#__PURE__*/_react.default.createElement("span", {
        className: "kbnSuggestionItem__callout"
      }, bothArgumentsText)
    },
    description: "Full text: ' Requires both arguments to be true'. See 'unifiedSearch.kueryAutocomplete.andOperatorDescription.bothArgumentsText' for 'both arguments' part."
  })),
  or: /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "unifiedSearch.kueryAutocomplete.orOperatorDescription",
    defaultMessage: "Requires {oneOrMoreArguments} to be true",
    values: {
      oneOrMoreArguments: /*#__PURE__*/_react.default.createElement("span", {
        className: "kbnSuggestionItem__callout"
      }, oneOrMoreArgumentsText)
    },
    description: "Full text: 'Requires one or more arguments to be true'. See 'unifiedSearch.kueryAutocomplete.orOperatorDescription.oneOrMoreArgumentsText' for 'one or more arguments' part."
  }))
};
const setupGetConjunctionSuggestions = core => {
  return (querySuggestionsArgs, {
    text,
    end
  }) => {
    let suggestions = [];
    if (text.endsWith(' ')) {
      suggestions = Object.keys(conjunctions).map(key => ({
        type: _query_suggestion_provider.QuerySuggestionTypes.Conjunction,
        text: `${key} `,
        description: conjunctions[key],
        start: end,
        end
      }));
    }
    return Promise.resolve(suggestions);
  };
};
exports.setupGetConjunctionSuggestions = setupGetConjunctionSuggestions;