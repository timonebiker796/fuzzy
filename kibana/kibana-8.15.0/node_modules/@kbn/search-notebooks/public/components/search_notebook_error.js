"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SearchNotebookError = void 0;
var _react = _interopRequireDefault(require("react"));
var _eui = require("@elastic/eui");
var _i18nReact = require("@kbn/i18n-react");
var _i18n = require("@kbn/i18n");
var _get_error_message = require("../utils/get_error_message");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const SearchNotebookError = ({
  error,
  notebookId,
  usageTracker
}) => {
  _react.default.useEffect(() => {
    usageTracker.count(['notebookViewError', `error-${notebookId}`]);
  }, [usageTracker, notebookId]);
  return /*#__PURE__*/_react.default.createElement(_eui.EuiEmptyPrompt, {
    iconType: "warning",
    iconColor: "danger",
    title: /*#__PURE__*/_react.default.createElement("h2", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.searchNotebooks.notebook.fetchError.title",
      defaultMessage: "Error loading notebook"
    })),
    titleSize: "l",
    body: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.searchNotebooks.notebook.fetchError.body",
      defaultMessage: "We can't fetch the notebook from Kibana due to the following error:"
    })), error !== undefined && typeof error === 'object' ? /*#__PURE__*/_react.default.createElement(_eui.EuiCodeBlock, {
      css: {
        textAlign: 'left'
      }
    }, JSON.stringify(error)) : /*#__PURE__*/_react.default.createElement("p", null, (0, _get_error_message.getErrorMessage)(error, _i18n.i18n.translate('xpack.searchNotebooks.notebook.fetchError.unknownError', {
      defaultMessage: 'Unknown error fetching notebook'
    }))))
  });
};
exports.SearchNotebookError = SearchNotebookError;