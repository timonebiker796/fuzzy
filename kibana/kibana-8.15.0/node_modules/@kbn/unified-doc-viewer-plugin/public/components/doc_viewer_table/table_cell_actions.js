"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToggleColumn = exports.PinToggle = exports.FilterOut = exports.FilterIn = exports.FilterExist = void 0;
exports.getFieldCellActions = getFieldCellActions;
exports.getFieldValueCellActions = getFieldValueCellActions;
exports.getFilterExistsDisabledWarning = getFilterExistsDisabledWarning;
exports.getFilterInOutPairDisabledWarning = getFilterInOutPairDisabledWarning;
exports.isFilterExistsDisabled = isFilterExistsDisabled;
exports.isFilterInOutPairDisabled = isFilterInOutPairDisabled;
var _react = _interopRequireDefault(require("react"));
var _i18n = require("@kbn/i18n");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

function isFilterInOutPairDisabled(row) {
  if (!row) {
    return false;
  }
  const {
    action: {
      onFilter
    },
    field: {
      fieldMapping
    },
    value: {
      ignored
    }
  } = row;
  return Boolean(onFilter && (!fieldMapping || !fieldMapping.filterable || ignored));
}
function getFilterInOutPairDisabledWarning(row) {
  if (!row || !isFilterInOutPairDisabled(row)) {
    return undefined;
  }
  const {
    field: {
      fieldMapping
    },
    value: {
      ignored
    }
  } = row;
  if (ignored) {
    return _i18n.i18n.translate('unifiedDocViewer.docViews.table.ignoredValuesCanNotBeSearchedWarningMessage', {
      defaultMessage: 'Ignored values cannot be searched'
    });
  }
  return !fieldMapping ? _i18n.i18n.translate('unifiedDocViewer.docViews.table.unindexedFieldsCanNotBeSearchedWarningMessage', {
    defaultMessage: 'Unindexed fields cannot be searched'
  }) : undefined;
}
const FilterIn = ({
  Component,
  row
}) => {
  if (!row) {
    return null;
  }
  const {
    action: {
      onFilter,
      flattenedField
    },
    field: {
      field,
      fieldMapping
    }
  } = row;

  // Filters pair
  const filterAddLabel = _i18n.i18n.translate('unifiedDocViewer.docViews.table.filterForValueButtonTooltip', {
    defaultMessage: 'Filter for value'
  });
  if (!onFilter) {
    return null;
  }
  return /*#__PURE__*/_react.default.createElement(Component, {
    "data-test-subj": `addFilterForValueButton-${field}`,
    iconType: "plusInCircle",
    disabled: isFilterInOutPairDisabled(row),
    title: filterAddLabel,
    flush: "left",
    onClick: () => onFilter(fieldMapping, flattenedField, '+')
  }, filterAddLabel);
};
exports.FilterIn = FilterIn;
const FilterOut = ({
  Component,
  row
}) => {
  if (!row) {
    return null;
  }
  const {
    action: {
      onFilter,
      flattenedField
    },
    field: {
      field,
      fieldMapping
    }
  } = row;

  // Filters pair
  const filterOutLabel = _i18n.i18n.translate('unifiedDocViewer.docViews.table.filterOutValueButtonTooltip', {
    defaultMessage: 'Filter out value'
  });
  if (!onFilter) {
    return null;
  }
  return /*#__PURE__*/_react.default.createElement(Component, {
    "data-test-subj": `addFilterOutValueButton-${field}`,
    iconType: "minusInCircle",
    disabled: isFilterInOutPairDisabled(row),
    title: filterOutLabel,
    flush: "left",
    onClick: () => onFilter(fieldMapping, flattenedField, '-')
  }, filterOutLabel);
};
exports.FilterOut = FilterOut;
function isFilterExistsDisabled(row) {
  if (!row) {
    return false;
  }
  const {
    action: {
      onFilter
    },
    field: {
      fieldMapping
    }
  } = row;
  return Boolean(onFilter && (!fieldMapping || !fieldMapping.filterable || fieldMapping.scripted));
}
function getFilterExistsDisabledWarning(row) {
  if (!row || !isFilterExistsDisabled(row)) {
    return undefined;
  }
  const {
    field: {
      fieldMapping
    }
  } = row;
  return fieldMapping !== null && fieldMapping !== void 0 && fieldMapping.scripted ? _i18n.i18n.translate('unifiedDocViewer.docViews.table.unableToFilterForPresenceOfScriptedFieldsWarningMessage', {
    defaultMessage: 'Unable to filter for presence of scripted fields'
  }) : undefined;
}
const FilterExist = ({
  Component,
  row
}) => {
  if (!row) {
    return null;
  }
  const {
    action: {
      onFilter
    },
    field: {
      field
    }
  } = row;

  // Filter exists
  const filterExistsLabel = _i18n.i18n.translate('unifiedDocViewer.docViews.table.filterForFieldPresentButtonTooltip', {
    defaultMessage: 'Filter for field present'
  });
  if (!onFilter) {
    return null;
  }
  return /*#__PURE__*/_react.default.createElement(Component, {
    "data-test-subj": `addExistsFilterButton-${field}`,
    iconType: "filter",
    disabled: isFilterExistsDisabled(row),
    title: filterExistsLabel,
    flush: "left",
    onClick: () => onFilter('_exists_', field, '+')
  }, filterExistsLabel);
};
exports.FilterExist = FilterExist;
const PinToggle = ({
  Component,
  row
}) => {
  if (!row) {
    return null;
  }
  const {
    field: {
      field,
      pinned,
      onTogglePinned
    }
  } = row;

  // Pinned
  const pinnedLabel = pinned ? _i18n.i18n.translate('unifiedDocViewer.docViews.table.unpinFieldLabel', {
    defaultMessage: 'Unpin field'
  }) : _i18n.i18n.translate('unifiedDocViewer.docViews.table.pinFieldLabel', {
    defaultMessage: 'Pin field'
  });
  const pinnedIconType = pinned ? 'pinFilled' : 'pin';
  return /*#__PURE__*/_react.default.createElement(Component, {
    "data-test-subj": `togglePinFilterButton-${field}`,
    iconType: pinnedIconType,
    title: pinnedLabel,
    flush: "left",
    onClick: () => onTogglePinned(field)
  }, pinnedLabel);
};
exports.PinToggle = PinToggle;
const ToggleColumn = ({
  Component,
  row
}) => {
  if (!row) {
    return null;
  }
  const {
    action: {
      onToggleColumn
    },
    field: {
      field
    }
  } = row;
  if (!onToggleColumn) {
    return null;
  }

  // Toggle column
  const toggleColumnLabel = _i18n.i18n.translate('unifiedDocViewer.docViews.table.toggleColumnTableButtonTooltip', {
    defaultMessage: 'Toggle column in table'
  });
  return /*#__PURE__*/_react.default.createElement(Component, {
    "data-test-subj": `toggleColumnButton-${field}`,
    iconType: "listAdd",
    title: toggleColumnLabel,
    flush: "left",
    onClick: () => onToggleColumn(field)
  }, toggleColumnLabel);
};
exports.ToggleColumn = ToggleColumn;
function getFieldCellActions({
  rows,
  filter,
  onToggleColumn
}) {
  return [...(filter ? [({
    Component,
    rowIndex
  }) => {
    return /*#__PURE__*/_react.default.createElement(FilterExist, {
      row: rows[rowIndex],
      Component: Component
    });
  }] : []), ...(onToggleColumn ? [({
    Component,
    rowIndex
  }) => {
    return /*#__PURE__*/_react.default.createElement(ToggleColumn, {
      row: rows[rowIndex],
      Component: Component
    });
  }] : []), ({
    Component,
    rowIndex
  }) => {
    return /*#__PURE__*/_react.default.createElement(PinToggle, {
      row: rows[rowIndex],
      Component: Component
    });
  }];
}
function getFieldValueCellActions({
  rows,
  filter
}) {
  return filter ? [({
    Component,
    rowIndex
  }) => {
    return /*#__PURE__*/_react.default.createElement(FilterIn, {
      row: rows[rowIndex],
      Component: Component
    });
  }, ({
    Component,
    rowIndex
  }) => {
    return /*#__PURE__*/_react.default.createElement(FilterOut, {
      row: rows[rowIndex],
      Component: Component
    });
  }] : [];
}