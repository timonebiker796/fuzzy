"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FieldDetail = void 0;
var _react = _interopRequireDefault(require("react"));
var _i18n = require("@kbn/i18n");
var _i18nReact = require("@kbn/i18n-react");
var _eui = require("@elastic/eui");
var _advanced_parameters_section = require("./advanced_parameters_section");
var _form_row = require("./form_row");
var _form_fields = require("./form_fields");
var _field_editor_context = require("../field_editor_context");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

const geti18nTexts = () => ({
  customLabel: {
    title: _i18n.i18n.translate('indexPatternFieldEditor.editor.form.customLabelTitle', {
      defaultMessage: 'Set custom label'
    }),
    description: _i18n.i18n.translate('indexPatternFieldEditor.editor.form.customLabelDescription', {
      defaultMessage: `Create a label to display in place of the field name in Discover, Maps, Lens, Visualize, and TSVB. Useful for shortening a long field name. Queries and filters use the original field name.`
    })
  },
  customDescription: {
    title: _i18n.i18n.translate('indexPatternFieldEditor.editor.form.customDescriptionTitle', {
      defaultMessage: 'Set custom description'
    }),
    description: _i18n.i18n.translate('indexPatternFieldEditor.editor.form.customDescriptionDescription', {
      defaultMessage: "Add a description to the field. It's displayed next to the field on the Discover, Lens, and Data View Management pages."
    })
  },
  value: {
    title: _i18n.i18n.translate('indexPatternFieldEditor.editor.form.valueTitle', {
      defaultMessage: 'Set value'
    }),
    description: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "indexPatternFieldEditor.editor.form.valueDescription",
      defaultMessage: "Set a value for the field instead of retrieving it from the field with the same name in {source}.",
      values: {
        source: /*#__PURE__*/_react.default.createElement(_eui.EuiCode, null, '_source')
      }
    })
  },
  format: {
    title: _i18n.i18n.translate('indexPatternFieldEditor.editor.form.formatTitle', {
      defaultMessage: 'Set format'
    }),
    description: _i18n.i18n.translate('indexPatternFieldEditor.editor.form.formatDescription', {
      defaultMessage: `Set your preferred format for displaying the value. Changing the format can affect the value and prevent highlighting in Discover.`
    })
  },
  popularity: {
    title: _i18n.i18n.translate('indexPatternFieldEditor.editor.form.popularityTitle', {
      defaultMessage: 'Set popularity'
    }),
    description: _i18n.i18n.translate('indexPatternFieldEditor.editor.form.popularityDescription', {
      defaultMessage: `Adjust the popularity to make the field appear higher or lower in the fields list.  By default, Discover orders fields from most selected to least selected.`
    })
  }
});
const FieldDetail = ({}) => {
  const {
    links,
    existingConcreteFields,
    fieldTypeToProcess
  } = (0, _field_editor_context.useFieldEditorContext)();
  const i18nTexts = geti18nTexts();
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_form_row.FormRow, {
    title: i18nTexts.customLabel.title,
    description: i18nTexts.customLabel.description,
    formFieldPath: "__meta__.isCustomLabelVisible",
    "data-test-subj": "customLabelRow",
    withDividerRule: true
  }, /*#__PURE__*/_react.default.createElement(_form_fields.CustomLabelField, null)), /*#__PURE__*/_react.default.createElement(_form_row.FormRow, {
    title: i18nTexts.customDescription.title,
    description: i18nTexts.customDescription.description,
    formFieldPath: "__meta__.isCustomDescriptionVisible",
    "data-test-subj": "customDescriptionRow",
    withDividerRule: true
  }, /*#__PURE__*/_react.default.createElement(_form_fields.CustomDescriptionField, null)), fieldTypeToProcess === 'runtime' && /*#__PURE__*/_react.default.createElement(_form_row.FormRow, {
    title: i18nTexts.value.title,
    description: i18nTexts.value.description,
    formFieldPath: "__meta__.isValueVisible",
    "data-test-subj": "valueRow",
    withDividerRule: true
  }, /*#__PURE__*/_react.default.createElement(_form_fields.ScriptField, {
    existingConcreteFields: existingConcreteFields,
    links: links
  })), /*#__PURE__*/_react.default.createElement(_form_row.FormRow, {
    title: i18nTexts.format.title,
    description: i18nTexts.format.description,
    formFieldPath: "__meta__.isFormatVisible",
    "data-test-subj": "formatRow",
    withDividerRule: true
  }, /*#__PURE__*/_react.default.createElement(_form_fields.FormatField, null)), /*#__PURE__*/_react.default.createElement(_advanced_parameters_section.AdvancedParametersSection, null, /*#__PURE__*/_react.default.createElement(_form_row.FormRow, {
    title: i18nTexts.popularity.title,
    description: i18nTexts.popularity.description,
    formFieldPath: "__meta__.isPopularityVisible",
    "data-test-subj": "popularityRow",
    withDividerRule: true
  }, /*#__PURE__*/_react.default.createElement(_form_fields.PopularityField, null))));
};
exports.FieldDetail = FieldDetail;