"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SaveFieldTypeOrNameChangedModal = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

const geti18nTexts = fieldName => ({
  cancelButtonText: _i18n.i18n.translate('indexPatternFieldEditor.saveRuntimeField.confirmationModal.cancelButtonLabel', {
    defaultMessage: 'Cancel'
  }),
  confirmButtonText: _i18n.i18n.translate('indexPatternFieldEditor.deleteRuntimeField.confirmationModal.saveButtonLabel', {
    defaultMessage: 'Save changes'
  }),
  warningChangingFields: _i18n.i18n.translate('indexPatternFieldEditor.deleteRuntimeField.confirmModal.warningChangingFields', {
    defaultMessage: 'Changing name or type can break searches and visualizations that rely on this field.'
  }),
  typeConfirm: _i18n.i18n.translate('indexPatternFieldEditor.saveRuntimeField.confirmModal.typeConfirm', {
    defaultMessage: 'Enter CHANGE to continue'
  }),
  titleConfirmChanges: _i18n.i18n.translate('indexPatternFieldEditor.saveRuntimeField.confirmModal.title', {
    defaultMessage: `Save changes to ''{name}''`,
    values: {
      name: fieldName
    }
  })
});
const SaveFieldTypeOrNameChangedModal = ({
  fieldName,
  onCancel,
  onConfirm
}) => {
  const i18nTexts = geti18nTexts(fieldName);
  const [confirmContent, setConfirmContent] = (0, _react.useState)('');
  return /*#__PURE__*/_react.default.createElement(_eui.EuiConfirmModal, {
    title: i18nTexts.titleConfirmChanges,
    "data-test-subj": "runtimeFieldSaveConfirmModal",
    cancelButtonText: i18nTexts.cancelButtonText,
    confirmButtonText: i18nTexts.confirmButtonText,
    confirmButtonDisabled: (confirmContent === null || confirmContent === void 0 ? void 0 : confirmContent.toUpperCase()) !== 'CHANGE',
    onCancel: onCancel,
    onConfirm: onConfirm
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiCallOut, {
    color: "warning",
    title: i18nTexts.warningChangingFields,
    iconType: "warning",
    size: "s"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, null), /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    label: i18nTexts.typeConfirm
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFieldText, {
    value: confirmContent,
    onChange: e => setConfirmContent(e.target.value),
    "data-test-subj": "saveModalConfirmText"
  })));
};
exports.SaveFieldTypeOrNameChangedModal = SaveFieldTypeOrNameChangedModal;