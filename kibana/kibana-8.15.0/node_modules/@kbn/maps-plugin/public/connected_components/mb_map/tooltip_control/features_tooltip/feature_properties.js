"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FeatureProperties = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _lodash = _interopRequireDefault(require("lodash"));
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _public = require("@kbn/unified-search-plugin/public");
var _trigger_utils = require("../../../../trigger_actions/trigger_utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

class FeatureProperties extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "_isMounted", false);
    (0, _defineProperty2.default)(this, "_prevLayerId", '');
    (0, _defineProperty2.default)(this, "_prevFeatureId", '');
    (0, _defineProperty2.default)(this, "_prevMbProperties", void 0);
    (0, _defineProperty2.default)(this, "_tableRef", /*#__PURE__*/_react.default.createRef());
    (0, _defineProperty2.default)(this, "state", {
      properties: null,
      actions: [],
      loadPropertiesErrorMsg: null,
      prevWidth: null,
      prevHeight: null
    });
    (0, _defineProperty2.default)(this, "_loadProperties", async () => {
      this._fetchProperties({
        nextFeatureId: this.props.featureId,
        nextLayerId: this.props.layerId,
        mbProperties: this.props.mbProperties
      });
    });
    (0, _defineProperty2.default)(this, "_showFilterActions", (tooltipProperty, getActionContext, addFilters) => {
      this.props.showFilterActions(this._renderFilterActions(tooltipProperty, getActionContext, addFilters));
    });
    (0, _defineProperty2.default)(this, "_fetchProperties", async ({
      nextLayerId,
      nextFeatureId,
      mbProperties
    }) => {
      if (this._prevLayerId === nextLayerId && this._prevFeatureId === nextFeatureId && _lodash.default.isEqual(this._prevMbProperties, mbProperties)) {
        // do not reload same feature properties
        return;
      }
      this._prevLayerId = nextLayerId;
      this._prevFeatureId = nextFeatureId;
      this._prevMbProperties = mbProperties;
      this.setState({
        properties: null,
        loadPropertiesErrorMsg: null
      });

      // Preserve current properties width/height so they can be used while rendering loading indicator.
      if (this.state.properties && this._tableRef.current) {
        this.setState({
          prevWidth: this._tableRef.current.clientWidth,
          prevHeight: this._tableRef.current.clientHeight
        });
      }
      let properties;
      try {
        properties = await this.props.loadFeatureProperties({
          layerId: nextLayerId,
          properties: mbProperties
        });
      } catch (error) {
        if (this._isMounted) {
          this.setState({
            properties: [],
            loadPropertiesErrorMsg: error.message
          });
        }
        return;
      }
      if (this._prevLayerId !== nextLayerId && this._prevFeatureId !== nextFeatureId) {
        // ignore results for old request
        return;
      }
      if (this._isMounted) {
        this.setState({
          properties
        });
      }
    });
  }
  componentDidMount() {
    this._isMounted = true;
    this._loadProperties();
    this._loadActions();
  }
  componentDidUpdate() {
    this._loadProperties();
  }
  componentWillUnmount() {
    this._isMounted = false;
  }
  async _loadActions() {
    if (!this.props.getFilterActions) {
      return;
    }
    const actions = await this.props.getFilterActions();
    if (this._isMounted) {
      this.setState({
        actions
      });
    }
  }
  _renderFilterActions(tooltipProperty, getActionContext, addFilters) {
    const panel = {
      id: 0,
      items: this.state.actions.filter(action => {
        if ((0, _trigger_utils.isUrlDrilldown)(action)) {
          return !!this.props.onSingleValueTrigger;
        }
        return true;
      }).map(action => {
        const actionContext = getActionContext();
        const iconType = action.getIconType(actionContext);
        const name = action.getDisplayName(actionContext);
        return {
          name: name ? name : action.id,
          icon: iconType ? /*#__PURE__*/_react.default.createElement(_eui.EuiIcon, {
            type: iconType
          }) : undefined,
          onClick: async () => {
            this.props.onCloseTooltip();
            if ((0, _trigger_utils.isUrlDrilldown)(action)) {
              this.props.onSingleValueTrigger(action.id, tooltipProperty.getPropertyKey(), tooltipProperty.getRawValue());
            } else {
              const filters = await tooltipProperty.getESFilters();
              addFilters(filters, action.id);
            }
          },
          ['data-test-subj']: `mapFilterActionButton__${name}`
        };
      })
    };
    return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("table", {
      className: "eui-yScrollWithShadows mapFeatureTooltip_table",
      ref: this._tableRef
    }, /*#__PURE__*/_react.default.createElement("tbody", null, /*#__PURE__*/_react.default.createElement("tr", null, /*#__PURE__*/_react.default.createElement("td", {
      className: "eui-textBreakWord mapFeatureTooltip__propertyLabel"
    }, tooltipProperty.getPropertyName()), /*#__PURE__*/_react.default.createElement("td", {
      className: "eui-textBreakWord"
    }, tooltipProperty.getHtmlDisplayValue())))), /*#__PURE__*/_react.default.createElement(_eui.EuiContextMenu, {
      initialPanelId: 0,
      panels: [panel]
    }));
  }
  _renderFilterCell(tooltipProperty) {
    if (!this.props.showFilterButtons || !tooltipProperty.isFilterable() || this.props.addFilters === undefined) {
      return /*#__PURE__*/_react.default.createElement("td", null);
    }
    const applyFilterButton = /*#__PURE__*/_react.default.createElement(_eui.EuiButtonEmpty, {
      size: "xs",
      title: _i18n.i18n.translate('xpack.maps.tooltip.filterOnPropertyTitle', {
        defaultMessage: 'Filter on property'
      }),
      onClick: async () => {
        this.props.onCloseTooltip();
        const filters = await tooltipProperty.getESFilters();
        this.props.addFilters(filters, _public.ACTION_GLOBAL_APPLY_FILTER);
      },
      "aria-label": _i18n.i18n.translate('xpack.maps.tooltip.filterOnPropertyAriaLabel', {
        defaultMessage: 'Filter on property'
      }),
      "data-test-subj": "mapTooltipCreateFilterButton"
    }, /*#__PURE__*/_react.default.createElement(_eui.EuiIcon, {
      type: "filter"
    }));
    return this.props.getActionContext === undefined || this.state.actions.length === 0 || this.state.actions.length === 1 && this.state.actions[0].id === _public.ACTION_GLOBAL_APPLY_FILTER ? /*#__PURE__*/_react.default.createElement("td", null, applyFilterButton) : /*#__PURE__*/_react.default.createElement("td", {
      className: "mapFeatureTooltip_actionsRow"
    }, /*#__PURE__*/_react.default.createElement("span", null, applyFilterButton, /*#__PURE__*/_react.default.createElement(_eui.EuiButtonEmpty, {
      size: "xs",
      title: _i18n.i18n.translate('xpack.maps.tooltip.viewActionsTitle', {
        defaultMessage: 'View filter actions'
      }),
      onClick: () => {
        this._showFilterActions(tooltipProperty, this.props.getActionContext, this.props.addFilters);
      },
      "aria-label": _i18n.i18n.translate('xpack.maps.tooltip.viewActionsTitle', {
        defaultMessage: 'View filter actions'
      }),
      "data-test-subj": "mapTooltipMoreActionsButton"
    }, /*#__PURE__*/_react.default.createElement(_eui.EuiIcon, {
      type: "arrowRight"
    }))));
  }
  render() {
    if (this.state.loadPropertiesErrorMsg) {
      return /*#__PURE__*/_react.default.createElement(_eui.EuiCallOut, {
        title: _i18n.i18n.translate('xpack.maps.tooltip.unableToLoadContentTitle', {
          defaultMessage: 'Unable to load tooltip content'
        }),
        color: "danger",
        iconType: "warning",
        size: "s"
      }, /*#__PURE__*/_react.default.createElement("p", null, this.state.loadPropertiesErrorMsg));
    }
    if (!this.state.properties) {
      const loadingMsg = _i18n.i18n.translate('xpack.maps.tooltip.loadingMsg', {
        defaultMessage: 'Loading'
      });
      // Use width/height of last viewed properties while displaying loading status
      // to avoid resizing component during loading phase and bouncing tooltip container around
      const style = {};
      if (this.state.prevWidth && this.state.prevHeight) {
        style.width = this.state.prevWidth;
        style.height = this.state.prevHeight;
      }
      return /*#__PURE__*/_react.default.createElement(_eui.EuiTextAlign, {
        textAlign: "center",
        style: style
      }, /*#__PURE__*/_react.default.createElement(_eui.EuiLoadingSpinner, {
        size: "m"
      }), loadingMsg);
    }
    const rows = this.state.properties.map(tooltipProperty => {
      return /*#__PURE__*/_react.default.createElement("tr", {
        key: tooltipProperty.getPropertyKey(),
        className: "mapFeatureTooltip_row"
      }, /*#__PURE__*/_react.default.createElement("td", {
        className: "eui-textBreakWord mapFeatureTooltip__propertyLabel"
      }, tooltipProperty.getPropertyName()), /*#__PURE__*/_react.default.createElement("td", {
        className: "eui-textBreakWord"
      }, tooltipProperty.getHtmlDisplayValue()), this._renderFilterCell(tooltipProperty));
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "mapFeatureTooltip_tableWrapper"
    }, /*#__PURE__*/_react.default.createElement("table", {
      className: "eui-yScrollWithShadows mapFeatureTooltip_table",
      ref: this._tableRef
    }, /*#__PURE__*/_react.default.createElement("tbody", null, rows)));
  }
}
exports.FeatureProperties = FeatureProperties;