"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TermJoinExpression = TermJoinExpression;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _term_join_popover_content = require("./term_join_popover_content");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function TermJoinExpression(props) {
  const [isPopoverOpen, setIsPopoverOpen] = (0, _react.useState)(false);
  const {
    size,
    term
  } = props.sourceDescriptor;
  const expressionValue = term !== undefined ? _i18n.i18n.translate('xpack.maps.termJoinExpression.value', {
    defaultMessage: '{topTerms} terms from {term}',
    values: {
      topTerms: size !== undefined ? _i18n.i18n.translate('xpack.maps.termJoinExpression.topTerms', {
        defaultMessage: 'top {size}',
        values: {
          size
        }
      }) : '',
      term
    }
  }) : _i18n.i18n.translate('xpack.maps.termJoinExpression.placeholder', {
    defaultMessage: '-- configure term join --'
  });
  return /*#__PURE__*/_react.default.createElement(_eui.EuiPopover, {
    id: props.sourceDescriptor.id,
    isOpen: isPopoverOpen,
    closePopover: () => {
      setIsPopoverOpen(false);
    },
    ownFocus: true,
    initialFocus: "body" /* avoid initialFocus on Combobox */,
    anchorPosition: "leftCenter",
    button: /*#__PURE__*/_react.default.createElement(_eui.EuiExpression, {
      onClick: () => {
        setIsPopoverOpen(!isPopoverOpen);
      },
      description: _i18n.i18n.translate('xpack.maps.termJoinExpression.description', {
        defaultMessage: 'Join with'
      }),
      uppercase: false,
      value: expressionValue
    }),
    repositionOnScroll: true
  }, /*#__PURE__*/_react.default.createElement(_term_join_popover_content.TermJoinPopoverContent, {
    leftSourceName: props.leftSourceName,
    leftValue: props.leftValue,
    leftFields: props.leftFields,
    onLeftFieldChange: props.onLeftFieldChange,
    sourceDescriptor: props.sourceDescriptor,
    onSourceDescriptorChange: props.onSourceDescriptorChange,
    rightFields: props.rightFields
  }));
}