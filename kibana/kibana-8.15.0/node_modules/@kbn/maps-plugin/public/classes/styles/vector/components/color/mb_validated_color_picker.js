"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RGBA_0000 = exports.MbValidatedColorPicker = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const RGBA_0000 = exports.RGBA_0000 = 'rgba(0,0,0,0)';
// EuiColorPicker treats '' or invalid colors as transparent.
// Mapbox logs errors for '' or invalid colors.
// MbValidatedColorPicker is a wrapper around EuiColorPicker that reconciles the behavior difference
// between the two by returning a Mapbox safe RGBA_0000 for '' or invalid colors
// while keeping invalid state local so EuiColorPicker's input properly handles text input.
class MbValidatedColorPicker extends _react.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      colorInputValue: this.props.color === RGBA_0000 ? '' : this.props.color
    });
    (0, _defineProperty2.default)(this, "_onColorChange", color => {
      // reflect all user input, whether valid or not
      this.setState({
        colorInputValue: color
      });
      // Only surface mapbox valid input to caller
      this.props.onChange((0, _eui.isValidHex)(color) ? color : RGBA_0000);
    });
  }
  render() {
    return /*#__PURE__*/_react.default.createElement(_eui.EuiColorPicker, {
      onChange: this._onColorChange,
      color: this.state.colorInputValue,
      swatches: this.props.swatches,
      append: this.props.append,
      prepend: this.props.prepend,
      compressed: true
    });
  }
}
exports.MbValidatedColorPicker = MbValidatedColorPicker;