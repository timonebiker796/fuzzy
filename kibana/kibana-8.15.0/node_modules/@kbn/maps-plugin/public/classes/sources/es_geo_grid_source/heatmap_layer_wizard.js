"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.heatmapLayerWizardConfig = void 0;
var _i18n = require("@kbn/i18n");
var _react = _interopRequireDefault(require("react"));
var _create_source_editor = require("./create_source_editor");
var _es_geo_grid_source = require("./es_geo_grid_source");
var _heatmap_layer = require("../../layers/heatmap_layer");
var _constants = require("../../../../common/constants");
var _heatmap_layer_icon = require("../../layers/wizards/icons/heatmap_layer_icon");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

// @ts-ignore

const heatmapLayerWizardConfig = exports.heatmapLayerWizardConfig = {
  id: _constants.WIZARD_ID.HEATMAP,
  order: 10,
  categories: [_constants.LAYER_WIZARD_CATEGORY.ELASTICSEARCH],
  description: _i18n.i18n.translate('xpack.maps.source.esGridHeatmapDescription', {
    defaultMessage: 'Group documents in grids to show density'
  }),
  icon: _heatmap_layer_icon.HeatmapLayerIcon,
  renderWizard: ({
    previewLayers
  }) => {
    const onSourceConfigChange = sourceConfig => {
      if (!sourceConfig) {
        previewLayers([]);
        return;
      }
      const layerDescriptor = _heatmap_layer.HeatmapLayer.createDescriptor({
        sourceDescriptor: _es_geo_grid_source.ESGeoGridSource.createDescriptor({
          ...sourceConfig,
          resolution: _constants.GRID_RESOLUTION.SUPER_FINE
        })
      });
      previewLayers([layerDescriptor]);
    };
    return /*#__PURE__*/_react.default.createElement(_create_source_editor.CreateSourceEditor, {
      requestType: _constants.RENDER_AS.HEATMAP,
      onSourceConfigChange: onSourceConfigChange
    });
  },
  title: _es_geo_grid_source.heatmapTitle
};