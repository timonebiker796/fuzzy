"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EnrollmentTokenHelpPopover = exports.EnrollmentTokenForm = void 0;
exports.compareAddresses = compareAddresses;
exports.decodeEnrollmentToken = decodeEnrollmentToken;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _eui = require("@elastic/eui");
var _react = _interopRequireWildcard(require("react"));
var _useUpdateEffect = _interopRequireDefault(require("react-use/lib/useUpdateEffect"));
var _i18n = require("@kbn/i18n");
var _i18nReact = require("@kbn/i18n-react");
var _doc_link = require("./doc_link");
var _get_command_line_snippet = require("./get_command_line_snippet");
var _submit_error_callout = require("./submit_error_callout");
var _text_truncate = require("./text_truncate");
var _use_form = require("./use_form");
var _use_kibana = require("./use_kibana");
var _use_verification = require("./use_verification");
var _use_visibility = require("./use_visibility");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

const EnrollmentTokenForm = ({
  defaultValues = {
    token: ''
  },
  onCancel,
  onSuccess
}) => {
  const {
    http
  } = (0, _use_kibana.useKibana)();
  const {
    status,
    getCode
  } = (0, _use_verification.useVerification)();
  const [form, eventHandlers] = (0, _use_form.useForm)({
    defaultValues,
    validate: values => {
      const errors = {};
      if (!values.token) {
        errors.token = _i18n.i18n.translate('interactiveSetup.enrollmentTokenForm.tokenRequiredError', {
          defaultMessage: 'Enter an enrollment token.'
        });
      } else {
        const decoded = decodeEnrollmentToken(values.token);
        if (!decoded) {
          errors.token = _i18n.i18n.translate('interactiveSetup.enrollmentTokenForm.tokenInvalidError', {
            defaultMessage: 'Enter a valid enrollment token.'
          });
        }
      }
      return errors;
    },
    onSubmit: async values => {
      const decoded = decodeEnrollmentToken(values.token);
      await http.post('/internal/interactive_setup/enroll', {
        body: JSON.stringify({
          hosts: decoded.adr,
          apiKey: decoded.key,
          caFingerprint: decoded.fgr,
          code: getCode()
        })
      });
      onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess();
    }
  });
  const [isVisible, buttonRef] = (0, _use_visibility.useVisibility)();
  (0, _useUpdateEffect.default)(() => {
    if (status === 'verified' && isVisible) {
      form.submit();
    }
  }, [status]);
  const enrollmentToken = decodeEnrollmentToken(form.values.token);
  return /*#__PURE__*/_react.default.createElement(_eui.EuiForm, (0, _extends2.default)({
    component: "form",
    noValidate: true
  }, eventHandlers), status !== 'unverified' && !form.isSubmitting && !form.isValidating && form.submitError && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_submit_error_callout.SubmitErrorCallout, {
    error: form.submitError,
    defaultTitle: _i18n.i18n.translate('interactiveSetup.enrollmentTokenForm.submitErrorTitle', {
      defaultMessage: "Couldn't configure Elastic"
    })
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, null)), /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    label: _i18n.i18n.translate('interactiveSetup.enrollmentTokenForm.tokenLabel', {
      defaultMessage: 'Enrollment token'
    }),
    error: form.errors.token,
    isInvalid: form.touched.token && !!form.errors.token,
    helpText: enrollmentToken ? /*#__PURE__*/_react.default.createElement(EnrollmentTokenDetails, {
      token: enrollmentToken
    }) : /*#__PURE__*/_react.default.createElement(EnrollmentTokenHelpPopover, null),
    fullWidth: true
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiTextArea, {
    name: "token",
    value: form.values.token,
    isInvalid: form.touched.token && !!form.errors.token,
    placeholder: _i18n.i18n.translate('interactiveSetup.enrollmentTokenForm.tokenPlaceholder', {
      defaultMessage: 'Paste enrollment token from terminal.'
    }),
    fullWidth: true
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, null), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    responsive: false,
    justifyContent: "flexEnd"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiButtonEmpty, {
    flush: "right",
    iconType: "gear",
    onClick: onCancel
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "interactiveSetup.enrollmentTokenForm.cancelButton",
    defaultMessage: "Configure manually"
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
    buttonRef: buttonRef,
    type: "submit",
    isLoading: form.isSubmitting,
    isDisabled: form.isSubmitted && form.isInvalid,
    fill: true
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "interactiveSetup.enrollmentTokenForm.submitButton",
    defaultMessage: "{isSubmitting, select, true{Configuring Elastic\u2026} other{Configure Elastic}}",
    values: {
      isSubmitting: form.isSubmitting
    }
  })))));
};
exports.EnrollmentTokenForm = EnrollmentTokenForm;
const EnrollmentTokenDetails = ({
  token
}) => /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
  size: "xs"
}, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
  responsive: false,
  alignItems: "center",
  gutterSize: "s"
}, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
  grow: false,
  className: "eui-textNoWrap"
}, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
  id: "interactiveSetup.enrollmentTokenDetails.connectTo",
  defaultMessage: "Connect to"
})), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
  grow: false,
  style: {
    overflow: 'hidden'
  }
}, /*#__PURE__*/_react.default.createElement(_text_truncate.TextTruncate, null, /*#__PURE__*/_react.default.createElement("strong", null, token.adr[0])))));
function decodeEnrollmentToken(enrollmentToken) {
  try {
    const json = JSON.parse(atob(enrollmentToken));
    if (!Array.isArray(json.adr) || json.adr.some(adr => typeof adr !== 'string') || typeof json.fgr !== 'string' || typeof json.key !== 'string' || typeof json.ver !== 'string') {
      return;
    }
    json.adr.sort(compareAddresses);
    return {
      ...json,
      adr: json.adr.map(host => `https://${host}`),
      key: btoa(json.key)
    };
  } catch (error) {} // eslint-disable-line no-empty
}

/**
 * Compares two Elasticsearch addresses. Sorts IPv4 addresses before IPv6 addresses.
 */
function compareAddresses(a, b) {
  if (a.indexOf('[') === -1 && b.indexOf('[') !== -1) {
    return -1;
  }
  if (a.indexOf('[') !== -1 && b.indexOf('[') === -1) {
    return 1;
  }
  return 0;
}
const EnrollmentTokenHelpPopover = () => {
  const [isPopoverOpen, setIsPopoverOpen] = (0, _react.useState)(false);
  const button = /*#__PURE__*/_react.default.createElement(_eui.EuiLink, {
    onClick: () => setIsPopoverOpen(isOpen => !isOpen)
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "interactiveSetup.enrollmentTokenHelpPopover.buttonText",
    defaultMessage: "Where do I find this?"
  }));
  return /*#__PURE__*/_react.default.createElement(_eui.EuiPopover, {
    button: button,
    anchorPosition: "rightCenter",
    isOpen: isPopoverOpen,
    closePopover: () => setIsPopoverOpen(false)
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    size: "s",
    grow: false
  }, /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "interactiveSetup.enrollmentTokenHelpPopover.helpText",
    defaultMessage: "The enrollment token is automatically generated when you start Elasticsearch for the first time. You might need to scroll back a bit in the terminal to view it."
  })), /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "interactiveSetup.enrollmentTokenHelpPopover.commandHelpText",
    defaultMessage: "To generate a new enrollment token, run the following command from the Elasticsearch installation directory:"
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiCodeBlock, {
    language: "bash",
    paddingSize: "m",
    isCopyable: true
  }, (0, _get_command_line_snippet.getCommandLineSnippet)('elasticsearch-create-enrollment-token', '--scope kibana'))), /*#__PURE__*/_react.default.createElement(_eui.EuiPopoverFooter, null, /*#__PURE__*/_react.default.createElement(_doc_link.DocLink, {
    app: "elasticsearch",
    doc: "configuring-stack-security.html"
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "interactiveSetup.enrollmentTokenHelpPopover.docLinkText",
    defaultMessage: "Learn how to set up Elastic."
  }))));
};
exports.EnrollmentTokenHelpPopover = EnrollmentTokenHelpPopover;