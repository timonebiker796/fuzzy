"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ServerlessSearchPlugin = void 0;
var _public = require("@kbn/core/public");
var _i18n = require("@kbn/i18n");
var _managementCardsNavigation = require("@kbn/management-cards-navigation");
var _reactQuery = require("@tanstack/react-query");
var _rxjs = require("rxjs");
var _index_mappings_docs_link = require("./application/components/index_management/index_mappings_docs_link");
var _index_overview_content = require("./application/components/index_management/index_overview_content");
var _doc_links = require("../common/doc_links");
var _documents_tab = require("./application/components/index_documents/documents_tab");
var _get_error_message = require("./utils/get_error_message");
var _navigation_tree = require("./navigation_tree");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } /*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
class ServerlessSearchPlugin {
  setup(core, setupDeps) {
    const {
      searchHomepage
    } = setupDeps;
    const useSearchHomepage = searchHomepage && searchHomepage.isHomepageFeatureEnabled();
    const queryClient = new _reactQuery.QueryClient({
      mutationCache: new _reactQuery.MutationCache({
        onError: error => {
          core.notifications.toasts.addError(error, {
            title: error.name,
            toastMessage: (0, _get_error_message.getErrorMessage)(error),
            toastLifeTimeMs: 1000
          });
        }
      }),
      queryCache: new _reactQuery.QueryCache({
        onError: error => {
          // 404s are often functionally okay and shouldn't show toasts by default
          if ((0, _get_error_message.getErrorCode)(error) === 404) {
            return;
          }
          if ((0, _get_error_message.isKibanaServerError)(error) && !error.skipToast) {
            core.notifications.toasts.addError(error, {
              title: error.name,
              toastMessage: (0, _get_error_message.getErrorMessage)(error),
              toastLifeTimeMs: 1000
            });
          }
        }
      })
    });
    if (useSearchHomepage) {
      core.application.register({
        id: 'serverlessHomeRedirect',
        title: _i18n.i18n.translate('xpack.serverlessSearch.app.home.title', {
          defaultMessage: 'Home'
        }),
        appRoute: '/app/elasticsearch',
        euiIconType: 'logoElastic',
        category: _public.DEFAULT_APP_CATEGORIES.enterpriseSearch,
        visibleIn: [],
        async mount({}) {
          const [coreStart] = await core.getStartServices();
          coreStart.application.navigateToApp('searchHomepage');
          return () => {};
        }
      });
    }
    core.application.register({
      id: 'serverlessElasticsearch',
      title: _i18n.i18n.translate('xpack.serverlessSearch.app.elasticsearch.title', {
        defaultMessage: 'Elasticsearch'
      }),
      euiIconType: 'logoElastic',
      category: _public.DEFAULT_APP_CATEGORIES.enterpriseSearch,
      appRoute: useSearchHomepage ? '/app/elasticsearch/getting_started' : '/app/elasticsearch',
      async mount({
        element,
        history
      }) {
        const {
          renderApp
        } = await Promise.resolve().then(() => _interopRequireWildcard(require('./application/elasticsearch')));
        const [coreStart, services] = await core.getStartServices();
        _doc_links.docLinks.setDocLinks(coreStart.docLinks.links);
        let user;
        try {
          const response = await coreStart.security.authc.getCurrentUser();
          user = response;
        } catch {
          user = undefined;
        }
        return await renderApp(element, coreStart, {
          history,
          user,
          ...services
        }, queryClient);
      }
    });
    core.application.register({
      id: 'serverlessConnectors',
      title: _i18n.i18n.translate('xpack.serverlessSearch.app.connectors.title', {
        defaultMessage: 'Connectors'
      }),
      appRoute: '/app/connectors',
      euiIconType: 'logoElastic',
      category: _public.DEFAULT_APP_CATEGORIES.enterpriseSearch,
      visibleIn: [],
      async mount({
        element,
        history
      }) {
        const {
          renderApp
        } = await Promise.resolve().then(() => _interopRequireWildcard(require('./application/connectors')));
        const [coreStart, services] = await core.getStartServices();
        _doc_links.docLinks.setDocLinks(coreStart.docLinks.links);
        return await renderApp(element, coreStart, {
          history,
          ...services
        }, queryClient);
      }
    });
    setupDeps.discover.showInlineTopNav();
    return {};
  }
  start(core, services) {
    var _searchHomepage$isHom;
    const {
      serverless,
      management,
      indexManagement,
      security,
      searchHomepage
    } = services;
    const useSearchHomepage = searchHomepage && searchHomepage.isHomepageFeatureEnabled();
    serverless.setProjectHome(useSearchHomepage ? '/app/elasticsearch/home' : '/app/elasticsearch');
    const navigationTree$ = (0, _rxjs.of)((0, _navigation_tree.navigationTree)((_searchHomepage$isHom = searchHomepage === null || searchHomepage === void 0 ? void 0 : searchHomepage.isHomepageFeatureEnabled()) !== null && _searchHomepage$isHom !== void 0 ? _searchHomepage$isHom : false));
    serverless.initNavigation('search', navigationTree$, {
      dataTestSubj: 'svlSearchSideNav'
    });
    const extendCardNavDefinitions = serverless.getNavigationCards(security.authz.isRoleManagementEnabled());
    management.setupCardsNavigation({
      enabled: true,
      hideLinksTo: [_managementCardsNavigation.appIds.MAINTENANCE_WINDOWS],
      extendCardNavDefinitions
    });
    indexManagement === null || indexManagement === void 0 ? void 0 : indexManagement.extensionsService.setIndexMappingsContent((0, _index_mappings_docs_link.createIndexMappingsDocsLinkContent)(core));
    indexManagement === null || indexManagement === void 0 ? void 0 : indexManagement.extensionsService.addIndexDetailsTab((0, _documents_tab.createIndexDocumentsContent)(core, services));
    indexManagement === null || indexManagement === void 0 ? void 0 : indexManagement.extensionsService.setIndexOverviewContent((0, _index_overview_content.createIndexOverviewContent)(core, services));
    return {};
  }
  stop() {}
}
exports.ServerlessSearchPlugin = ServerlessSearchPlugin;