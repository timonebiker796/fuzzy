"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.recallAndScore = recallAndScore;
var _retrieve_suggestions = require("./retrieve_suggestions");
var _score_suggestions = require("./score_suggestions");
var _recall_ranking = require("../../analytics/recall_ranking");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

async function recallAndScore({
  recall,
  chat,
  analytics,
  userPrompt,
  context,
  messages,
  logger,
  signal
}) {
  const queries = [{
    text: userPrompt,
    boost: 3
  }, {
    text: context,
    boost: 1
  }].filter(query => query.text.trim());
  const suggestions = await (0, _retrieve_suggestions.retrieveSuggestions)({
    recall,
    queries
  });
  if (!suggestions.length) {
    return {
      relevantDocuments: [],
      scores: [],
      suggestions: []
    };
  }
  try {
    const {
      scores,
      relevantDocuments
    } = await (0, _score_suggestions.scoreSuggestions)({
      suggestions,
      logger,
      messages,
      userPrompt,
      context,
      signal,
      chat
    });
    analytics.reportEvent(_recall_ranking.RecallRankingEventType, {
      prompt: queries.map(query => query.text).join('\n\n'),
      scoredDocuments: suggestions.map(suggestion => {
        var _suggestion$score;
        const llmScore = scores.find(score => score.id === suggestion.id);
        return {
          content: suggestion.text,
          elserScore: (_suggestion$score = suggestion.score) !== null && _suggestion$score !== void 0 ? _suggestion$score : -1,
          llmScore: llmScore ? llmScore.score : -1
        };
      })
    });
    return {
      scores,
      relevantDocuments,
      suggestions
    };
  } catch (error) {
    logger.error(`Error scoring documents: ${error.message}`, {
      error
    });
    return {
      suggestions: suggestions.slice(0, 5)
    };
  }
}