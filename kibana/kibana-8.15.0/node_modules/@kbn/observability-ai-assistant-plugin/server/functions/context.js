"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CONTEXT_FUNCTION_NAME = void 0;
exports.registerContextFunction = registerContextFunction;
var _gptTokenizer = require("gpt-tokenizer");
var _lodash = require("lodash");
var _rxjs = require("rxjs");
var _types = require("../../common/functions/types");
var _types2 = require("../../common/types");
var _create_function_response_message = require("../../common/utils/create_function_response_message");
var _recall_and_score = require("../utils/recall/recall_and_score");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const MAX_TOKEN_COUNT_FOR_DATA_ON_SCREEN = 1000;
const CONTEXT_FUNCTION_NAME = exports.CONTEXT_FUNCTION_NAME = 'context';
function registerContextFunction({
  client,
  functions,
  resources,
  isKnowledgeBaseAvailable
}) {
  functions.registerFunction({
    name: CONTEXT_FUNCTION_NAME,
    description: 'This function provides context as to what the user is looking at on their screen, and recalled documents from the knowledge base that matches their query',
    visibility: _types.FunctionVisibility.Internal
  }, async ({
    messages,
    screenContexts,
    chat
  }, signal) => {
    const {
      analytics
    } = (await resources.context.core).coreStart;
    async function getContext() {
      const screenDescription = (0, _lodash.compact)(screenContexts.map(context => context.screenDescription)).join('\n\n');
      // any data that falls within the token limit, send it automatically

      const dataWithinTokenLimit = (0, _lodash.compact)(screenContexts.flatMap(context => context.data)).filter(data => (0, _gptTokenizer.encode)(JSON.stringify(data.value)).length <= MAX_TOKEN_COUNT_FOR_DATA_ON_SCREEN);
      const content = {
        screen_description: screenDescription,
        learnings: [],
        ...(dataWithinTokenLimit.length ? {
          data_on_screen: dataWithinTokenLimit
        } : {})
      };
      if (!isKnowledgeBaseAvailable) {
        return {
          content
        };
      }
      const userMessage = (0, _lodash.last)(messages.filter(message => message.message.role === _types2.MessageRole.User));
      const userPrompt = userMessage === null || userMessage === void 0 ? void 0 : userMessage.message.content;
      const {
        scores,
        relevantDocuments,
        suggestions
      } = await (0, _recall_and_score.recallAndScore)({
        recall: client.recall,
        chat,
        logger: resources.logger,
        userPrompt,
        context: screenDescription,
        messages,
        signal,
        analytics
      });
      return {
        content: {
          ...content,
          learnings: relevantDocuments
        },
        data: {
          scores,
          suggestions
        }
      };
    }
    return new _rxjs.Observable(subscriber => {
      getContext().then(({
        content,
        data
      }) => {
        subscriber.next((0, _create_function_response_message.createFunctionResponseMessage)({
          name: CONTEXT_FUNCTION_NAME,
          content,
          data
        }));
        subscriber.complete();
      }).catch(error => {
        resources.logger.error('Error in context function');
        resources.logger.error(error);
        subscriber.next((0, _create_function_response_message.createFunctionResponseMessage)({
          name: CONTEXT_FUNCTION_NAME,
          content: `Error in context function: ${error.message}`,
          data: {
            error: {
              message: error.message
            }
          }
        }));
        subscriber.complete();
      });
    });
  });
}