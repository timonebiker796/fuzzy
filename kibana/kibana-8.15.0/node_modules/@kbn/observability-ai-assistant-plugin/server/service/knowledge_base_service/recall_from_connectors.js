"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.recallFromConnectors = recallFromConnectors;
var _lodash = require("lodash");
var _common = require("../../../common");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

async function recallFromConnectors({
  queries,
  esClient,
  uiSettingsClient,
  modelId
}) {
  const ML_INFERENCE_PREFIX = 'ml.inference.';
  const connectorIndices = await getConnectorIndices(esClient, uiSettingsClient);
  const fieldCaps = await esClient.asCurrentUser.fieldCaps({
    index: connectorIndices,
    fields: `${ML_INFERENCE_PREFIX}*`,
    allow_no_indices: true,
    types: ['sparse_vector'],
    filters: '-metadata,-parent'
  });
  const fieldsWithVectors = Object.keys(fieldCaps.fields).map(field => field.replace('_expanded.predicted_value', '').replace(ML_INFERENCE_PREFIX, ''));
  if (!fieldsWithVectors.length) {
    return [];
  }
  const esQueries = fieldsWithVectors.flatMap(field => {
    const vectorField = `${ML_INFERENCE_PREFIX}${field}_expanded.predicted_value`;
    const modelField = `${ML_INFERENCE_PREFIX}${field}_expanded.model_id`;
    return queries.map(({
      text,
      boost = 1
    }) => {
      return {
        bool: {
          should: [{
            text_expansion: {
              [vectorField]: {
                model_text: text,
                model_id: modelId,
                boost
              }
            }
          }],
          filter: [{
            term: {
              [modelField]: modelId
            }
          }]
        }
      };
    });
  });
  const response = await esClient.asCurrentUser.search({
    index: connectorIndices,
    query: {
      bool: {
        should: esQueries
      }
    },
    size: 20,
    _source: {
      exclude: ['_*', 'ml*']
    }
  });
  const results = response.hits.hits.map(hit => ({
    text: JSON.stringify(hit._source),
    score: hit._score,
    is_correction: false,
    id: hit._id
  }));
  return results;
}
async function getConnectorIndices(esClient, uiSettingsClient) {
  var _response$results;
  // improve performance by running this in parallel with the `uiSettingsClient` request
  const responsePromise = esClient.asCurrentUser.transport.request({
    method: 'GET',
    path: '_connector',
    querystring: {
      filter_path: 'results.index_name'
    }
  });
  const customSearchConnectorIndex = await uiSettingsClient.get(_common.aiAssistantSearchConnectorIndexPattern);
  if (customSearchConnectorIndex) {
    return customSearchConnectorIndex.split(',');
  }
  const response = await responsePromise;
  const connectorIndices = (_response$results = response.results) === null || _response$results === void 0 ? void 0 : _response$results.map(result => result.index_name);

  // preserve backwards compatibility with 8.14 (may not be needed in the future)
  if ((0, _lodash.isEmpty)(connectorIndices)) {
    return ['search-*'];
  }
  return connectorIndices;
}