"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processVertexStream = processVertexStream;
var _rxjs = require("rxjs");
var _uuid = require("uuid");
var _conversation_complete = require("../../../../../common/conversation_complete");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function processVertexStream() {
  return source => new _rxjs.Observable(subscriber => {
    const id = (0, _uuid.v4)();
    function handleNext(value) {
      // completion: what we eventually want to emit
      if (value.usageMetadata) {
        subscriber.next({
          type: _conversation_complete.StreamingChatResponseEventType.TokenCount,
          tokens: {
            prompt: value.usageMetadata.promptTokenCount,
            completion: value.usageMetadata.candidatesTokenCount,
            total: value.usageMetadata.totalTokenCount
          }
        });
      }
      const completion = value.candidates[0].content.parts[0].text;
      if (completion) {
        subscriber.next({
          id,
          type: _conversation_complete.StreamingChatResponseEventType.ChatCompletionChunk,
          message: {
            content: completion
          }
        });
      }
    }
    source.subscribe({
      next: value => {
        try {
          handleNext(value);
        } catch (error) {
          subscriber.error(error);
        }
      },
      error: err => {
        subscriber.error(err);
      },
      complete: () => {
        subscriber.complete();
      }
    });
  });
}