"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGeminiAdapter = void 0;
var _rxjs = require("rxjs");
var _process_vertex_stream = require("./process_vertex_stream");
var _get_messages_with_simulated_function_calling = require("../simulate_function_calling/get_messages_with_simulated_function_calling");
var _parse_inline_function_calls = require("../simulate_function_calling/parse_inline_function_calls");
var _constants = require("../simulate_function_calling/constants");
var _eventsource_stream_into_observable = require("../../../util/eventsource_stream_into_observable");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const createGeminiAdapter = ({
  messages,
  functions,
  functionCall,
  logger
}) => {
  const filteredFunctions = functionCall ? functions === null || functions === void 0 ? void 0 : functions.filter(fn => fn.name === functionCall) : functions;
  return {
    getSubAction: () => {
      const messagesWithSimulatedFunctionCalling = (0, _get_messages_with_simulated_function_calling.getMessagesWithSimulatedFunctionCalling)({
        messages,
        functions: filteredFunctions,
        functionCall
      });
      const formattedMessages = messagesWithSimulatedFunctionCalling.map(message => {
        var _message$message$cont;
        return {
          role: message.message.role,
          content: (_message$message$cont = message.message.content) !== null && _message$message$cont !== void 0 ? _message$message$cont : ''
        };
      });
      return {
        subAction: 'invokeStream',
        subActionParams: {
          messages: formattedMessages,
          temperature: 0,
          stopSequences: ['\n\nHuman:', _constants.TOOL_USE_END]
        }
      };
    },
    streamIntoObservable: readable => (0, _eventsource_stream_into_observable.eventsourceStreamIntoObservable)(readable).pipe((0, _rxjs.map)(value => {
      const response = JSON.parse(value);
      return response;
    }), (0, _process_vertex_stream.processVertexStream)(), (0, _parse_inline_function_calls.parseInlineFunctionCalls)({
      logger
    }))
  };
};
exports.createGeminiAdapter = createGeminiAdapter;