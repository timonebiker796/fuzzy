"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LangTracer = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _api = require("@opentelemetry/api");
var _rxjs = require("rxjs");
var _get_langtrace_span_attributes = require("./get_langtrace_span_attributes");
var _get_langtrace_tracer = require("./get_langtrace_tracer");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

class LangTracer {
  constructor(context) {
    (0, _defineProperty2.default)(this, "tracer", (0, _get_langtrace_tracer.getLangtraceTracer)());
    this.context = context;
  }
  startActiveSpan(name, ...rest) {
    let [options, callback] = rest;
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    const span = this.tracer.startSpan(name, {
      ...options,
      attributes: {
        ...(0, _get_langtrace_span_attributes.getLangtraceSpanAttributes)(),
        ...(options.attributes || {})
      }
    }, this.context);
    const nextContext = _api.trace.setSpan(this.context, span);
    const nextTracer = new LangTracer(nextContext);
    return callback({
      span,
      tracer: nextTracer
    }).pipe((0, _rxjs.tap)({
      error: error => {
        span.recordException(error);
        span.setStatus({
          code: _api.SpanStatusCode.ERROR,
          message: error.message
        });
        span.end();
      },
      complete: () => {
        span.setStatus({
          code: _api.SpanStatusCode.OK
        });
        span.end();
      }
    }), (0, _rxjs.finalize)(() => {
      span.end();
    }));
  }
}
exports.LangTracer = LangTracer;