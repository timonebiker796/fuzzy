"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateAssignmentsPalette = updateAssignmentsPalette;
exports.updateColorModePalette = updateColorModePalette;
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

function updateAssignmentsPalette(assignments, colorMode, paletteId, getPaletteFn, preserveColorChanges) {
  const palette = getPaletteFn(paletteId);
  return assignments.map(({
    rule,
    color,
    touched
  }, index) => {
    if (preserveColorChanges && touched) {
      return {
        rule,
        color,
        touched
      };
    } else {
      const newColor = colorMode.type === 'categorical' ? {
        type: 'categorical',
        paletteId,
        colorIndex: index % palette.colorCount
      } : {
        type: 'gradient'
      };
      return {
        rule,
        color: newColor,
        touched: false
      };
    }
  });
}
function updateColorModePalette(colorMode, paletteId, preserveColorChanges) {
  return colorMode.type === 'categorical' ? colorMode : {
    type: 'gradient',
    steps: colorMode.steps.map((step, stepIndex) => {
      return preserveColorChanges ? step : {
        type: 'categorical',
        paletteId,
        colorIndex: stepIndex,
        touched: false
      };
    }),
    sort: colorMode.sort
  };
}