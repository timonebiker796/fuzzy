/*! For license information please see painless.editor.worker.js.LICENSE.txt */
!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=45)}([function(e,t,n){var i=n(14);e.exports=function(e,t,n){return(t=i(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return l})),n.d(t,"c",(function(){return d})),n.d(t,"d",(function(){return c})),n.d(t,"e",(function(){return u})),n.d(t,"f",(function(){return m})),n.d(t,"g",(function(){return h})),n.d(t,"h",(function(){return b})),n.d(t,"i",(function(){return T})),n.d(t,"j",(function(){return g})),n.d(t,"k",(function(){return p})),n.d(t,"l",(function(){return x})),n.d(t,"m",(function(){return k})),n.d(t,"n",(function(){return f})),n.d(t,"o",(function(){return S})),n.d(t,"p",(function(){return C}));var i={92:()=>{}},o={};function a(e){var t=o[e];if(void 0!==t)return t.exports;var n=o[e]={exports:{}};return i[e](n,n.exports,a),n.exports}a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var r={};(()=>{a.d(r,{dx:()=>Z,q2:()=>Oe,FO:()=>Et,xf:()=>It,Gy:()=>Nt,s4:()=>Me,c7:()=>vt,_7:()=>lt,tx:()=>Ct,gp:()=>kt,cK:()=>_e,zs:()=>pt,AV:()=>It,Xp:()=>k,VS:()=>f,ul:()=>z,hW:()=>we,x1:()=>Xe,z5:()=>tt,oN:()=>mt,TB:()=>ht,u1:()=>bt,_b:()=>Pt,$F:()=>it,_T:()=>Ut,db:()=>ot,Zx:()=>et,_x:()=>Pe,r8:()=>B,JI:()=>D,TP:()=>M,WU:()=>e,Nj:()=>c,ZP:()=>zt});class e{constructor(){this.source=null,this.type=null,this.channel=null,this.start=null,this.stop=null,this.tokenIndex=null,this.line=null,this.column=null,this._text=null}getTokenSource(){return this.source[0]}getInputStream(){return this.source[1]}get text(){return this._text}set text(e){this._text=e}}function t(e,t){if(!Array.isArray(e)||!Array.isArray(t))return!1;if(e===t)return!0;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(!(e[n]===t[n]||e[n].equals&&e[n].equals(t[n])))return!1;return!0}e.INVALID_TYPE=0,e.EPSILON=-2,e.MIN_USER_TOKEN_TYPE=1,e.EOF=-1,e.DEFAULT_CHANNEL=0,e.HIDDEN_CHANNEL=1;const n=Math.round(Math.random()*Math.pow(2,32));function i(e){if(!e)return 0;const t=typeof e,i="string"===t?e:!("object"!==t||!e.toString)&&e.toString();if(!i)return 0;let o,a;const r=3&i.length,s=i.length-r;let l=n;const d=3432918353,c=461845907;let u=0;for(;u<s;)a=255&i.charCodeAt(u)|(255&i.charCodeAt(++u))<<8|(255&i.charCodeAt(++u))<<16|(255&i.charCodeAt(++u))<<24,++u,a=(65535&a)*d+(((a>>>16)*d&65535)<<16)&4294967295,a=a<<15|a>>>17,a=(65535&a)*c+(((a>>>16)*c&65535)<<16)&4294967295,l^=a,l=l<<13|l>>>19,o=5*(65535&l)+((5*(l>>>16)&65535)<<16)&4294967295,l=27492+(65535&o)+((58964+(o>>>16)&65535)<<16);switch(a=0,r){case 3:a^=(255&i.charCodeAt(u+2))<<16;case 2:a^=(255&i.charCodeAt(u+1))<<8;case 1:a^=255&i.charCodeAt(u),a=(65535&a)*d+(((a>>>16)*d&65535)<<16)&4294967295,a=a<<15|a>>>17,a=(65535&a)*c+(((a>>>16)*c&65535)<<16)&4294967295,l^=a}return l^=i.length,l^=l>>>16,l=2246822507*(65535&l)+((2246822507*(l>>>16)&65535)<<16)&4294967295,l^=l>>>13,l=3266489909*(65535&l)+((3266489909*(l>>>16)&65535)<<16)&4294967295,l^=l>>>16,l>>>0}class o{constructor(){this.count=0,this.hash=0}update(){for(let e=0;e<arguments.length;e++){const t=arguments[e];if(null!=t)if(Array.isArray(t))this.update.apply(this,t);else{let e=0;switch(typeof t){case"undefined":case"function":continue;case"number":case"boolean":e=t;break;case"string":e=i(t);break;default:t.updateHashCode?t.updateHashCode(this):console.log("No updateHashCode for "+t.toString());continue}e*=3432918353,e=e<<15|e>>>17,e*=461845907,this.count=this.count+1;let n=this.hash^e;n=n<<13|n>>>19,n=5*n+3864292196,this.hash=n}}}finish(){let e=this.hash^4*this.count;return e^=e>>>16,e*=2246822507,e^=e>>>13,e*=3266489909,e^=e>>>16,e}static hashStuff(){const e=new o;return e.update.apply(e,arguments),e.finish()}}function s(e){return e?"string"==typeof e?i(e):e.hashCode():-1}function l(e,t){return e?e.equals(t):e===t}function d(e){return null===e?"null":e}function c(e){return Array.isArray(e)?"["+e.map(d).join(", ")+"]":"null"}const u="h-";class m{constructor(e,t){this.data={},this.hashFunction=e||s,this.equalsFunction=t||l}add(e){const t=u+this.hashFunction(e);if(t in this.data){const n=this.data[t];for(let t=0;t<n.length;t++)if(this.equalsFunction(e,n[t]))return n[t];return n.push(e),e}return this.data[t]=[e],e}has(e){return null!=this.get(e)}get(e){const t=u+this.hashFunction(e);if(t in this.data){const n=this.data[t];for(let t=0;t<n.length;t++)if(this.equalsFunction(e,n[t]))return n[t]}return null}values(){return Object.keys(this.data).filter((e=>e.startsWith(u))).flatMap((e=>this.data[e]),this)}toString(){return c(this.values())}get length(){return Object.keys(this.data).filter((e=>e.startsWith(u))).map((e=>this.data[e].length),this).reduce(((e,t)=>e+t),0)}}class h{hashCode(){const e=new o;return this.updateHashCode(e),e.finish()}evaluate(e,t){}evalPrecedence(e,t){return this}static andContext(e,t){if(null===e||e===h.NONE)return t;if(null===t||t===h.NONE)return e;const n=new b(e,t);return 1===n.opnds.length?n.opnds[0]:n}static orContext(e,t){if(null===e)return t;if(null===t)return e;if(e===h.NONE||t===h.NONE)return h.NONE;const n=new T(e,t);return 1===n.opnds.length?n.opnds[0]:n}}class b extends h{constructor(e,t){super();const n=new m;e instanceof b?e.opnds.map((function(e){n.add(e)})):n.add(e),t instanceof b?t.opnds.map((function(e){n.add(e)})):n.add(t);const i=g(n);if(i.length>0){let e=null;i.map((function(t){(null===e||t.precedence<e.precedence)&&(e=t)})),n.add(e)}this.opnds=Array.from(n.values())}equals(e){return this===e||e instanceof b&&t(this.opnds,e.opnds)}updateHashCode(e){e.update(this.opnds,"AND")}evaluate(e,t){for(let n=0;n<this.opnds.length;n++)if(!this.opnds[n].evaluate(e,t))return!1;return!0}evalPrecedence(e,t){let n=!1;const i=[];for(let o=0;o<this.opnds.length;o++){const a=this.opnds[o],r=a.evalPrecedence(e,t);if(n|=r!==a,null===r)return null;r!==h.NONE&&i.push(r)}if(!n)return this;if(0===i.length)return h.NONE;let o=null;return i.map((function(e){o=null===o?e:h.andContext(o,e)})),o}toString(){const e=this.opnds.map((e=>e.toString()));return(e.length>3?e.slice(3):e).join("&&")}}class T extends h{constructor(e,t){super();const n=new m;e instanceof T?e.opnds.map((function(e){n.add(e)})):n.add(e),t instanceof T?t.opnds.map((function(e){n.add(e)})):n.add(t);const i=g(n);if(i.length>0){const e=i.sort((function(e,t){return e.compareTo(t)})),t=e[e.length-1];n.add(t)}this.opnds=Array.from(n.values())}equals(e){return this===e||e instanceof T&&t(this.opnds,e.opnds)}updateHashCode(e){e.update(this.opnds,"OR")}evaluate(e,t){for(let n=0;n<this.opnds.length;n++)if(this.opnds[n].evaluate(e,t))return!0;return!1}evalPrecedence(e,t){let n=!1;const i=[];for(let o=0;o<this.opnds.length;o++){const a=this.opnds[o],r=a.evalPrecedence(e,t);if(n|=r!==a,r===h.NONE)return h.NONE;null!==r&&i.push(r)}return n?(0===i.length||i.map((function(e){return e})),null):this}toString(){const e=this.opnds.map((e=>e.toString()));return(e.length>3?e.slice(3):e).join("||")}}function g(e){const t=[];return e.values().map((function(e){e instanceof h.PrecedencePredicate&&t.push(e)})),t}function p(e,t){if(null===e){const e={state:null,alt:null,context:null,semanticContext:null};return t&&(e.reachesIntoOuterContext=0),e}{const n={};return n.state=e.state||null,n.alt=void 0===e.alt?null:e.alt,n.context=e.context||null,n.semanticContext=e.semanticContext||null,t&&(n.reachesIntoOuterContext=e.reachesIntoOuterContext||0,n.precedenceFilterSuppressed=e.precedenceFilterSuppressed||!1),n}}class x{constructor(e,t){this.checkContext(e,t),e=p(e),t=p(t,!0),this.state=null!==e.state?e.state:t.state,this.alt=null!==e.alt?e.alt:t.alt,this.context=null!==e.context?e.context:t.context,this.semanticContext=null!==e.semanticContext?e.semanticContext:null!==t.semanticContext?t.semanticContext:h.NONE,this.reachesIntoOuterContext=t.reachesIntoOuterContext,this.precedenceFilterSuppressed=t.precedenceFilterSuppressed}checkContext(e,t){null!==e.context&&void 0!==e.context||null!==t&&null!==t.context&&void 0!==t.context||(this.context=null)}hashCode(){const e=new o;return this.updateHashCode(e),e.finish()}updateHashCode(e){e.update(this.state.stateNumber,this.alt,this.context,this.semanticContext)}equals(e){return this===e||e instanceof x&&this.state.stateNumber===e.state.stateNumber&&this.alt===e.alt&&(null===this.context?null===e.context:this.context.equals(e.context))&&this.semanticContext.equals(e.semanticContext)&&this.precedenceFilterSuppressed===e.precedenceFilterSuppressed}hashCodeForConfigSet(){const e=new o;return e.update(this.state.stateNumber,this.alt,this.semanticContext),e.finish()}equalsForConfigSet(e){return this===e||e instanceof x&&this.state.stateNumber===e.state.stateNumber&&this.alt===e.alt&&this.semanticContext.equals(e.semanticContext)}toString(){return"("+this.state+","+this.alt+(null!==this.context?",["+this.context.toString()+"]":"")+(this.semanticContext!==h.NONE?","+this.semanticContext.toString():"")+(this.reachesIntoOuterContext>0?",up="+this.reachesIntoOuterContext:"")+")"}}class k{constructor(e,t){this.start=e,this.stop=t}clone(){return new k(this.start,this.stop)}contains(e){return e>=this.start&&e<this.stop}toString(){return this.start===this.stop-1?this.start.toString():this.start.toString()+".."+(this.stop-1).toString()}get length(){return this.stop-this.start}}k.INVALID_INTERVAL=new k(-1,-2);class f{constructor(){this.intervals=null,this.readOnly=!1}first(t){return null===this.intervals||0===this.intervals.length?e.INVALID_TYPE:this.intervals[0].start}addOne(e){this.addInterval(new k(e,e+1))}addRange(e,t){this.addInterval(new k(e,t+1))}addInterval(e){if(null===this.intervals)this.intervals=[],this.intervals.push(e.clone());else{for(let t=0;t<this.intervals.length;t++){const n=this.intervals[t];if(e.stop<n.start)return void this.intervals.splice(t,0,e);if(e.stop===n.start)return void(this.intervals[t]=new k(e.start,n.stop));if(e.start<=n.stop)return this.intervals[t]=new k(Math.min(n.start,e.start),Math.max(n.stop,e.stop)),void this.reduce(t)}this.intervals.push(e.clone())}}addSet(e){return null!==e.intervals&&e.intervals.forEach((e=>this.addInterval(e)),this),this}reduce(e){if(e<this.intervals.length-1){const t=this.intervals[e],n=this.intervals[e+1];t.stop>=n.stop?(this.intervals.splice(e+1,1),this.reduce(e)):t.stop>=n.start&&(this.intervals[e]=new k(t.start,n.stop),this.intervals.splice(e+1,1))}}complement(e,t){const n=new f;return n.addInterval(new k(e,t+1)),null!==this.intervals&&this.intervals.forEach((e=>n.removeRange(e))),n}contains(e){if(null===this.intervals)return!1;for(let t=0;t<this.intervals.length;t++)if(this.intervals[t].contains(e))return!0;return!1}removeRange(e){if(e.start===e.stop-1)this.removeOne(e.start);else if(null!==this.intervals){let t=0;for(let n=0;n<this.intervals.length;n++){const n=this.intervals[t];if(e.stop<=n.start)return;if(e.start>n.start&&e.stop<n.stop){this.intervals[t]=new k(n.start,e.start);const i=new k(e.stop,n.stop);return void this.intervals.splice(t,0,i)}e.start<=n.start&&e.stop>=n.stop?(this.intervals.splice(t,1),t-=1):e.start<n.stop?this.intervals[t]=new k(n.start,e.start):e.stop<n.stop&&(this.intervals[t]=new k(e.stop,n.stop)),t+=1}}}removeOne(e){if(null!==this.intervals)for(let t=0;t<this.intervals.length;t++){const n=this.intervals[t];if(e<n.start)return;if(e===n.start&&e===n.stop-1)return void this.intervals.splice(t,1);if(e===n.start)return void(this.intervals[t]=new k(n.start+1,n.stop));if(e===n.stop-1)return void(this.intervals[t]=new k(n.start,n.stop-1));if(e<n.stop-1){const i=new k(n.start,e);return n.start=e+1,void this.intervals.splice(t,0,i)}}}toString(e,t,n){return e=e||null,t=t||null,n=n||!1,null===this.intervals?"{}":null!==e||null!==t?this.toTokenString(e,t):n?this.toCharString():this.toIndexString()}toCharString(){const t=[];for(let n=0;n<this.intervals.length;n++){const i=this.intervals[n];i.stop===i.start+1?i.start===e.EOF?t.push("<EOF>"):t.push("'"+String.fromCharCode(i.start)+"'"):t.push("'"+String.fromCharCode(i.start)+"'..'"+String.fromCharCode(i.stop-1)+"'")}return t.length>1?"{"+t.join(", ")+"}":t[0]}toIndexString(){const t=[];for(let n=0;n<this.intervals.length;n++){const i=this.intervals[n];i.stop===i.start+1?i.start===e.EOF?t.push("<EOF>"):t.push(i.start.toString()):t.push(i.start.toString()+".."+(i.stop-1).toString())}return t.length>1?"{"+t.join(", ")+"}":t[0]}toTokenString(e,t){const n=[];for(let i=0;i<this.intervals.length;i++){const o=this.intervals[i];for(let i=o.start;i<o.stop;i++)n.push(this.elementName(e,t,i))}return n.length>1?"{"+n.join(", ")+"}":n[0]}elementName(t,n,i){return i===e.EOF?"<EOF>":i===e.EPSILON?"<EPSILON>":t[i]||n[i]}get length(){return this.intervals.map((e=>e.length)).reduce(((e,t)=>e+t))}}class S{constructor(){this.atn=null,this.stateNumber=S.INVALID_STATE_NUMBER,this.stateType=null,this.ruleIndex=0,this.epsilonOnlyTransitions=!1,this.transitions=[],this.nextTokenWithinRule=null}toString(){return this.stateNumber}equals(e){return e instanceof S&&this.stateNumber===e.stateNumber}isNonGreedyExitState(){return!1}addTransition(e,t){void 0===t&&(t=-1),0===this.transitions.length?this.epsilonOnlyTransitions=e.isEpsilon:this.epsilonOnlyTransitions!==e.isEpsilon&&(this.epsilonOnlyTransitions=!1),-1===t?this.transitions.push(e):this.transitions.splice(t,1,e)}}S.INVALID_TYPE=0,S.BASIC=1,S.RULE_START=2,S.BLOCK_START=3,S.PLUS_BLOCK_START=4,S.STAR_BLOCK_START=5,S.TOKEN_START=6,S.RULE_STOP=7,S.BLOCK_END=8,S.STAR_LOOP_BACK=9,S.STAR_LOOP_ENTRY=10,S.PLUS_LOOP_BACK=11,S.LOOP_END=12,S.serializationNames=["INVALID","BASIC","RULE_START","BLOCK_START","PLUS_BLOCK_START","STAR_BLOCK_START","TOKEN_START","RULE_STOP","BLOCK_END","STAR_LOOP_BACK","STAR_LOOP_ENTRY","PLUS_LOOP_BACK","LOOP_END"],S.INVALID_STATE_NUMBER=-1;class C extends S{constructor(){return super(),this.stateType=S.RULE_STOP,this}}class E{constructor(e){if(null==e)throw"target cannot be null.";this.target=e,this.isEpsilon=!1,this.label=null}}E.EPSILON=1,E.RANGE=2,E.RULE=3,E.PREDICATE=4,E.ATOM=5,E.ACTION=6,E.SET=7,E.NOT_SET=8,E.WILDCARD=9,E.PRECEDENCE=10,E.serializationNames=["INVALID","EPSILON","RANGE","RULE","PREDICATE","ATOM","ACTION","SET","NOT_SET","WILDCARD","PRECEDENCE"],E.serializationTypes={EpsilonTransition:E.EPSILON,RangeTransition:E.RANGE,RuleTransition:E.RULE,PredicateTransition:E.PREDICATE,AtomTransition:E.ATOM,ActionTransition:E.ACTION,SetTransition:E.SET,NotSetTransition:E.NOT_SET,WildcardTransition:E.WILDCARD,PrecedencePredicateTransition:E.PRECEDENCE};class A extends E{constructor(e,t,n,i){super(e),this.ruleIndex=t,this.precedence=n,this.followState=i,this.serializationType=E.RULE,this.isEpsilon=!0}matches(e,t,n){return!1}}class y extends E{constructor(t,n){super(t),this.serializationType=E.SET,null!=n?this.label=n:(this.label=new f,this.label.addOne(e.INVALID_TYPE))}matches(e,t,n){return this.label.contains(e)}toString(){return this.label.toString()}}class I extends y{constructor(e,t){super(e,t),this.serializationType=E.NOT_SET}matches(e,t,n){return e>=t&&e<=n&&!super.matches(e,t,n)}toString(){return"~"+super.toString()}}class L extends E{constructor(e){super(e),this.serializationType=E.WILDCARD}matches(e,t,n){return e>=t&&e<=n}toString(){return"."}}class O extends E{constructor(e){super(e)}}class _{}class N extends _{}class R extends N{}class D extends R{get ruleContext(){throw new Error("missing interface implementation")}}class M extends R{}class v extends M{}const F={toStringTree:function(e,t,n){t=t||null,null!==(n=n||null)&&(t=n.ruleNames);let i=F.getNodeText(e,t);i=function(e,t){return e.replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r")}(i);const o=e.getChildCount();if(0===o)return i;let a="("+i+" ";o>0&&(i=F.toStringTree(e.getChild(0),t),a=a.concat(i));for(let n=1;n<o;n++)i=F.toStringTree(e.getChild(n),t),a=a.concat(" "+i);return a=a.concat(")"),a},getNodeText:function(t,n,i){if(n=n||null,null!==(i=i||null)&&(n=i.ruleNames),null!==n){if(t instanceof D){const e=t.ruleContext.getAltNumber();return 0!=e?n[t.ruleIndex]+":"+e:n[t.ruleIndex]}if(t instanceof v)return t.toString();if(t instanceof M&&null!==t.symbol)return t.symbol.text}const o=t.getPayload();return o instanceof e?o.text:t.getPayload().toString()},getChildren:function(e){const t=[];for(let n=0;n<e.getChildCount();n++)t.push(e.getChild(n));return t},getAncestors:function(e){let t=[];for(e=e.getParent();null!==e;)t=[e].concat(t),e=e.getParent();return t},findAllTokenNodes:function(e,t){return F.findAllNodes(e,t,!0)},findAllRuleNodes:function(e,t){return F.findAllNodes(e,t,!1)},findAllNodes:function(e,t,n){const i=[];return F._findAllNodes(e,t,n,i),i},_findAllNodes:function(e,t,n,i){n&&e instanceof M?e.symbol.type===t&&i.push(e):!n&&e instanceof D&&e.ruleIndex===t&&i.push(e);for(let o=0;o<e.getChildCount();o++)F._findAllNodes(e.getChild(o),t,n,i)},descendants:function(e){let t=[e];for(let n=0;n<e.getChildCount();n++)t=t.concat(F.descendants(e.getChild(n)));return t}},P=F;class B extends D{constructor(e,t){super(),this.parentCtx=e||null,this.invokingState=t||-1}depth(){let e=0,t=this;for(;null!==t;)t=t.parentCtx,e+=1;return e}isEmpty(){return-1===this.invokingState}getSourceInterval(){return k.INVALID_INTERVAL}get ruleContext(){return this}getPayload(){return this}getText(){return 0===this.getChildCount()?"":this.children.map((function(e){return e.getText()})).join("")}getAltNumber(){return 0}setAltNumber(e){}getChild(e){return null}getChildCount(){return 0}accept(e){return e.visitChildren(this)}toStringTree(e,t){return P.toStringTree(this,e,t)}toString(e,t){e=e||null,t=t||null;let n=this,i="[";for(;null!==n&&n!==t;){if(null===e)n.isEmpty()||(i+=n.invokingState);else{const t=n.ruleIndex;i+=t>=0&&t<e.length?e[t]:""+t}null===n.parentCtx||null===e&&n.parentCtx.isEmpty()||(i+=" "),n=n.parentCtx}return i+="]",i}}class w{constructor(e){this.cachedHashCode=e}isEmpty(){return this===w.EMPTY}hasEmptyPath(){return this.getReturnState(this.length-1)===w.EMPTY_RETURN_STATE}hashCode(){return this.cachedHashCode}updateHashCode(e){e.update(this.cachedHashCode)}}w.EMPTY=null,w.EMPTY_RETURN_STATE=2147483647,w.globalNodeCount=1,w.id=w.globalNodeCount,w.trace_atn_sim=!1;class U extends w{constructor(e,t){const n=new o;return n.update(e,t),super(n.finish()),this.parents=e,this.returnStates=t,this}isEmpty(){return this.returnStates[0]===w.EMPTY_RETURN_STATE}getParent(e){return this.parents[e]}getReturnState(e){return this.returnStates[e]}equals(e){return this===e||e instanceof U&&this.hashCode()===e.hashCode()&&t(this.returnStates,e.returnStates)&&t(this.parents,e.parents)}toString(){if(this.isEmpty())return"[]";{let e="[";for(let t=0;t<this.returnStates.length;t++)t>0&&(e+=", "),this.returnStates[t]!==w.EMPTY_RETURN_STATE?(e+=this.returnStates[t],null!==this.parents[t]?e=e+" "+this.parents[t]:e+="null"):e+="$";return e+"]"}}get length(){return this.returnStates.length}}class q extends w{constructor(e,t){let n=0;const i=new o;null!==e?i.update(e,t):i.update(1),n=i.finish(),super(n),this.parentCtx=e,this.returnState=t}getParent(e){return this.parentCtx}getReturnState(e){return this.returnState}equals(e){return this===e||e instanceof q&&this.hashCode()===e.hashCode()&&this.returnState===e.returnState&&(null==this.parentCtx?null==e.parentCtx:this.parentCtx.equals(e.parentCtx))}toString(){const e=null===this.parentCtx?"":this.parentCtx.toString();return 0===e.length?this.returnState===w.EMPTY_RETURN_STATE?"$":""+this.returnState:this.returnState+" "+e}get length(){return 1}static create(e,t){return t===w.EMPTY_RETURN_STATE&&null===e?w.EMPTY:new q(e,t)}}class H extends q{constructor(){super(null,w.EMPTY_RETURN_STATE)}isEmpty(){return!0}getParent(e){return null}getReturnState(e){return this.returnState}equals(e){return this===e}toString(){return"$"}}w.EMPTY=new H;const V="h-";class j{constructor(e,t){this.data={},this.hashFunction=e||s,this.equalsFunction=t||l}set(e,t){const n=V+this.hashFunction(e);if(n in this.data){const i=this.data[n];for(let n=0;n<i.length;n++){const o=i[n];if(this.equalsFunction(e,o.key)){const e=o.value;return o.value=t,e}}return i.push({key:e,value:t}),t}return this.data[n]=[{key:e,value:t}],t}containsKey(e){const t=V+this.hashFunction(e);if(t in this.data){const n=this.data[t];for(let t=0;t<n.length;t++){const i=n[t];if(this.equalsFunction(e,i.key))return!0}}return!1}get(e){const t=V+this.hashFunction(e);if(t in this.data){const n=this.data[t];for(let t=0;t<n.length;t++){const i=n[t];if(this.equalsFunction(e,i.key))return i.value}}return null}entries(){return Object.keys(this.data).filter((e=>e.startsWith(V))).flatMap((e=>this.data[e]),this)}getKeys(){return this.entries().map((e=>e.key))}getValues(){return this.entries().map((e=>e.value))}toString(){return"["+this.entries().map((e=>"{"+e.key+":"+e.value+"}")).join(", ")+"]"}get length(){return Object.keys(this.data).filter((e=>e.startsWith(V))).map((e=>this.data[e].length),this).reduce(((e,t)=>e+t),0)}}function Y(e,t){if(null==t&&(t=B.EMPTY),null===t.parentCtx||t===B.EMPTY)return w.EMPTY;const n=Y(e,t.parentCtx),i=e.states[t.invokingState].transitions[0];return q.create(n,i.followState.stateNumber)}function G(e,t,n){if(e.isEmpty())return e;let i=n.get(e)||null;if(null!==i)return i;if(i=t.get(e),null!==i)return n.set(e,i),i;let o=!1,a=[];for(let i=0;i<a.length;i++){const r=G(e.getParent(i),t,n);if(o||r!==e.getParent(i)){if(!o){a=[];for(let t=0;t<e.length;t++)a[t]=e.getParent(t);o=!0}a[i]=r}}if(!o)return t.add(e),n.set(e,e),e;let r=null;return r=0===a.length?w.EMPTY:1===a.length?q.create(a[0],e.getReturnState(0)):new U(a,e.returnStates),t.add(r),n.set(r,r),n.set(e,r),r}function K(e,t,n,i){if(e===t)return e;if(e instanceof q&&t instanceof q)return function(e,t,n,i){if(null!==i){let n=i.get(e,t);if(null!==n)return n;if(n=i.get(t,e),null!==n)return n}const o=function(e,t,n){if(n){if(e===w.EMPTY)return w.EMPTY;if(t===w.EMPTY)return w.EMPTY}else{if(e===w.EMPTY&&t===w.EMPTY)return w.EMPTY;if(e===w.EMPTY){const e=[t.returnState,w.EMPTY_RETURN_STATE],n=[t.parentCtx,null];return new U(n,e)}if(t===w.EMPTY){const t=[e.returnState,w.EMPTY_RETURN_STATE],n=[e.parentCtx,null];return new U(n,t)}}return null}(e,t,n);if(null!==o)return null!==i&&i.set(e,t,o),o;if(e.returnState===t.returnState){const o=K(e.parentCtx,t.parentCtx,n,i);if(o===e.parentCtx)return e;if(o===t.parentCtx)return t;const a=q.create(o,e.returnState);return null!==i&&i.set(e,t,a),a}{let n=null;if((e===t||null!==e.parentCtx&&e.parentCtx===t.parentCtx)&&(n=e.parentCtx),null!==n){const o=[e.returnState,t.returnState];e.returnState>t.returnState&&(o[0]=t.returnState,o[1]=e.returnState);const a=new U([n,n],o);return null!==i&&i.set(e,t,a),a}const o=[e.returnState,t.returnState];let a=[e.parentCtx,t.parentCtx];e.returnState>t.returnState&&(o[0]=t.returnState,o[1]=e.returnState,a=[t.parentCtx,e.parentCtx]);const r=new U(a,o);return null!==i&&i.set(e,t,r),r}}(e,t,n,i);if(n){if(e instanceof H)return e;if(t instanceof H)return t}return e instanceof q&&(e=new U([e.getParent()],[e.returnState])),t instanceof q&&(t=new U([t.getParent()],[t.returnState])),function(e,t,n,i){if(null!==i){let n=i.get(e,t);if(null!==n)return w.trace_atn_sim&&console.log("mergeArrays a="+e+",b="+t+" -> previous"),n;if(n=i.get(t,e),null!==n)return w.trace_atn_sim&&console.log("mergeArrays a="+e+",b="+t+" -> previous"),n}let o=0,a=0,r=0,s=new Array(e.returnStates.length+t.returnStates.length).fill(0),l=new Array(e.returnStates.length+t.returnStates.length).fill(null);for(;o<e.returnStates.length&&a<t.returnStates.length;){const d=e.parents[o],c=t.parents[a];if(e.returnStates[o]===t.returnStates[a]){const t=e.returnStates[o];t===w.EMPTY_RETURN_STATE&&null===d&&null===c||null!==d&&null!==c&&d===c?(l[r]=d,s[r]=t):(l[r]=K(d,c,n,i),s[r]=t),o+=1,a+=1}else e.returnStates[o]<t.returnStates[a]?(l[r]=d,s[r]=e.returnStates[o],o+=1):(l[r]=c,s[r]=t.returnStates[a],a+=1);r+=1}if(o<e.returnStates.length)for(let t=o;t<e.returnStates.length;t++)l[r]=e.parents[t],s[r]=e.returnStates[t],r+=1;else for(let e=a;e<t.returnStates.length;e++)l[r]=t.parents[e],s[r]=t.returnStates[e],r+=1;if(r<l.length){if(1===r){const n=q.create(l[0],s[0]);return null!==i&&i.set(e,t,n),n}l=l.slice(0,r),s=s.slice(0,r)}const d=new U(l,s);return d.equals(e)?(null!==i&&i.set(e,t,e),w.trace_atn_sim&&console.log("mergeArrays a="+e+",b="+t+" -> a"),e):d.equals(t)?(null!==i&&i.set(e,t,t),w.trace_atn_sim&&console.log("mergeArrays a="+e+",b="+t+" -> b"),t):(function(e){const t=new j;for(let n=0;n<e.length;n++){const i=e[n];t.containsKey(i)||t.set(i,i)}for(let n=0;n<e.length;n++)e[n]=t.get(e[n])}(l),null!==i&&i.set(e,t,d),w.trace_atn_sim&&console.log("mergeArrays a="+e+",b="+t+" -> "+d),d)}(e,t,n,i)}class W{constructor(){this.data=[]}add(e){this.data[e]=!0}or(e){Object.keys(e.data).map((e=>this.add(e)),this)}remove(e){delete this.data[e]}has(e){return!0===this.data[e]}values(){return Object.keys(this.data)}minValue(){return Math.min.apply(null,this.values())}hashCode(){return o.hashStuff(this.values())}equals(e){return e instanceof W&&t(this.data,e.data)}toString(){return"{"+this.values().join(", ")+"}"}get length(){return this.values().length}}class z{constructor(e){this.atn=e}getDecisionLookahead(e){if(null===e)return null;const t=e.transitions.length,n=[];for(let i=0;i<t;i++){n[i]=new f;const t=new m,o=!1;this._LOOK(e.transition(i).target,null,w.EMPTY,n[i],t,new W,o,!1),(0===n[i].length||n[i].contains(z.HIT_PRED))&&(n[i]=null)}return n}LOOK(e,t,n){const i=new f,o=null!==(n=n||null)?Y(e.atn,n):null;return this._LOOK(e,t,o,i,new m,new W,!0,!0),i}_LOOK(t,n,i,o,a,r,s,l){const d=new x({state:t,alt:0,context:i},null);if(!a.has(d)){if(a.add(d),t===n){if(null===i)return void o.addOne(e.EPSILON);if(i.isEmpty()&&l)return void o.addOne(e.EOF)}if(t instanceof C){if(null===i)return void o.addOne(e.EPSILON);if(i.isEmpty()&&l)return void o.addOne(e.EOF);if(i!==w.EMPTY){const e=r.has(t.ruleIndex);try{r.remove(t.ruleIndex);for(let e=0;e<i.length;e++){const t=this.atn.states[i.getReturnState(e)];this._LOOK(t,n,i.getParent(e),o,a,r,s,l)}}finally{e&&r.add(t.ruleIndex)}return}}for(let d=0;d<t.transitions.length;d++){const c=t.transitions[d];if(c.constructor===A){if(r.has(c.target.ruleIndex))continue;const e=q.create(i,c.followState.stateNumber);try{r.add(c.target.ruleIndex),this._LOOK(c.target,n,e,o,a,r,s,l)}finally{r.remove(c.target.ruleIndex)}}else if(c instanceof O)s?this._LOOK(c.target,n,i,o,a,r,s,l):o.addOne(z.HIT_PRED);else if(c.isEpsilon)this._LOOK(c.target,n,i,o,a,r,s,l);else if(c.constructor===L)o.addRange(e.MIN_USER_TOKEN_TYPE,this.atn.maxTokenType);else{let t=c.label;null!==t&&(c instanceof I&&(t=t.complement(e.MIN_USER_TOKEN_TYPE,this.atn.maxTokenType)),o.addSet(t))}}}}}z.HIT_PRED=e.INVALID_TYPE;class Z{constructor(e,t){this.grammarType=e,this.maxTokenType=t,this.states=[],this.decisionToState=[],this.ruleToStartState=[],this.ruleToStopState=null,this.modeNameToStartState={},this.ruleToTokenType=null,this.lexerActions=null,this.modeToStartState=[]}nextTokensInContext(e,t){return new z(this).LOOK(e,null,t)}nextTokensNoContext(e){return null!==e.nextTokenWithinRule||(e.nextTokenWithinRule=this.nextTokensInContext(e,null),e.nextTokenWithinRule.readOnly=!0),e.nextTokenWithinRule}nextTokens(e,t){return void 0===t?this.nextTokensNoContext(e):this.nextTokensInContext(e,t)}addState(e){null!==e&&(e.atn=this,e.stateNumber=this.states.length),this.states.push(e)}removeState(e){this.states[e.stateNumber]=null}defineDecisionState(e){return this.decisionToState.push(e),e.decision=this.decisionToState.length-1,e.decision}getDecisionState(e){return 0===this.decisionToState.length?null:this.decisionToState[e]}getExpectedTokens(t,n){if(t<0||t>=this.states.length)throw"Invalid state number.";const i=this.states[t];let o=this.nextTokens(i);if(!o.contains(e.EPSILON))return o;const a=new f;for(a.addSet(o),a.removeOne(e.EPSILON);null!==n&&n.invokingState>=0&&o.contains(e.EPSILON);){const t=this.states[n.invokingState].transitions[0];o=this.nextTokens(t.followState),a.addSet(o),a.removeOne(e.EPSILON),n=n.parentCtx}return o.contains(e.EPSILON)&&a.addOne(e.EOF),a}}Z.INVALID_ALT_NUMBER=0;class X extends S{constructor(){super(),this.stateType=S.BASIC}}class J extends S{constructor(){return super(),this.decision=-1,this.nonGreedy=!1,this}}class $ extends J{constructor(){return super(),this.endState=null,this}}class Q extends S{constructor(){return super(),this.stateType=S.BLOCK_END,this.startState=null,this}}class ee extends S{constructor(){return super(),this.stateType=S.LOOP_END,this.loopBackState=null,this}}class te extends S{constructor(){return super(),this.stateType=S.RULE_START,this.stopState=null,this.isPrecedenceRule=!1,this}}class ne extends J{constructor(){return super(),this.stateType=S.TOKEN_START,this}}class ie extends J{constructor(){return super(),this.stateType=S.PLUS_LOOP_BACK,this}}class oe extends S{constructor(){return super(),this.stateType=S.STAR_LOOP_BACK,this}}class ae extends J{constructor(){return super(),this.stateType=S.STAR_LOOP_ENTRY,this.loopBackState=null,this.isPrecedenceDecision=null,this}}class re extends ${constructor(){return super(),this.stateType=S.PLUS_BLOCK_START,this.loopBackState=null,this}}class se extends ${constructor(){return super(),this.stateType=S.STAR_BLOCK_START,this}}class le extends ${constructor(){return super(),this.stateType=S.BLOCK_START,this}}class de extends E{constructor(e,t){super(e),this.label_=t,this.label=this.makeLabel(),this.serializationType=E.ATOM}makeLabel(){const e=new f;return e.addOne(this.label_),e}matches(e,t,n){return this.label_===e}toString(){return this.label_}}class ce extends E{constructor(e,t,n){super(e),this.serializationType=E.RANGE,this.start=t,this.stop=n,this.label=this.makeLabel()}makeLabel(){const e=new f;return e.addRange(this.start,this.stop),e}matches(e,t,n){return e>=this.start&&e<=this.stop}toString(){return"'"+String.fromCharCode(this.start)+"'..'"+String.fromCharCode(this.stop)+"'"}}class ue extends E{constructor(e,t,n,i){super(e),this.serializationType=E.ACTION,this.ruleIndex=t,this.actionIndex=void 0===n?-1:n,this.isCtxDependent=void 0!==i&&i,this.isEpsilon=!0}matches(e,t,n){return!1}toString(){return"action_"+this.ruleIndex+":"+this.actionIndex}}class me extends E{constructor(e,t){super(e),this.serializationType=E.EPSILON,this.isEpsilon=!0,this.outermostPrecedenceReturn=t}matches(e,t,n){return!1}toString(){return"epsilon"}}class he extends h{constructor(e,t,n){super(),this.ruleIndex=void 0===e?-1:e,this.predIndex=void 0===t?-1:t,this.isCtxDependent=void 0!==n&&n}evaluate(e,t){const n=this.isCtxDependent?t:null;return e.sempred(n,this.ruleIndex,this.predIndex)}updateHashCode(e){e.update(this.ruleIndex,this.predIndex,this.isCtxDependent)}equals(e){return this===e||e instanceof he&&this.ruleIndex===e.ruleIndex&&this.predIndex===e.predIndex&&this.isCtxDependent===e.isCtxDependent}toString(){return"{"+this.ruleIndex+":"+this.predIndex+"}?"}}h.NONE=new he;class be extends O{constructor(e,t,n,i){super(e),this.serializationType=E.PREDICATE,this.ruleIndex=t,this.predIndex=n,this.isCtxDependent=i,this.isEpsilon=!0}matches(e,t,n){return!1}getPredicate(){return new he(this.ruleIndex,this.predIndex,this.isCtxDependent)}toString(){return"pred_"+this.ruleIndex+":"+this.predIndex}}class Te extends h{constructor(e){super(),this.precedence=void 0===e?0:e}evaluate(e,t){return e.precpred(t,this.precedence)}evalPrecedence(e,t){return e.precpred(t,this.precedence)?h.NONE:null}compareTo(e){return this.precedence-e.precedence}updateHashCode(e){e.update(this.precedence)}equals(e){return this===e||e instanceof Te&&this.precedence===e.precedence}toString(){return"{"+this.precedence+">=prec}?"}}h.PrecedencePredicate=Te;class ge extends O{constructor(e,t){super(e),this.serializationType=E.PRECEDENCE,this.precedence=t,this.isEpsilon=!0}matches(e,t,n){return!1}getPredicate(){return new Te(this.precedence)}toString(){return this.precedence+" >= _p"}}class pe{constructor(e){void 0===e&&(e=null),this.readOnly=!1,this.verifyATN=null===e||e.verifyATN,this.generateRuleBypassTransitions=null!==e&&e.generateRuleBypassTransitions}}pe.defaultOptions=new pe,pe.defaultOptions.readOnly=!0;class xe{constructor(e){this.actionType=e,this.isPositionDependent=!1}hashCode(){const e=new o;return this.updateHashCode(e),e.finish()}updateHashCode(e){e.update(this.actionType)}equals(e){return this===e}}class ke extends xe{constructor(){super(6)}execute(e){e.skip()}toString(){return"skip"}}ke.INSTANCE=new ke;class fe extends xe{constructor(e){super(0),this.channel=e}execute(e){e._channel=this.channel}updateHashCode(e){e.update(this.actionType,this.channel)}equals(e){return this===e||e instanceof fe&&this.channel===e.channel}toString(){return"channel("+this.channel+")"}}class Se extends xe{constructor(e,t){super(1),this.ruleIndex=e,this.actionIndex=t,this.isPositionDependent=!0}execute(e){e.action(null,this.ruleIndex,this.actionIndex)}updateHashCode(e){e.update(this.actionType,this.ruleIndex,this.actionIndex)}equals(e){return this===e||e instanceof Se&&this.ruleIndex===e.ruleIndex&&this.actionIndex===e.actionIndex}}class Ce extends xe{constructor(){super(3)}execute(e){e.more()}toString(){return"more"}}Ce.INSTANCE=new Ce;class Ee extends xe{constructor(e){super(7),this.type=e}execute(e){e.type=this.type}updateHashCode(e){e.update(this.actionType,this.type)}equals(e){return this===e||e instanceof Ee&&this.type===e.type}toString(){return"type("+this.type+")"}}class Ae extends xe{constructor(e){super(5),this.mode=e}execute(e){e.pushMode(this.mode)}updateHashCode(e){e.update(this.actionType,this.mode)}equals(e){return this===e||e instanceof Ae&&this.mode===e.mode}toString(){return"pushMode("+this.mode+")"}}class ye extends xe{constructor(){super(4)}execute(e){e.popMode()}toString(){return"popMode"}}ye.INSTANCE=new ye;class Ie extends xe{constructor(e){super(2),this.mode=e}execute(e){e.mode(this.mode)}updateHashCode(e){e.update(this.actionType,this.mode)}equals(e){return this===e||e instanceof Ie&&this.mode===e.mode}toString(){return"mode("+this.mode+")"}}function Le(e,t){const n=[];return n[e-1]=t,n.map((function(e){return t}))}class Oe{constructor(e){null==e&&(e=pe.defaultOptions),this.deserializationOptions=e,this.stateFactories=null,this.actionFactories=null}deserialize(e){const t=this.reset(e);this.checkVersion(t),t&&this.skipUUID();const n=this.readATN();this.readStates(n,t),this.readRules(n,t),this.readModes(n);const i=[];return this.readSets(n,i,this.readInt.bind(this)),t&&this.readSets(n,i,this.readInt32.bind(this)),this.readEdges(n,i),this.readDecisions(n),this.readLexerActions(n,t),this.markPrecedenceDecisions(n),this.verifyATN(n),this.deserializationOptions.generateRuleBypassTransitions&&1===n.grammarType&&(this.generateRuleBypassTransitions(n),this.verifyATN(n)),n}reset(e){if(3===(e.charCodeAt?e.charCodeAt(0):e[0])){const t=function(e){const t=e.charCodeAt(0);return t>1?t-2:t+65534},n=e.split("").map(t);return n[0]=e.charCodeAt(0),this.data=n,this.pos=0,!0}return this.data=e,this.pos=0,!1}skipUUID(){let e=0;for(;e++<8;)this.readInt()}checkVersion(e){const t=this.readInt();if(!e&&4!==t)throw"Could not deserialize ATN with version "+t+" (expected 4)."}readATN(){const e=this.readInt(),t=this.readInt();return new Z(e,t)}readStates(e,t){let n,i,o;const a=[],r=[],s=this.readInt();for(let n=0;n<s;n++){const n=this.readInt();if(n===S.INVALID_TYPE){e.addState(null);continue}let i=this.readInt();t&&65535===i&&(i=-1);const o=this.stateFactory(n,i);if(n===S.LOOP_END){const e=this.readInt();a.push([o,e])}else if(o instanceof $){const e=this.readInt();r.push([o,e])}e.addState(o)}for(n=0;n<a.length;n++)i=a[n],i[0].loopBackState=e.states[i[1]];for(n=0;n<r.length;n++)i=r[n],i[0].endState=e.states[i[1]];let l=this.readInt();for(n=0;n<l;n++)o=this.readInt(),e.states[o].nonGreedy=!0;let d=this.readInt();for(n=0;n<d;n++)o=this.readInt(),e.states[o].isPrecedenceRule=!0}readRules(t,n){let i;const o=this.readInt();for(0===t.grammarType&&(t.ruleToTokenType=Le(o,0)),t.ruleToStartState=Le(o,0),i=0;i<o;i++){const o=this.readInt();if(t.ruleToStartState[i]=t.states[o],0===t.grammarType){let o=this.readInt();n&&65535===o&&(o=e.EOF),t.ruleToTokenType[i]=o}}for(t.ruleToStopState=Le(o,0),i=0;i<t.states.length;i++){const e=t.states[i];e instanceof C&&(t.ruleToStopState[e.ruleIndex]=e,t.ruleToStartState[e.ruleIndex].stopState=e)}}readModes(e){const t=this.readInt();for(let n=0;n<t;n++){let t=this.readInt();e.modeToStartState.push(e.states[t])}}readSets(e,t,n){const i=this.readInt();for(let e=0;e<i;e++){const e=new f;t.push(e);const i=this.readInt();0!==this.readInt()&&e.addOne(-1);for(let t=0;t<i;t++){const t=n(),i=n();e.addRange(t,i)}}}readEdges(e,t){let n,i,o,a,r;const s=this.readInt();for(n=0;n<s;n++){const n=this.readInt(),i=this.readInt(),o=this.readInt(),r=this.readInt(),s=this.readInt(),l=this.readInt();a=this.edgeFactory(e,o,n,i,r,s,l,t),e.states[n].addTransition(a)}for(n=0;n<e.states.length;n++)for(o=e.states[n],i=0;i<o.transitions.length;i++){const t=o.transitions[i];if(!(t instanceof A))continue;let n=-1;e.ruleToStartState[t.target.ruleIndex].isPrecedenceRule&&0===t.precedence&&(n=t.target.ruleIndex),a=new me(t.followState,n),e.ruleToStopState[t.target.ruleIndex].addTransition(a)}for(n=0;n<e.states.length;n++){if(o=e.states[n],o instanceof $){if(null===o.endState)throw"IllegalState";if(null!==o.endState.startState)throw"IllegalState";o.endState.startState=o}if(o instanceof ie)for(i=0;i<o.transitions.length;i++)r=o.transitions[i].target,r instanceof re&&(r.loopBackState=o);else if(o instanceof oe)for(i=0;i<o.transitions.length;i++)r=o.transitions[i].target,r instanceof ae&&(r.loopBackState=o)}}readDecisions(e){const t=this.readInt();for(let n=0;n<t;n++){const t=this.readInt(),i=e.states[t];e.decisionToState.push(i),i.decision=n}}readLexerActions(e,t){if(0===e.grammarType){const n=this.readInt();e.lexerActions=Le(n,null);for(let i=0;i<n;i++){const n=this.readInt();let o=this.readInt();t&&65535===o&&(o=-1);let a=this.readInt();t&&65535===a&&(a=-1),e.lexerActions[i]=this.lexerActionFactory(n,o,a)}}}generateRuleBypassTransitions(e){let t;const n=e.ruleToStartState.length;for(t=0;t<n;t++)e.ruleToTokenType[t]=e.maxTokenType+t+1;for(t=0;t<n;t++)this.generateRuleBypassTransition(e,t)}generateRuleBypassTransition(e,t){let n,i;const o=new le;o.ruleIndex=t,e.addState(o);const a=new Q;a.ruleIndex=t,e.addState(a),o.endState=a,e.defineDecisionState(o),a.startState=o;let r=null,s=null;if(e.ruleToStartState[t].isPrecedenceRule){for(s=null,n=0;n<e.states.length;n++)if(i=e.states[n],this.stateIsEndStateFor(i,t)){s=i,r=i.loopBackState.transitions[0];break}if(null===r)throw"Couldn't identify final state of the precedence rule prefix section."}else s=e.ruleToStopState[t];for(n=0;n<e.states.length;n++){i=e.states[n];for(let e=0;e<i.transitions.length;e++){const t=i.transitions[e];t!==r&&t.target===s&&(t.target=a)}}const l=e.ruleToStartState[t],d=l.transitions.length;for(;d>0;)o.addTransition(l.transitions[d-1]),l.transitions=l.transitions.slice(-1);e.ruleToStartState[t].addTransition(new me(o)),a.addTransition(new me(s));const c=new X;e.addState(c),c.addTransition(new de(a,e.ruleToTokenType[t])),o.addTransition(new me(c))}stateIsEndStateFor(e,t){if(e.ruleIndex!==t)return null;if(!(e instanceof ae))return null;const n=e.transitions[e.transitions.length-1].target;return n instanceof ee&&n.epsilonOnlyTransitions&&n.transitions[0].target instanceof C?e:null}markPrecedenceDecisions(e){for(let t=0;t<e.states.length;t++){const n=e.states[t];if(n instanceof ae&&e.ruleToStartState[n.ruleIndex].isPrecedenceRule){const e=n.transitions[n.transitions.length-1].target;e instanceof ee&&e.epsilonOnlyTransitions&&e.transitions[0].target instanceof C&&(n.isPrecedenceDecision=!0)}}}verifyATN(e){if(this.deserializationOptions.verifyATN)for(let t=0;t<e.states.length;t++){const n=e.states[t];if(null!==n)if(this.checkCondition(n.epsilonOnlyTransitions||n.transitions.length<=1),n instanceof re)this.checkCondition(null!==n.loopBackState);else if(n instanceof ae)if(this.checkCondition(null!==n.loopBackState),this.checkCondition(2===n.transitions.length),n.transitions[0].target instanceof se)this.checkCondition(n.transitions[1].target instanceof ee),this.checkCondition(!n.nonGreedy);else{if(!(n.transitions[0].target instanceof ee))throw"IllegalState";this.checkCondition(n.transitions[1].target instanceof se),this.checkCondition(n.nonGreedy)}else n instanceof oe?(this.checkCondition(1===n.transitions.length),this.checkCondition(n.transitions[0].target instanceof ae)):n instanceof ee?this.checkCondition(null!==n.loopBackState):n instanceof te?this.checkCondition(null!==n.stopState):n instanceof $?this.checkCondition(null!==n.endState):n instanceof Q?this.checkCondition(null!==n.startState):n instanceof J?this.checkCondition(n.transitions.length<=1||n.decision>=0):this.checkCondition(n.transitions.length<=1||n instanceof C)}}checkCondition(e,t){if(!e)throw null==t&&(t="IllegalState"),t}readInt(){return this.data[this.pos++]}readInt32(){return this.readInt()|this.readInt()<<16}edgeFactory(t,n,i,o,a,r,s,l){const d=t.states[o];switch(n){case E.EPSILON:return new me(d);case E.RANGE:return new ce(d,0!==s?e.EOF:a,r);case E.RULE:return new A(t.states[a],r,s,d);case E.PREDICATE:return new be(d,a,r,0!==s);case E.PRECEDENCE:return new ge(d,a);case E.ATOM:return new de(d,0!==s?e.EOF:a);case E.ACTION:return new ue(d,a,r,0!==s);case E.SET:return new y(d,l[a]);case E.NOT_SET:return new I(d,l[a]);case E.WILDCARD:return new L(d);default:throw"The specified transition type: "+n+" is not valid."}}stateFactory(e,t){if(null===this.stateFactories){const e=[];e[S.INVALID_TYPE]=null,e[S.BASIC]=()=>new X,e[S.RULE_START]=()=>new te,e[S.BLOCK_START]=()=>new le,e[S.PLUS_BLOCK_START]=()=>new re,e[S.STAR_BLOCK_START]=()=>new se,e[S.TOKEN_START]=()=>new ne,e[S.RULE_STOP]=()=>new C,e[S.BLOCK_END]=()=>new Q,e[S.STAR_LOOP_BACK]=()=>new oe,e[S.STAR_LOOP_ENTRY]=()=>new ae,e[S.PLUS_LOOP_BACK]=()=>new ie,e[S.LOOP_END]=()=>new ee,this.stateFactories=e}if(e>this.stateFactories.length||null===this.stateFactories[e])throw"The specified state type "+e+" is not valid.";{const n=this.stateFactories[e]();if(null!==n)return n.ruleIndex=t,n}}lexerActionFactory(e,t,n){if(null===this.actionFactories){const e=[];e[0]=(e,t)=>new fe(e),e[1]=(e,t)=>new Se(e,t),e[2]=(e,t)=>new Ie(e),e[3]=(e,t)=>Ce.INSTANCE,e[4]=(e,t)=>ye.INSTANCE,e[5]=(e,t)=>new Ae(e),e[6]=(e,t)=>ke.INSTANCE,e[7]=(e,t)=>new Ee(e),this.actionFactories=e}if(e>this.actionFactories.length||null===this.actionFactories[e])throw"The specified lexer action type "+e+" is not valid.";return this.actionFactories[e](t,n)}}class _e{syntaxError(e,t,n,i,o,a){}reportAmbiguity(e,t,n,i,o,a,r){}reportAttemptingFullContext(e,t,n,i,o,a){}reportContextSensitivity(e,t,n,i,o,a){}}class Ne extends _e{constructor(){super()}syntaxError(e,t,n,i,o,a){console.error("line "+n+":"+i+" "+o)}}Ne.INSTANCE=new Ne;class Re extends _e{constructor(e){if(super(),null===e)throw"delegates";return this.delegates=e,this}syntaxError(e,t,n,i,o,a){this.delegates.map((r=>r.syntaxError(e,t,n,i,o,a)))}reportAmbiguity(e,t,n,i,o,a,r){this.delegates.map((s=>s.reportAmbiguity(e,t,n,i,o,a,r)))}reportAttemptingFullContext(e,t,n,i,o,a){this.delegates.map((r=>r.reportAttemptingFullContext(e,t,n,i,o,a)))}reportContextSensitivity(e,t,n,i,o,a){this.delegates.map((r=>r.reportContextSensitivity(e,t,n,i,o,a)))}}class De{constructor(){this._listeners=[Ne.INSTANCE],this._interp=null,this._stateNumber=-1}checkVersion(e){const t="4.13.1";t!==e&&console.log("ANTLR runtime and generated code versions disagree: "+t+"!="+e)}addErrorListener(e){this._listeners.push(e)}removeErrorListeners(){this._listeners=[]}getLiteralNames(){return Object.getPrototypeOf(this).constructor.literalNames||[]}getSymbolicNames(){return Object.getPrototypeOf(this).constructor.symbolicNames||[]}getTokenNames(){if(!this.tokenNames){const e=this.getLiteralNames(),t=this.getSymbolicNames(),n=e.length>t.length?e.length:t.length;this.tokenNames=[];for(let i=0;i<n;i++)this.tokenNames[i]=e[i]||t[i]||"<INVALID"}return this.tokenNames}getTokenTypeMap(){const t=this.getTokenNames();if(null===t)throw"The current recognizer does not provide a list of token names.";let n=this.tokenTypeMapCache[t];return void 0===n&&(n=t.reduce((function(e,t,n){e[t]=n})),n.EOF=e.EOF,this.tokenTypeMapCache[t]=n),n}getRuleIndexMap(){const e=this.ruleNames;if(null===e)throw"The current recognizer does not provide a list of rule names.";let t=this.ruleIndexMapCache[e];return void 0===t&&(t=e.reduce((function(e,t,n){e[t]=n})),this.ruleIndexMapCache[e]=t),t}getTokenType(t){const n=this.getTokenTypeMap()[t];return void 0!==n?n:e.INVALID_TYPE}getErrorHeader(e){return"line "+e.getOffendingToken().line+":"+e.getOffendingToken().column}getTokenErrorDisplay(t){if(null===t)return"<no token>";let n=t.text;return null===n&&(n=t.type===e.EOF?"<EOF>":"<"+t.type+">"),n=n.replace("\n","\\n").replace("\r","\\r").replace("\t","\\t"),"'"+n+"'"}getErrorListenerDispatch(){return new Re(this._listeners)}sempred(e,t,n){return!0}precpred(e,t){return!0}get atn(){return this._interp.atn}get state(){return this._stateNumber}set state(e){this._stateNumber=e}}De.tokenTypeMapCache={},De.ruleIndexMapCache={};class Me extends e{constructor(t,n,i,o,a){super(),this.source=void 0!==t?t:Me.EMPTY_SOURCE,this.type=void 0!==n?n:null,this.channel=void 0!==i?i:e.DEFAULT_CHANNEL,this.start=void 0!==o?o:-1,this.stop=void 0!==a?a:-1,this.tokenIndex=-1,null!==this.source[0]?(this.line=t[0].line,this.column=t[0].column):this.column=-1}clone(){const e=new Me(this.source,this.type,this.channel,this.start,this.stop);return e.tokenIndex=this.tokenIndex,e.line=this.line,e.column=this.column,e.text=this.text,e}cloneWithType(t){const n=new Me(this.source,t,this.channel,this.start,this.stop);return n.tokenIndex=this.tokenIndex,n.line=this.line,n.column=this.column,t===e.EOF&&(n.text=""),n}toString(){let e=this.text;return e=null!==e?e.replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\t/g,"\\t"):"<no text>","[@"+this.tokenIndex+","+this.start+":"+this.stop+"='"+e+"',<"+this.type+">"+(this.channel>0?",channel="+this.channel:"")+","+this.line+":"+this.column+"]"}get text(){if(null!==this._text)return this._text;const e=this.getInputStream();if(null===e)return null;const t=e.size;return this.start<t&&this.stop<t?e.getText(this.start,this.stop):"<EOF>"}set text(e){this._text=e}}Me.EMPTY_SOURCE=[null,null];class ve{}class Fe extends ve{constructor(e){super(),this.copyText=void 0!==e&&e}create(e,t,n,i,o,a,r,s){const l=new Me(e,t,i,o,a);return l.line=r,l.column=s,null!==n?l.text=n:this.copyText&&null!==e[1]&&(l.text=e[1].getText(o,a)),l}createThin(e,t){const n=new Me(null,e);return n.text=t,n}}Fe.DEFAULT=new Fe;class Pe extends Error{constructor(e){super(e.message),Error.captureStackTrace&&Error.captureStackTrace(this,Pe),this.message=e.message,this.recognizer=e.recognizer,this.input=e.input,this.ctx=e.ctx,this.offendingToken=null,this.offendingState=-1,null!==this.recognizer&&(this.offendingState=this.recognizer.state)}getExpectedTokens(){return null!==this.recognizer?this.recognizer.atn.getExpectedTokens(this.offendingState,this.ctx):null}toString(){return this.message}}class Be extends Pe{constructor(e,t,n,i){super({message:"",recognizer:e,input:t,ctx:null}),this.startIndex=n,this.deadEndConfigs=i}toString(){let e="";return this.startIndex>=0&&this.startIndex<this.input.size&&(e=this.input.getText(new k(this.startIndex,this.startIndex))),"LexerNoViableAltException"+e}}class we extends De{constructor(t){super(),this._input=t,this._factory=Fe.DEFAULT,this._tokenFactorySourcePair=[this,t],this._interp=null,this._token=null,this._tokenStartCharIndex=-1,this._tokenStartLine=-1,this._tokenStartColumn=-1,this._hitEOF=!1,this._channel=e.DEFAULT_CHANNEL,this._type=e.INVALID_TYPE,this._modeStack=[],this._mode=we.DEFAULT_MODE,this._text=null}reset(){null!==this._input&&this._input.seek(0),this._token=null,this._type=e.INVALID_TYPE,this._channel=e.DEFAULT_CHANNEL,this._tokenStartCharIndex=-1,this._tokenStartColumn=-1,this._tokenStartLine=-1,this._text=null,this._hitEOF=!1,this._mode=we.DEFAULT_MODE,this._modeStack=[],this._interp.reset()}nextToken(){if(null===this._input)throw"nextToken requires a non-null input stream.";const t=this._input.mark();try{for(;;){if(this._hitEOF)return this.emitEOF(),this._token;this._token=null,this._channel=e.DEFAULT_CHANNEL,this._tokenStartCharIndex=this._input.index,this._tokenStartColumn=this._interp.column,this._tokenStartLine=this._interp.line,this._text=null;let t=!1;for(;;){this._type=e.INVALID_TYPE;let n=we.SKIP;try{n=this._interp.match(this._input,this._mode)}catch(e){if(!(e instanceof Pe))throw console.log(e.stack),e;this.notifyListeners(e),this.recover(e)}if(this._input.LA(1)===e.EOF&&(this._hitEOF=!0),this._type===e.INVALID_TYPE&&(this._type=n),this._type===we.SKIP){t=!0;break}if(this._type!==we.MORE)break}if(!t)return null===this._token&&this.emit(),this._token}}finally{this._input.release(t)}}skip(){this._type=we.SKIP}more(){this._type=we.MORE}mode(e){this._mode=e}pushMode(e){this._interp.debug&&console.log("pushMode "+e),this._modeStack.push(this._mode),this.mode(e)}popMode(){if(0===this._modeStack.length)throw"Empty Stack";return this._interp.debug&&console.log("popMode back to "+this._modeStack.slice(0,-1)),this.mode(this._modeStack.pop()),this._mode}emitToken(e){this._token=e}emit(){const e=this._factory.create(this._tokenFactorySourcePair,this._type,this._text,this._channel,this._tokenStartCharIndex,this.getCharIndex()-1,this._tokenStartLine,this._tokenStartColumn);return this.emitToken(e),e}emitEOF(){const t=this.column,n=this.line,i=this._factory.create(this._tokenFactorySourcePair,e.EOF,null,e.DEFAULT_CHANNEL,this._input.index,this._input.index-1,n,t);return this.emitToken(i),i}getCharIndex(){return this._input.index}getAllTokens(){const t=[];let n=this.nextToken();for(;n.type!==e.EOF;)t.push(n),n=this.nextToken();return t}notifyListeners(e){const t=this._tokenStartCharIndex,n=this._input.index,i=this._input.getText(t,n),o="token recognition error at: '"+this.getErrorDisplay(i)+"'";this.getErrorListenerDispatch().syntaxError(this,null,this._tokenStartLine,this._tokenStartColumn,o,e)}getErrorDisplay(e){const t=[];for(let n=0;n<e.length;n++)t.push(e[n]);return t.join("")}getErrorDisplayForChar(t){return t.charCodeAt(0)===e.EOF?"<EOF>":"\n"===t?"\\n":"\t"===t?"\\t":"\r"===t?"\\r":t}getCharErrorDisplay(e){return"'"+this.getErrorDisplayForChar(e)+"'"}recover(t){this._input.LA(1)!==e.EOF&&(t instanceof Be?this._interp.consume(this._input):this._input.consume())}get inputStream(){return this._input}set inputStream(e){this._input=null,this._tokenFactorySourcePair=[this,this._input],this.reset(),this._input=e,this._tokenFactorySourcePair=[this,this._input]}get sourceName(){return this._input.sourceName}get type(){return this._type}set type(e){this._type=e}get line(){return this._interp.line}set line(e){this._interp.line=e}get column(){return this._interp.column}set column(e){this._interp.column=e}get text(){return null!==this._text?this._text:this._interp.getText(this._input)}set text(e){this._text=e}}function Ue(e){return e.hashCodeForConfigSet()}function qe(e,t){return e===t||null!==e&&null!==t&&e.equalsForConfigSet(t)}we.DEFAULT_MODE=0,we.MORE=-2,we.SKIP=-3,we.DEFAULT_TOKEN_CHANNEL=e.DEFAULT_CHANNEL,we.HIDDEN=e.HIDDEN_CHANNEL,we.MIN_CHAR_VALUE=0,we.MAX_CHAR_VALUE=1114111;class He{constructor(e){this.configLookup=new m(Ue,qe),this.fullCtx=void 0===e||e,this.readOnly=!1,this.configs=[],this.uniqueAlt=0,this.conflictingAlts=null,this.hasSemanticContext=!1,this.dipsIntoOuterContext=!1,this.cachedHashCode=-1}add(e,t){if(void 0===t&&(t=null),this.readOnly)throw"This set is readonly";e.semanticContext!==h.NONE&&(this.hasSemanticContext=!0),e.reachesIntoOuterContext>0&&(this.dipsIntoOuterContext=!0);const n=this.configLookup.add(e);if(n===e)return this.cachedHashCode=-1,this.configs.push(e),!0;const i=!this.fullCtx,o=K(n.context,e.context,i,t);return n.reachesIntoOuterContext=Math.max(n.reachesIntoOuterContext,e.reachesIntoOuterContext),e.precedenceFilterSuppressed&&(n.precedenceFilterSuppressed=!0),n.context=o,!0}getStates(){const e=new m;for(let t=0;t<this.configs.length;t++)e.add(this.configs[t].state);return e}getPredicates(){const e=[];for(let t=0;t<this.configs.length;t++){const n=this.configs[t].semanticContext;n!==h.NONE&&e.push(n.semanticContext)}return e}optimizeConfigs(e){if(this.readOnly)throw"This set is readonly";if(0!==this.configLookup.length)for(let t=0;t<this.configs.length;t++){const n=this.configs[t];n.context=e.getCachedContext(n.context)}}addAll(e){for(let t=0;t<e.length;t++)this.add(e[t]);return!1}equals(e){return this===e||e instanceof He&&t(this.configs,e.configs)&&this.fullCtx===e.fullCtx&&this.uniqueAlt===e.uniqueAlt&&this.conflictingAlts===e.conflictingAlts&&this.hasSemanticContext===e.hasSemanticContext&&this.dipsIntoOuterContext===e.dipsIntoOuterContext}hashCode(){const e=new o;return e.update(this.configs),e.finish()}updateHashCode(e){this.readOnly?(-1===this.cachedHashCode&&(this.cachedHashCode=this.hashCode()),e.update(this.cachedHashCode)):e.update(this.hashCode())}isEmpty(){return 0===this.configs.length}contains(e){if(null===this.configLookup)throw"This method is not implemented for readonly sets.";return this.configLookup.contains(e)}containsFast(e){if(null===this.configLookup)throw"This method is not implemented for readonly sets.";return this.configLookup.containsFast(e)}clear(){if(this.readOnly)throw"This set is readonly";this.configs=[],this.cachedHashCode=-1,this.configLookup=new m}setReadonly(e){this.readOnly=e,e&&(this.configLookup=null)}toString(){return c(this.configs)+(this.hasSemanticContext?",hasSemanticContext="+this.hasSemanticContext:"")+(this.uniqueAlt!==Z.INVALID_ALT_NUMBER?",uniqueAlt="+this.uniqueAlt:"")+(null!==this.conflictingAlts?",conflictingAlts="+this.conflictingAlts:"")+(this.dipsIntoOuterContext?",dipsIntoOuterContext":"")}get items(){return this.configs}get length(){return this.configs.length}}class Ve{constructor(e,t){return null===e&&(e=-1),null===t&&(t=new He),this.stateNumber=e,this.configs=t,this.edges=null,this.isAcceptState=!1,this.prediction=0,this.lexerActionExecutor=null,this.requiresFullContext=!1,this.predicates=null,this}getAltSet(){const e=new m;if(null!==this.configs)for(let t=0;t<this.configs.length;t++){const n=this.configs[t];e.add(n.alt)}return 0===e.length?null:e}equals(e){return this===e||e instanceof Ve&&this.configs.equals(e.configs)}toString(){let e=this.stateNumber+":"+this.configs;return this.isAcceptState&&(e+="=>",null!==this.predicates?e+=this.predicates:e+=this.prediction),e}hashCode(){const e=new o;return e.update(this.configs),e.finish()}}class je{constructor(e,t){return this.atn=e,this.sharedContextCache=t,this}getCachedContext(e){if(null===this.sharedContextCache)return e;const t=new j;return G(e,this.sharedContextCache,t)}}je.ERROR=new Ve(2147483647,new He);class Ye extends He{constructor(){super(),this.configLookup=new m}}class Ge extends x{constructor(e,t){super(e,t);const n=e.lexerActionExecutor||null;return this.lexerActionExecutor=n||(null!==t?t.lexerActionExecutor:null),this.passedThroughNonGreedyDecision=null!==t&&this.checkNonGreedyDecision(t,this.state),this.hashCodeForConfigSet=Ge.prototype.hashCode,this.equalsForConfigSet=Ge.prototype.equals,this}updateHashCode(e){e.update(this.state.stateNumber,this.alt,this.context,this.semanticContext,this.passedThroughNonGreedyDecision,this.lexerActionExecutor)}equals(e){return this===e||e instanceof Ge&&this.passedThroughNonGreedyDecision===e.passedThroughNonGreedyDecision&&(this.lexerActionExecutor?this.lexerActionExecutor.equals(e.lexerActionExecutor):!e.lexerActionExecutor)&&super.equals(e)}checkNonGreedyDecision(e,t){return e.passedThroughNonGreedyDecision||t instanceof J&&t.nonGreedy}}class Ke extends xe{constructor(e,t){super(t.actionType),this.offset=e,this.action=t,this.isPositionDependent=!0}execute(e){this.action.execute(e)}updateHashCode(e){e.update(this.actionType,this.offset,this.action)}equals(e){return this===e||e instanceof Ke&&this.offset===e.offset&&this.action===e.action}}class We{constructor(e){return this.lexerActions=null===e?[]:e,this.cachedHashCode=o.hashStuff(e),this}fixOffsetBeforeMatch(e){let t=null;for(let n=0;n<this.lexerActions.length;n++)!this.lexerActions[n].isPositionDependent||this.lexerActions[n]instanceof Ke||(null===t&&(t=this.lexerActions.concat([])),t[n]=new Ke(e,this.lexerActions[n]));return null===t?this:new We(t)}execute(e,t,n){let i=!1;const o=t.index;try{for(let a=0;a<this.lexerActions.length;a++){let r=this.lexerActions[a];if(r instanceof Ke){const e=r.offset;t.seek(n+e),r=r.action,i=n+e!==o}else r.isPositionDependent&&(t.seek(o),i=!1);r.execute(e)}}finally{i&&t.seek(o)}}hashCode(){return this.cachedHashCode}updateHashCode(e){e.update(this.cachedHashCode)}equals(e){if(this===e)return!0;if(e instanceof We){if(this.cachedHashCode!=e.cachedHashCode)return!1;if(this.lexerActions.length!=e.lexerActions.length)return!1;{const t=this.lexerActions.length;for(let n=0;n<t;++n)if(!this.lexerActions[n].equals(e.lexerActions[n]))return!1;return!0}}return!1}static append(e,t){if(null===e)return new We([t]);const n=e.lexerActions.concat([t]);return new We(n)}}function ze(e){e.index=-1,e.line=0,e.column=-1,e.dfaState=null}class Ze{constructor(){ze(this)}reset(){ze(this)}}class Xe extends je{constructor(e,t,n,i){super(t,i),this.decisionToDFA=n,this.recog=e,this.startIndex=-1,this.line=1,this.column=0,this.mode=we.DEFAULT_MODE,this.prevAccept=new Ze}copyState(e){this.column=e.column,this.line=e.line,this.mode=e.mode,this.startIndex=e.startIndex}match(e,t){this.mode=t;const n=e.mark();try{this.startIndex=e.index,this.prevAccept.reset();const n=this.decisionToDFA[t];return null===n.s0?this.matchATN(e):this.execATN(e,n.s0)}finally{e.release(n)}}reset(){this.prevAccept.reset(),this.startIndex=-1,this.line=1,this.column=0,this.mode=we.DEFAULT_MODE}matchATN(e){const t=this.atn.modeToStartState[this.mode];Xe.debug&&console.log("matchATN mode "+this.mode+" start: "+t);const n=this.mode,i=this.computeStartState(e,t),o=i.hasSemanticContext;i.hasSemanticContext=!1;const a=this.addDFAState(i);o||(this.decisionToDFA[this.mode].s0=a);const r=this.execATN(e,a);return Xe.debug&&console.log("DFA after matchATN: "+this.decisionToDFA[n].toLexerString()),r}execATN(t,n){Xe.debug&&console.log("start state closure="+n.configs),n.isAcceptState&&this.captureSimState(this.prevAccept,t,n);let i=t.LA(1),o=n;for(;;){Xe.debug&&console.log("execATN loop starting closure: "+o.configs);let n=this.getExistingTargetState(o,i);if(null===n&&(n=this.computeTargetState(t,o,i)),n===je.ERROR)break;if(i!==e.EOF&&this.consume(t),n.isAcceptState&&(this.captureSimState(this.prevAccept,t,n),i===e.EOF))break;i=t.LA(1),o=n}return this.failOrAccept(this.prevAccept,t,o.configs,i)}getExistingTargetState(e,t){if(null===e.edges||t<Xe.MIN_DFA_EDGE||t>Xe.MAX_DFA_EDGE)return null;let n=e.edges[t-Xe.MIN_DFA_EDGE];return void 0===n&&(n=null),Xe.debug&&null!==n&&console.log("reuse state "+e.stateNumber+" edge to "+n.stateNumber),n}computeTargetState(e,t,n){const i=new Ye;return this.getReachableConfigSet(e,t.configs,i,n),0===i.items.length?(i.hasSemanticContext||this.addDFAEdge(t,n,je.ERROR),je.ERROR):this.addDFAEdge(t,n,null,i)}failOrAccept(t,n,i,o){if(null!==this.prevAccept.dfaState){const e=t.dfaState.lexerActionExecutor;return this.accept(n,e,this.startIndex,t.index,t.line,t.column),t.dfaState.prediction}if(o===e.EOF&&n.index===this.startIndex)return e.EOF;throw new Be(this.recog,n,this.startIndex,i)}getReachableConfigSet(t,n,i,o){let a=Z.INVALID_ALT_NUMBER;for(let r=0;r<n.items.length;r++){const s=n.items[r],l=s.alt===a;if(!l||!s.passedThroughNonGreedyDecision){Xe.debug&&console.log("testing %s at %s\n",this.getTokenName(o),s.toString(this.recog,!0));for(let n=0;n<s.state.transitions.length;n++){const r=s.state.transitions[n],d=this.getReachableTarget(r,o);if(null!==d){let n=s.lexerActionExecutor;null!==n&&(n=n.fixOffsetBeforeMatch(t.index-this.startIndex));const r=o===e.EOF,c=new Ge({state:d,lexerActionExecutor:n},s);this.closure(t,c,i,l,!0,r)&&(a=s.alt)}}}}}accept(e,t,n,i,o,a){Xe.debug&&console.log("ACTION %s\n",t),e.seek(i),this.line=o,this.column=a,null!==t&&null!==this.recog&&t.execute(this.recog,e,n)}getReachableTarget(e,t){return e.matches(t,0,we.MAX_CHAR_VALUE)?e.target:null}computeStartState(e,t){const n=w.EMPTY,i=new Ye;for(let o=0;o<t.transitions.length;o++){const a=t.transitions[o].target,r=new Ge({state:a,alt:o+1,context:n},null);this.closure(e,r,i,!1,!1,!1)}return i}closure(e,t,n,i,o,a){let r=null;if(Xe.debug&&console.log("closure("+t.toString(this.recog,!0)+")"),t.state instanceof C){if(Xe.debug&&(null!==this.recog?console.log("closure at %s rule stop %s\n",this.recog.ruleNames[t.state.ruleIndex],t):console.log("closure at rule stop %s\n",t)),null===t.context||t.context.hasEmptyPath()){if(null===t.context||t.context.isEmpty())return n.add(t),!0;n.add(new Ge({state:t.state,context:w.EMPTY},t)),i=!0}if(null!==t.context&&!t.context.isEmpty())for(let s=0;s<t.context.length;s++)if(t.context.getReturnState(s)!==w.EMPTY_RETURN_STATE){const l=t.context.getParent(s),d=this.atn.states[t.context.getReturnState(s)];r=new Ge({state:d,context:l},t),i=this.closure(e,r,n,i,o,a)}return i}t.state.epsilonOnlyTransitions||i&&t.passedThroughNonGreedyDecision||n.add(t);for(let s=0;s<t.state.transitions.length;s++){const l=t.state.transitions[s];r=this.getEpsilonTarget(e,t,l,n,o,a),null!==r&&(i=this.closure(e,r,n,i,o,a))}return i}getEpsilonTarget(t,n,i,o,a,r){let s=null;if(i.serializationType===E.RULE){const e=q.create(n.context,i.followState.stateNumber);s=new Ge({state:i.target,context:e},n)}else{if(i.serializationType===E.PRECEDENCE)throw"Precedence predicates are not supported in lexers.";if(i.serializationType===E.PREDICATE)Xe.debug&&console.log("EVAL rule "+i.ruleIndex+":"+i.predIndex),o.hasSemanticContext=!0,this.evaluatePredicate(t,i.ruleIndex,i.predIndex,a)&&(s=new Ge({state:i.target},n));else if(i.serializationType===E.ACTION)if(null===n.context||n.context.hasEmptyPath()){const e=We.append(n.lexerActionExecutor,this.atn.lexerActions[i.actionIndex]);s=new Ge({state:i.target,lexerActionExecutor:e},n)}else s=new Ge({state:i.target},n);else i.serializationType===E.EPSILON?s=new Ge({state:i.target},n):i.serializationType!==E.ATOM&&i.serializationType!==E.RANGE&&i.serializationType!==E.SET||r&&i.matches(e.EOF,0,we.MAX_CHAR_VALUE)&&(s=new Ge({state:i.target},n))}return s}evaluatePredicate(e,t,n,i){if(null===this.recog)return!0;if(!i)return this.recog.sempred(null,t,n);const o=this.column,a=this.line,r=e.index,s=e.mark();try{return this.consume(e),this.recog.sempred(null,t,n)}finally{this.column=o,this.line=a,e.seek(r),e.release(s)}}captureSimState(e,t,n){e.index=t.index,e.line=this.line,e.column=this.column,e.dfaState=n}addDFAEdge(e,t,n,i){if(void 0===n&&(n=null),void 0===i&&(i=null),null===n&&null!==i){const e=i.hasSemanticContext;if(i.hasSemanticContext=!1,n=this.addDFAState(i),e)return n}return t<Xe.MIN_DFA_EDGE||t>Xe.MAX_DFA_EDGE||(Xe.debug&&console.log("EDGE "+e+" -> "+n+" upon "+t),null===e.edges&&(e.edges=[]),e.edges[t-Xe.MIN_DFA_EDGE]=n),n}addDFAState(e){const t=new Ve(null,e);let n=null;for(let t=0;t<e.items.length;t++){const i=e.items[t];if(i.state instanceof C){n=i;break}}null!==n&&(t.isAcceptState=!0,t.lexerActionExecutor=n.lexerActionExecutor,t.prediction=this.atn.ruleToTokenType[n.state.ruleIndex]);const i=this.decisionToDFA[this.mode],o=i.states.get(t);if(null!==o)return o;const a=t;return a.stateNumber=i.states.length,e.setReadonly(!0),a.configs=e,i.states.add(a),a}getDFA(e){return this.decisionToDFA[e]}getText(e){return e.getText(this.startIndex,e.index-1)}consume(e){e.LA(1)==="\n".charCodeAt(0)?(this.line+=1,this.column=0):this.column+=1,e.consume()}getTokenName(e){return-1===e?"EOF":"'"+String.fromCharCode(e)+"'"}}Xe.debug=!1,Xe.dfa_debug=!1,Xe.MIN_DFA_EDGE=0,Xe.MAX_DFA_EDGE=127;class Je{constructor(e,t){this.alt=t,this.pred=e}toString(){return"("+this.pred+", "+this.alt+")"}}class $e{constructor(){this.data={}}get(e){return this.data["k-"+e]||null}set(e,t){this.data["k-"+e]=t}values(){return Object.keys(this.data).filter((e=>e.startsWith("k-"))).map((e=>this.data[e]),this)}}const Qe={SLL:0,LL:1,LL_EXACT_AMBIG_DETECTION:2,hasSLLConflictTerminatingPrediction:function(e,t){if(Qe.allConfigsInRuleStopStates(t))return!0;if(e===Qe.SLL&&t.hasSemanticContext){const e=new He;for(let n=0;n<t.items.length;n++){let i=t.items[n];i=new x({semanticContext:h.NONE},i),e.add(i)}t=e}const n=Qe.getConflictingAltSubsets(t);return Qe.hasConflictingAltSet(n)&&!Qe.hasStateAssociatedWithOneAlt(t)},hasConfigInRuleStopState:function(e){for(let t=0;t<e.items.length;t++)if(e.items[t].state instanceof C)return!0;return!1},allConfigsInRuleStopStates:function(e){for(let t=0;t<e.items.length;t++)if(!(e.items[t].state instanceof C))return!1;return!0},resolvesToJustOneViableAlt:function(e){return Qe.getSingleViableAlt(e)},allSubsetsConflict:function(e){return!Qe.hasNonConflictingAltSet(e)},hasNonConflictingAltSet:function(e){for(let t=0;t<e.length;t++)if(1===e[t].length)return!0;return!1},hasConflictingAltSet:function(e){for(let t=0;t<e.length;t++)if(e[t].length>1)return!0;return!1},allSubsetsEqual:function(e){let t=null;for(let n=0;n<e.length;n++){const i=e[n];if(null===t)t=i;else if(i!==t)return!1}return!0},getUniqueAlt:function(e){const t=Qe.getAlts(e);return 1===t.length?t.minValue():Z.INVALID_ALT_NUMBER},getAlts:function(e){const t=new W;return e.map((function(e){t.or(e)})),t},getConflictingAltSubsets:function(e){const t=new j;return t.hashFunction=function(e){o.hashStuff(e.state.stateNumber,e.context)},t.equalsFunction=function(e,t){return e.state.stateNumber===t.state.stateNumber&&e.context.equals(t.context)},e.items.map((function(e){let n=t.get(e);null===n&&(n=new W,t.set(e,n)),n.add(e.alt)})),t.getValues()},getStateToAltMap:function(e){const t=new $e;return e.items.map((function(e){let n=t.get(e.state);null===n&&(n=new W,t.set(e.state,n)),n.add(e.alt)})),t},hasStateAssociatedWithOneAlt:function(e){const t=Qe.getStateToAltMap(e).values();for(let e=0;e<t.length;e++)if(1===t[e].length)return!0;return!1},getSingleViableAlt:function(e){let t=null;for(let n=0;n<e.length;n++){const i=e[n].minValue();if(null===t)t=i;else if(t!==i)return Z.INVALID_ALT_NUMBER}return t}},et=Qe;class tt extends Pe{constructor(e,t,n,i,o,a){a=a||e._ctx,i=i||e.getCurrentToken(),n=n||e.getCurrentToken(),t=t||e.getInputStream(),super({message:"",recognizer:e,input:t,ctx:a}),this.deadEndConfigs=o,this.startToken=n,this.offendingToken=i}}class nt{constructor(e){this.defaultMapCtor=e||j,this.cacheMap=new this.defaultMapCtor}get(e,t){const n=this.cacheMap.get(e)||null;return null===n?null:n.get(t)||null}set(e,t,n){let i=this.cacheMap.get(e)||null;null===i&&(i=new this.defaultMapCtor,this.cacheMap.set(e,i)),i.set(t,n)}}class it extends je{constructor(e,t,n,i){super(t,i),this.parser=e,this.decisionToDFA=n,this.predictionMode=et.LL,this._input=null,this._startIndex=0,this._outerContext=null,this._dfa=null,this.mergeCache=null,this.debug=!1,this.debug_closure=!1,this.debug_add=!1,this.trace_atn_sim=!1,this.dfa_debug=!1,this.retry_debug=!1}reset(){}adaptivePredict(e,t,n){(this.debug||this.trace_atn_sim)&&console.log("adaptivePredict decision "+t+" exec LA(1)=="+this.getLookaheadName(e)+" line "+e.LT(1).line+":"+e.LT(1).column),this._input=e,this._startIndex=e.index,this._outerContext=n;const i=this.decisionToDFA[t];this._dfa=i;const o=e.mark(),a=e.index;try{let t;if(t=i.precedenceDfa?i.getPrecedenceStartState(this.parser.getPrecedence()):i.s0,null===t){null===n&&(n=B.EMPTY),this.debug&&console.log("predictATN decision "+i.decision+" exec LA(1)=="+this.getLookaheadName(e)+", outerContext="+n.toString(this.parser.ruleNames));const o=!1;let a=this.computeStartState(i.atnStartState,B.EMPTY,o);i.precedenceDfa?(i.s0.configs=a,a=this.applyPrecedenceFilter(a),t=this.addDFAState(i,new Ve(null,a)),i.setPrecedenceStartState(this.parser.getPrecedence(),t)):(t=this.addDFAState(i,new Ve(null,a)),i.s0=t)}const o=this.execATN(i,t,e,a,n);return this.debug&&console.log("DFA after predictATN: "+i.toString(this.parser.literalNames,this.parser.symbolicNames)),o}finally{this._dfa=null,this.mergeCache=null,e.seek(a),e.release(o)}}execATN(t,n,i,o,a){let r;(this.debug||this.trace_atn_sim)&&console.log("execATN decision "+t.decision+", DFA state "+n+", LA(1)=="+this.getLookaheadName(i)+" line "+i.LT(1).line+":"+i.LT(1).column);let s=n;this.debug&&console.log("s0 = "+n);let l=i.LA(1);for(;;){let n=this.getExistingTargetState(s,l);if(null===n&&(n=this.computeTargetState(t,s,l)),n===je.ERROR){const e=this.noViableAlt(i,a,s.configs,o);if(i.seek(o),r=this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(s.configs,a),r!==Z.INVALID_ALT_NUMBER)return r;throw e}if(n.requiresFullContext&&this.predictionMode!==et.SLL){let e=null;if(null!==n.predicates){this.debug&&console.log("DFA state has preds in DFA sim LL failover");const t=i.index;if(t!==o&&i.seek(o),e=this.evalSemanticContext(n.predicates,a,!0),1===e.length)return this.debug&&console.log("Full LL avoided"),e.minValue();t!==o&&i.seek(t)}this.dfa_debug&&console.log("ctx sensitive state "+a+" in "+n);const s=!0,l=this.computeStartState(t.atnStartState,a,s);return this.reportAttemptingFullContext(t,e,n.configs,o,i.index),r=this.execATNWithFullContext(t,n,l,i,o,a),r}if(n.isAcceptState){if(null===n.predicates)return n.prediction;const e=i.index;i.seek(o);const r=this.evalSemanticContext(n.predicates,a,!0);if(0===r.length)throw this.noViableAlt(i,a,n.configs,o);return 1===r.length||this.reportAmbiguity(t,n,o,e,!1,r,n.configs),r.minValue()}s=n,l!==e.EOF&&(i.consume(),l=i.LA(1))}}getExistingTargetState(e,t){const n=e.edges;return null===n?null:n[t+1]||null}computeTargetState(e,t,n){const i=this.computeReachSet(t.configs,n,!1);if(null===i)return this.addDFAEdge(e,t,n,je.ERROR),je.ERROR;let o=new Ve(null,i);const a=this.getUniqueAlt(i);if(this.debug){const e=et.getConflictingAltSubsets(i);console.log("SLL altSubSets="+c(e)+", configs="+i+", predict="+a+", allSubsetsConflict="+et.allSubsetsConflict(e)+", conflictingAlts="+this.getConflictingAlts(i))}return a!==Z.INVALID_ALT_NUMBER?(o.isAcceptState=!0,o.configs.uniqueAlt=a,o.prediction=a):et.hasSLLConflictTerminatingPrediction(this.predictionMode,i)&&(o.configs.conflictingAlts=this.getConflictingAlts(i),o.requiresFullContext=!0,o.isAcceptState=!0,o.prediction=o.configs.conflictingAlts.minValue()),o.isAcceptState&&o.configs.hasSemanticContext&&(this.predicateDFAState(o,this.atn.getDecisionState(e.decision)),null!==o.predicates&&(o.prediction=Z.INVALID_ALT_NUMBER)),o=this.addDFAEdge(e,t,n,o),o}predicateDFAState(e,t){const n=t.transitions.length,i=this.getConflictingAltsOrUniqueAlt(e.configs),o=this.getPredsForAmbigAlts(i,e.configs,n);null!==o?(e.predicates=this.getPredicatePredictions(i,o),e.prediction=Z.INVALID_ALT_NUMBER):e.prediction=i.minValue()}execATNWithFullContext(t,n,i,o,a,r){(this.debug||this.trace_atn_sim)&&console.log("execATNWithFullContext "+i);let s,l=!1,d=i;o.seek(a);let c=o.LA(1),u=-1;for(;;){if(s=this.computeReachSet(d,c,!0),null===s){const e=this.noViableAlt(o,r,d,a);o.seek(a);const t=this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(d,r);if(t!==Z.INVALID_ALT_NUMBER)return t;throw e}const t=et.getConflictingAltSubsets(s);if(this.debug&&console.log("LL altSubSets="+t+", predict="+et.getUniqueAlt(t)+", resolvesToJustOneViableAlt="+et.resolvesToJustOneViableAlt(t)),s.uniqueAlt=this.getUniqueAlt(s),s.uniqueAlt!==Z.INVALID_ALT_NUMBER){u=s.uniqueAlt;break}if(this.predictionMode!==et.LL_EXACT_AMBIG_DETECTION){if(u=et.resolvesToJustOneViableAlt(t),u!==Z.INVALID_ALT_NUMBER)break}else if(et.allSubsetsConflict(t)&&et.allSubsetsEqual(t)){l=!0,u=et.getSingleViableAlt(t);break}d=s,c!==e.EOF&&(o.consume(),c=o.LA(1))}return s.uniqueAlt!==Z.INVALID_ALT_NUMBER?(this.reportContextSensitivity(t,u,s,a,o.index),u):(this.reportAmbiguity(t,n,a,o.index,l,null,s),u)}computeReachSet(t,n,i){this.debug&&console.log("in computeReachSet, starting closure: "+t),null===this.mergeCache&&(this.mergeCache=new nt);const o=new He(i);let a=null;for(let r=0;r<t.items.length;r++){const s=t.items[r];if(this.debug&&console.log("testing "+this.getTokenName(n)+" at "+s),s.state instanceof C)(i||n===e.EOF)&&(null===a&&(a=[]),a.push(s),this.debug_add&&console.log("added "+s+" to skippedStopStates"));else for(let e=0;e<s.state.transitions.length;e++){const t=s.state.transitions[e],i=this.getReachableTarget(t,n);if(null!==i){const e=new x({state:i},s);o.add(e,this.mergeCache),this.debug_add&&console.log("added "+e+" to intermediate")}}}let r=null;if(null===a&&n!==e.EOF&&(1===o.items.length||this.getUniqueAlt(o)!==Z.INVALID_ALT_NUMBER)&&(r=o),null===r){r=new He(i);const t=new m,a=n===e.EOF;for(let e=0;e<o.items.length;e++)this.closure(o.items[e],r,t,!1,i,a)}if(n===e.EOF&&(r=this.removeAllConfigsNotInRuleStopState(r,r===o)),!(null===a||i&&et.hasConfigInRuleStopState(r)))for(let e=0;e<a.length;e++)r.add(a[e],this.mergeCache);return this.trace_atn_sim&&console.log("computeReachSet "+t+" -> "+r),0===r.items.length?null:r}removeAllConfigsNotInRuleStopState(t,n){if(et.allConfigsInRuleStopStates(t))return t;const i=new He(t.fullCtx);for(let o=0;o<t.items.length;o++){const a=t.items[o];if(a.state instanceof C)i.add(a,this.mergeCache);else if(n&&a.state.epsilonOnlyTransitions&&this.atn.nextTokens(a.state).contains(e.EPSILON)){const e=this.atn.ruleToStopState[a.state.ruleIndex];i.add(new x({state:e},a),this.mergeCache)}}return i}computeStartState(e,t,n){const i=Y(this.atn,t),o=new He(n);this.trace_atn_sim&&console.log("computeStartState from ATN state "+e+" initialContext="+i.toString(this.parser));for(let t=0;t<e.transitions.length;t++){const a=e.transitions[t].target,r=new x({state:a,alt:t+1,context:i},null),s=new m;this.closure(r,o,s,!0,n,!1)}return o}applyPrecedenceFilter(e){let t;const n=[],i=new He(e.fullCtx);for(let o=0;o<e.items.length;o++){if(t=e.items[o],1!==t.alt)continue;const a=t.semanticContext.evalPrecedence(this.parser,this._outerContext);null!==a&&(n[t.state.stateNumber]=t.context,a!==t.semanticContext?i.add(new x({semanticContext:a},t),this.mergeCache):i.add(t,this.mergeCache))}for(let o=0;o<e.items.length;o++)if(t=e.items[o],1!==t.alt){if(!t.precedenceFilterSuppressed){const e=n[t.state.stateNumber]||null;if(null!==e&&e.equals(t.context))continue}i.add(t,this.mergeCache)}return i}getReachableTarget(e,t){return e.matches(t,0,this.atn.maxTokenType)?e.target:null}getPredsForAmbigAlts(e,t,n){let i=[];for(let n=0;n<t.items.length;n++){const o=t.items[n];e.has(o.alt)&&(i[o.alt]=h.orContext(i[o.alt]||null,o.semanticContext))}let o=0;for(let e=1;e<n+1;e++){const t=i[e]||null;null===t?i[e]=h.NONE:t!==h.NONE&&(o+=1)}return 0===o&&(i=null),this.debug&&console.log("getPredsForAmbigAlts result "+c(i)),i}getPredicatePredictions(e,t){const n=[];let i=!1;for(let o=1;o<t.length;o++){const a=t[o];null!==e&&e.has(o)&&n.push(new Je(a,o)),a!==h.NONE&&(i=!0)}return i?n:null}getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(e,t){const n=this.splitAccordingToSemanticValidity(e,t),i=n[0],o=n[1];let a=this.getAltThatFinishedDecisionEntryRule(i);return a!==Z.INVALID_ALT_NUMBER||o.items.length>0&&(a=this.getAltThatFinishedDecisionEntryRule(o),a!==Z.INVALID_ALT_NUMBER)?a:Z.INVALID_ALT_NUMBER}getAltThatFinishedDecisionEntryRule(e){const t=[];for(let n=0;n<e.items.length;n++){const i=e.items[n];(i.reachesIntoOuterContext>0||i.state instanceof C&&i.context.hasEmptyPath())&&t.indexOf(i.alt)<0&&t.push(i.alt)}return 0===t.length?Z.INVALID_ALT_NUMBER:Math.min.apply(null,t)}splitAccordingToSemanticValidity(e,t){const n=new He(e.fullCtx),i=new He(e.fullCtx);for(let o=0;o<e.items.length;o++){const a=e.items[o];a.semanticContext!==h.NONE?a.semanticContext.evaluate(this.parser,t)?n.add(a):i.add(a):n.add(a)}return[n,i]}evalSemanticContext(e,t,n){const i=new W;for(let o=0;o<e.length;o++){const a=e[o];if(a.pred===h.NONE){if(i.add(a.alt),!n)break;continue}const r=a.pred.evaluate(this.parser,t);if((this.debug||this.dfa_debug)&&console.log("eval pred "+a+"="+r),r&&((this.debug||this.dfa_debug)&&console.log("PREDICT "+a.alt),i.add(a.alt),!n))break}return i}closure(e,t,n,i,o,a){this.closureCheckingStopState(e,t,n,i,o,0,a)}closureCheckingStopState(e,t,n,i,o,a,r){if((this.trace_atn_sim||this.debug_closure)&&console.log("closure("+e.toString(this.parser,!0)+")"),e.state instanceof C){if(!e.context.isEmpty()){for(let s=0;s<e.context.length;s++){if(e.context.getReturnState(s)===w.EMPTY_RETURN_STATE){if(o){t.add(new x({state:e.state,context:w.EMPTY},e),this.mergeCache);continue}this.debug&&console.log("FALLING off rule "+this.getRuleName(e.state.ruleIndex)),this.closure_(e,t,n,i,o,a,r);continue}const l=this.atn.states[e.context.getReturnState(s)],d=e.context.getParent(s),c={state:l,alt:e.alt,context:d,semanticContext:e.semanticContext},u=new x(c,null);u.reachesIntoOuterContext=e.reachesIntoOuterContext,this.closureCheckingStopState(u,t,n,i,o,a-1,r)}return}if(o)return void t.add(e,this.mergeCache);this.debug&&console.log("FALLING off rule "+this.getRuleName(e.state.ruleIndex))}this.closure_(e,t,n,i,o,a,r)}closure_(e,t,n,i,o,a,r){const s=e.state;s.epsilonOnlyTransitions||t.add(e,this.mergeCache);for(let l=0;l<s.transitions.length;l++){if(0===l&&this.canDropLoopEntryEdgeInLeftRecursiveRule(e))continue;const d=s.transitions[l],c=i&&!(d instanceof ue),u=this.getEpsilonTarget(e,d,c,0===a,o,r);if(null!==u){let i=a;if(e.state instanceof C){if(null!==this._dfa&&this._dfa.precedenceDfa&&d.outermostPrecedenceReturn===this._dfa.atnStartState.ruleIndex&&(u.precedenceFilterSuppressed=!0),u.reachesIntoOuterContext+=1,n.add(u)!==u)continue;t.dipsIntoOuterContext=!0,i-=1,this.debug&&console.log("dips into outer ctx: "+u)}else{if(!d.isEpsilon&&n.add(u)!==u)continue;d instanceof A&&i>=0&&(i+=1)}this.closureCheckingStopState(u,t,n,c,o,i,r)}}}canDropLoopEntryEdgeInLeftRecursiveRule(e){const t=e.state;if(t.stateType!==S.STAR_LOOP_ENTRY)return!1;if(t.stateType!==S.STAR_LOOP_ENTRY||!t.isPrecedenceDecision||e.context.isEmpty()||e.context.hasEmptyPath())return!1;const n=e.context.length;for(let i=0;i<n;i++)if(this.atn.states[e.context.getReturnState(i)].ruleIndex!==t.ruleIndex)return!1;const i=t.transitions[0].target.endState.stateNumber,o=this.atn.states[i];for(let i=0;i<n;i++){const n=e.context.getReturnState(i),a=this.atn.states[n];if(1!==a.transitions.length||!a.transitions[0].isEpsilon)return!1;const r=a.transitions[0].target;if(!(a.stateType===S.BLOCK_END&&r===t||a===o||r===o||r.stateType===S.BLOCK_END&&1===r.transitions.length&&r.transitions[0].isEpsilon&&r.transitions[0].target===t))return!1}return!0}getRuleName(e){return null!==this.parser&&e>=0?this.parser.ruleNames[e]:"<rule "+e+">"}getEpsilonTarget(t,n,i,o,a,r){switch(n.serializationType){case E.RULE:return this.ruleTransition(t,n);case E.PRECEDENCE:return this.precedenceTransition(t,n,i,o,a);case E.PREDICATE:return this.predTransition(t,n,i,o,a);case E.ACTION:return this.actionTransition(t,n);case E.EPSILON:return new x({state:n.target},t);case E.ATOM:case E.RANGE:case E.SET:return r&&n.matches(e.EOF,0,1)?new x({state:n.target},t):null;default:return null}}actionTransition(e,t){if(this.debug){const e=-1===t.actionIndex?65535:t.actionIndex;console.log("ACTION edge "+t.ruleIndex+":"+e)}return new x({state:t.target},e)}precedenceTransition(e,t,n,i,o){this.debug&&(console.log("PRED (collectPredicates="+n+") "+t.precedence+">=_p, ctx dependent=true"),null!==this.parser&&console.log("context surrounding pred is "+c(this.parser.getRuleInvocationStack())));let a=null;if(n&&i)if(o){const n=this._input.index;this._input.seek(this._startIndex);const i=t.getPredicate().evaluate(this.parser,this._outerContext);this._input.seek(n),i&&(a=new x({state:t.target},e))}else{const n=h.andContext(e.semanticContext,t.getPredicate());a=new x({state:t.target,semanticContext:n},e)}else a=new x({state:t.target},e);return this.debug&&console.log("config from pred transition="+a),a}predTransition(e,t,n,i,o){this.debug&&(console.log("PRED (collectPredicates="+n+") "+t.ruleIndex+":"+t.predIndex+", ctx dependent="+t.isCtxDependent),null!==this.parser&&console.log("context surrounding pred is "+c(this.parser.getRuleInvocationStack())));let a=null;if(n&&(t.isCtxDependent&&i||!t.isCtxDependent))if(o){const n=this._input.index;this._input.seek(this._startIndex);const i=t.getPredicate().evaluate(this.parser,this._outerContext);this._input.seek(n),i&&(a=new x({state:t.target},e))}else{const n=h.andContext(e.semanticContext,t.getPredicate());a=new x({state:t.target,semanticContext:n},e)}else a=new x({state:t.target},e);return this.debug&&console.log("config from pred transition="+a),a}ruleTransition(e,t){this.debug&&console.log("CALL rule "+this.getRuleName(t.target.ruleIndex)+", ctx="+e.context);const n=t.followState,i=q.create(e.context,n.stateNumber);return new x({state:t.target,context:i},e)}getConflictingAlts(e){const t=et.getConflictingAltSubsets(e);return et.getAlts(t)}getConflictingAltsOrUniqueAlt(e){let t=null;return e.uniqueAlt!==Z.INVALID_ALT_NUMBER?(t=new W,t.add(e.uniqueAlt)):t=e.conflictingAlts,t}getTokenName(t){if(t===e.EOF)return"EOF";if(null!==this.parser&&null!==this.parser.literalNames){if(!(t>=this.parser.literalNames.length&&t>=this.parser.symbolicNames.length))return(this.parser.literalNames[t]||this.parser.symbolicNames[t])+"<"+t+">";console.log(t+" ttype out of range: "+this.parser.literalNames),console.log(""+this.parser.getInputStream().getTokens())}return""+t}getLookaheadName(e){return this.getTokenName(e.LA(1))}dumpDeadEndConfigs(e){console.log("dead end configs: ");const t=e.getDeadEndConfigs();for(let e=0;e<t.length;e++){const n=t[e];let i="no edges";if(n.state.transitions.length>0){const e=n.state.transitions[0];e instanceof de?i="Atom "+this.getTokenName(e.label):e instanceof y&&(i=(e instanceof I?"~":"")+"Set "+e.set)}console.error(n.toString(this.parser,!0)+":"+i)}}noViableAlt(e,t,n,i){return new tt(this.parser,e,e.get(i),e.LT(1),n,t)}getUniqueAlt(e){let t=Z.INVALID_ALT_NUMBER;for(let n=0;n<e.items.length;n++){const i=e.items[n];if(t===Z.INVALID_ALT_NUMBER)t=i.alt;else if(i.alt!==t)return Z.INVALID_ALT_NUMBER}return t}addDFAEdge(e,t,n,i){if(this.debug&&console.log("EDGE "+t+" -> "+i+" upon "+this.getTokenName(n)),null===i)return null;if(i=this.addDFAState(e,i),null===t||n<-1||n>this.atn.maxTokenType)return i;if(null===t.edges&&(t.edges=[]),t.edges[n+1]=i,this.debug){const t=null===this.parser?null:this.parser.literalNames,n=null===this.parser?null:this.parser.symbolicNames;console.log("DFA=\n"+e.toString(t,n))}return i}addDFAState(e,t){if(t===je.ERROR)return t;const n=e.states.get(t);return null!==n?(this.trace_atn_sim&&console.log("addDFAState "+t+" exists"),n):(t.stateNumber=e.states.length,t.configs.readOnly||(t.configs.optimizeConfigs(this),t.configs.setReadonly(!0)),this.trace_atn_sim&&console.log("addDFAState new "+t),e.states.add(t),this.debug&&console.log("adding new DFA state: "+t),t)}reportAttemptingFullContext(e,t,n,i,o){if(this.debug||this.retry_debug){const t=new k(i,o+1);console.log("reportAttemptingFullContext decision="+e.decision+":"+n+", input="+this.parser.getTokenStream().getText(t))}null!==this.parser&&this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser,e,i,o,t,n)}reportContextSensitivity(e,t,n,i,o){if(this.debug||this.retry_debug){const t=new k(i,o+1);console.log("reportContextSensitivity decision="+e.decision+":"+n+", input="+this.parser.getTokenStream().getText(t))}null!==this.parser&&this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser,e,i,o,t,n)}reportAmbiguity(e,t,n,i,o,a,r){if(this.debug||this.retry_debug){const e=new k(n,i+1);console.log("reportAmbiguity "+a+":"+r+", input="+this.parser.getTokenStream().getText(e))}null!==this.parser&&this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser,e,n,i,o,a,r)}}class ot{constructor(){this.cache=new j}add(e){if(e===w.EMPTY)return w.EMPTY;const t=this.cache.get(e)||null;return null!==t?t:(this.cache.set(e,e),e)}get(e){return this.cache.get(e)||null}get length(){return this.cache.length}}const at={ATN:Z,ATNDeserializer:Oe,LexerATNSimulator:Xe,ParserATNSimulator:it,PredictionMode:et,PredictionContextCache:ot};class rt{constructor(e,t,n){this.dfa=e,this.literalNames=t||[],this.symbolicNames=n||[]}toString(){if(null===this.dfa.s0)return null;let e="";const t=this.dfa.sortedStates();for(let n=0;n<t.length;n++){const i=t[n];if(null!==i.edges){const t=i.edges.length;for(let n=0;n<t;n++){const t=i.edges[n]||null;null!==t&&2147483647!==t.stateNumber&&(e=e.concat(this.getStateString(i)),e=e.concat("-"),e=e.concat(this.getEdgeLabel(n)),e=e.concat("->"),e=e.concat(this.getStateString(t)),e=e.concat("\n"))}}}return 0===e.length?null:e}getEdgeLabel(e){return 0===e?"EOF":null!==this.literalNames||null!==this.symbolicNames?this.literalNames[e-1]||this.symbolicNames[e-1]:String.fromCharCode(e-1)}getStateString(e){const t=(e.isAcceptState?":":"")+"s"+e.stateNumber+(e.requiresFullContext?"^":"");return e.isAcceptState?null!==e.predicates?t+"=>"+c(e.predicates):t+"=>"+e.prediction.toString():t}}class st extends rt{constructor(e){super(e,null)}getEdgeLabel(e){return"'"+String.fromCharCode(e)+"'"}}class lt{constructor(e,t){if(void 0===t&&(t=0),this.atnStartState=e,this.decision=t,this._states=new m,this.s0=null,this.precedenceDfa=!1,e instanceof ae&&e.isPrecedenceDecision){this.precedenceDfa=!0;const e=new Ve(null,new He);e.edges=[],e.isAcceptState=!1,e.requiresFullContext=!1,this.s0=e}}getPrecedenceStartState(e){if(!this.precedenceDfa)throw"Only precedence DFAs may contain a precedence start state.";return e<0||e>=this.s0.edges.length?null:this.s0.edges[e]||null}setPrecedenceStartState(e,t){if(!this.precedenceDfa)throw"Only precedence DFAs may contain a precedence start state.";e<0||(this.s0.edges[e]=t)}setPrecedenceDfa(e){if(this.precedenceDfa!==e){if(this._states=new m,e){const e=new Ve(null,new He);e.edges=[],e.isAcceptState=!1,e.requiresFullContext=!1,this.s0=e}else this.s0=null;this.precedenceDfa=e}}sortedStates(){return this._states.values().sort((function(e,t){return e.stateNumber-t.stateNumber}))}toString(e,t){return e=e||null,t=t||null,null===this.s0?"":new rt(this,e,t).toString()}toLexerString(){return null===this.s0?"":new st(this).toString()}get states(){return this._states}}const dt={DFA:lt,DFASerializer:rt,LexerDFASerializer:st,PredPrediction:Je},ct={PredictionContext:w},ut={Interval:k,IntervalSet:f};class mt{visitTerminal(e){}visitErrorNode(e){}enterEveryRule(e){}exitEveryRule(e){}}class ht{visit(e){return Array.isArray(e)?e.map((function(e){return e.accept(this)}),this):e.accept(this)}visitChildren(e){return e.children?this.visit(e.children):null}visitTerminal(e){}visitErrorNode(e){}}class bt{walk(e,t){if(t instanceof v||void 0!==t.isErrorNode&&t.isErrorNode())e.visitErrorNode(t);else if(t instanceof M)e.visitTerminal(t);else{this.enterRule(e,t);for(let n=0;n<t.getChildCount();n++){const i=t.getChild(n);this.walk(e,i)}this.exitRule(e,t)}}enterRule(e,t){const n=t.ruleContext;e.enterEveryRule(n),n.enterRule(e)}exitRule(e,t){const n=t.ruleContext;n.exitRule(e),e.exitEveryRule(n)}}bt.DEFAULT=new bt;const Tt={Trees:P,RuleNode:D,ErrorNode:v,TerminalNode:M,ParseTreeListener:mt,ParseTreeVisitor:ht,ParseTreeWalker:bt};class gt extends Pe{constructor(e){super({message:"",recognizer:e,input:e.getInputStream(),ctx:e._ctx}),this.offendingToken=e.getCurrentToken()}}class pt extends Pe{constructor(e,t,n){super({message:xt(t,n||null),recognizer:e,input:e.getInputStream(),ctx:e._ctx});const i=e._interp.atn.states[e.state].transitions[0];i instanceof be?(this.ruleIndex=i.ruleIndex,this.predicateIndex=i.predIndex):(this.ruleIndex=0,this.predicateIndex=0),this.predicate=t,this.offendingToken=e.getCurrentToken()}}function xt(e,t){return null!==t?t:"failed predicate: {"+e+"}?"}class kt extends _e{constructor(e){super(),e=e||!0,this.exactOnly=e}reportAmbiguity(e,t,n,i,o,a,r){if(this.exactOnly&&!o)return;const s="reportAmbiguity d="+this.getDecisionDescription(e,t)+": ambigAlts="+this.getConflictingAlts(a,r)+", input='"+e.getTokenStream().getText(new k(n,i))+"'";e.notifyErrorListeners(s)}reportAttemptingFullContext(e,t,n,i,o,a){const r="reportAttemptingFullContext d="+this.getDecisionDescription(e,t)+", input='"+e.getTokenStream().getText(new k(n,i))+"'";e.notifyErrorListeners(r)}reportContextSensitivity(e,t,n,i,o,a){const r="reportContextSensitivity d="+this.getDecisionDescription(e,t)+", input='"+e.getTokenStream().getText(new k(n,i))+"'";e.notifyErrorListeners(r)}getDecisionDescription(e,t){const n=t.decision,i=t.atnStartState.ruleIndex,o=e.ruleNames;if(i<0||i>=o.length)return""+n;const a=o[i]||null;return null===a||0===a.length?""+n:`${n} (${a})`}getConflictingAlts(e,t){if(null!==e)return e;const n=new W;for(let e=0;e<t.items.length;e++)n.add(t.items[e].alt);return`{${n.values().join(", ")}}`}}class ft extends Error{constructor(){super(),Error.captureStackTrace(this,ft)}}class St{reset(e){}recoverInline(e){}recover(e,t){}sync(e){}inErrorRecoveryMode(e){}reportError(e){}}class Ct extends St{constructor(){super(),this.errorRecoveryMode=!1,this.lastErrorIndex=-1,this.lastErrorStates=null,this.nextTokensContext=null,this.nextTokenState=0}reset(e){this.endErrorCondition(e)}beginErrorCondition(e){this.errorRecoveryMode=!0}inErrorRecoveryMode(e){return this.errorRecoveryMode}endErrorCondition(e){this.errorRecoveryMode=!1,this.lastErrorStates=null,this.lastErrorIndex=-1}reportMatch(e){this.endErrorCondition(e)}reportError(e,t){this.inErrorRecoveryMode(e)||(this.beginErrorCondition(e),t instanceof tt?this.reportNoViableAlternative(e,t):t instanceof gt?this.reportInputMismatch(e,t):t instanceof pt?this.reportFailedPredicate(e,t):(console.log("unknown recognition error type: "+t.constructor.name),console.log(t.stack),e.notifyErrorListeners(t.getOffendingToken(),t.getMessage(),t)))}recover(e,t){this.lastErrorIndex===e.getInputStream().index&&null!==this.lastErrorStates&&this.lastErrorStates.indexOf(e.state)>=0&&e.consume(),this.lastErrorIndex=e._input.index,null===this.lastErrorStates&&(this.lastErrorStates=[]),this.lastErrorStates.push(e.state);const n=this.getErrorRecoverySet(e);this.consumeUntil(e,n)}sync(t){if(this.inErrorRecoveryMode(t))return;const n=t._interp.atn.states[t.state],i=t.getTokenStream().LA(1),o=t.atn.nextTokens(n);if(o.contains(i))return this.nextTokensContext=null,void(this.nextTokenState=S.INVALID_STATE_NUMBER);if(o.contains(e.EPSILON))null===this.nextTokensContext&&(this.nextTokensContext=t._ctx,this.nextTokensState=t._stateNumber);else switch(n.stateType){case S.BLOCK_START:case S.STAR_BLOCK_START:case S.PLUS_BLOCK_START:case S.STAR_LOOP_ENTRY:if(null!==this.singleTokenDeletion(t))return;throw new gt(t);case S.PLUS_LOOP_BACK:case S.STAR_LOOP_BACK:{this.reportUnwantedToken(t);const e=new f;e.addSet(t.getExpectedTokens());const n=e.addSet(this.getErrorRecoverySet(t));this.consumeUntil(t,n)}}}reportNoViableAlternative(t,n){const i=t.getTokenStream();let o;o=null!==i?n.startToken.type===e.EOF?"<EOF>":i.getText(new k(n.startToken.tokenIndex,n.offendingToken.tokenIndex)):"<unknown input>";const a="no viable alternative at input "+this.escapeWSAndQuote(o);t.notifyErrorListeners(a,n.offendingToken,n)}reportInputMismatch(e,t){const n="mismatched input "+this.getTokenErrorDisplay(t.offendingToken)+" expecting "+t.getExpectedTokens().toString(e.literalNames,e.symbolicNames);e.notifyErrorListeners(n,t.offendingToken,t)}reportFailedPredicate(e,t){const n="rule "+e.ruleNames[e._ctx.ruleIndex]+" "+t.message;e.notifyErrorListeners(n,t.offendingToken,t)}reportUnwantedToken(e){if(this.inErrorRecoveryMode(e))return;this.beginErrorCondition(e);const t=e.getCurrentToken(),n="extraneous input "+this.getTokenErrorDisplay(t)+" expecting "+this.getExpectedTokens(e).toString(e.literalNames,e.symbolicNames);e.notifyErrorListeners(n,t,null)}reportMissingToken(e){if(this.inErrorRecoveryMode(e))return;this.beginErrorCondition(e);const t=e.getCurrentToken(),n="missing "+this.getExpectedTokens(e).toString(e.literalNames,e.symbolicNames)+" at "+this.getTokenErrorDisplay(t);e.notifyErrorListeners(n,t,null)}recoverInline(e){const t=this.singleTokenDeletion(e);if(null!==t)return e.consume(),t;if(this.singleTokenInsertion(e))return this.getMissingSymbol(e);throw new gt(e)}singleTokenInsertion(e){const t=e.getTokenStream().LA(1),n=e._interp.atn,i=n.states[e.state].transitions[0].target;return!!n.nextTokens(i,e._ctx).contains(t)&&(this.reportMissingToken(e),!0)}singleTokenDeletion(e){const t=e.getTokenStream().LA(2);if(this.getExpectedTokens(e).contains(t)){this.reportUnwantedToken(e),e.consume();const t=e.getCurrentToken();return this.reportMatch(e),t}return null}getMissingSymbol(t){const n=t.getCurrentToken(),i=this.getExpectedTokens(t).first();let o;o=i===e.EOF?"<missing EOF>":"<missing "+t.literalNames[i]+">";let a=n;const r=t.getTokenStream().LT(-1);return a.type===e.EOF&&null!==r&&(a=r),t.getTokenFactory().create(a.source,i,o,e.DEFAULT_CHANNEL,-1,-1,a.line,a.column)}getExpectedTokens(e){return e.getExpectedTokens()}getTokenErrorDisplay(t){if(null===t)return"<no token>";let n=t.text;return null===n&&(n=t.type===e.EOF?"<EOF>":"<"+t.type+">"),this.escapeWSAndQuote(n)}escapeWSAndQuote(e){return"'"+(e=(e=(e=e.replace(/\n/g,"\\n")).replace(/\r/g,"\\r")).replace(/\t/g,"\\t"))+"'"}getErrorRecoverySet(t){const n=t._interp.atn;let i=t._ctx;const o=new f;for(;null!==i&&i.invokingState>=0;){const e=n.states[i.invokingState].transitions[0],t=n.nextTokens(e.followState);o.addSet(t),i=i.parentCtx}return o.removeOne(e.EPSILON),o}consumeUntil(t,n){let i=t.getTokenStream().LA(1);for(;i!==e.EOF&&!n.contains(i);)t.consume(),i=t.getTokenStream().LA(1)}}class Et extends Ct{constructor(){super()}recover(e,t){let n=e._ctx;for(;null!==n;)n.exception=t,n=n.parentCtx;throw new ft(t)}recoverInline(e){this.recover(e,new gt(e))}sync(e){}}const At={RecognitionException:Pe,NoViableAltException:tt,LexerNoViableAltException:Be,InputMismatchException:gt,FailedPredicateException:pt,DiagnosticErrorListener:kt,BailErrorStrategy:Et,DefaultErrorStrategy:Ct,ErrorListener:_e};class yt{constructor(e,t){if(this.name="<empty>",this.strdata=e,this.decodeToUnicodeCodePoints=t||!1,this._index=0,this.data=[],this.decodeToUnicodeCodePoints)for(let e=0;e<this.strdata.length;){const t=this.strdata.codePointAt(e);this.data.push(t),e+=t<=65535?1:2}else{this.data=new Array(this.strdata.length);for(let e=0;e<this.strdata.length;e++)this.data[e]=this.strdata.charCodeAt(e)}this._size=this.data.length}reset(){this._index=0}consume(){if(this._index>=this._size)throw"cannot consume EOF";this._index+=1}LA(t){if(0===t)return 0;t<0&&(t+=1);const n=this._index+t-1;return n<0||n>=this._size?e.EOF:this.data[n]}LT(e){return this.LA(e)}mark(){return-1}release(e){}seek(e){e<=this._index?this._index=e:this._index=Math.min(e,this._size)}getText(e,t){if(t>=this._size&&(t=this._size-1),e>=this._size)return"";if(this.decodeToUnicodeCodePoints){let n="";for(let i=e;i<=t;i++)n+=String.fromCodePoint(this.data[i]);return n}return this.strdata.slice(e,t+1)}toString(){return this.strdata}get index(){return this._index}get size(){return this._size}}class It extends yt{constructor(e,t){super(e,t)}}var Lt=a(92);const Ot="undefined"!=typeof process&&null!=process.versions&&null!=process.versions.node;class _t extends It{static fromPath(e,t,n){if(!Ot)throw new Error("FileStream is only available when running in Node!");Lt.readFile(e,t,(function(e,t){let i=null;null!==t&&(i=new yt(t,!0)),n(e,i)}))}constructor(e,t,n){if(!Ot)throw new Error("FileStream is only available when running in Node!");super(Lt.readFileSync(e,t||"utf-8"),n),this.fileName=e}}const Nt={fromString:function(e){return new yt(e,!0)},fromBlob:function(e,t,n,i){const o=new window.FileReader;o.onload=function(e){const t=new yt(e.target.result,!0);n(t)},o.onerror=i,o.readAsText(e,t)},fromBuffer:function(e,t){return new yt(e.toString(t),!0)},fromPath:function(e,t,n){_t.fromPath(e,t,n)},fromPathSync:function(e,t){return new _t(e,t)}},Rt={arrayToString:c,stringToCharArray:function(e){let t=new Uint16Array(e.length);for(let n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}};class Dt{}class Mt extends Dt{constructor(e){super(),this.tokenSource=e,this.tokens=[],this.index=-1,this.fetchedEOF=!1}mark(){return 0}release(e){}reset(){this.seek(0)}seek(e){this.lazyInit(),this.index=this.adjustSeekIndex(e)}get size(){return this.tokens.length}get(e){return this.lazyInit(),this.tokens[e]}consume(){let t=!1;if(t=this.index>=0&&(this.fetchedEOF?this.index<this.tokens.length-1:this.index<this.tokens.length),!t&&this.LA(1)===e.EOF)throw"cannot consume EOF";this.sync(this.index+1)&&(this.index=this.adjustSeekIndex(this.index+1))}sync(e){const t=e-this.tokens.length+1;return!(t>0)||this.fetch(t)>=t}fetch(t){if(this.fetchedEOF)return 0;for(let n=0;n<t;n++){const t=this.tokenSource.nextToken();if(t.tokenIndex=this.tokens.length,this.tokens.push(t),t.type===e.EOF)return this.fetchedEOF=!0,n+1}return t}getTokens(t,n,i){if(void 0===i&&(i=null),t<0||n<0)return null;this.lazyInit();const o=[];n>=this.tokens.length&&(n=this.tokens.length-1);for(let a=t;a<n;a++){const t=this.tokens[a];if(t.type===e.EOF)break;(null===i||i.contains(t.type))&&o.push(t)}return o}LA(e){return this.LT(e).type}LB(e){return this.index-e<0?null:this.tokens[this.index-e]}LT(e){if(this.lazyInit(),0===e)return null;if(e<0)return this.LB(-e);const t=this.index+e-1;return this.sync(t),t>=this.tokens.length?this.tokens[this.tokens.length-1]:this.tokens[t]}adjustSeekIndex(e){return e}lazyInit(){-1===this.index&&this.setup()}setup(){this.sync(0),this.index=this.adjustSeekIndex(0)}setTokenSource(e){this.tokenSource=e,this.tokens=[],this.index=-1,this.fetchedEOF=!1}nextTokenOnChannel(t,n){if(this.sync(t),t>=this.tokens.length)return-1;let i=this.tokens[t];for(;i.channel!==this.channel;){if(i.type===e.EOF)return-1;t+=1,this.sync(t),i=this.tokens[t]}return t}previousTokenOnChannel(e,t){for(;e>=0&&this.tokens[e].channel!==t;)e-=1;return e}getHiddenTokensToRight(e,t){if(void 0===t&&(t=-1),this.lazyInit(),e<0||e>=this.tokens.length)throw e+" not in 0.."+this.tokens.length-1;const n=this.nextTokenOnChannel(e+1,we.DEFAULT_TOKEN_CHANNEL),i=e+1,o=-1===n?this.tokens.length-1:n;return this.filterForChannel(i,o,t)}getHiddenTokensToLeft(e,t){if(void 0===t&&(t=-1),this.lazyInit(),e<0||e>=this.tokens.length)throw e+" not in 0.."+this.tokens.length-1;const n=this.previousTokenOnChannel(e-1,we.DEFAULT_TOKEN_CHANNEL);if(n===e-1)return null;const i=n+1,o=e-1;return this.filterForChannel(i,o,t)}filterForChannel(e,t,n){const i=[];for(let o=e;o<t+1;o++){const e=this.tokens[o];-1===n?e.channel!==we.DEFAULT_TOKEN_CHANNEL&&i.push(e):e.channel===n&&i.push(e)}return 0===i.length?null:i}getSourceName(){return this.tokenSource.getSourceName()}getText(t){this.lazyInit(),this.fill(),t||(t=new k(0,this.tokens.length-1));let n=t.start;n instanceof e&&(n=n.tokenIndex);let i=t.stop;if(i instanceof e&&(i=i.tokenIndex),null===n||null===i||n<0||i<0)return"";i>=this.tokens.length&&(i=this.tokens.length-1);let o="";for(let t=n;t<i+1;t++){const n=this.tokens[t];if(n.type===e.EOF)break;o+=n.text}return o}fill(){for(this.lazyInit();1e3===this.fetch(1e3););}}Object.defineProperty(Mt,"size",{get:function(){return this.tokens.length}});class vt extends Mt{constructor(t,n){super(t),this.channel=void 0===n?e.DEFAULT_CHANNEL:n}adjustSeekIndex(e){return this.nextTokenOnChannel(e,this.channel)}LB(e){if(0===e||this.index-e<0)return null;let t=this.index,n=1;for(;n<=e;)t=this.previousTokenOnChannel(t-1,this.channel),n+=1;return t<0?null:this.tokens[t]}LT(e){if(this.lazyInit(),0===e)return null;if(e<0)return this.LB(-e);let t=this.index,n=1;for(;n<e;)this.sync(t+1)&&(t=this.nextTokenOnChannel(t+1,this.channel)),n+=1;return this.tokens[t]}getNumberOfOnChannelTokens(){let t=0;this.fill();for(let n=0;n<this.tokens.length;n++){const i=this.tokens[n];if(i.channel===this.channel&&(t+=1),i.type===e.EOF)break}return t}}class Ft extends mt{constructor(e){super(),this.parser=e}enterEveryRule(e){console.log("enter   "+this.parser.ruleNames[e.ruleIndex]+", LT(1)="+this.parser._input.LT(1).text)}visitTerminal(e){console.log("consume "+e.symbol+" rule "+this.parser.ruleNames[this.parser._ctx.ruleIndex])}exitEveryRule(e){console.log("exit    "+this.parser.ruleNames[e.ruleIndex]+", LT(1)="+this.parser._input.LT(1).text)}}class Pt extends De{constructor(e){super(),this._input=null,this._errHandler=new Ct,this._precedenceStack=[],this._precedenceStack.push(0),this._ctx=null,this.buildParseTrees=!0,this._tracer=null,this._parseListeners=null,this._syntaxErrors=0,this.setInputStream(e)}reset(){null!==this._input&&this._input.seek(0),this._errHandler.reset(this),this._ctx=null,this._syntaxErrors=0,this.setTrace(!1),this._precedenceStack=[],this._precedenceStack.push(0),null!==this._interp&&this._interp.reset()}match(e){let t=this.getCurrentToken();return t.type===e?(this._errHandler.reportMatch(this),this.consume()):(t=this._errHandler.recoverInline(this),this.buildParseTrees&&-1===t.tokenIndex&&this._ctx.addErrorNode(t)),t}matchWildcard(){let e=this.getCurrentToken();return e.type>0?(this._errHandler.reportMatch(this),this.consume()):(e=this._errHandler.recoverInline(this),this.buildParseTrees&&-1===e.tokenIndex&&this._ctx.addErrorNode(e)),e}getParseListeners(){return this._parseListeners||[]}addParseListener(e){if(null===e)throw"listener";null===this._parseListeners&&(this._parseListeners=[]),this._parseListeners.push(e)}removeParseListener(e){if(null!==this._parseListeners){const t=this._parseListeners.indexOf(e);t>=0&&this._parseListeners.splice(t,1),0===this._parseListeners.length&&(this._parseListeners=null)}}removeParseListeners(){this._parseListeners=null}triggerEnterRuleEvent(){if(null!==this._parseListeners){const e=this._ctx;this._parseListeners.forEach((function(t){t.enterEveryRule(e),e.enterRule(t)}))}}triggerExitRuleEvent(){if(null!==this._parseListeners){const e=this._ctx;this._parseListeners.slice(0).reverse().forEach((function(t){e.exitRule(t),t.exitEveryRule(e)}))}}getTokenFactory(){return this._input.tokenSource._factory}setTokenFactory(e){this._input.tokenSource._factory=e}getATNWithBypassAlts(){const e=this.getSerializedATN();if(null===e)throw"The current parser does not support an ATN with bypass alternatives.";let t=this.bypassAltsAtnCache[e];if(null===t){const n=new pe;n.generateRuleBypassTransitions=!0,t=new Oe(n).deserialize(e),this.bypassAltsAtnCache[e]=t}return t}getInputStream(){return this.getTokenStream()}setInputStream(e){this.setTokenStream(e)}getTokenStream(){return this._input}setTokenStream(e){this._input=null,this.reset(),this._input=e}get syntaxErrorsCount(){return this._syntaxErrors}getCurrentToken(){return this._input.LT(1)}notifyErrorListeners(e,t,n){n=n||null,null===(t=t||null)&&(t=this.getCurrentToken()),this._syntaxErrors+=1;const i=t.line,o=t.column;this.getErrorListenerDispatch().syntaxError(this,t,i,o,e,n)}consume(){const t=this.getCurrentToken();t.type!==e.EOF&&this.getInputStream().consume();const n=null!==this._parseListeners&&this._parseListeners.length>0;if(this.buildParseTrees||n){let e;e=this._errHandler.inErrorRecoveryMode(this)?this._ctx.addErrorNode(t):this._ctx.addTokenNode(t),e.invokingState=this.state,n&&this._parseListeners.forEach((function(t){e instanceof v||void 0!==e.isErrorNode&&e.isErrorNode()?t.visitErrorNode(e):e instanceof M&&t.visitTerminal(e)}))}return t}addContextToParseTree(){null!==this._ctx.parentCtx&&this._ctx.parentCtx.addChild(this._ctx)}enterRule(e,t,n){this.state=t,this._ctx=e,this._ctx.start=this._input.LT(1),this.buildParseTrees&&this.addContextToParseTree(),this.triggerEnterRuleEvent()}exitRule(){this._ctx.stop=this._input.LT(-1),this.triggerExitRuleEvent(),this.state=this._ctx.invokingState,this._ctx=this._ctx.parentCtx}enterOuterAlt(e,t){e.setAltNumber(t),this.buildParseTrees&&this._ctx!==e&&null!==this._ctx.parentCtx&&(this._ctx.parentCtx.removeLastChild(),this._ctx.parentCtx.addChild(e)),this._ctx=e}getPrecedence(){return 0===this._precedenceStack.length?-1:this._precedenceStack[this._precedenceStack.length-1]}enterRecursionRule(e,t,n,i){this.state=t,this._precedenceStack.push(i),this._ctx=e,this._ctx.start=this._input.LT(1),this.triggerEnterRuleEvent()}pushNewRecursionContext(e,t,n){const i=this._ctx;i.parentCtx=e,i.invokingState=t,i.stop=this._input.LT(-1),this._ctx=e,this._ctx.start=i.start,this.buildParseTrees&&this._ctx.addChild(i),this.triggerEnterRuleEvent()}unrollRecursionContexts(e){this._precedenceStack.pop(),this._ctx.stop=this._input.LT(-1);const t=this._ctx,n=this.getParseListeners();if(null!==n&&n.length>0)for(;this._ctx!==e;)this.triggerExitRuleEvent(),this._ctx=this._ctx.parentCtx;else this._ctx=e;t.parentCtx=e,this.buildParseTrees&&null!==e&&e.addChild(t)}getInvokingContext(e){let t=this._ctx;for(;null!==t;){if(t.ruleIndex===e)return t;t=t.parentCtx}return null}precpred(e,t){return t>=this._precedenceStack[this._precedenceStack.length-1]}inContext(e){return!1}isExpectedToken(t){const n=this._interp.atn;let i=this._ctx;const o=n.states[this.state];let a=n.nextTokens(o);if(a.contains(t))return!0;if(!a.contains(e.EPSILON))return!1;for(;null!==i&&i.invokingState>=0&&a.contains(e.EPSILON);){const e=n.states[i.invokingState].transitions[0];if(a=n.nextTokens(e.followState),a.contains(t))return!0;i=i.parentCtx}return!(!a.contains(e.EPSILON)||t!==e.EOF)}getExpectedTokens(){return this._interp.atn.getExpectedTokens(this.state,this._ctx)}getExpectedTokensWithinCurrentRule(){const e=this._interp.atn,t=e.states[this.state];return e.nextTokens(t)}getRuleIndex(e){const t=this.getRuleIndexMap()[e];return null!==t?t:-1}getRuleInvocationStack(e){null===(e=e||null)&&(e=this._ctx);const t=[];for(;null!==e;){const n=e.ruleIndex;n<0?t.push("n/a"):t.push(this.ruleNames[n]),e=e.parentCtx}return t}getDFAStrings(){return this._interp.decisionToDFA.toString()}dumpDFA(){let e=!1;for(let t=0;t<this._interp.decisionToDFA.length;t++){const n=this._interp.decisionToDFA[t];n.states.length>0&&(e&&console.log(),this.printer.println("Decision "+n.decision+":"),this.printer.print(n.toString(this.literalNames,this.symbolicNames)),e=!0)}}getSourceName(){return this._input.sourceName}setTrace(e){e?(null!==this._tracer&&this.removeParseListener(this._tracer),this._tracer=new Ft(this),this.addParseListener(this._tracer)):(this.removeParseListener(this._tracer),this._tracer=null)}}Pt.bypassAltsAtnCache={};class Bt extends M{constructor(e){super(),this.parentCtx=null,this.symbol=e}getChild(e){return null}getSymbol(){return this.symbol}getParent(){return this.parentCtx}getPayload(){return this.symbol}getSourceInterval(){if(null===this.symbol)return k.INVALID_INTERVAL;const e=this.symbol.tokenIndex;return new k(e,e)}getChildCount(){return 0}accept(e){return e.visitTerminal(this)}getText(){return this.symbol.text}toString(){return this.symbol.type===e.EOF?"<EOF>":this.symbol.text}}class wt extends Bt{constructor(e){super(e)}isErrorNode(){return!0}accept(e){return e.visitErrorNode(this)}}class Ut extends B{constructor(e,t){super(e,t),this.children=null,this.start=null,this.stop=null,this.exception=null}copyFrom(e){this.parentCtx=e.parentCtx,this.invokingState=e.invokingState,this.children=null,this.start=e.start,this.stop=e.stop,e.children&&(this.children=[],e.children.map((function(e){e instanceof wt&&(this.children.push(e),e.parentCtx=this)}),this))}enterRule(e){}exitRule(e){}addChild(e){return null===this.children&&(this.children=[]),this.children.push(e),e}removeLastChild(){null!==this.children&&this.children.pop()}addTokenNode(e){const t=new Bt(e);return this.addChild(t),t.parentCtx=this,t}addErrorNode(e){const t=new wt(e);return this.addChild(t),t.parentCtx=this,t}getChild(e,t){if(t=t||null,null===this.children||e<0||e>=this.children.length)return null;if(null===t)return this.children[e];for(let n=0;n<this.children.length;n++){const i=this.children[n];if(i instanceof t){if(0===e)return i;e-=1}}return null}getToken(e,t){if(null===this.children||t<0||t>=this.children.length)return null;for(let n=0;n<this.children.length;n++){const i=this.children[n];if(i instanceof M&&i.symbol.type===e){if(0===t)return i;t-=1}}return null}getTokens(e){if(null===this.children)return[];{const t=[];for(let n=0;n<this.children.length;n++){const i=this.children[n];i instanceof M&&i.symbol.type===e&&t.push(i)}return t}}getTypedRuleContext(e,t){return this.getChild(t,e)}getTypedRuleContexts(e){if(null===this.children)return[];{const t=[];for(let n=0;n<this.children.length;n++){const i=this.children[n];i instanceof e&&t.push(i)}return t}}getChildCount(){return null===this.children?0:this.children.length}getSourceInterval(){return null===this.start||null===this.stop?k.INVALID_INTERVAL:new k(this.start.tokenIndex,this.stop.tokenIndex)}}B.EMPTY=new Ut;class qt{constructor(e){this.tokens=e,this.programs=new Map}getTokenStream(){return this.tokens}insertAfter(e,t){let n,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:qt.DEFAULT_PROGRAM_NAME;n="number"==typeof e?e:e.tokenIndex;let o=this.getProgram(i),a=new Kt(this.tokens,n,o.length,t);o.push(a)}insertBefore(e,t){let n,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:qt.DEFAULT_PROGRAM_NAME;n="number"==typeof e?e:e.tokenIndex;const o=this.getProgram(i),a=new Gt(this.tokens,n,o.length,t);o.push(a)}replaceSingle(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:qt.DEFAULT_PROGRAM_NAME;this.replace(e,e,t,n)}replace(e,t,n){let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:qt.DEFAULT_PROGRAM_NAME;if("number"!=typeof e&&(e=e.tokenIndex),"number"!=typeof t&&(t=t.tokenIndex),e>t||e<0||t<0||t>=this.tokens.size)throw new RangeError(`replace: range invalid: ${e}..${t}(size=${this.tokens.size})`);let o=this.getProgram(i),a=new Wt(this.tokens,e,t,o.length,n);o.push(a)}delete(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:qt.DEFAULT_PROGRAM_NAME;void 0===t&&(t=e),this.replace(e,t,null,n)}getProgram(e){let t=this.programs.get(e);return null==t&&(t=this.initializeProgram(e)),t}initializeProgram(e){const t=[];return this.programs.set(e,t),t}getText(t){let n,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:qt.DEFAULT_PROGRAM_NAME;n=t instanceof k?t:new k(0,this.tokens.size-1),"string"==typeof t&&(i=t);const o=this.programs.get(i);let a=n.start,r=n.stop;if(r>this.tokens.size-1&&(r=this.tokens.size-1),a<0&&(a=0),null==o||0===o.length)return this.tokens.getText(new k(a,r));let s=[],l=this.reduceToSingleOperationPerIndex(o),d=a;for(;d<=r&&d<this.tokens.size;){let t=l.get(d);l.delete(d);let n=this.tokens.get(d);null==t?(n.type!==e.EOF&&s.push(String(n.text)),d++):d=t.execute(s)}if(r===this.tokens.size-1)for(const e of l.values())e.index>=this.tokens.size-1&&s.push(e.text.toString());return s.join("")}reduceToSingleOperationPerIndex(e){for(let t=0;t<e.length;t++){let n=e[t];if(null==n)continue;if(!(n instanceof Wt))continue;let i=n,o=this.getKindOfOps(e,Gt,t);for(let t of o)t.index===i.index?(e[t.instructionIndex]=void 0,i.text=t.text.toString()+(null!=i.text?i.text.toString():"")):t.index>i.index&&t.index<=i.lastIndex&&(e[t.instructionIndex]=void 0);let a=this.getKindOfOps(e,Wt,t);for(let t of a){if(t.index>=i.index&&t.lastIndex<=i.lastIndex){e[t.instructionIndex]=void 0;continue}let n=t.lastIndex<i.index||t.index>i.lastIndex;if(null!=t.text||null!=i.text||n){if(!n)throw new Error(`replace op boundaries of ${i} overlap with previous ${t}`)}else e[t.instructionIndex]=void 0,i.index=Math.min(t.index,i.index),i.lastIndex=Math.max(t.lastIndex,i.lastIndex)}}for(let t=0;t<e.length;t++){let n=e[t];if(null==n)continue;if(!(n instanceof Gt))continue;let i=n,o=this.getKindOfOps(e,Gt,t);for(let t of o)t.index===i.index&&(t instanceof Kt?(i.text=this.catOpText(t.text,i.text),e[t.instructionIndex]=void 0):t instanceof Gt&&(i.text=this.catOpText(i.text,t.text),e[t.instructionIndex]=void 0));let a=this.getKindOfOps(e,Wt,t);for(let n of a)if(i.index!==n.index){if(i.index>=n.index&&i.index<=n.lastIndex)throw new Error(`insert op ${i} within boundaries of previous ${n}`)}else n.text=this.catOpText(i.text,n.text),e[t]=void 0}let t=new Map;for(let n of e)if(null!=n){if(null!=t.get(n.index))throw new Error("should only be one op per index");t.set(n.index,n)}return t}catOpText(e,t){let n="",i="";return null!=e&&(n=e.toString()),null!=t&&(i=t.toString()),n+i}getKindOfOps(e,t,n){return e.slice(0,n).filter((e=>e&&e instanceof t))}}var Ht,Vt,jt;Ht=qt,jt="default",(Vt=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var i=n.call(e,"string");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(Vt="DEFAULT_PROGRAM_NAME"))in Ht?Object.defineProperty(Ht,Vt,{value:jt,enumerable:!0,configurable:!0,writable:!0}):Ht[Vt]=jt;class Yt{constructor(e,t,n,i){this.tokens=e,this.instructionIndex=n,this.index=t,this.text=void 0===i?"":i}toString(){let e=this.constructor.name;const t=e.indexOf("$");return e=e.substring(t+1,e.length),"<"+e+"@"+this.tokens.get(this.index)+':"'+this.text+'">'}}class Gt extends Yt{constructor(e,t,n,i){super(e,t,n,i)}execute(t){return this.text&&t.push(this.text.toString()),this.tokens.get(this.index).type!==e.EOF&&t.push(String(this.tokens.get(this.index).text)),this.index+1}}class Kt extends Gt{constructor(e,t,n,i){super(e,t+1,n,i)}}class Wt extends Yt{constructor(e,t,n,i,o){super(e,t,i,o),this.lastIndex=n}execute(e){return this.text&&e.push(this.text.toString()),this.lastIndex+1}toString(){return null==this.text?"<DeleteOp@"+this.tokens.get(this.index)+".."+this.tokens.get(this.lastIndex)+">":"<ReplaceOp@"+this.tokens.get(this.index)+".."+this.tokens.get(this.lastIndex)+':"'+this.text+'">'}}const zt={atn:at,dfa:dt,context:ct,misc:ut,tree:Tt,error:At,Token:e,CommonToken:Me,CharStreams:Nt,CharStream:It,InputStream:It,CommonTokenStream:vt,Lexer:we,Parser:Pt,ParserRuleContext:Ut,Interval:k,IntervalSet:f,LL1Analyzer:z,Utils:Rt,TokenStreamRewriter:qt}})();var s=r.dx,l=r.q2,d=r.Gy,c=r.c7,u=r._7,m=r.cK,h=r.zs,b=r.hW,T=r.x1,g=r.z5,p=r._b,x=r.$F,k=r._T,f=r.db,S=r._x,C=r.WU},function(e,t,n){"use strict";n.d(t,"b",(function(){return a})),n.d(t,"a",(function(){return r}));let i="undefined"!=typeof document&&document.location&&document.location.hash.indexOf("pseudo=true")>=0;function o(e,t){let n;return n=0===t.length?e:e.replace(/\{(\d+)\}/g,((e,n)=>{const i=n[0],o=t[i];let a=e;return"string"==typeof o?a=o:"number"!=typeof o&&"boolean"!=typeof o&&null!=o||(a=String(o)),a})),i&&(n="［"+n.replace(/[aouei]/g,"$&$&")+"］"),n}function a(e,t,...n){return o(t,n)}function r(e){}},,,function(e,t,n){"use strict";(function(e,i){n.d(t,"a",(function(){return C})),n.d(t,"d",(function(){return L})),n.d(t,"b",(function(){return O})),n.d(t,"c",(function(){return _}));var o,a=n(2);const r="en";let s,l,d,c=!1,u=!1,m=!1,h=!1,b=!1,T=!1,g=!1,p=!1,x=!1,k=!1,f=r,S=r;const C="object"==typeof self?self:"object"==typeof e?e:{};let E;void 0!==C.vscode&&void 0!==C.vscode.process?E=C.vscode.process:void 0!==i&&(E=i);const A="string"==typeof(null===(o=null==E?void 0:E.versions)||void 0===o?void 0:o.electron),y=A&&"renderer"===(null==E?void 0:E.type);if("object"!=typeof navigator||y)if("object"==typeof E){c="win32"===E.platform,u="darwin"===E.platform,m="linux"===E.platform,h=m&&!!E.env.SNAP&&!!E.env.SNAP_REVISION,g=A,x=!!E.env.CI||!!E.env.BUILD_ARTIFACTSTAGINGDIRECTORY,s=r,f=r;const e=E.env.VSCODE_NLS_CONFIG;if(e)try{const t=JSON.parse(e),n=t.availableLanguages["*"];s=t.locale,S=t.osLocale,f=n||r,l=t._translationsConfigFile}catch(e){}b=!0}else console.error("Unable to resolve platform.");else{d=navigator.userAgent,c=d.indexOf("Windows")>=0,u=d.indexOf("Macintosh")>=0,p=(d.indexOf("Macintosh")>=0||d.indexOf("iPad")>=0||d.indexOf("iPhone")>=0)&&!!navigator.maxTouchPoints&&navigator.maxTouchPoints>0,m=d.indexOf("Linux")>=0,k=(null==d?void 0:d.indexOf("Mobi"))>=0,T=!0;s=a.a(a.b({key:"ensureLoaderPluginIsLoaded",comment:["{Locked}"]},"_"))||r,f=s,S=navigator.language}let I=0;u?I=1:c?I=3:m&&(I=2);const L=c,O=u,_=T,N=(T&&C.importScripts,d),R="function"==typeof C.postMessage&&!C.importScripts;(()=>{if(R){const e=[];C.addEventListener("message",(t=>{if(t.data&&t.data.vscodeScheduleAsyncWork)for(let n=0,i=e.length;n<i;n++){const i=e[n];if(i.id===t.data.vscodeScheduleAsyncWork)return e.splice(n,1),void i.callback()}}));let t=0;return n=>{const i=++t;e.push({id:i,callback:n}),C.postMessage({vscodeScheduleAsyncWork:i},"*")}}})();const D=!!(N&&N.indexOf("Chrome")>=0);N&&N.indexOf("Firefox"),!D&&N&&N.indexOf("Safari"),N&&N.indexOf("Edg/"),N&&N.indexOf("Android")}).call(this,n(13),n(9))},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return a})),n.d(t,"c",(function(){return r})),n.d(t,"d",(function(){return s}));var i=function(e,t){return i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},i(e,t)};function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var a=function(){return a=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},a.apply(this,arguments)};function r(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(i=Object.getOwnPropertySymbols(e);o<i.length;o++)t.indexOf(i[o])<0&&Object.prototype.propertyIsEnumerable.call(e,i[o])&&(n[i[o]]=e[i[o]])}return n}Object.create;function s(e,t,n){if(n||2===arguments.length)for(var i,o=0,a=t.length;o<a;o++)!i&&o in t||(i||(i=Array.prototype.slice.call(t,0,o)),i[o]=t[o]);return e.concat(i||Array.prototype.slice.call(t))}Object.create;"function"==typeof SuppressedError&&SuppressedError},,function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return a})),n.d(t,"b",(function(){return r})),n.d(t,"c",(function(){return s}));var i=n(5);let o;if(void 0!==i.a.vscode&&void 0!==i.a.vscode.process){const e=i.a.vscode.process;o={get platform(){return e.platform},get arch(){return e.arch},get env(){return e.env},cwd:()=>e.cwd()}}else o=void 0!==e?{get platform(){return e.platform},get arch(){return e.arch},get env(){return e.env},cwd:()=>e.env.VSCODE_CWD||e.cwd()}:{get platform(){return i.d?"win32":i.b?"darwin":"linux"},get arch(){},get env(){return{}},cwd:()=>"/"};const a=o.cwd,r=o.env,s=o.platform}).call(this,n(9))},function(e,t){var n,i,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{i="function"==typeof clearTimeout?clearTimeout:r}catch(e){i=r}}();var l,d=[],c=!1,u=-1;function m(){c&&l&&(c=!1,l.length?d=l.concat(d):u=-1,d.length&&h())}function h(){if(!c){var e=s(m);c=!0;for(var t=d.length;t;){for(l=d,d=[];++u<t;)l&&l[u].run();u=-1,t=d.length}l=null,c=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===r||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{return i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function b(e,t){this.fun=e,this.array=t}function T(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];d.push(new b(e,t)),1!==d.length||c||s(h)},b.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=T,o.addListener=T,o.once=T,o.off=T,o.removeListener=T,o.removeAllListeners=T,o.emit=T,o.prependListener=T,o.prependOnceListener=T,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t){function n(t){return e.exports=n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.__esModule=!0,e.exports.default=e.exports,n(t)}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){"use strict";n.r(t),n.d(t,"initialize",(function(){return go}));const i=new class{constructor(){this.listeners=[],this.unexpectedErrorHandler=function(e){setTimeout((()=>{if(e.stack){if(d.isErrorNoTelemetry(e))throw new d(e.message+"\n\n"+e.stack);throw new Error(e.message+"\n\n"+e.stack)}throw e}),0)}}emit(e){this.listeners.forEach((t=>{t(e)}))}onUnexpectedError(e){this.unexpectedErrorHandler(e),this.emit(e)}onUnexpectedExternalError(e){this.unexpectedErrorHandler(e)}};function o(e){s(e)||i.onUnexpectedError(e)}function a(e){if(e instanceof Error){const{name:t,message:n}=e;return{$isError:!0,name:t,message:n,stack:e.stacktrace||e.stack,noTelemetry:d.isErrorNoTelemetry(e)}}return e}const r="Canceled";function s(e){return e instanceof l||e instanceof Error&&e.name===r&&e.message===r}class l extends Error{constructor(){super(r),this.name=this.message}}Error;class d extends Error{constructor(e){super(e),this.name="CodeExpectedError"}static fromError(e){if(e instanceof d)return e;const t=new d;return t.message=e.message,t.stack=e.stack,t}static isErrorNoTelemetry(e){return"CodeExpectedError"===e.name}}class c extends Error{constructor(e){super(e||"An unexpected bug occurred."),Object.setPrototypeOf(this,c.prototype)}}function u(e){const t=this;let n,i=!1;return function(){return i||(i=!0,n=e.apply(t,arguments)),n}}var m;!function(e){function t(e){return e&&"object"==typeof e&&"function"==typeof e[Symbol.iterator]}e.is=t;const n=Object.freeze([]);function*i(e){yield e}e.empty=function(){return n},e.single=i,e.wrap=function(e){return t(e)?e:i(e)},e.from=function(e){return e||n},e.reverse=function*(e){for(let t=e.length-1;t>=0;t--)yield e[t]},e.isEmpty=function(e){return!e||!0===e[Symbol.iterator]().next().done},e.first=function(e){return e[Symbol.iterator]().next().value},e.some=function(e,t){for(const n of e)if(t(n))return!0;return!1},e.find=function(e,t){for(const n of e)if(t(n))return n},e.filter=function*(e,t){for(const n of e)t(n)&&(yield n)},e.map=function*(e,t){let n=0;for(const i of e)yield t(i,n++)},e.concat=function*(...e){for(const t of e)for(const e of t)yield e},e.reduce=function(e,t,n){let i=n;for(const n of e)i=t(i,n);return i},e.slice=function*(e,t,n=e.length){for(t<0&&(t+=e.length),n<0?n+=e.length:n>e.length&&(n=e.length);t<n;t++)yield e[t]},e.consume=function(t,n=Number.POSITIVE_INFINITY){const i=[];if(0===n)return[i,t];const o=t[Symbol.iterator]();for(let t=0;t<n;t++){const t=o.next();if(t.done)return[i,e.empty()];i.push(t.value)}return[i,{[Symbol.iterator]:()=>o}]}}(m||(m={}));let h=null;function b(e){return null==h||h.trackDisposable(e),e}function T(e){null==h||h.markAsDisposed(e)}function g(e,t){null==h||h.setParent(e,t)}function p(e){if(m.is(e)){const t=[];for(const n of e)if(n)try{n.dispose()}catch(e){t.push(e)}if(1===t.length)throw t[0];if(t.length>1)throw new AggregateError(t,"Encountered errors while disposing of store");return Array.isArray(e)?[]:e}if(e)return e.dispose(),e}function x(...e){const t=k((()=>p(e)));return function(e,t){if(h)for(const n of e)h.setParent(n,t)}(e,t),t}function k(e){const t=b({dispose:u((()=>{T(t),e()}))});return t}class f{constructor(){this._toDispose=new Set,this._isDisposed=!1,b(this)}dispose(){this._isDisposed||(T(this),this._isDisposed=!0,this.clear())}get isDisposed(){return this._isDisposed}clear(){if(0!==this._toDispose.size)try{p(this._toDispose)}finally{this._toDispose.clear()}}add(e){if(!e)return e;if(e===this)throw new Error("Cannot register a disposable on itself!");return g(e,this),this._isDisposed?f.DISABLE_DISPOSED_WARNING||console.warn(new Error("Trying to add a disposable to a DisposableStore that has already been disposed of. The added object will be leaked!").stack):this._toDispose.add(e),e}deleteAndLeak(e){e&&this._toDispose.has(e)&&(this._toDispose.delete(e),g(e,null))}}f.DISABLE_DISPOSED_WARNING=!1;class S{constructor(){this._store=new f,b(this),g(this._store,this)}dispose(){T(this),this._store.dispose()}_register(e){if(e===this)throw new Error("Cannot register a disposable on itself!");return this._store.add(e)}}S.None=Object.freeze({dispose(){}});Symbol.iterator;class C{constructor(e){this.element=e,this.next=C.Undefined,this.prev=C.Undefined}}C.Undefined=new C(void 0);class E{constructor(){this._first=C.Undefined,this._last=C.Undefined,this._size=0}get size(){return this._size}isEmpty(){return this._first===C.Undefined}clear(){let e=this._first;for(;e!==C.Undefined;){const t=e.next;e.prev=C.Undefined,e.next=C.Undefined,e=t}this._first=C.Undefined,this._last=C.Undefined,this._size=0}unshift(e){return this._insert(e,!1)}push(e){return this._insert(e,!0)}_insert(e,t){const n=new C(e);if(this._first===C.Undefined)this._first=n,this._last=n;else if(t){const e=this._last;this._last=n,n.prev=e,e.next=n}else{const e=this._first;this._first=n,n.next=e,e.prev=n}this._size+=1;let i=!1;return()=>{i||(i=!0,this._remove(n))}}shift(){if(this._first!==C.Undefined){const e=this._first.element;return this._remove(this._first),e}}pop(){if(this._last!==C.Undefined){const e=this._last.element;return this._remove(this._last),e}}_remove(e){if(e.prev!==C.Undefined&&e.next!==C.Undefined){const t=e.prev;t.next=e.next,e.next.prev=t}else e.prev===C.Undefined&&e.next===C.Undefined?(this._first=C.Undefined,this._last=C.Undefined):e.next===C.Undefined?(this._last=this._last.prev,this._last.next=C.Undefined):e.prev===C.Undefined&&(this._first=this._first.next,this._first.prev=C.Undefined);this._size-=1}*[Symbol.iterator](){let e=this._first;for(;e!==C.Undefined;)yield e.element,e=e.next}}const A=globalThis.performance&&"function"==typeof globalThis.performance.now;class y{static create(e){return new y(e)}constructor(e){this._now=A&&!1===e?Date.now:globalThis.performance.now.bind(globalThis.performance),this._startTime=this._now(),this._stopTime=-1}stop(){this._stopTime=this._now()}elapsed(){return-1!==this._stopTime?this._stopTime-this._startTime:this._now()-this._startTime}}var I;!function(e){function t(e){false}function n(e){return(t,n=null,i)=>{let o,a=!1;return o=e((e=>{if(!a)return o?o.dispose():a=!0,t.call(n,e)}),null,i),a&&o.dispose(),o}}function i(e,t,n){return a(((n,i=null,o)=>e((e=>n.call(i,t(e))),null,o)),n)}function o(e,t,n){return a(((n,i=null,o)=>e((e=>t(e)&&n.call(i,e)),null,o)),n)}function a(e,n){let i;const o={onWillAddFirstListener(){i=e(a.fire,a)},onDidRemoveLastListener(){null==i||i.dispose()}};n||t();const a=new R(o);return null==n||n.add(a),a.event}function r(e,n,i=100,o=!1,a=!1,r,s){let l,d,c,u,m=0;const h={leakWarningThreshold:r,onWillAddFirstListener(){l=e((e=>{m++,d=n(d,e),o&&!c&&(b.fire(d),d=void 0),u=()=>{const e=d;d=void 0,c=void 0,(!o||m>1)&&b.fire(e),m=0},"number"==typeof i?(clearTimeout(c),c=setTimeout(u,i)):void 0===c&&(c=0,queueMicrotask(u))}))},onWillRemoveListener(){a&&m>0&&(null==u||u())},onDidRemoveLastListener(){u=void 0,l.dispose()}};s||t();const b=new R(h);return null==s||s.add(b),b.event}e.None=()=>S.None,e.defer=function(e,t){return r(e,(()=>{}),0,void 0,!0,void 0,t)},e.once=n,e.map=i,e.forEach=function(e,t,n){return a(((n,i=null,o)=>e((e=>{t(e),n.call(i,e)}),null,o)),n)},e.filter=o,e.signal=function(e){return e},e.any=function(...e){return(t,n=null,i)=>function(e,t){t instanceof Array?t.push(e):t&&t.add(e);return e}(x(...e.map((e=>e((e=>t.call(n,e)))))),i)},e.reduce=function(e,t,n,o){let a=n;return i(e,(e=>(a=t(a,e),a)),o)},e.debounce=r,e.accumulate=function(t,n=0,i){return e.debounce(t,((e,t)=>e?(e.push(t),e):[t]),n,void 0,!0,void 0,i)},e.latch=function(e,t=((e,t)=>e===t),n){let i,a=!0;return o(e,(e=>{const n=a||!t(e,i);return a=!1,i=e,n}),n)},e.split=function(t,n,i){return[e.filter(t,n,i),e.filter(t,(e=>!n(e)),i)]},e.buffer=function(e,t=!1,n=[],i){let o=n.slice(),a=e((e=>{o?o.push(e):s.fire(e)}));i&&i.add(a);const r=()=>{null==o||o.forEach((e=>s.fire(e))),o=null},s=new R({onWillAddFirstListener(){a||(a=e((e=>s.fire(e))),i&&i.add(a))},onDidAddFirstListener(){o&&(t?setTimeout(r):r())},onDidRemoveLastListener(){a&&a.dispose(),a=null}});return i&&i.add(s),s.event},e.chain=function(e,t){return(n,i,o)=>{const a=t(new l);return e((function(e){const t=a.evaluate(e);t!==s&&n.call(i,t)}),void 0,o)}};const s=Symbol("HaltChainable");class l{constructor(){this.steps=[]}map(e){return this.steps.push(e),this}forEach(e){return this.steps.push((t=>(e(t),t))),this}filter(e){return this.steps.push((t=>e(t)?t:s)),this}reduce(e,t){let n=t;return this.steps.push((t=>(n=e(n,t),n))),this}latch(e=((e,t)=>e===t)){let t,n=!0;return this.steps.push((i=>{const o=n||!e(i,t);return n=!1,t=i,o?i:s})),this}evaluate(e){for(const t of this.steps)if((e=t(e))===s)break;return e}}e.fromNodeEventEmitter=function(e,t,n=(e=>e)){const i=(...e)=>o.fire(n(...e)),o=new R({onWillAddFirstListener:()=>e.on(t,i),onDidRemoveLastListener:()=>e.removeListener(t,i)});return o.event},e.fromDOMEventEmitter=function(e,t,n=(e=>e)){const i=(...e)=>o.fire(n(...e)),o=new R({onWillAddFirstListener:()=>e.addEventListener(t,i),onDidRemoveLastListener:()=>e.removeEventListener(t,i)});return o.event},e.toPromise=function(e){return new Promise((t=>n(e)(t)))},e.fromPromise=function(e){const t=new R;return e.then((e=>{t.fire(e)}),(()=>{t.fire(void 0)})).finally((()=>{t.dispose()})),t.event},e.runAndSubscribe=function(e,t){return t(void 0),e((e=>t(e)))},e.runAndSubscribeWithStore=function(e,t){let n=null;function i(e){null==n||n.dispose(),n=new f,t(e,n)}i(void 0);const o=e((e=>i(e)));return k((()=>{o.dispose(),null==n||n.dispose()}))};class d{constructor(e,n){this._observable=e,this._counter=0,this._hasChanged=!1;const i={onWillAddFirstListener:()=>{e.addObserver(this)},onDidRemoveLastListener:()=>{e.removeObserver(this)}};n||t(),this.emitter=new R(i),n&&n.add(this.emitter)}beginUpdate(e){this._counter++}handlePossibleChange(e){}handleChange(e,t){this._hasChanged=!0}endUpdate(e){this._counter--,0===this._counter&&(this._observable.reportChanges(),this._hasChanged&&(this._hasChanged=!1,this.emitter.fire(this._observable.get())))}}e.fromObservable=function(e,t){return new d(e,t).emitter.event},e.fromObservableLight=function(e){return t=>{let n=0,i=!1;const o={beginUpdate(){n++},endUpdate(){n--,0===n&&(e.reportChanges(),i&&(i=!1,t()))},handlePossibleChange(){},handleChange(){i=!0}};return e.addObserver(o),e.reportChanges(),{dispose(){e.removeObserver(o)}}}}}(I||(I={}));class L{constructor(e){this.listenerCount=0,this.invocationCount=0,this.elapsedOverall=0,this.durations=[],this.name=`${e}_${L._idPool++}`,L.all.add(this)}start(e){this._stopWatch=new y,this.listenerCount=e}stop(){if(this._stopWatch){const e=this._stopWatch.elapsed();this.durations.push(e),this.elapsedOverall+=e,this.invocationCount+=1,this._stopWatch=void 0}}}L.all=new Set,L._idPool=0;class O{constructor(e,t=Math.random().toString(18).slice(2,5)){this.threshold=e,this.name=t,this._warnCountdown=0}dispose(){var e;null===(e=this._stacks)||void 0===e||e.clear()}check(e,t){const n=this.threshold;if(n<=0||t<n)return;this._stacks||(this._stacks=new Map);const i=this._stacks.get(e.value)||0;if(this._stacks.set(e.value,i+1),this._warnCountdown-=1,this._warnCountdown<=0){let e;this._warnCountdown=.5*n;let i=0;for(const[t,n]of this._stacks)(!e||i<n)&&(e=t,i=n);console.warn(`[${this.name}] potential listener LEAK detected, having ${t} listeners already. MOST frequent listener (${i}):`),console.warn(e)}return()=>{const t=this._stacks.get(e.value)||0;this._stacks.set(e.value,t-1)}}}class _{static create(){var e;return new _(null!==(e=(new Error).stack)&&void 0!==e?e:"")}constructor(e){this.value=e}print(){console.warn(this.value.split("\n").slice(2).join("\n"))}}class N{constructor(e){this.value=e}}class R{constructor(e){var t,n,i,o,a;this._size=0,this._options=e,this._leakageMon=(null===(t=this._options)||void 0===t?void 0:t.leakWarningThreshold)?new O(null!==(i=null===(n=this._options)||void 0===n?void 0:n.leakWarningThreshold)&&void 0!==i?i:-1):void 0,this._perfMon=(null===(o=this._options)||void 0===o?void 0:o._profName)?new L(this._options._profName):void 0,this._deliveryQueue=null===(a=this._options)||void 0===a?void 0:a.deliveryQueue}dispose(){var e,t,n,i;this._disposed||(this._disposed=!0,(null===(e=this._deliveryQueue)||void 0===e?void 0:e.current)===this&&this._deliveryQueue.reset(),this._listeners&&(this._listeners=void 0,this._size=0),null===(n=null===(t=this._options)||void 0===t?void 0:t.onDidRemoveLastListener)||void 0===n||n.call(t),null===(i=this._leakageMon)||void 0===i||i.dispose())}get event(){var e;return null!==(e=this._event)&&void 0!==e||(this._event=(e,t,n)=>{var i,o,a,r,s;if(this._leakageMon&&this._size>3*this._leakageMon.threshold)return console.warn(`[${this._leakageMon.name}] REFUSES to accept new listeners because it exceeded its threshold by far`),S.None;if(this._disposed)return S.None;t&&(e=e.bind(t));const l=new N(e);let d;this._leakageMon&&this._size>=Math.ceil(.2*this._leakageMon.threshold)&&(l.stack=_.create(),d=this._leakageMon.check(l.stack,this._size+1)),this._listeners?this._listeners instanceof N?(null!==(s=this._deliveryQueue)&&void 0!==s||(this._deliveryQueue=new D),this._listeners=[this._listeners,l]):this._listeners.push(l):(null===(o=null===(i=this._options)||void 0===i?void 0:i.onWillAddFirstListener)||void 0===o||o.call(i,this),this._listeners=l,null===(r=null===(a=this._options)||void 0===a?void 0:a.onDidAddFirstListener)||void 0===r||r.call(a,this)),this._size++;const c=k((()=>{null==d||d(),this._removeListener(l)}));return n instanceof f?n.add(c):Array.isArray(n)&&n.push(c),c}),this._event}_removeListener(e){var t,n,i,o;if(null===(n=null===(t=this._options)||void 0===t?void 0:t.onWillRemoveListener)||void 0===n||n.call(t,this),!this._listeners)return;if(1===this._size)return this._listeners=void 0,null===(o=null===(i=this._options)||void 0===i?void 0:i.onDidRemoveLastListener)||void 0===o||o.call(i,this),void(this._size=0);const a=this._listeners,r=a.indexOf(e);if(-1===r)throw console.log("disposed?",this._disposed),console.log("size?",this._size),console.log("arr?",JSON.stringify(this._listeners)),new Error("Attempted to dispose unknown listener");this._size--,a[r]=void 0;const s=this._deliveryQueue.current===this;if(2*this._size<=a.length){let e=0;for(let t=0;t<a.length;t++)a[t]?a[e++]=a[t]:s&&(this._deliveryQueue.end--,e<this._deliveryQueue.i&&this._deliveryQueue.i--);a.length=e}}_deliver(e,t){var n;if(!e)return;const i=(null===(n=this._options)||void 0===n?void 0:n.onListenerError)||o;if(i)try{e.value(t)}catch(e){i(e)}else e.value(t)}_deliverQueue(e){const t=e.current._listeners;for(;e.i<e.end;)this._deliver(t[e.i++],e.value);e.reset()}fire(e){var t,n,i,o;if((null===(t=this._deliveryQueue)||void 0===t?void 0:t.current)&&(this._deliverQueue(this._deliveryQueue),null===(n=this._perfMon)||void 0===n||n.stop()),null===(i=this._perfMon)||void 0===i||i.start(this._size),this._listeners)if(this._listeners instanceof N)this._deliver(this._listeners,e);else{const t=this._deliveryQueue;t.enqueue(this,e,this._listeners.length),this._deliverQueue(t)}else;null===(o=this._perfMon)||void 0===o||o.stop()}hasListeners(){return this._size>0}}class D{constructor(){this.i=-1,this.end=0}enqueue(e,t,n){this.i=0,this.end=n,this.current=e,this.value=t}reset(){this.i=this.end,this.current=void 0,this.value=void 0}}function M(e){return"string"==typeof e}Object.prototype.hasOwnProperty;function v(e){const t=[];for(const n of function(e){let t=[];for(;Object.prototype!==e;)t=t.concat(Object.getOwnPropertyNames(e)),e=Object.getPrototypeOf(e);return t}(e))"function"==typeof e[n]&&t.push(n);return t}var F,P=n(5);class B{constructor(e){this.executor=e,this._didRun=!1}get value(){if(!this._didRun)try{this._value=this.executor()}catch(e){this._error=e}finally{this._didRun=!0}if(this._error)throw this._error;return this._value}get rawValue(){return this._value}}function w(e){return e.replace(/[\\\{\}\*\+\?\|\^\$\.\[\]\(\)]/g,"\\$&")}function U(e){return e>=65&&e<=90}function q(e){return 55296<=e&&e<=56319}function H(e){return 56320<=e&&e<=57343}function V(e,t){return t-56320+(e-55296<<10)+65536}function j(e,t,n){const i=e.charCodeAt(n);if(q(i)&&n+1<t){const t=e.charCodeAt(n+1);if(H(t))return V(i,t)}return i}const Y=/^[\t\n\r\x20-\x7E]*$/;String.fromCharCode(65279);class G{static getInstance(){return G._INSTANCE||(G._INSTANCE=new G),G._INSTANCE}constructor(){this._data=JSON.parse("[0,0,0,51229,51255,12,44061,44087,12,127462,127487,6,7083,7085,5,47645,47671,12,54813,54839,12,128678,128678,14,3270,3270,5,9919,9923,14,45853,45879,12,49437,49463,12,53021,53047,12,71216,71218,7,128398,128399,14,129360,129374,14,2519,2519,5,4448,4519,9,9742,9742,14,12336,12336,14,44957,44983,12,46749,46775,12,48541,48567,12,50333,50359,12,52125,52151,12,53917,53943,12,69888,69890,5,73018,73018,5,127990,127990,14,128558,128559,14,128759,128760,14,129653,129655,14,2027,2035,5,2891,2892,7,3761,3761,5,6683,6683,5,8293,8293,4,9825,9826,14,9999,9999,14,43452,43453,5,44509,44535,12,45405,45431,12,46301,46327,12,47197,47223,12,48093,48119,12,48989,49015,12,49885,49911,12,50781,50807,12,51677,51703,12,52573,52599,12,53469,53495,12,54365,54391,12,65279,65279,4,70471,70472,7,72145,72147,7,119173,119179,5,127799,127818,14,128240,128244,14,128512,128512,14,128652,128652,14,128721,128722,14,129292,129292,14,129445,129450,14,129734,129743,14,1476,1477,5,2366,2368,7,2750,2752,7,3076,3076,5,3415,3415,5,4141,4144,5,6109,6109,5,6964,6964,5,7394,7400,5,9197,9198,14,9770,9770,14,9877,9877,14,9968,9969,14,10084,10084,14,43052,43052,5,43713,43713,5,44285,44311,12,44733,44759,12,45181,45207,12,45629,45655,12,46077,46103,12,46525,46551,12,46973,46999,12,47421,47447,12,47869,47895,12,48317,48343,12,48765,48791,12,49213,49239,12,49661,49687,12,50109,50135,12,50557,50583,12,51005,51031,12,51453,51479,12,51901,51927,12,52349,52375,12,52797,52823,12,53245,53271,12,53693,53719,12,54141,54167,12,54589,54615,12,55037,55063,12,69506,69509,5,70191,70193,5,70841,70841,7,71463,71467,5,72330,72342,5,94031,94031,5,123628,123631,5,127763,127765,14,127941,127941,14,128043,128062,14,128302,128317,14,128465,128467,14,128539,128539,14,128640,128640,14,128662,128662,14,128703,128703,14,128745,128745,14,129004,129007,14,129329,129330,14,129402,129402,14,129483,129483,14,129686,129704,14,130048,131069,14,173,173,4,1757,1757,1,2200,2207,5,2434,2435,7,2631,2632,5,2817,2817,5,3008,3008,5,3201,3201,5,3387,3388,5,3542,3542,5,3902,3903,7,4190,4192,5,6002,6003,5,6439,6440,5,6765,6770,7,7019,7027,5,7154,7155,7,8205,8205,13,8505,8505,14,9654,9654,14,9757,9757,14,9792,9792,14,9852,9853,14,9890,9894,14,9937,9937,14,9981,9981,14,10035,10036,14,11035,11036,14,42654,42655,5,43346,43347,7,43587,43587,5,44006,44007,7,44173,44199,12,44397,44423,12,44621,44647,12,44845,44871,12,45069,45095,12,45293,45319,12,45517,45543,12,45741,45767,12,45965,45991,12,46189,46215,12,46413,46439,12,46637,46663,12,46861,46887,12,47085,47111,12,47309,47335,12,47533,47559,12,47757,47783,12,47981,48007,12,48205,48231,12,48429,48455,12,48653,48679,12,48877,48903,12,49101,49127,12,49325,49351,12,49549,49575,12,49773,49799,12,49997,50023,12,50221,50247,12,50445,50471,12,50669,50695,12,50893,50919,12,51117,51143,12,51341,51367,12,51565,51591,12,51789,51815,12,52013,52039,12,52237,52263,12,52461,52487,12,52685,52711,12,52909,52935,12,53133,53159,12,53357,53383,12,53581,53607,12,53805,53831,12,54029,54055,12,54253,54279,12,54477,54503,12,54701,54727,12,54925,54951,12,55149,55175,12,68101,68102,5,69762,69762,7,70067,70069,7,70371,70378,5,70720,70721,7,71087,71087,5,71341,71341,5,71995,71996,5,72249,72249,7,72850,72871,5,73109,73109,5,118576,118598,5,121505,121519,5,127245,127247,14,127568,127569,14,127777,127777,14,127872,127891,14,127956,127967,14,128015,128016,14,128110,128172,14,128259,128259,14,128367,128368,14,128424,128424,14,128488,128488,14,128530,128532,14,128550,128551,14,128566,128566,14,128647,128647,14,128656,128656,14,128667,128673,14,128691,128693,14,128715,128715,14,128728,128732,14,128752,128752,14,128765,128767,14,129096,129103,14,129311,129311,14,129344,129349,14,129394,129394,14,129413,129425,14,129466,129471,14,129511,129535,14,129664,129666,14,129719,129722,14,129760,129767,14,917536,917631,5,13,13,2,1160,1161,5,1564,1564,4,1807,1807,1,2085,2087,5,2307,2307,7,2382,2383,7,2497,2500,5,2563,2563,7,2677,2677,5,2763,2764,7,2879,2879,5,2914,2915,5,3021,3021,5,3142,3144,5,3263,3263,5,3285,3286,5,3398,3400,7,3530,3530,5,3633,3633,5,3864,3865,5,3974,3975,5,4155,4156,7,4229,4230,5,5909,5909,7,6078,6085,7,6277,6278,5,6451,6456,7,6744,6750,5,6846,6846,5,6972,6972,5,7074,7077,5,7146,7148,7,7222,7223,5,7416,7417,5,8234,8238,4,8417,8417,5,9000,9000,14,9203,9203,14,9730,9731,14,9748,9749,14,9762,9763,14,9776,9783,14,9800,9811,14,9831,9831,14,9872,9873,14,9882,9882,14,9900,9903,14,9929,9933,14,9941,9960,14,9974,9974,14,9989,9989,14,10006,10006,14,10062,10062,14,10160,10160,14,11647,11647,5,12953,12953,14,43019,43019,5,43232,43249,5,43443,43443,5,43567,43568,7,43696,43696,5,43765,43765,7,44013,44013,5,44117,44143,12,44229,44255,12,44341,44367,12,44453,44479,12,44565,44591,12,44677,44703,12,44789,44815,12,44901,44927,12,45013,45039,12,45125,45151,12,45237,45263,12,45349,45375,12,45461,45487,12,45573,45599,12,45685,45711,12,45797,45823,12,45909,45935,12,46021,46047,12,46133,46159,12,46245,46271,12,46357,46383,12,46469,46495,12,46581,46607,12,46693,46719,12,46805,46831,12,46917,46943,12,47029,47055,12,47141,47167,12,47253,47279,12,47365,47391,12,47477,47503,12,47589,47615,12,47701,47727,12,47813,47839,12,47925,47951,12,48037,48063,12,48149,48175,12,48261,48287,12,48373,48399,12,48485,48511,12,48597,48623,12,48709,48735,12,48821,48847,12,48933,48959,12,49045,49071,12,49157,49183,12,49269,49295,12,49381,49407,12,49493,49519,12,49605,49631,12,49717,49743,12,49829,49855,12,49941,49967,12,50053,50079,12,50165,50191,12,50277,50303,12,50389,50415,12,50501,50527,12,50613,50639,12,50725,50751,12,50837,50863,12,50949,50975,12,51061,51087,12,51173,51199,12,51285,51311,12,51397,51423,12,51509,51535,12,51621,51647,12,51733,51759,12,51845,51871,12,51957,51983,12,52069,52095,12,52181,52207,12,52293,52319,12,52405,52431,12,52517,52543,12,52629,52655,12,52741,52767,12,52853,52879,12,52965,52991,12,53077,53103,12,53189,53215,12,53301,53327,12,53413,53439,12,53525,53551,12,53637,53663,12,53749,53775,12,53861,53887,12,53973,53999,12,54085,54111,12,54197,54223,12,54309,54335,12,54421,54447,12,54533,54559,12,54645,54671,12,54757,54783,12,54869,54895,12,54981,55007,12,55093,55119,12,55243,55291,10,66045,66045,5,68325,68326,5,69688,69702,5,69817,69818,5,69957,69958,7,70089,70092,5,70198,70199,5,70462,70462,5,70502,70508,5,70750,70750,5,70846,70846,7,71100,71101,5,71230,71230,7,71351,71351,5,71737,71738,5,72000,72000,7,72160,72160,5,72273,72278,5,72752,72758,5,72882,72883,5,73031,73031,5,73461,73462,7,94192,94193,7,119149,119149,7,121403,121452,5,122915,122916,5,126980,126980,14,127358,127359,14,127535,127535,14,127759,127759,14,127771,127771,14,127792,127793,14,127825,127867,14,127897,127899,14,127945,127945,14,127985,127986,14,128000,128007,14,128021,128021,14,128066,128100,14,128184,128235,14,128249,128252,14,128266,128276,14,128335,128335,14,128379,128390,14,128407,128419,14,128444,128444,14,128481,128481,14,128499,128499,14,128526,128526,14,128536,128536,14,128543,128543,14,128556,128556,14,128564,128564,14,128577,128580,14,128643,128645,14,128649,128649,14,128654,128654,14,128660,128660,14,128664,128664,14,128675,128675,14,128686,128689,14,128695,128696,14,128705,128709,14,128717,128719,14,128725,128725,14,128736,128741,14,128747,128748,14,128755,128755,14,128762,128762,14,128981,128991,14,129009,129023,14,129160,129167,14,129296,129304,14,129320,129327,14,129340,129342,14,129356,129356,14,129388,129392,14,129399,129400,14,129404,129407,14,129432,129442,14,129454,129455,14,129473,129474,14,129485,129487,14,129648,129651,14,129659,129660,14,129671,129679,14,129709,129711,14,129728,129730,14,129751,129753,14,129776,129782,14,917505,917505,4,917760,917999,5,10,10,3,127,159,4,768,879,5,1471,1471,5,1536,1541,1,1648,1648,5,1767,1768,5,1840,1866,5,2070,2073,5,2137,2139,5,2274,2274,1,2363,2363,7,2377,2380,7,2402,2403,5,2494,2494,5,2507,2508,7,2558,2558,5,2622,2624,7,2641,2641,5,2691,2691,7,2759,2760,5,2786,2787,5,2876,2876,5,2881,2884,5,2901,2902,5,3006,3006,5,3014,3016,7,3072,3072,5,3134,3136,5,3157,3158,5,3260,3260,5,3266,3266,5,3274,3275,7,3328,3329,5,3391,3392,7,3405,3405,5,3457,3457,5,3536,3537,7,3551,3551,5,3636,3642,5,3764,3772,5,3895,3895,5,3967,3967,7,3993,4028,5,4146,4151,5,4182,4183,7,4226,4226,5,4253,4253,5,4957,4959,5,5940,5940,7,6070,6070,7,6087,6088,7,6158,6158,4,6432,6434,5,6448,6449,7,6679,6680,5,6742,6742,5,6754,6754,5,6783,6783,5,6912,6915,5,6966,6970,5,6978,6978,5,7042,7042,7,7080,7081,5,7143,7143,7,7150,7150,7,7212,7219,5,7380,7392,5,7412,7412,5,8203,8203,4,8232,8232,4,8265,8265,14,8400,8412,5,8421,8432,5,8617,8618,14,9167,9167,14,9200,9200,14,9410,9410,14,9723,9726,14,9733,9733,14,9745,9745,14,9752,9752,14,9760,9760,14,9766,9766,14,9774,9774,14,9786,9786,14,9794,9794,14,9823,9823,14,9828,9828,14,9833,9850,14,9855,9855,14,9875,9875,14,9880,9880,14,9885,9887,14,9896,9897,14,9906,9916,14,9926,9927,14,9935,9935,14,9939,9939,14,9962,9962,14,9972,9972,14,9978,9978,14,9986,9986,14,9997,9997,14,10002,10002,14,10017,10017,14,10055,10055,14,10071,10071,14,10133,10135,14,10548,10549,14,11093,11093,14,12330,12333,5,12441,12442,5,42608,42610,5,43010,43010,5,43045,43046,5,43188,43203,7,43302,43309,5,43392,43394,5,43446,43449,5,43493,43493,5,43571,43572,7,43597,43597,7,43703,43704,5,43756,43757,5,44003,44004,7,44009,44010,7,44033,44059,12,44089,44115,12,44145,44171,12,44201,44227,12,44257,44283,12,44313,44339,12,44369,44395,12,44425,44451,12,44481,44507,12,44537,44563,12,44593,44619,12,44649,44675,12,44705,44731,12,44761,44787,12,44817,44843,12,44873,44899,12,44929,44955,12,44985,45011,12,45041,45067,12,45097,45123,12,45153,45179,12,45209,45235,12,45265,45291,12,45321,45347,12,45377,45403,12,45433,45459,12,45489,45515,12,45545,45571,12,45601,45627,12,45657,45683,12,45713,45739,12,45769,45795,12,45825,45851,12,45881,45907,12,45937,45963,12,45993,46019,12,46049,46075,12,46105,46131,12,46161,46187,12,46217,46243,12,46273,46299,12,46329,46355,12,46385,46411,12,46441,46467,12,46497,46523,12,46553,46579,12,46609,46635,12,46665,46691,12,46721,46747,12,46777,46803,12,46833,46859,12,46889,46915,12,46945,46971,12,47001,47027,12,47057,47083,12,47113,47139,12,47169,47195,12,47225,47251,12,47281,47307,12,47337,47363,12,47393,47419,12,47449,47475,12,47505,47531,12,47561,47587,12,47617,47643,12,47673,47699,12,47729,47755,12,47785,47811,12,47841,47867,12,47897,47923,12,47953,47979,12,48009,48035,12,48065,48091,12,48121,48147,12,48177,48203,12,48233,48259,12,48289,48315,12,48345,48371,12,48401,48427,12,48457,48483,12,48513,48539,12,48569,48595,12,48625,48651,12,48681,48707,12,48737,48763,12,48793,48819,12,48849,48875,12,48905,48931,12,48961,48987,12,49017,49043,12,49073,49099,12,49129,49155,12,49185,49211,12,49241,49267,12,49297,49323,12,49353,49379,12,49409,49435,12,49465,49491,12,49521,49547,12,49577,49603,12,49633,49659,12,49689,49715,12,49745,49771,12,49801,49827,12,49857,49883,12,49913,49939,12,49969,49995,12,50025,50051,12,50081,50107,12,50137,50163,12,50193,50219,12,50249,50275,12,50305,50331,12,50361,50387,12,50417,50443,12,50473,50499,12,50529,50555,12,50585,50611,12,50641,50667,12,50697,50723,12,50753,50779,12,50809,50835,12,50865,50891,12,50921,50947,12,50977,51003,12,51033,51059,12,51089,51115,12,51145,51171,12,51201,51227,12,51257,51283,12,51313,51339,12,51369,51395,12,51425,51451,12,51481,51507,12,51537,51563,12,51593,51619,12,51649,51675,12,51705,51731,12,51761,51787,12,51817,51843,12,51873,51899,12,51929,51955,12,51985,52011,12,52041,52067,12,52097,52123,12,52153,52179,12,52209,52235,12,52265,52291,12,52321,52347,12,52377,52403,12,52433,52459,12,52489,52515,12,52545,52571,12,52601,52627,12,52657,52683,12,52713,52739,12,52769,52795,12,52825,52851,12,52881,52907,12,52937,52963,12,52993,53019,12,53049,53075,12,53105,53131,12,53161,53187,12,53217,53243,12,53273,53299,12,53329,53355,12,53385,53411,12,53441,53467,12,53497,53523,12,53553,53579,12,53609,53635,12,53665,53691,12,53721,53747,12,53777,53803,12,53833,53859,12,53889,53915,12,53945,53971,12,54001,54027,12,54057,54083,12,54113,54139,12,54169,54195,12,54225,54251,12,54281,54307,12,54337,54363,12,54393,54419,12,54449,54475,12,54505,54531,12,54561,54587,12,54617,54643,12,54673,54699,12,54729,54755,12,54785,54811,12,54841,54867,12,54897,54923,12,54953,54979,12,55009,55035,12,55065,55091,12,55121,55147,12,55177,55203,12,65024,65039,5,65520,65528,4,66422,66426,5,68152,68154,5,69291,69292,5,69633,69633,5,69747,69748,5,69811,69814,5,69826,69826,5,69932,69932,7,70016,70017,5,70079,70080,7,70095,70095,5,70196,70196,5,70367,70367,5,70402,70403,7,70464,70464,5,70487,70487,5,70709,70711,7,70725,70725,7,70833,70834,7,70843,70844,7,70849,70849,7,71090,71093,5,71103,71104,5,71227,71228,7,71339,71339,5,71344,71349,5,71458,71461,5,71727,71735,5,71985,71989,7,71998,71998,5,72002,72002,7,72154,72155,5,72193,72202,5,72251,72254,5,72281,72283,5,72344,72345,5,72766,72766,7,72874,72880,5,72885,72886,5,73023,73029,5,73104,73105,5,73111,73111,5,92912,92916,5,94095,94098,5,113824,113827,4,119142,119142,7,119155,119162,4,119362,119364,5,121476,121476,5,122888,122904,5,123184,123190,5,125252,125258,5,127183,127183,14,127340,127343,14,127377,127386,14,127491,127503,14,127548,127551,14,127744,127756,14,127761,127761,14,127769,127769,14,127773,127774,14,127780,127788,14,127796,127797,14,127820,127823,14,127869,127869,14,127894,127895,14,127902,127903,14,127943,127943,14,127947,127950,14,127972,127972,14,127988,127988,14,127992,127994,14,128009,128011,14,128019,128019,14,128023,128041,14,128064,128064,14,128102,128107,14,128174,128181,14,128238,128238,14,128246,128247,14,128254,128254,14,128264,128264,14,128278,128299,14,128329,128330,14,128348,128359,14,128371,128377,14,128392,128393,14,128401,128404,14,128421,128421,14,128433,128434,14,128450,128452,14,128476,128478,14,128483,128483,14,128495,128495,14,128506,128506,14,128519,128520,14,128528,128528,14,128534,128534,14,128538,128538,14,128540,128542,14,128544,128549,14,128552,128555,14,128557,128557,14,128560,128563,14,128565,128565,14,128567,128576,14,128581,128591,14,128641,128642,14,128646,128646,14,128648,128648,14,128650,128651,14,128653,128653,14,128655,128655,14,128657,128659,14,128661,128661,14,128663,128663,14,128665,128666,14,128674,128674,14,128676,128677,14,128679,128685,14,128690,128690,14,128694,128694,14,128697,128702,14,128704,128704,14,128710,128714,14,128716,128716,14,128720,128720,14,128723,128724,14,128726,128727,14,128733,128735,14,128742,128744,14,128746,128746,14,128749,128751,14,128753,128754,14,128756,128758,14,128761,128761,14,128763,128764,14,128884,128895,14,128992,129003,14,129008,129008,14,129036,129039,14,129114,129119,14,129198,129279,14,129293,129295,14,129305,129310,14,129312,129319,14,129328,129328,14,129331,129338,14,129343,129343,14,129351,129355,14,129357,129359,14,129375,129387,14,129393,129393,14,129395,129398,14,129401,129401,14,129403,129403,14,129408,129412,14,129426,129431,14,129443,129444,14,129451,129453,14,129456,129465,14,129472,129472,14,129475,129482,14,129484,129484,14,129488,129510,14,129536,129647,14,129652,129652,14,129656,129658,14,129661,129663,14,129667,129670,14,129680,129685,14,129705,129708,14,129712,129718,14,129723,129727,14,129731,129733,14,129744,129750,14,129754,129759,14,129768,129775,14,129783,129791,14,917504,917504,4,917506,917535,4,917632,917759,4,918000,921599,4,0,9,4,11,12,4,14,31,4,169,169,14,174,174,14,1155,1159,5,1425,1469,5,1473,1474,5,1479,1479,5,1552,1562,5,1611,1631,5,1750,1756,5,1759,1764,5,1770,1773,5,1809,1809,5,1958,1968,5,2045,2045,5,2075,2083,5,2089,2093,5,2192,2193,1,2250,2273,5,2275,2306,5,2362,2362,5,2364,2364,5,2369,2376,5,2381,2381,5,2385,2391,5,2433,2433,5,2492,2492,5,2495,2496,7,2503,2504,7,2509,2509,5,2530,2531,5,2561,2562,5,2620,2620,5,2625,2626,5,2635,2637,5,2672,2673,5,2689,2690,5,2748,2748,5,2753,2757,5,2761,2761,7,2765,2765,5,2810,2815,5,2818,2819,7,2878,2878,5,2880,2880,7,2887,2888,7,2893,2893,5,2903,2903,5,2946,2946,5,3007,3007,7,3009,3010,7,3018,3020,7,3031,3031,5,3073,3075,7,3132,3132,5,3137,3140,7,3146,3149,5,3170,3171,5,3202,3203,7,3262,3262,7,3264,3265,7,3267,3268,7,3271,3272,7,3276,3277,5,3298,3299,5,3330,3331,7,3390,3390,5,3393,3396,5,3402,3404,7,3406,3406,1,3426,3427,5,3458,3459,7,3535,3535,5,3538,3540,5,3544,3550,7,3570,3571,7,3635,3635,7,3655,3662,5,3763,3763,7,3784,3789,5,3893,3893,5,3897,3897,5,3953,3966,5,3968,3972,5,3981,3991,5,4038,4038,5,4145,4145,7,4153,4154,5,4157,4158,5,4184,4185,5,4209,4212,5,4228,4228,7,4237,4237,5,4352,4447,8,4520,4607,10,5906,5908,5,5938,5939,5,5970,5971,5,6068,6069,5,6071,6077,5,6086,6086,5,6089,6099,5,6155,6157,5,6159,6159,5,6313,6313,5,6435,6438,7,6441,6443,7,6450,6450,5,6457,6459,5,6681,6682,7,6741,6741,7,6743,6743,7,6752,6752,5,6757,6764,5,6771,6780,5,6832,6845,5,6847,6862,5,6916,6916,7,6965,6965,5,6971,6971,7,6973,6977,7,6979,6980,7,7040,7041,5,7073,7073,7,7078,7079,7,7082,7082,7,7142,7142,5,7144,7145,5,7149,7149,5,7151,7153,5,7204,7211,7,7220,7221,7,7376,7378,5,7393,7393,7,7405,7405,5,7415,7415,7,7616,7679,5,8204,8204,5,8206,8207,4,8233,8233,4,8252,8252,14,8288,8292,4,8294,8303,4,8413,8416,5,8418,8420,5,8482,8482,14,8596,8601,14,8986,8987,14,9096,9096,14,9193,9196,14,9199,9199,14,9201,9202,14,9208,9210,14,9642,9643,14,9664,9664,14,9728,9729,14,9732,9732,14,9735,9741,14,9743,9744,14,9746,9746,14,9750,9751,14,9753,9756,14,9758,9759,14,9761,9761,14,9764,9765,14,9767,9769,14,9771,9773,14,9775,9775,14,9784,9785,14,9787,9791,14,9793,9793,14,9795,9799,14,9812,9822,14,9824,9824,14,9827,9827,14,9829,9830,14,9832,9832,14,9851,9851,14,9854,9854,14,9856,9861,14,9874,9874,14,9876,9876,14,9878,9879,14,9881,9881,14,9883,9884,14,9888,9889,14,9895,9895,14,9898,9899,14,9904,9905,14,9917,9918,14,9924,9925,14,9928,9928,14,9934,9934,14,9936,9936,14,9938,9938,14,9940,9940,14,9961,9961,14,9963,9967,14,9970,9971,14,9973,9973,14,9975,9977,14,9979,9980,14,9982,9985,14,9987,9988,14,9992,9996,14,9998,9998,14,10000,10001,14,10004,10004,14,10013,10013,14,10024,10024,14,10052,10052,14,10060,10060,14,10067,10069,14,10083,10083,14,10085,10087,14,10145,10145,14,10175,10175,14,11013,11015,14,11088,11088,14,11503,11505,5,11744,11775,5,12334,12335,5,12349,12349,14,12951,12951,14,42607,42607,5,42612,42621,5,42736,42737,5,43014,43014,5,43043,43044,7,43047,43047,7,43136,43137,7,43204,43205,5,43263,43263,5,43335,43345,5,43360,43388,8,43395,43395,7,43444,43445,7,43450,43451,7,43454,43456,7,43561,43566,5,43569,43570,5,43573,43574,5,43596,43596,5,43644,43644,5,43698,43700,5,43710,43711,5,43755,43755,7,43758,43759,7,43766,43766,5,44005,44005,5,44008,44008,5,44012,44012,7,44032,44032,11,44060,44060,11,44088,44088,11,44116,44116,11,44144,44144,11,44172,44172,11,44200,44200,11,44228,44228,11,44256,44256,11,44284,44284,11,44312,44312,11,44340,44340,11,44368,44368,11,44396,44396,11,44424,44424,11,44452,44452,11,44480,44480,11,44508,44508,11,44536,44536,11,44564,44564,11,44592,44592,11,44620,44620,11,44648,44648,11,44676,44676,11,44704,44704,11,44732,44732,11,44760,44760,11,44788,44788,11,44816,44816,11,44844,44844,11,44872,44872,11,44900,44900,11,44928,44928,11,44956,44956,11,44984,44984,11,45012,45012,11,45040,45040,11,45068,45068,11,45096,45096,11,45124,45124,11,45152,45152,11,45180,45180,11,45208,45208,11,45236,45236,11,45264,45264,11,45292,45292,11,45320,45320,11,45348,45348,11,45376,45376,11,45404,45404,11,45432,45432,11,45460,45460,11,45488,45488,11,45516,45516,11,45544,45544,11,45572,45572,11,45600,45600,11,45628,45628,11,45656,45656,11,45684,45684,11,45712,45712,11,45740,45740,11,45768,45768,11,45796,45796,11,45824,45824,11,45852,45852,11,45880,45880,11,45908,45908,11,45936,45936,11,45964,45964,11,45992,45992,11,46020,46020,11,46048,46048,11,46076,46076,11,46104,46104,11,46132,46132,11,46160,46160,11,46188,46188,11,46216,46216,11,46244,46244,11,46272,46272,11,46300,46300,11,46328,46328,11,46356,46356,11,46384,46384,11,46412,46412,11,46440,46440,11,46468,46468,11,46496,46496,11,46524,46524,11,46552,46552,11,46580,46580,11,46608,46608,11,46636,46636,11,46664,46664,11,46692,46692,11,46720,46720,11,46748,46748,11,46776,46776,11,46804,46804,11,46832,46832,11,46860,46860,11,46888,46888,11,46916,46916,11,46944,46944,11,46972,46972,11,47000,47000,11,47028,47028,11,47056,47056,11,47084,47084,11,47112,47112,11,47140,47140,11,47168,47168,11,47196,47196,11,47224,47224,11,47252,47252,11,47280,47280,11,47308,47308,11,47336,47336,11,47364,47364,11,47392,47392,11,47420,47420,11,47448,47448,11,47476,47476,11,47504,47504,11,47532,47532,11,47560,47560,11,47588,47588,11,47616,47616,11,47644,47644,11,47672,47672,11,47700,47700,11,47728,47728,11,47756,47756,11,47784,47784,11,47812,47812,11,47840,47840,11,47868,47868,11,47896,47896,11,47924,47924,11,47952,47952,11,47980,47980,11,48008,48008,11,48036,48036,11,48064,48064,11,48092,48092,11,48120,48120,11,48148,48148,11,48176,48176,11,48204,48204,11,48232,48232,11,48260,48260,11,48288,48288,11,48316,48316,11,48344,48344,11,48372,48372,11,48400,48400,11,48428,48428,11,48456,48456,11,48484,48484,11,48512,48512,11,48540,48540,11,48568,48568,11,48596,48596,11,48624,48624,11,48652,48652,11,48680,48680,11,48708,48708,11,48736,48736,11,48764,48764,11,48792,48792,11,48820,48820,11,48848,48848,11,48876,48876,11,48904,48904,11,48932,48932,11,48960,48960,11,48988,48988,11,49016,49016,11,49044,49044,11,49072,49072,11,49100,49100,11,49128,49128,11,49156,49156,11,49184,49184,11,49212,49212,11,49240,49240,11,49268,49268,11,49296,49296,11,49324,49324,11,49352,49352,11,49380,49380,11,49408,49408,11,49436,49436,11,49464,49464,11,49492,49492,11,49520,49520,11,49548,49548,11,49576,49576,11,49604,49604,11,49632,49632,11,49660,49660,11,49688,49688,11,49716,49716,11,49744,49744,11,49772,49772,11,49800,49800,11,49828,49828,11,49856,49856,11,49884,49884,11,49912,49912,11,49940,49940,11,49968,49968,11,49996,49996,11,50024,50024,11,50052,50052,11,50080,50080,11,50108,50108,11,50136,50136,11,50164,50164,11,50192,50192,11,50220,50220,11,50248,50248,11,50276,50276,11,50304,50304,11,50332,50332,11,50360,50360,11,50388,50388,11,50416,50416,11,50444,50444,11,50472,50472,11,50500,50500,11,50528,50528,11,50556,50556,11,50584,50584,11,50612,50612,11,50640,50640,11,50668,50668,11,50696,50696,11,50724,50724,11,50752,50752,11,50780,50780,11,50808,50808,11,50836,50836,11,50864,50864,11,50892,50892,11,50920,50920,11,50948,50948,11,50976,50976,11,51004,51004,11,51032,51032,11,51060,51060,11,51088,51088,11,51116,51116,11,51144,51144,11,51172,51172,11,51200,51200,11,51228,51228,11,51256,51256,11,51284,51284,11,51312,51312,11,51340,51340,11,51368,51368,11,51396,51396,11,51424,51424,11,51452,51452,11,51480,51480,11,51508,51508,11,51536,51536,11,51564,51564,11,51592,51592,11,51620,51620,11,51648,51648,11,51676,51676,11,51704,51704,11,51732,51732,11,51760,51760,11,51788,51788,11,51816,51816,11,51844,51844,11,51872,51872,11,51900,51900,11,51928,51928,11,51956,51956,11,51984,51984,11,52012,52012,11,52040,52040,11,52068,52068,11,52096,52096,11,52124,52124,11,52152,52152,11,52180,52180,11,52208,52208,11,52236,52236,11,52264,52264,11,52292,52292,11,52320,52320,11,52348,52348,11,52376,52376,11,52404,52404,11,52432,52432,11,52460,52460,11,52488,52488,11,52516,52516,11,52544,52544,11,52572,52572,11,52600,52600,11,52628,52628,11,52656,52656,11,52684,52684,11,52712,52712,11,52740,52740,11,52768,52768,11,52796,52796,11,52824,52824,11,52852,52852,11,52880,52880,11,52908,52908,11,52936,52936,11,52964,52964,11,52992,52992,11,53020,53020,11,53048,53048,11,53076,53076,11,53104,53104,11,53132,53132,11,53160,53160,11,53188,53188,11,53216,53216,11,53244,53244,11,53272,53272,11,53300,53300,11,53328,53328,11,53356,53356,11,53384,53384,11,53412,53412,11,53440,53440,11,53468,53468,11,53496,53496,11,53524,53524,11,53552,53552,11,53580,53580,11,53608,53608,11,53636,53636,11,53664,53664,11,53692,53692,11,53720,53720,11,53748,53748,11,53776,53776,11,53804,53804,11,53832,53832,11,53860,53860,11,53888,53888,11,53916,53916,11,53944,53944,11,53972,53972,11,54000,54000,11,54028,54028,11,54056,54056,11,54084,54084,11,54112,54112,11,54140,54140,11,54168,54168,11,54196,54196,11,54224,54224,11,54252,54252,11,54280,54280,11,54308,54308,11,54336,54336,11,54364,54364,11,54392,54392,11,54420,54420,11,54448,54448,11,54476,54476,11,54504,54504,11,54532,54532,11,54560,54560,11,54588,54588,11,54616,54616,11,54644,54644,11,54672,54672,11,54700,54700,11,54728,54728,11,54756,54756,11,54784,54784,11,54812,54812,11,54840,54840,11,54868,54868,11,54896,54896,11,54924,54924,11,54952,54952,11,54980,54980,11,55008,55008,11,55036,55036,11,55064,55064,11,55092,55092,11,55120,55120,11,55148,55148,11,55176,55176,11,55216,55238,9,64286,64286,5,65056,65071,5,65438,65439,5,65529,65531,4,66272,66272,5,68097,68099,5,68108,68111,5,68159,68159,5,68900,68903,5,69446,69456,5,69632,69632,7,69634,69634,7,69744,69744,5,69759,69761,5,69808,69810,7,69815,69816,7,69821,69821,1,69837,69837,1,69927,69931,5,69933,69940,5,70003,70003,5,70018,70018,7,70070,70078,5,70082,70083,1,70094,70094,7,70188,70190,7,70194,70195,7,70197,70197,7,70206,70206,5,70368,70370,7,70400,70401,5,70459,70460,5,70463,70463,7,70465,70468,7,70475,70477,7,70498,70499,7,70512,70516,5,70712,70719,5,70722,70724,5,70726,70726,5,70832,70832,5,70835,70840,5,70842,70842,5,70845,70845,5,70847,70848,5,70850,70851,5,71088,71089,7,71096,71099,7,71102,71102,7,71132,71133,5,71219,71226,5,71229,71229,5,71231,71232,5,71340,71340,7,71342,71343,7,71350,71350,7,71453,71455,5,71462,71462,7,71724,71726,7,71736,71736,7,71984,71984,5,71991,71992,7,71997,71997,7,71999,71999,1,72001,72001,1,72003,72003,5,72148,72151,5,72156,72159,7,72164,72164,7,72243,72248,5,72250,72250,1,72263,72263,5,72279,72280,7,72324,72329,1,72343,72343,7,72751,72751,7,72760,72765,5,72767,72767,5,72873,72873,7,72881,72881,7,72884,72884,7,73009,73014,5,73020,73021,5,73030,73030,1,73098,73102,7,73107,73108,7,73110,73110,7,73459,73460,5,78896,78904,4,92976,92982,5,94033,94087,7,94180,94180,5,113821,113822,5,118528,118573,5,119141,119141,5,119143,119145,5,119150,119154,5,119163,119170,5,119210,119213,5,121344,121398,5,121461,121461,5,121499,121503,5,122880,122886,5,122907,122913,5,122918,122922,5,123566,123566,5,125136,125142,5,126976,126979,14,126981,127182,14,127184,127231,14,127279,127279,14,127344,127345,14,127374,127374,14,127405,127461,14,127489,127490,14,127514,127514,14,127538,127546,14,127561,127567,14,127570,127743,14,127757,127758,14,127760,127760,14,127762,127762,14,127766,127768,14,127770,127770,14,127772,127772,14,127775,127776,14,127778,127779,14,127789,127791,14,127794,127795,14,127798,127798,14,127819,127819,14,127824,127824,14,127868,127868,14,127870,127871,14,127892,127893,14,127896,127896,14,127900,127901,14,127904,127940,14,127942,127942,14,127944,127944,14,127946,127946,14,127951,127955,14,127968,127971,14,127973,127984,14,127987,127987,14,127989,127989,14,127991,127991,14,127995,127999,5,128008,128008,14,128012,128014,14,128017,128018,14,128020,128020,14,128022,128022,14,128042,128042,14,128063,128063,14,128065,128065,14,128101,128101,14,128108,128109,14,128173,128173,14,128182,128183,14,128236,128237,14,128239,128239,14,128245,128245,14,128248,128248,14,128253,128253,14,128255,128258,14,128260,128263,14,128265,128265,14,128277,128277,14,128300,128301,14,128326,128328,14,128331,128334,14,128336,128347,14,128360,128366,14,128369,128370,14,128378,128378,14,128391,128391,14,128394,128397,14,128400,128400,14,128405,128406,14,128420,128420,14,128422,128423,14,128425,128432,14,128435,128443,14,128445,128449,14,128453,128464,14,128468,128475,14,128479,128480,14,128482,128482,14,128484,128487,14,128489,128494,14,128496,128498,14,128500,128505,14,128507,128511,14,128513,128518,14,128521,128525,14,128527,128527,14,128529,128529,14,128533,128533,14,128535,128535,14,128537,128537,14]")}getGraphemeBreakType(e){if(e<32)return 10===e?3:13===e?2:4;if(e<127)return 0;const t=this._data,n=t.length/3;let i=1;for(;i<=n;)if(e<t[3*i])i*=2;else{if(!(e>t[3*i+1]))return t[3*i+2];i=2*i+1}return 0}}G._INSTANCE=null;class K{static getInstance(e){return F.cache.get(Array.from(e))}static getLocales(){return F._locales.value}constructor(e){this.confusableDictionary=e}isAmbiguous(e){return this.confusableDictionary.has(e)}getPrimaryConfusable(e){return this.confusableDictionary.get(e)}getConfusableCodePoints(){return new Set(this.confusableDictionary.keys())}}F=K,K.ambiguousCharacterData=new B((()=>JSON.parse('{"_common":[8232,32,8233,32,5760,32,8192,32,8193,32,8194,32,8195,32,8196,32,8197,32,8198,32,8200,32,8201,32,8202,32,8287,32,8199,32,8239,32,2042,95,65101,95,65102,95,65103,95,8208,45,8209,45,8210,45,65112,45,1748,45,8259,45,727,45,8722,45,10134,45,11450,45,1549,44,1643,44,8218,44,184,44,42233,44,894,59,2307,58,2691,58,1417,58,1795,58,1796,58,5868,58,65072,58,6147,58,6153,58,8282,58,1475,58,760,58,42889,58,8758,58,720,58,42237,58,451,33,11601,33,660,63,577,63,2429,63,5038,63,42731,63,119149,46,8228,46,1793,46,1794,46,42510,46,68176,46,1632,46,1776,46,42232,46,1373,96,65287,96,8219,96,8242,96,1370,96,1523,96,8175,96,65344,96,900,96,8189,96,8125,96,8127,96,8190,96,697,96,884,96,712,96,714,96,715,96,756,96,699,96,701,96,700,96,702,96,42892,96,1497,96,2036,96,2037,96,5194,96,5836,96,94033,96,94034,96,65339,91,10088,40,10098,40,12308,40,64830,40,65341,93,10089,41,10099,41,12309,41,64831,41,10100,123,119060,123,10101,125,65342,94,8270,42,1645,42,8727,42,66335,42,5941,47,8257,47,8725,47,8260,47,9585,47,10187,47,10744,47,119354,47,12755,47,12339,47,11462,47,20031,47,12035,47,65340,92,65128,92,8726,92,10189,92,10741,92,10745,92,119311,92,119355,92,12756,92,20022,92,12034,92,42872,38,708,94,710,94,5869,43,10133,43,66203,43,8249,60,10094,60,706,60,119350,60,5176,60,5810,60,5120,61,11840,61,12448,61,42239,61,8250,62,10095,62,707,62,119351,62,5171,62,94015,62,8275,126,732,126,8128,126,8764,126,65372,124,65293,45,120784,50,120794,50,120804,50,120814,50,120824,50,130034,50,42842,50,423,50,1000,50,42564,50,5311,50,42735,50,119302,51,120785,51,120795,51,120805,51,120815,51,120825,51,130035,51,42923,51,540,51,439,51,42858,51,11468,51,1248,51,94011,51,71882,51,120786,52,120796,52,120806,52,120816,52,120826,52,130036,52,5070,52,71855,52,120787,53,120797,53,120807,53,120817,53,120827,53,130037,53,444,53,71867,53,120788,54,120798,54,120808,54,120818,54,120828,54,130038,54,11474,54,5102,54,71893,54,119314,55,120789,55,120799,55,120809,55,120819,55,120829,55,130039,55,66770,55,71878,55,2819,56,2538,56,2666,56,125131,56,120790,56,120800,56,120810,56,120820,56,120830,56,130040,56,547,56,546,56,66330,56,2663,57,2920,57,2541,57,3437,57,120791,57,120801,57,120811,57,120821,57,120831,57,130041,57,42862,57,11466,57,71884,57,71852,57,71894,57,9082,97,65345,97,119834,97,119886,97,119938,97,119990,97,120042,97,120094,97,120146,97,120198,97,120250,97,120302,97,120354,97,120406,97,120458,97,593,97,945,97,120514,97,120572,97,120630,97,120688,97,120746,97,65313,65,119808,65,119860,65,119912,65,119964,65,120016,65,120068,65,120120,65,120172,65,120224,65,120276,65,120328,65,120380,65,120432,65,913,65,120488,65,120546,65,120604,65,120662,65,120720,65,5034,65,5573,65,42222,65,94016,65,66208,65,119835,98,119887,98,119939,98,119991,98,120043,98,120095,98,120147,98,120199,98,120251,98,120303,98,120355,98,120407,98,120459,98,388,98,5071,98,5234,98,5551,98,65314,66,8492,66,119809,66,119861,66,119913,66,120017,66,120069,66,120121,66,120173,66,120225,66,120277,66,120329,66,120381,66,120433,66,42932,66,914,66,120489,66,120547,66,120605,66,120663,66,120721,66,5108,66,5623,66,42192,66,66178,66,66209,66,66305,66,65347,99,8573,99,119836,99,119888,99,119940,99,119992,99,120044,99,120096,99,120148,99,120200,99,120252,99,120304,99,120356,99,120408,99,120460,99,7428,99,1010,99,11429,99,43951,99,66621,99,128844,67,71922,67,71913,67,65315,67,8557,67,8450,67,8493,67,119810,67,119862,67,119914,67,119966,67,120018,67,120174,67,120226,67,120278,67,120330,67,120382,67,120434,67,1017,67,11428,67,5087,67,42202,67,66210,67,66306,67,66581,67,66844,67,8574,100,8518,100,119837,100,119889,100,119941,100,119993,100,120045,100,120097,100,120149,100,120201,100,120253,100,120305,100,120357,100,120409,100,120461,100,1281,100,5095,100,5231,100,42194,100,8558,68,8517,68,119811,68,119863,68,119915,68,119967,68,120019,68,120071,68,120123,68,120175,68,120227,68,120279,68,120331,68,120383,68,120435,68,5024,68,5598,68,5610,68,42195,68,8494,101,65349,101,8495,101,8519,101,119838,101,119890,101,119942,101,120046,101,120098,101,120150,101,120202,101,120254,101,120306,101,120358,101,120410,101,120462,101,43826,101,1213,101,8959,69,65317,69,8496,69,119812,69,119864,69,119916,69,120020,69,120072,69,120124,69,120176,69,120228,69,120280,69,120332,69,120384,69,120436,69,917,69,120492,69,120550,69,120608,69,120666,69,120724,69,11577,69,5036,69,42224,69,71846,69,71854,69,66182,69,119839,102,119891,102,119943,102,119995,102,120047,102,120099,102,120151,102,120203,102,120255,102,120307,102,120359,102,120411,102,120463,102,43829,102,42905,102,383,102,7837,102,1412,102,119315,70,8497,70,119813,70,119865,70,119917,70,120021,70,120073,70,120125,70,120177,70,120229,70,120281,70,120333,70,120385,70,120437,70,42904,70,988,70,120778,70,5556,70,42205,70,71874,70,71842,70,66183,70,66213,70,66853,70,65351,103,8458,103,119840,103,119892,103,119944,103,120048,103,120100,103,120152,103,120204,103,120256,103,120308,103,120360,103,120412,103,120464,103,609,103,7555,103,397,103,1409,103,119814,71,119866,71,119918,71,119970,71,120022,71,120074,71,120126,71,120178,71,120230,71,120282,71,120334,71,120386,71,120438,71,1292,71,5056,71,5107,71,42198,71,65352,104,8462,104,119841,104,119945,104,119997,104,120049,104,120101,104,120153,104,120205,104,120257,104,120309,104,120361,104,120413,104,120465,104,1211,104,1392,104,5058,104,65320,72,8459,72,8460,72,8461,72,119815,72,119867,72,119919,72,120023,72,120179,72,120231,72,120283,72,120335,72,120387,72,120439,72,919,72,120494,72,120552,72,120610,72,120668,72,120726,72,11406,72,5051,72,5500,72,42215,72,66255,72,731,105,9075,105,65353,105,8560,105,8505,105,8520,105,119842,105,119894,105,119946,105,119998,105,120050,105,120102,105,120154,105,120206,105,120258,105,120310,105,120362,105,120414,105,120466,105,120484,105,618,105,617,105,953,105,8126,105,890,105,120522,105,120580,105,120638,105,120696,105,120754,105,1110,105,42567,105,1231,105,43893,105,5029,105,71875,105,65354,106,8521,106,119843,106,119895,106,119947,106,119999,106,120051,106,120103,106,120155,106,120207,106,120259,106,120311,106,120363,106,120415,106,120467,106,1011,106,1112,106,65322,74,119817,74,119869,74,119921,74,119973,74,120025,74,120077,74,120129,74,120181,74,120233,74,120285,74,120337,74,120389,74,120441,74,42930,74,895,74,1032,74,5035,74,5261,74,42201,74,119844,107,119896,107,119948,107,120000,107,120052,107,120104,107,120156,107,120208,107,120260,107,120312,107,120364,107,120416,107,120468,107,8490,75,65323,75,119818,75,119870,75,119922,75,119974,75,120026,75,120078,75,120130,75,120182,75,120234,75,120286,75,120338,75,120390,75,120442,75,922,75,120497,75,120555,75,120613,75,120671,75,120729,75,11412,75,5094,75,5845,75,42199,75,66840,75,1472,108,8739,73,9213,73,65512,73,1633,108,1777,73,66336,108,125127,108,120783,73,120793,73,120803,73,120813,73,120823,73,130033,73,65321,73,8544,73,8464,73,8465,73,119816,73,119868,73,119920,73,120024,73,120128,73,120180,73,120232,73,120284,73,120336,73,120388,73,120440,73,65356,108,8572,73,8467,108,119845,108,119897,108,119949,108,120001,108,120053,108,120105,73,120157,73,120209,73,120261,73,120313,73,120365,73,120417,73,120469,73,448,73,120496,73,120554,73,120612,73,120670,73,120728,73,11410,73,1030,73,1216,73,1493,108,1503,108,1575,108,126464,108,126592,108,65166,108,65165,108,1994,108,11599,73,5825,73,42226,73,93992,73,66186,124,66313,124,119338,76,8556,76,8466,76,119819,76,119871,76,119923,76,120027,76,120079,76,120131,76,120183,76,120235,76,120287,76,120339,76,120391,76,120443,76,11472,76,5086,76,5290,76,42209,76,93974,76,71843,76,71858,76,66587,76,66854,76,65325,77,8559,77,8499,77,119820,77,119872,77,119924,77,120028,77,120080,77,120132,77,120184,77,120236,77,120288,77,120340,77,120392,77,120444,77,924,77,120499,77,120557,77,120615,77,120673,77,120731,77,1018,77,11416,77,5047,77,5616,77,5846,77,42207,77,66224,77,66321,77,119847,110,119899,110,119951,110,120003,110,120055,110,120107,110,120159,110,120211,110,120263,110,120315,110,120367,110,120419,110,120471,110,1400,110,1404,110,65326,78,8469,78,119821,78,119873,78,119925,78,119977,78,120029,78,120081,78,120185,78,120237,78,120289,78,120341,78,120393,78,120445,78,925,78,120500,78,120558,78,120616,78,120674,78,120732,78,11418,78,42208,78,66835,78,3074,111,3202,111,3330,111,3458,111,2406,111,2662,111,2790,111,3046,111,3174,111,3302,111,3430,111,3664,111,3792,111,4160,111,1637,111,1781,111,65359,111,8500,111,119848,111,119900,111,119952,111,120056,111,120108,111,120160,111,120212,111,120264,111,120316,111,120368,111,120420,111,120472,111,7439,111,7441,111,43837,111,959,111,120528,111,120586,111,120644,111,120702,111,120760,111,963,111,120532,111,120590,111,120648,111,120706,111,120764,111,11423,111,4351,111,1413,111,1505,111,1607,111,126500,111,126564,111,126596,111,65259,111,65260,111,65258,111,65257,111,1726,111,64428,111,64429,111,64427,111,64426,111,1729,111,64424,111,64425,111,64423,111,64422,111,1749,111,3360,111,4125,111,66794,111,71880,111,71895,111,66604,111,1984,79,2534,79,2918,79,12295,79,70864,79,71904,79,120782,79,120792,79,120802,79,120812,79,120822,79,130032,79,65327,79,119822,79,119874,79,119926,79,119978,79,120030,79,120082,79,120134,79,120186,79,120238,79,120290,79,120342,79,120394,79,120446,79,927,79,120502,79,120560,79,120618,79,120676,79,120734,79,11422,79,1365,79,11604,79,4816,79,2848,79,66754,79,42227,79,71861,79,66194,79,66219,79,66564,79,66838,79,9076,112,65360,112,119849,112,119901,112,119953,112,120005,112,120057,112,120109,112,120161,112,120213,112,120265,112,120317,112,120369,112,120421,112,120473,112,961,112,120530,112,120544,112,120588,112,120602,112,120646,112,120660,112,120704,112,120718,112,120762,112,120776,112,11427,112,65328,80,8473,80,119823,80,119875,80,119927,80,119979,80,120031,80,120083,80,120187,80,120239,80,120291,80,120343,80,120395,80,120447,80,929,80,120504,80,120562,80,120620,80,120678,80,120736,80,11426,80,5090,80,5229,80,42193,80,66197,80,119850,113,119902,113,119954,113,120006,113,120058,113,120110,113,120162,113,120214,113,120266,113,120318,113,120370,113,120422,113,120474,113,1307,113,1379,113,1382,113,8474,81,119824,81,119876,81,119928,81,119980,81,120032,81,120084,81,120188,81,120240,81,120292,81,120344,81,120396,81,120448,81,11605,81,119851,114,119903,114,119955,114,120007,114,120059,114,120111,114,120163,114,120215,114,120267,114,120319,114,120371,114,120423,114,120475,114,43847,114,43848,114,7462,114,11397,114,43905,114,119318,82,8475,82,8476,82,8477,82,119825,82,119877,82,119929,82,120033,82,120189,82,120241,82,120293,82,120345,82,120397,82,120449,82,422,82,5025,82,5074,82,66740,82,5511,82,42211,82,94005,82,65363,115,119852,115,119904,115,119956,115,120008,115,120060,115,120112,115,120164,115,120216,115,120268,115,120320,115,120372,115,120424,115,120476,115,42801,115,445,115,1109,115,43946,115,71873,115,66632,115,65331,83,119826,83,119878,83,119930,83,119982,83,120034,83,120086,83,120138,83,120190,83,120242,83,120294,83,120346,83,120398,83,120450,83,1029,83,1359,83,5077,83,5082,83,42210,83,94010,83,66198,83,66592,83,119853,116,119905,116,119957,116,120009,116,120061,116,120113,116,120165,116,120217,116,120269,116,120321,116,120373,116,120425,116,120477,116,8868,84,10201,84,128872,84,65332,84,119827,84,119879,84,119931,84,119983,84,120035,84,120087,84,120139,84,120191,84,120243,84,120295,84,120347,84,120399,84,120451,84,932,84,120507,84,120565,84,120623,84,120681,84,120739,84,11430,84,5026,84,42196,84,93962,84,71868,84,66199,84,66225,84,66325,84,119854,117,119906,117,119958,117,120010,117,120062,117,120114,117,120166,117,120218,117,120270,117,120322,117,120374,117,120426,117,120478,117,42911,117,7452,117,43854,117,43858,117,651,117,965,117,120534,117,120592,117,120650,117,120708,117,120766,117,1405,117,66806,117,71896,117,8746,85,8899,85,119828,85,119880,85,119932,85,119984,85,120036,85,120088,85,120140,85,120192,85,120244,85,120296,85,120348,85,120400,85,120452,85,1357,85,4608,85,66766,85,5196,85,42228,85,94018,85,71864,85,8744,118,8897,118,65366,118,8564,118,119855,118,119907,118,119959,118,120011,118,120063,118,120115,118,120167,118,120219,118,120271,118,120323,118,120375,118,120427,118,120479,118,7456,118,957,118,120526,118,120584,118,120642,118,120700,118,120758,118,1141,118,1496,118,71430,118,43945,118,71872,118,119309,86,1639,86,1783,86,8548,86,119829,86,119881,86,119933,86,119985,86,120037,86,120089,86,120141,86,120193,86,120245,86,120297,86,120349,86,120401,86,120453,86,1140,86,11576,86,5081,86,5167,86,42719,86,42214,86,93960,86,71840,86,66845,86,623,119,119856,119,119908,119,119960,119,120012,119,120064,119,120116,119,120168,119,120220,119,120272,119,120324,119,120376,119,120428,119,120480,119,7457,119,1121,119,1309,119,1377,119,71434,119,71438,119,71439,119,43907,119,71919,87,71910,87,119830,87,119882,87,119934,87,119986,87,120038,87,120090,87,120142,87,120194,87,120246,87,120298,87,120350,87,120402,87,120454,87,1308,87,5043,87,5076,87,42218,87,5742,120,10539,120,10540,120,10799,120,65368,120,8569,120,119857,120,119909,120,119961,120,120013,120,120065,120,120117,120,120169,120,120221,120,120273,120,120325,120,120377,120,120429,120,120481,120,5441,120,5501,120,5741,88,9587,88,66338,88,71916,88,65336,88,8553,88,119831,88,119883,88,119935,88,119987,88,120039,88,120091,88,120143,88,120195,88,120247,88,120299,88,120351,88,120403,88,120455,88,42931,88,935,88,120510,88,120568,88,120626,88,120684,88,120742,88,11436,88,11613,88,5815,88,42219,88,66192,88,66228,88,66327,88,66855,88,611,121,7564,121,65369,121,119858,121,119910,121,119962,121,120014,121,120066,121,120118,121,120170,121,120222,121,120274,121,120326,121,120378,121,120430,121,120482,121,655,121,7935,121,43866,121,947,121,8509,121,120516,121,120574,121,120632,121,120690,121,120748,121,1199,121,4327,121,71900,121,65337,89,119832,89,119884,89,119936,89,119988,89,120040,89,120092,89,120144,89,120196,89,120248,89,120300,89,120352,89,120404,89,120456,89,933,89,978,89,120508,89,120566,89,120624,89,120682,89,120740,89,11432,89,1198,89,5033,89,5053,89,42220,89,94019,89,71844,89,66226,89,119859,122,119911,122,119963,122,120015,122,120067,122,120119,122,120171,122,120223,122,120275,122,120327,122,120379,122,120431,122,120483,122,7458,122,43923,122,71876,122,66293,90,71909,90,65338,90,8484,90,8488,90,119833,90,119885,90,119937,90,119989,90,120041,90,120197,90,120249,90,120301,90,120353,90,120405,90,120457,90,918,90,120493,90,120551,90,120609,90,120667,90,120725,90,5059,90,42204,90,71849,90,65282,34,65284,36,65285,37,65286,38,65290,42,65291,43,65294,46,65295,47,65296,48,65297,49,65298,50,65299,51,65300,52,65301,53,65302,54,65303,55,65304,56,65305,57,65308,60,65309,61,65310,62,65312,64,65316,68,65318,70,65319,71,65324,76,65329,81,65330,82,65333,85,65334,86,65335,87,65343,95,65346,98,65348,100,65350,102,65355,107,65357,109,65358,110,65361,113,65362,114,65364,116,65365,117,65367,119,65370,122,65371,123,65373,125,119846,109],"_default":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"cs":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"de":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"es":[8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"fr":[65374,126,65306,58,65281,33,8216,96,8245,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"it":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"ja":[8211,45,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65292,44,65307,59],"ko":[8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"pl":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"pt-BR":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"qps-ploc":[160,32,8211,45,65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"ru":[65374,126,65306,58,65281,33,8216,96,8217,96,8245,96,180,96,12494,47,305,105,921,73,1009,112,215,120,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"tr":[160,32,8211,45,65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65288,40,65289,41,65292,44,65307,59,65311,63],"zh-hans":[65374,126,65306,58,65281,33,8245,96,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65288,40,65289,41],"zh-hant":[8211,45,65374,126,180,96,12494,47,1047,51,1073,54,1072,97,1040,65,1068,98,1042,66,1089,99,1057,67,1077,101,1045,69,1053,72,305,105,1050,75,921,73,1052,77,1086,111,1054,79,1009,112,1088,112,1056,80,1075,114,1058,84,215,120,1093,120,1061,88,1091,121,1059,89,65283,35,65307,59]}'))),K.cache=new class{constructor(e){this.fn=e,this.lastCache=void 0,this.lastArgKey=void 0}get(e){const t=JSON.stringify(e);return this.lastArgKey!==t&&(this.lastArgKey=t,this.lastCache=this.fn(e)),this.lastCache}}((e=>{function t(e){const t=new Map;for(let n=0;n<e.length;n+=2)t.set(e[n],e[n+1]);return t}function n(e,t){if(!e)return t;const n=new Map;for(const[i,o]of e)t.has(i)&&n.set(i,o);return n}const i=F.ambiguousCharacterData.value;let o,a=e.filter((e=>!e.startsWith("_")&&e in i));0===a.length&&(a=["_default"]);for(const e of a){o=n(o,t(i[e]))}const r=function(e,t){const n=new Map(e);for(const[e,i]of t)n.set(e,i);return n}(t(i._common),o);return new F(r)})),K._locales=new B((()=>Object.keys(F.ambiguousCharacterData.value).filter((e=>!e.startsWith("_")))));class W{static getRawData(){return JSON.parse("[9,10,11,12,13,32,127,160,173,847,1564,4447,4448,6068,6069,6155,6156,6157,6158,7355,7356,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8203,8204,8205,8206,8207,8234,8235,8236,8237,8238,8239,8287,8288,8289,8290,8291,8292,8293,8294,8295,8296,8297,8298,8299,8300,8301,8302,8303,10240,12288,12644,65024,65025,65026,65027,65028,65029,65030,65031,65032,65033,65034,65035,65036,65037,65038,65039,65279,65440,65520,65521,65522,65523,65524,65525,65526,65527,65528,65532,78844,119155,119156,119157,119158,119159,119160,119161,119162,917504,917505,917506,917507,917508,917509,917510,917511,917512,917513,917514,917515,917516,917517,917518,917519,917520,917521,917522,917523,917524,917525,917526,917527,917528,917529,917530,917531,917532,917533,917534,917535,917536,917537,917538,917539,917540,917541,917542,917543,917544,917545,917546,917547,917548,917549,917550,917551,917552,917553,917554,917555,917556,917557,917558,917559,917560,917561,917562,917563,917564,917565,917566,917567,917568,917569,917570,917571,917572,917573,917574,917575,917576,917577,917578,917579,917580,917581,917582,917583,917584,917585,917586,917587,917588,917589,917590,917591,917592,917593,917594,917595,917596,917597,917598,917599,917600,917601,917602,917603,917604,917605,917606,917607,917608,917609,917610,917611,917612,917613,917614,917615,917616,917617,917618,917619,917620,917621,917622,917623,917624,917625,917626,917627,917628,917629,917630,917631,917760,917761,917762,917763,917764,917765,917766,917767,917768,917769,917770,917771,917772,917773,917774,917775,917776,917777,917778,917779,917780,917781,917782,917783,917784,917785,917786,917787,917788,917789,917790,917791,917792,917793,917794,917795,917796,917797,917798,917799,917800,917801,917802,917803,917804,917805,917806,917807,917808,917809,917810,917811,917812,917813,917814,917815,917816,917817,917818,917819,917820,917821,917822,917823,917824,917825,917826,917827,917828,917829,917830,917831,917832,917833,917834,917835,917836,917837,917838,917839,917840,917841,917842,917843,917844,917845,917846,917847,917848,917849,917850,917851,917852,917853,917854,917855,917856,917857,917858,917859,917860,917861,917862,917863,917864,917865,917866,917867,917868,917869,917870,917871,917872,917873,917874,917875,917876,917877,917878,917879,917880,917881,917882,917883,917884,917885,917886,917887,917888,917889,917890,917891,917892,917893,917894,917895,917896,917897,917898,917899,917900,917901,917902,917903,917904,917905,917906,917907,917908,917909,917910,917911,917912,917913,917914,917915,917916,917917,917918,917919,917920,917921,917922,917923,917924,917925,917926,917927,917928,917929,917930,917931,917932,917933,917934,917935,917936,917937,917938,917939,917940,917941,917942,917943,917944,917945,917946,917947,917948,917949,917950,917951,917952,917953,917954,917955,917956,917957,917958,917959,917960,917961,917962,917963,917964,917965,917966,917967,917968,917969,917970,917971,917972,917973,917974,917975,917976,917977,917978,917979,917980,917981,917982,917983,917984,917985,917986,917987,917988,917989,917990,917991,917992,917993,917994,917995,917996,917997,917998,917999]")}static getData(){return this._data||(this._data=new Set(W.getRawData())),this._data}static isInvisibleCharacter(e){return W.getData().has(e)}static get codePoints(){return W.getData()}}W._data=void 0;const z="$initialize";class Z{constructor(e,t,n,i){this.vsWorker=e,this.req=t,this.method=n,this.args=i,this.type=0}}class X{constructor(e,t,n,i){this.vsWorker=e,this.seq=t,this.res=n,this.err=i,this.type=1}}class J{constructor(e,t,n,i){this.vsWorker=e,this.req=t,this.eventName=n,this.arg=i,this.type=2}}class ${constructor(e,t,n){this.vsWorker=e,this.req=t,this.event=n,this.type=3}}class Q{constructor(e,t){this.vsWorker=e,this.req=t,this.type=4}}class ee{constructor(e){this._workerId=-1,this._handler=e,this._lastSentReq=0,this._pendingReplies=Object.create(null),this._pendingEmitters=new Map,this._pendingEvents=new Map}setWorkerId(e){this._workerId=e}sendMessage(e,t){const n=String(++this._lastSentReq);return new Promise(((i,o)=>{this._pendingReplies[n]={resolve:i,reject:o},this._send(new Z(this._workerId,n,e,t))}))}listen(e,t){let n=null;const i=new R({onWillAddFirstListener:()=>{n=String(++this._lastSentReq),this._pendingEmitters.set(n,i),this._send(new J(this._workerId,n,e,t))},onDidRemoveLastListener:()=>{this._pendingEmitters.delete(n),this._send(new Q(this._workerId,n)),n=null}});return i.event}handleMessage(e){e&&e.vsWorker&&(-1!==this._workerId&&e.vsWorker!==this._workerId||this._handleMessage(e))}_handleMessage(e){switch(e.type){case 1:return this._handleReplyMessage(e);case 0:return this._handleRequestMessage(e);case 2:return this._handleSubscribeEventMessage(e);case 3:return this._handleEventMessage(e);case 4:return this._handleUnsubscribeEventMessage(e)}}_handleReplyMessage(e){if(!this._pendingReplies[e.seq])return void console.warn("Got reply to unknown seq");const t=this._pendingReplies[e.seq];if(delete this._pendingReplies[e.seq],e.err){let n=e.err;return e.err.$isError&&(n=new Error,n.name=e.err.name,n.message=e.err.message,n.stack=e.err.stack),void t.reject(n)}t.resolve(e.res)}_handleRequestMessage(e){const t=e.req;this._handler.handleMessage(e.method,e.args).then((e=>{this._send(new X(this._workerId,t,e,void 0))}),(e=>{e.detail instanceof Error&&(e.detail=a(e.detail)),this._send(new X(this._workerId,t,void 0,a(e)))}))}_handleSubscribeEventMessage(e){const t=e.req,n=this._handler.handleEvent(e.eventName,e.arg)((e=>{this._send(new $(this._workerId,t,e))}));this._pendingEvents.set(t,n)}_handleEventMessage(e){this._pendingEmitters.has(e.req)?this._pendingEmitters.get(e.req).fire(e.event):console.warn("Got event for unknown req")}_handleUnsubscribeEventMessage(e){this._pendingEvents.has(e.req)?(this._pendingEvents.get(e.req).dispose(),this._pendingEvents.delete(e.req)):console.warn("Got unsubscribe for unknown req")}_send(e){const t=[];if(0===e.type)for(let n=0;n<e.args.length;n++)e.args[n]instanceof ArrayBuffer&&t.push(e.args[n]);else 1===e.type&&e.res instanceof ArrayBuffer&&t.push(e.res);this._handler.sendMessage(e,t)}}function te(e){return"o"===e[0]&&"n"===e[1]&&U(e.charCodeAt(2))}function ne(e){return/^onDynamic/.test(e)&&U(e.charCodeAt(9))}function ie(e,t,n){const i=e=>function(){const n=Array.prototype.slice.call(arguments,0);return t(e,n)},o=e=>function(t){return n(e,t)},a={};for(const t of e)ne(t)?a[t]=o(t):te(t)?a[t]=n(t,void 0):a[t]=i(t);return a}class oe{constructor(e,t){this._requestHandlerFactory=t,this._requestHandler=null,this._protocol=new ee({sendMessage:(t,n)=>{e(t,n)},handleMessage:(e,t)=>this._handleMessage(e,t),handleEvent:(e,t)=>this._handleEvent(e,t)})}onmessage(e){this._protocol.handleMessage(e)}_handleMessage(e,t){if(e===z)return this.initialize(t[0],t[1],t[2],t[3]);if(!this._requestHandler||"function"!=typeof this._requestHandler[e])return Promise.reject(new Error("Missing requestHandler or method: "+e));try{return Promise.resolve(this._requestHandler[e].apply(this._requestHandler,t))}catch(e){return Promise.reject(e)}}_handleEvent(e,t){if(!this._requestHandler)throw new Error("Missing requestHandler");if(ne(e)){const n=this._requestHandler[e].call(this._requestHandler,t);if("function"!=typeof n)throw new Error(`Missing dynamic event ${e} on request handler.`);return n}if(te(e)){const t=this._requestHandler[e];if("function"!=typeof t)throw new Error(`Missing event ${e} on request handler.`);return t}throw new Error(`Malformed event name ${e}`)}initialize(e,t,n,i){this._protocol.setWorkerId(e);const o=ie(i,((e,t)=>this._protocol.sendMessage(e,t)),((e,t)=>this._protocol.listen(e,t)));return this._requestHandlerFactory?(this._requestHandler=this._requestHandlerFactory(o),Promise.resolve(v(this._requestHandler))):(t&&(void 0!==t.baseUrl&&delete t.baseUrl,void 0!==t.paths&&void 0!==t.paths.vs&&delete t.paths.vs,void 0!==typeof t.trustedTypesPolicy&&delete t.trustedTypesPolicy,t.catchError=!0,globalThis.require.config(t)),new Promise(((e,t)=>{(0,globalThis.require)([n],(n=>{this._requestHandler=n.create(o),this._requestHandler?e(v(this._requestHandler)):t(new Error("No RequestHandler!"))}),t)})))}}class ae{constructor(e,t,n,i){this.originalStart=e,this.originalLength=t,this.modifiedStart=n,this.modifiedLength=i}getOriginalEnd(){return this.originalStart+this.originalLength}getModifiedEnd(){return this.modifiedStart+this.modifiedLength}}function re(e,t){return(t<<5)-t+e|0}function se(e,t){t=re(149417,t);for(let n=0,i=e.length;n<i;n++)t=re(e.charCodeAt(n),t);return t}function le(e,t,n=32){const i=n-t;return(e<<t|(~((1<<i)-1)&e)>>>i)>>>0}function de(e,t=0,n=e.byteLength,i=0){for(let o=0;o<n;o++)e[t+o]=i}function ce(e,t=32){return e instanceof ArrayBuffer?Array.from(new Uint8Array(e)).map((e=>e.toString(16).padStart(2,"0"))).join(""):function(e,t,n="0"){for(;e.length<t;)e=n+e;return e}((e>>>0).toString(16),t/4)}class ue{constructor(){this._h0=1732584193,this._h1=4023233417,this._h2=2562383102,this._h3=271733878,this._h4=3285377520,this._buff=new Uint8Array(67),this._buffDV=new DataView(this._buff.buffer),this._buffLen=0,this._totalLen=0,this._leftoverHighSurrogate=0,this._finished=!1}update(e){const t=e.length;if(0===t)return;const n=this._buff;let i,o,a=this._buffLen,r=this._leftoverHighSurrogate;for(0!==r?(i=r,o=-1,r=0):(i=e.charCodeAt(0),o=0);;){let s=i;if(q(i)){if(!(o+1<t)){r=i;break}{const t=e.charCodeAt(o+1);H(t)?(o++,s=V(i,t)):s=65533}}else H(i)&&(s=65533);if(a=this._push(n,a,s),o++,!(o<t))break;i=e.charCodeAt(o)}this._buffLen=a,this._leftoverHighSurrogate=r}_push(e,t,n){return n<128?e[t++]=n:n<2048?(e[t++]=192|(1984&n)>>>6,e[t++]=128|(63&n)>>>0):n<65536?(e[t++]=224|(61440&n)>>>12,e[t++]=128|(4032&n)>>>6,e[t++]=128|(63&n)>>>0):(e[t++]=240|(1835008&n)>>>18,e[t++]=128|(258048&n)>>>12,e[t++]=128|(4032&n)>>>6,e[t++]=128|(63&n)>>>0),t>=64&&(this._step(),t-=64,this._totalLen+=64,e[0]=e[64],e[1]=e[65],e[2]=e[66]),t}digest(){return this._finished||(this._finished=!0,this._leftoverHighSurrogate&&(this._leftoverHighSurrogate=0,this._buffLen=this._push(this._buff,this._buffLen,65533)),this._totalLen+=this._buffLen,this._wrapUp()),ce(this._h0)+ce(this._h1)+ce(this._h2)+ce(this._h3)+ce(this._h4)}_wrapUp(){this._buff[this._buffLen++]=128,de(this._buff,this._buffLen),this._buffLen>56&&(this._step(),de(this._buff));const e=8*this._totalLen;this._buffDV.setUint32(56,Math.floor(e/4294967296),!1),this._buffDV.setUint32(60,e%4294967296,!1),this._step()}_step(){const e=ue._bigBlock32,t=this._buffDV;for(let n=0;n<64;n+=4)e.setUint32(n,t.getUint32(n,!1),!1);for(let t=64;t<320;t+=4)e.setUint32(t,le(e.getUint32(t-12,!1)^e.getUint32(t-32,!1)^e.getUint32(t-56,!1)^e.getUint32(t-64,!1),1),!1);let n,i,o,a=this._h0,r=this._h1,s=this._h2,l=this._h3,d=this._h4;for(let t=0;t<80;t++)t<20?(n=r&s|~r&l,i=1518500249):t<40?(n=r^s^l,i=1859775393):t<60?(n=r&s|r&l|s&l,i=2400959708):(n=r^s^l,i=3395469782),o=le(a,5)+n+d+i+e.getUint32(4*t,!1)&4294967295,d=l,l=s,s=le(r,30),r=a,a=o;this._h0=this._h0+a&4294967295,this._h1=this._h1+r&4294967295,this._h2=this._h2+s&4294967295,this._h3=this._h3+l&4294967295,this._h4=this._h4+d&4294967295}}ue._bigBlock32=new DataView(new ArrayBuffer(320));class me{constructor(e){this.source=e}getElements(){const e=this.source,t=new Int32Array(e.length);for(let n=0,i=e.length;n<i;n++)t[n]=e.charCodeAt(n);return t}}function he(e,t,n){return new pe(new me(e),new me(t)).ComputeDiff(n).changes}class be{static Assert(e,t){if(!e)throw new Error(t)}}class Te{static Copy(e,t,n,i,o){for(let a=0;a<o;a++)n[i+a]=e[t+a]}static Copy2(e,t,n,i,o){for(let a=0;a<o;a++)n[i+a]=e[t+a]}}class ge{constructor(){this.m_changes=[],this.m_originalStart=1073741824,this.m_modifiedStart=1073741824,this.m_originalCount=0,this.m_modifiedCount=0}MarkNextChange(){(this.m_originalCount>0||this.m_modifiedCount>0)&&this.m_changes.push(new ae(this.m_originalStart,this.m_originalCount,this.m_modifiedStart,this.m_modifiedCount)),this.m_originalCount=0,this.m_modifiedCount=0,this.m_originalStart=1073741824,this.m_modifiedStart=1073741824}AddOriginalElement(e,t){this.m_originalStart=Math.min(this.m_originalStart,e),this.m_modifiedStart=Math.min(this.m_modifiedStart,t),this.m_originalCount++}AddModifiedElement(e,t){this.m_originalStart=Math.min(this.m_originalStart,e),this.m_modifiedStart=Math.min(this.m_modifiedStart,t),this.m_modifiedCount++}getChanges(){return(this.m_originalCount>0||this.m_modifiedCount>0)&&this.MarkNextChange(),this.m_changes}getReverseChanges(){return(this.m_originalCount>0||this.m_modifiedCount>0)&&this.MarkNextChange(),this.m_changes.reverse(),this.m_changes}}class pe{constructor(e,t,n=null){this.ContinueProcessingPredicate=n,this._originalSequence=e,this._modifiedSequence=t;const[i,o,a]=pe._getElements(e),[r,s,l]=pe._getElements(t);this._hasStrings=a&&l,this._originalStringElements=i,this._originalElementsOrHash=o,this._modifiedStringElements=r,this._modifiedElementsOrHash=s,this.m_forwardHistory=[],this.m_reverseHistory=[]}static _isStringArray(e){return e.length>0&&"string"==typeof e[0]}static _getElements(e){const t=e.getElements();if(pe._isStringArray(t)){const e=new Int32Array(t.length);for(let n=0,i=t.length;n<i;n++)e[n]=se(t[n],0);return[t,e,!0]}return t instanceof Int32Array?[[],t,!1]:[[],new Int32Array(t),!1]}ElementsAreEqual(e,t){return this._originalElementsOrHash[e]===this._modifiedElementsOrHash[t]&&(!this._hasStrings||this._originalStringElements[e]===this._modifiedStringElements[t])}ElementsAreStrictEqual(e,t){if(!this.ElementsAreEqual(e,t))return!1;return pe._getStrictElement(this._originalSequence,e)===pe._getStrictElement(this._modifiedSequence,t)}static _getStrictElement(e,t){return"function"==typeof e.getStrictElement?e.getStrictElement(t):null}OriginalElementsAreEqual(e,t){return this._originalElementsOrHash[e]===this._originalElementsOrHash[t]&&(!this._hasStrings||this._originalStringElements[e]===this._originalStringElements[t])}ModifiedElementsAreEqual(e,t){return this._modifiedElementsOrHash[e]===this._modifiedElementsOrHash[t]&&(!this._hasStrings||this._modifiedStringElements[e]===this._modifiedStringElements[t])}ComputeDiff(e){return this._ComputeDiff(0,this._originalElementsOrHash.length-1,0,this._modifiedElementsOrHash.length-1,e)}_ComputeDiff(e,t,n,i,o){const a=[!1];let r=this.ComputeDiffRecursive(e,t,n,i,a);return o&&(r=this.PrettifyChanges(r)),{quitEarly:a[0],changes:r}}ComputeDiffRecursive(e,t,n,i,o){for(o[0]=!1;e<=t&&n<=i&&this.ElementsAreEqual(e,n);)e++,n++;for(;t>=e&&i>=n&&this.ElementsAreEqual(t,i);)t--,i--;if(e>t||n>i){let o;return n<=i?(be.Assert(e===t+1,"originalStart should only be one more than originalEnd"),o=[new ae(e,0,n,i-n+1)]):e<=t?(be.Assert(n===i+1,"modifiedStart should only be one more than modifiedEnd"),o=[new ae(e,t-e+1,n,0)]):(be.Assert(e===t+1,"originalStart should only be one more than originalEnd"),be.Assert(n===i+1,"modifiedStart should only be one more than modifiedEnd"),o=[]),o}const a=[0],r=[0],s=this.ComputeRecursionPoint(e,t,n,i,a,r,o),l=a[0],d=r[0];if(null!==s)return s;if(!o[0]){const a=this.ComputeDiffRecursive(e,l,n,d,o);let r=[];return r=o[0]?[new ae(l+1,t-(l+1)+1,d+1,i-(d+1)+1)]:this.ComputeDiffRecursive(l+1,t,d+1,i,o),this.ConcatenateChanges(a,r)}return[new ae(e,t-e+1,n,i-n+1)]}WALKTRACE(e,t,n,i,o,a,r,s,l,d,c,u,m,h,b,T,g,p){let x=null,k=null,f=new ge,S=t,C=n,E=m[0]-T[0]-i,A=-1073741824,y=this.m_forwardHistory.length-1;do{const t=E+e;t===S||t<C&&l[t-1]<l[t+1]?(h=(c=l[t+1])-E-i,c<A&&f.MarkNextChange(),A=c,f.AddModifiedElement(c+1,h),E=t+1-e):(h=(c=l[t-1]+1)-E-i,c<A&&f.MarkNextChange(),A=c-1,f.AddOriginalElement(c,h+1),E=t-1-e),y>=0&&(e=(l=this.m_forwardHistory[y])[0],S=1,C=l.length-1)}while(--y>=-1);if(x=f.getReverseChanges(),p[0]){let e=m[0]+1,t=T[0]+1;if(null!==x&&x.length>0){const n=x[x.length-1];e=Math.max(e,n.getOriginalEnd()),t=Math.max(t,n.getModifiedEnd())}k=[new ae(e,u-e+1,t,b-t+1)]}else{f=new ge,S=a,C=r,E=m[0]-T[0]-s,A=1073741824,y=g?this.m_reverseHistory.length-1:this.m_reverseHistory.length-2;do{const e=E+o;e===S||e<C&&d[e-1]>=d[e+1]?(h=(c=d[e+1]-1)-E-s,c>A&&f.MarkNextChange(),A=c+1,f.AddOriginalElement(c+1,h+1),E=e+1-o):(h=(c=d[e-1])-E-s,c>A&&f.MarkNextChange(),A=c,f.AddModifiedElement(c+1,h+1),E=e-1-o),y>=0&&(o=(d=this.m_reverseHistory[y])[0],S=1,C=d.length-1)}while(--y>=-1);k=f.getChanges()}return this.ConcatenateChanges(x,k)}ComputeRecursionPoint(e,t,n,i,o,a,r){let s=0,l=0,d=0,c=0,u=0,m=0;e--,n--,o[0]=0,a[0]=0,this.m_forwardHistory=[],this.m_reverseHistory=[];const h=t-e+(i-n),b=h+1,T=new Int32Array(b),g=new Int32Array(b),p=i-n,x=t-e,k=e-n,f=t-i,S=(x-p)%2==0;T[p]=e,g[x]=t,r[0]=!1;for(let C=1;C<=h/2+1;C++){let h=0,E=0;d=this.ClipDiagonalBound(p-C,C,p,b),c=this.ClipDiagonalBound(p+C,C,p,b);for(let e=d;e<=c;e+=2){s=e===d||e<c&&T[e-1]<T[e+1]?T[e+1]:T[e-1]+1,l=s-(e-p)-k;const n=s;for(;s<t&&l<i&&this.ElementsAreEqual(s+1,l+1);)s++,l++;if(T[e]=s,s+l>h+E&&(h=s,E=l),!S&&Math.abs(e-x)<=C-1&&s>=g[e])return o[0]=s,a[0]=l,n<=g[e]&&C<=1448?this.WALKTRACE(p,d,c,k,x,u,m,f,T,g,s,t,o,l,i,a,S,r):null}const A=(h-e+(E-n)-C)/2;if(null!==this.ContinueProcessingPredicate&&!this.ContinueProcessingPredicate(h,A))return r[0]=!0,o[0]=h,a[0]=E,A>0&&C<=1448?this.WALKTRACE(p,d,c,k,x,u,m,f,T,g,s,t,o,l,i,a,S,r):(e++,n++,[new ae(e,t-e+1,n,i-n+1)]);u=this.ClipDiagonalBound(x-C,C,x,b),m=this.ClipDiagonalBound(x+C,C,x,b);for(let h=u;h<=m;h+=2){s=h===u||h<m&&g[h-1]>=g[h+1]?g[h+1]-1:g[h-1],l=s-(h-x)-f;const b=s;for(;s>e&&l>n&&this.ElementsAreEqual(s,l);)s--,l--;if(g[h]=s,S&&Math.abs(h-p)<=C&&s<=T[h])return o[0]=s,a[0]=l,b>=T[h]&&C<=1448?this.WALKTRACE(p,d,c,k,x,u,m,f,T,g,s,t,o,l,i,a,S,r):null}if(C<=1447){let e=new Int32Array(c-d+2);e[0]=p-d+1,Te.Copy2(T,d,e,1,c-d+1),this.m_forwardHistory.push(e),e=new Int32Array(m-u+2),e[0]=x-u+1,Te.Copy2(g,u,e,1,m-u+1),this.m_reverseHistory.push(e)}}return this.WALKTRACE(p,d,c,k,x,u,m,f,T,g,s,t,o,l,i,a,S,r)}PrettifyChanges(e){for(let t=0;t<e.length;t++){const n=e[t],i=t<e.length-1?e[t+1].originalStart:this._originalElementsOrHash.length,o=t<e.length-1?e[t+1].modifiedStart:this._modifiedElementsOrHash.length,a=n.originalLength>0,r=n.modifiedLength>0;for(;n.originalStart+n.originalLength<i&&n.modifiedStart+n.modifiedLength<o&&(!a||this.OriginalElementsAreEqual(n.originalStart,n.originalStart+n.originalLength))&&(!r||this.ModifiedElementsAreEqual(n.modifiedStart,n.modifiedStart+n.modifiedLength));){const e=this.ElementsAreStrictEqual(n.originalStart,n.modifiedStart);if(this.ElementsAreStrictEqual(n.originalStart+n.originalLength,n.modifiedStart+n.modifiedLength)&&!e)break;n.originalStart++,n.modifiedStart++}const s=[null];t<e.length-1&&this.ChangesOverlap(e[t],e[t+1],s)&&(e[t]=s[0],e.splice(t+1,1),t--)}for(let t=e.length-1;t>=0;t--){const n=e[t];let i=0,o=0;if(t>0){const n=e[t-1];i=n.originalStart+n.originalLength,o=n.modifiedStart+n.modifiedLength}const a=n.originalLength>0,r=n.modifiedLength>0;let s=0,l=this._boundaryScore(n.originalStart,n.originalLength,n.modifiedStart,n.modifiedLength);for(let e=1;;e++){const t=n.originalStart-e,d=n.modifiedStart-e;if(t<i||d<o)break;if(a&&!this.OriginalElementsAreEqual(t,t+n.originalLength))break;if(r&&!this.ModifiedElementsAreEqual(d,d+n.modifiedLength))break;const c=(t===i&&d===o?5:0)+this._boundaryScore(t,n.originalLength,d,n.modifiedLength);c>l&&(l=c,s=e)}n.originalStart-=s,n.modifiedStart-=s;const d=[null];t>0&&this.ChangesOverlap(e[t-1],e[t],d)&&(e[t-1]=d[0],e.splice(t,1),t++)}if(this._hasStrings)for(let t=1,n=e.length;t<n;t++){const n=e[t-1],i=e[t],o=i.originalStart-n.originalStart-n.originalLength,a=n.originalStart,r=i.originalStart+i.originalLength,s=r-a,l=n.modifiedStart,d=i.modifiedStart+i.modifiedLength,c=d-l;if(o<5&&s<20&&c<20){const e=this._findBetterContiguousSequence(a,s,l,c,o);if(e){const[t,a]=e;t===n.originalStart+n.originalLength&&a===n.modifiedStart+n.modifiedLength||(n.originalLength=t-n.originalStart,n.modifiedLength=a-n.modifiedStart,i.originalStart=t+o,i.modifiedStart=a+o,i.originalLength=r-i.originalStart,i.modifiedLength=d-i.modifiedStart)}}}return e}_findBetterContiguousSequence(e,t,n,i,o){if(t<o||i<o)return null;const a=e+t-o+1,r=n+i-o+1;let s=0,l=0,d=0;for(let t=e;t<a;t++)for(let e=n;e<r;e++){const n=this._contiguousSequenceScore(t,e,o);n>0&&n>s&&(s=n,l=t,d=e)}return s>0?[l,d]:null}_contiguousSequenceScore(e,t,n){let i=0;for(let o=0;o<n;o++){if(!this.ElementsAreEqual(e+o,t+o))return 0;i+=this._originalStringElements[e+o].length}return i}_OriginalIsBoundary(e){return e<=0||e>=this._originalElementsOrHash.length-1||this._hasStrings&&/^\s*$/.test(this._originalStringElements[e])}_OriginalRegionIsBoundary(e,t){if(this._OriginalIsBoundary(e)||this._OriginalIsBoundary(e-1))return!0;if(t>0){const n=e+t;if(this._OriginalIsBoundary(n-1)||this._OriginalIsBoundary(n))return!0}return!1}_ModifiedIsBoundary(e){return e<=0||e>=this._modifiedElementsOrHash.length-1||this._hasStrings&&/^\s*$/.test(this._modifiedStringElements[e])}_ModifiedRegionIsBoundary(e,t){if(this._ModifiedIsBoundary(e)||this._ModifiedIsBoundary(e-1))return!0;if(t>0){const n=e+t;if(this._ModifiedIsBoundary(n-1)||this._ModifiedIsBoundary(n))return!0}return!1}_boundaryScore(e,t,n,i){return(this._OriginalRegionIsBoundary(e,t)?1:0)+(this._ModifiedRegionIsBoundary(n,i)?1:0)}ConcatenateChanges(e,t){const n=[];if(0===e.length||0===t.length)return t.length>0?t:e;if(this.ChangesOverlap(e[e.length-1],t[0],n)){const i=new Array(e.length+t.length-1);return Te.Copy(e,0,i,0,e.length-1),i[e.length-1]=n[0],Te.Copy(t,1,i,e.length,t.length-1),i}{const n=new Array(e.length+t.length);return Te.Copy(e,0,n,0,e.length),Te.Copy(t,0,n,e.length,t.length),n}}ChangesOverlap(e,t,n){if(be.Assert(e.originalStart<=t.originalStart,"Left change is not less than or equal to right change"),be.Assert(e.modifiedStart<=t.modifiedStart,"Left change is not less than or equal to right change"),e.originalStart+e.originalLength>=t.originalStart||e.modifiedStart+e.modifiedLength>=t.modifiedStart){const i=e.originalStart;let o=e.originalLength;const a=e.modifiedStart;let r=e.modifiedLength;return e.originalStart+e.originalLength>=t.originalStart&&(o=t.originalStart+t.originalLength-e.originalStart),e.modifiedStart+e.modifiedLength>=t.modifiedStart&&(r=t.modifiedStart+t.modifiedLength-e.modifiedStart),n[0]=new ae(i,o,a,r),!0}return n[0]=null,!1}ClipDiagonalBound(e,t,n,i){if(e>=0&&e<i)return e;const o=t%2==0;if(e<0){return o===(n%2==0)?0:1}return o===((i-n-1)%2==0)?i-1:i-2}}var xe=n(8);const ke=46,fe=47,Se=92,Ce=58;class Ee extends Error{constructor(e,t,n){let i;"string"==typeof t&&0===t.indexOf("not ")?(i="must not be",t=t.replace(/^not /,"")):i="must be";const o=-1!==e.indexOf(".")?"property":"argument";let a=`The "${e}" ${o} ${i} of type ${t}`;a+=". Received type "+typeof n,super(a),this.code="ERR_INVALID_ARG_TYPE"}}function Ae(e,t){if("string"!=typeof e)throw new Ee(t,"string",e)}const ye="win32"===xe.c;function Ie(e){return e===fe||e===Se}function Le(e){return e===fe}function Oe(e){return e>=65&&e<=90||e>=97&&e<=122}function _e(e,t,n,i){let o="",a=0,r=-1,s=0,l=0;for(let d=0;d<=e.length;++d){if(d<e.length)l=e.charCodeAt(d);else{if(i(l))break;l=fe}if(i(l)){if(r===d-1||1===s);else if(2===s){if(o.length<2||2!==a||o.charCodeAt(o.length-1)!==ke||o.charCodeAt(o.length-2)!==ke){if(o.length>2){const e=o.lastIndexOf(n);-1===e?(o="",a=0):(o=o.slice(0,e),a=o.length-1-o.lastIndexOf(n)),r=d,s=0;continue}if(0!==o.length){o="",a=0,r=d,s=0;continue}}t&&(o+=o.length>0?`${n}..`:"..",a=2)}else o.length>0?o+=`${n}${e.slice(r+1,d)}`:o=e.slice(r+1,d),a=d-r-1;r=d,s=0}else l===ke&&-1!==s?++s:s=-1}return o}function Ne(e,t){!function(e,t){if(null===e||"object"!=typeof e)throw new Ee(t,"Object",e)}(t,"pathObject");const n=t.dir||t.root,i=t.base||`${t.name||""}${t.ext||""}`;return n?n===t.root?`${n}${i}`:`${n}${e}${i}`:i}const Re={resolve(...e){let t="",n="",i=!1;for(let o=e.length-1;o>=-1;o--){let a;if(o>=0){if(a=e[o],Ae(a,"path"),0===a.length)continue}else 0===t.length?a=xe.a():(a=xe.b[`=${t}`]||xe.a(),(void 0===a||a.slice(0,2).toLowerCase()!==t.toLowerCase()&&a.charCodeAt(2)===Se)&&(a=`${t}\\`));const r=a.length;let s=0,l="",d=!1;const c=a.charCodeAt(0);if(1===r)Ie(c)&&(s=1,d=!0);else if(Ie(c))if(d=!0,Ie(a.charCodeAt(1))){let e=2,t=e;for(;e<r&&!Ie(a.charCodeAt(e));)e++;if(e<r&&e!==t){const n=a.slice(t,e);for(t=e;e<r&&Ie(a.charCodeAt(e));)e++;if(e<r&&e!==t){for(t=e;e<r&&!Ie(a.charCodeAt(e));)e++;e!==r&&e===t||(l=`\\\\${n}\\${a.slice(t,e)}`,s=e)}}}else s=1;else Oe(c)&&a.charCodeAt(1)===Ce&&(l=a.slice(0,2),s=2,r>2&&Ie(a.charCodeAt(2))&&(d=!0,s=3));if(l.length>0)if(t.length>0){if(l.toLowerCase()!==t.toLowerCase())continue}else t=l;if(i){if(t.length>0)break}else if(n=`${a.slice(s)}\\${n}`,i=d,d&&t.length>0)break}return n=_e(n,!i,"\\",Ie),i?`${t}\\${n}`:`${t}${n}`||"."},normalize(e){Ae(e,"path");const t=e.length;if(0===t)return".";let n,i=0,o=!1;const a=e.charCodeAt(0);if(1===t)return Le(a)?"\\":e;if(Ie(a))if(o=!0,Ie(e.charCodeAt(1))){let o=2,a=o;for(;o<t&&!Ie(e.charCodeAt(o));)o++;if(o<t&&o!==a){const r=e.slice(a,o);for(a=o;o<t&&Ie(e.charCodeAt(o));)o++;if(o<t&&o!==a){for(a=o;o<t&&!Ie(e.charCodeAt(o));)o++;if(o===t)return`\\\\${r}\\${e.slice(a)}\\`;o!==a&&(n=`\\\\${r}\\${e.slice(a,o)}`,i=o)}}}else i=1;else Oe(a)&&e.charCodeAt(1)===Ce&&(n=e.slice(0,2),i=2,t>2&&Ie(e.charCodeAt(2))&&(o=!0,i=3));let r=i<t?_e(e.slice(i),!o,"\\",Ie):"";return 0!==r.length||o||(r="."),r.length>0&&Ie(e.charCodeAt(t-1))&&(r+="\\"),void 0===n?o?`\\${r}`:r:o?`${n}\\${r}`:`${n}${r}`},isAbsolute(e){Ae(e,"path");const t=e.length;if(0===t)return!1;const n=e.charCodeAt(0);return Ie(n)||t>2&&Oe(n)&&e.charCodeAt(1)===Ce&&Ie(e.charCodeAt(2))},join(...e){if(0===e.length)return".";let t,n;for(let i=0;i<e.length;++i){const o=e[i];Ae(o,"path"),o.length>0&&(void 0===t?t=n=o:t+=`\\${o}`)}if(void 0===t)return".";let i=!0,o=0;if("string"==typeof n&&Ie(n.charCodeAt(0))){++o;const e=n.length;e>1&&Ie(n.charCodeAt(1))&&(++o,e>2&&(Ie(n.charCodeAt(2))?++o:i=!1))}if(i){for(;o<t.length&&Ie(t.charCodeAt(o));)o++;o>=2&&(t=`\\${t.slice(o)}`)}return Re.normalize(t)},relative(e,t){if(Ae(e,"from"),Ae(t,"to"),e===t)return"";const n=Re.resolve(e),i=Re.resolve(t);if(n===i)return"";if((e=n.toLowerCase())===(t=i.toLowerCase()))return"";let o=0;for(;o<e.length&&e.charCodeAt(o)===Se;)o++;let a=e.length;for(;a-1>o&&e.charCodeAt(a-1)===Se;)a--;const r=a-o;let s=0;for(;s<t.length&&t.charCodeAt(s)===Se;)s++;let l=t.length;for(;l-1>s&&t.charCodeAt(l-1)===Se;)l--;const d=l-s,c=r<d?r:d;let u=-1,m=0;for(;m<c;m++){const n=e.charCodeAt(o+m);if(n!==t.charCodeAt(s+m))break;n===Se&&(u=m)}if(m!==c){if(-1===u)return i}else{if(d>c){if(t.charCodeAt(s+m)===Se)return i.slice(s+m+1);if(2===m)return i.slice(s+m)}r>c&&(e.charCodeAt(o+m)===Se?u=m:2===m&&(u=3)),-1===u&&(u=0)}let h="";for(m=o+u+1;m<=a;++m)m!==a&&e.charCodeAt(m)!==Se||(h+=0===h.length?"..":"\\..");return s+=u,h.length>0?`${h}${i.slice(s,l)}`:(i.charCodeAt(s)===Se&&++s,i.slice(s,l))},toNamespacedPath(e){if("string"!=typeof e||0===e.length)return e;const t=Re.resolve(e);if(t.length<=2)return e;if(t.charCodeAt(0)===Se){if(t.charCodeAt(1)===Se){const e=t.charCodeAt(2);if(63!==e&&e!==ke)return`\\\\?\\UNC\\${t.slice(2)}`}}else if(Oe(t.charCodeAt(0))&&t.charCodeAt(1)===Ce&&t.charCodeAt(2)===Se)return`\\\\?\\${t}`;return e},dirname(e){Ae(e,"path");const t=e.length;if(0===t)return".";let n=-1,i=0;const o=e.charCodeAt(0);if(1===t)return Ie(o)?e:".";if(Ie(o)){if(n=i=1,Ie(e.charCodeAt(1))){let o=2,a=o;for(;o<t&&!Ie(e.charCodeAt(o));)o++;if(o<t&&o!==a){for(a=o;o<t&&Ie(e.charCodeAt(o));)o++;if(o<t&&o!==a){for(a=o;o<t&&!Ie(e.charCodeAt(o));)o++;if(o===t)return e;o!==a&&(n=i=o+1)}}}}else Oe(o)&&e.charCodeAt(1)===Ce&&(n=t>2&&Ie(e.charCodeAt(2))?3:2,i=n);let a=-1,r=!0;for(let n=t-1;n>=i;--n)if(Ie(e.charCodeAt(n))){if(!r){a=n;break}}else r=!1;if(-1===a){if(-1===n)return".";a=n}return e.slice(0,a)},basename(e,t){void 0!==t&&Ae(t,"ext"),Ae(e,"path");let n,i=0,o=-1,a=!0;if(e.length>=2&&Oe(e.charCodeAt(0))&&e.charCodeAt(1)===Ce&&(i=2),void 0!==t&&t.length>0&&t.length<=e.length){if(t===e)return"";let r=t.length-1,s=-1;for(n=e.length-1;n>=i;--n){const l=e.charCodeAt(n);if(Ie(l)){if(!a){i=n+1;break}}else-1===s&&(a=!1,s=n+1),r>=0&&(l===t.charCodeAt(r)?-1==--r&&(o=n):(r=-1,o=s))}return i===o?o=s:-1===o&&(o=e.length),e.slice(i,o)}for(n=e.length-1;n>=i;--n)if(Ie(e.charCodeAt(n))){if(!a){i=n+1;break}}else-1===o&&(a=!1,o=n+1);return-1===o?"":e.slice(i,o)},extname(e){Ae(e,"path");let t=0,n=-1,i=0,o=-1,a=!0,r=0;e.length>=2&&e.charCodeAt(1)===Ce&&Oe(e.charCodeAt(0))&&(t=i=2);for(let s=e.length-1;s>=t;--s){const t=e.charCodeAt(s);if(Ie(t)){if(!a){i=s+1;break}}else-1===o&&(a=!1,o=s+1),t===ke?-1===n?n=s:1!==r&&(r=1):-1!==n&&(r=-1)}return-1===n||-1===o||0===r||1===r&&n===o-1&&n===i+1?"":e.slice(n,o)},format:Ne.bind(null,"\\"),parse(e){Ae(e,"path");const t={root:"",dir:"",base:"",ext:"",name:""};if(0===e.length)return t;const n=e.length;let i=0,o=e.charCodeAt(0);if(1===n)return Ie(o)?(t.root=t.dir=e,t):(t.base=t.name=e,t);if(Ie(o)){if(i=1,Ie(e.charCodeAt(1))){let t=2,o=t;for(;t<n&&!Ie(e.charCodeAt(t));)t++;if(t<n&&t!==o){for(o=t;t<n&&Ie(e.charCodeAt(t));)t++;if(t<n&&t!==o){for(o=t;t<n&&!Ie(e.charCodeAt(t));)t++;t===n?i=t:t!==o&&(i=t+1)}}}}else if(Oe(o)&&e.charCodeAt(1)===Ce){if(n<=2)return t.root=t.dir=e,t;if(i=2,Ie(e.charCodeAt(2))){if(3===n)return t.root=t.dir=e,t;i=3}}i>0&&(t.root=e.slice(0,i));let a=-1,r=i,s=-1,l=!0,d=e.length-1,c=0;for(;d>=i;--d)if(o=e.charCodeAt(d),Ie(o)){if(!l){r=d+1;break}}else-1===s&&(l=!1,s=d+1),o===ke?-1===a?a=d:1!==c&&(c=1):-1!==a&&(c=-1);return-1!==s&&(-1===a||0===c||1===c&&a===s-1&&a===r+1?t.base=t.name=e.slice(r,s):(t.name=e.slice(r,a),t.base=e.slice(r,s),t.ext=e.slice(a,s))),t.dir=r>0&&r!==i?e.slice(0,r-1):t.root,t},sep:"\\",delimiter:";",win32:null,posix:null},De=(()=>{if(ye){const e=/\\/g;return()=>{const t=xe.a().replace(e,"/");return t.slice(t.indexOf("/"))}}return()=>xe.a()})(),Me={resolve(...e){let t="",n=!1;for(let i=e.length-1;i>=-1&&!n;i--){const o=i>=0?e[i]:De();Ae(o,"path"),0!==o.length&&(t=`${o}/${t}`,n=o.charCodeAt(0)===fe)}return t=_e(t,!n,"/",Le),n?`/${t}`:t.length>0?t:"."},normalize(e){if(Ae(e,"path"),0===e.length)return".";const t=e.charCodeAt(0)===fe,n=e.charCodeAt(e.length-1)===fe;return 0===(e=_e(e,!t,"/",Le)).length?t?"/":n?"./":".":(n&&(e+="/"),t?`/${e}`:e)},isAbsolute:e=>(Ae(e,"path"),e.length>0&&e.charCodeAt(0)===fe),join(...e){if(0===e.length)return".";let t;for(let n=0;n<e.length;++n){const i=e[n];Ae(i,"path"),i.length>0&&(void 0===t?t=i:t+=`/${i}`)}return void 0===t?".":Me.normalize(t)},relative(e,t){if(Ae(e,"from"),Ae(t,"to"),e===t)return"";if((e=Me.resolve(e))===(t=Me.resolve(t)))return"";const n=e.length,i=n-1,o=t.length-1,a=i<o?i:o;let r=-1,s=0;for(;s<a;s++){const n=e.charCodeAt(1+s);if(n!==t.charCodeAt(1+s))break;n===fe&&(r=s)}if(s===a)if(o>a){if(t.charCodeAt(1+s)===fe)return t.slice(1+s+1);if(0===s)return t.slice(1+s)}else i>a&&(e.charCodeAt(1+s)===fe?r=s:0===s&&(r=0));let l="";for(s=1+r+1;s<=n;++s)s!==n&&e.charCodeAt(s)!==fe||(l+=0===l.length?"..":"/..");return`${l}${t.slice(1+r)}`},toNamespacedPath:e=>e,dirname(e){if(Ae(e,"path"),0===e.length)return".";const t=e.charCodeAt(0)===fe;let n=-1,i=!0;for(let t=e.length-1;t>=1;--t)if(e.charCodeAt(t)===fe){if(!i){n=t;break}}else i=!1;return-1===n?t?"/":".":t&&1===n?"//":e.slice(0,n)},basename(e,t){void 0!==t&&Ae(t,"ext"),Ae(e,"path");let n,i=0,o=-1,a=!0;if(void 0!==t&&t.length>0&&t.length<=e.length){if(t===e)return"";let r=t.length-1,s=-1;for(n=e.length-1;n>=0;--n){const l=e.charCodeAt(n);if(l===fe){if(!a){i=n+1;break}}else-1===s&&(a=!1,s=n+1),r>=0&&(l===t.charCodeAt(r)?-1==--r&&(o=n):(r=-1,o=s))}return i===o?o=s:-1===o&&(o=e.length),e.slice(i,o)}for(n=e.length-1;n>=0;--n)if(e.charCodeAt(n)===fe){if(!a){i=n+1;break}}else-1===o&&(a=!1,o=n+1);return-1===o?"":e.slice(i,o)},extname(e){Ae(e,"path");let t=-1,n=0,i=-1,o=!0,a=0;for(let r=e.length-1;r>=0;--r){const s=e.charCodeAt(r);if(s!==fe)-1===i&&(o=!1,i=r+1),s===ke?-1===t?t=r:1!==a&&(a=1):-1!==t&&(a=-1);else if(!o){n=r+1;break}}return-1===t||-1===i||0===a||1===a&&t===i-1&&t===n+1?"":e.slice(t,i)},format:Ne.bind(null,"/"),parse(e){Ae(e,"path");const t={root:"",dir:"",base:"",ext:"",name:""};if(0===e.length)return t;const n=e.charCodeAt(0)===fe;let i;n?(t.root="/",i=1):i=0;let o=-1,a=0,r=-1,s=!0,l=e.length-1,d=0;for(;l>=i;--l){const t=e.charCodeAt(l);if(t!==fe)-1===r&&(s=!1,r=l+1),t===ke?-1===o?o=l:1!==d&&(d=1):-1!==o&&(d=-1);else if(!s){a=l+1;break}}if(-1!==r){const i=0===a&&n?1:a;-1===o||0===d||1===d&&o===r-1&&o===a+1?t.base=t.name=e.slice(i,r):(t.name=e.slice(i,o),t.base=e.slice(i,r),t.ext=e.slice(o,r))}return a>0?t.dir=e.slice(0,a-1):n&&(t.dir="/"),t},sep:"/",delimiter:":",win32:null,posix:null};Me.win32=Re.win32=Re,Me.posix=Re.posix=Me;ye?Re.normalize:Me.normalize,ye?Re.resolve:Me.resolve,ye?Re.relative:Me.relative,ye?Re.dirname:Me.dirname,ye?Re.basename:Me.basename,ye?Re.extname:Me.extname,ye?Re.sep:Me.sep;const ve=/^\w[\w\d+.-]*$/,Fe=/^\//,Pe=/^\/\//;const Be="",we="/",Ue=/^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;class qe{static isUri(e){return e instanceof qe||!!e&&("string"==typeof e.authority&&"string"==typeof e.fragment&&"string"==typeof e.path&&"string"==typeof e.query&&"string"==typeof e.scheme&&"string"==typeof e.fsPath&&"function"==typeof e.with&&"function"==typeof e.toString)}constructor(e,t,n,i,o,a=!1){"object"==typeof e?(this.scheme=e.scheme||Be,this.authority=e.authority||Be,this.path=e.path||Be,this.query=e.query||Be,this.fragment=e.fragment||Be):(this.scheme=function(e,t){return e||t?e:"file"}(e,a),this.authority=t||Be,this.path=function(e,t){switch(e){case"https":case"http":case"file":t?t[0]!==we&&(t=we+t):t=we}return t}(this.scheme,n||Be),this.query=i||Be,this.fragment=o||Be,function(e,t){if(!e.scheme&&t)throw new Error(`[UriError]: Scheme is missing: {scheme: "", authority: "${e.authority}", path: "${e.path}", query: "${e.query}", fragment: "${e.fragment}"}`);if(e.scheme&&!ve.test(e.scheme))throw new Error("[UriError]: Scheme contains illegal characters.");if(e.path)if(e.authority){if(!Fe.test(e.path))throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character')}else if(Pe.test(e.path))throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")')}(this,a))}get fsPath(){return Ke(this,!1)}with(e){if(!e)return this;let{scheme:t,authority:n,path:i,query:o,fragment:a}=e;return void 0===t?t=this.scheme:null===t&&(t=Be),void 0===n?n=this.authority:null===n&&(n=Be),void 0===i?i=this.path:null===i&&(i=Be),void 0===o?o=this.query:null===o&&(o=Be),void 0===a?a=this.fragment:null===a&&(a=Be),t===this.scheme&&n===this.authority&&i===this.path&&o===this.query&&a===this.fragment?this:new Ve(t,n,i,o,a)}static parse(e,t=!1){const n=Ue.exec(e);return n?new Ve(n[2]||Be,Xe(n[4]||Be),Xe(n[5]||Be),Xe(n[7]||Be),Xe(n[9]||Be),t):new Ve(Be,Be,Be,Be,Be)}static file(e){let t=Be;if(P.d&&(e=e.replace(/\\/g,we)),e[0]===we&&e[1]===we){const n=e.indexOf(we,2);-1===n?(t=e.substring(2),e=we):(t=e.substring(2,n),e=e.substring(n)||we)}return new Ve("file",t,e,Be,Be)}static from(e,t){return new Ve(e.scheme,e.authority,e.path,e.query,e.fragment,t)}static joinPath(e,...t){if(!e.path)throw new Error("[UriError]: cannot call joinPath on URI without path");let n;return n=P.d&&"file"===e.scheme?qe.file(Re.join(Ke(e,!0),...t)).path:Me.join(e.path,...t),e.with({path:n})}toString(e=!1){return We(this,e)}toJSON(){return this}static revive(e){var t,n;if(e){if(e instanceof qe)return e;{const i=new Ve(e);return i._formatted=null!==(t=e.external)&&void 0!==t?t:null,i._fsPath=e._sep===He&&null!==(n=e.fsPath)&&void 0!==n?n:null,i}}return e}}const He=P.d?1:void 0;class Ve extends qe{constructor(){super(...arguments),this._formatted=null,this._fsPath=null}get fsPath(){return this._fsPath||(this._fsPath=Ke(this,!1)),this._fsPath}toString(e=!1){return e?We(this,!0):(this._formatted||(this._formatted=We(this,!1)),this._formatted)}toJSON(){const e={$mid:1};return this._fsPath&&(e.fsPath=this._fsPath,e._sep=He),this._formatted&&(e.external=this._formatted),this.path&&(e.path=this.path),this.scheme&&(e.scheme=this.scheme),this.authority&&(e.authority=this.authority),this.query&&(e.query=this.query),this.fragment&&(e.fragment=this.fragment),e}}const je={58:"%3A",47:"%2F",63:"%3F",35:"%23",91:"%5B",93:"%5D",64:"%40",33:"%21",36:"%24",38:"%26",39:"%27",40:"%28",41:"%29",42:"%2A",43:"%2B",44:"%2C",59:"%3B",61:"%3D",32:"%20"};function Ye(e,t,n){let i,o=-1;for(let a=0;a<e.length;a++){const r=e.charCodeAt(a);if(r>=97&&r<=122||r>=65&&r<=90||r>=48&&r<=57||45===r||46===r||95===r||126===r||t&&47===r||n&&91===r||n&&93===r||n&&58===r)-1!==o&&(i+=encodeURIComponent(e.substring(o,a)),o=-1),void 0!==i&&(i+=e.charAt(a));else{void 0===i&&(i=e.substr(0,a));const t=je[r];void 0!==t?(-1!==o&&(i+=encodeURIComponent(e.substring(o,a)),o=-1),i+=t):-1===o&&(o=a)}}return-1!==o&&(i+=encodeURIComponent(e.substring(o))),void 0!==i?i:e}function Ge(e){let t;for(let n=0;n<e.length;n++){const i=e.charCodeAt(n);35===i||63===i?(void 0===t&&(t=e.substr(0,n)),t+=je[i]):void 0!==t&&(t+=e[n])}return void 0!==t?t:e}function Ke(e,t){let n;return n=e.authority&&e.path.length>1&&"file"===e.scheme?`//${e.authority}${e.path}`:47===e.path.charCodeAt(0)&&(e.path.charCodeAt(1)>=65&&e.path.charCodeAt(1)<=90||e.path.charCodeAt(1)>=97&&e.path.charCodeAt(1)<=122)&&58===e.path.charCodeAt(2)?t?e.path.substr(1):e.path[1].toLowerCase()+e.path.substr(2):e.path,P.d&&(n=n.replace(/\//g,"\\")),n}function We(e,t){const n=t?Ge:Ye;let i="",{scheme:o,authority:a,path:r,query:s,fragment:l}=e;if(o&&(i+=o,i+=":"),(a||"file"===o)&&(i+=we,i+=we),a){let e=a.indexOf("@");if(-1!==e){const t=a.substr(0,e);a=a.substr(e+1),e=t.lastIndexOf(":"),-1===e?i+=n(t,!1,!1):(i+=n(t.substr(0,e),!1,!1),i+=":",i+=n(t.substr(e+1),!1,!0)),i+="@"}a=a.toLowerCase(),e=a.lastIndexOf(":"),-1===e?i+=n(a,!1,!0):(i+=n(a.substr(0,e),!1,!0),i+=a.substr(e))}if(r){if(r.length>=3&&47===r.charCodeAt(0)&&58===r.charCodeAt(2)){const e=r.charCodeAt(1);e>=65&&e<=90&&(r=`/${String.fromCharCode(e+32)}:${r.substr(3)}`)}else if(r.length>=2&&58===r.charCodeAt(1)){const e=r.charCodeAt(0);e>=65&&e<=90&&(r=`${String.fromCharCode(e+32)}:${r.substr(2)}`)}i+=n(r,!0,!1)}return s&&(i+="?",i+=n(s,!1,!1)),l&&(i+="#",i+=t?l:Ye(l,!1,!1)),i}function ze(e){try{return decodeURIComponent(e)}catch(t){return e.length>3?e.substr(0,3)+ze(e.substr(3)):e}}const Ze=/(%[0-9A-Za-z][0-9A-Za-z])+/g;function Xe(e){return e.match(Ze)?e.replace(Ze,(e=>ze(e))):e}class Je{constructor(e,t){this.lineNumber=e,this.column=t}with(e=this.lineNumber,t=this.column){return e===this.lineNumber&&t===this.column?this:new Je(e,t)}delta(e=0,t=0){return this.with(this.lineNumber+e,this.column+t)}equals(e){return Je.equals(this,e)}static equals(e,t){return!e&&!t||!!e&&!!t&&e.lineNumber===t.lineNumber&&e.column===t.column}isBefore(e){return Je.isBefore(this,e)}static isBefore(e,t){return e.lineNumber<t.lineNumber||!(t.lineNumber<e.lineNumber)&&e.column<t.column}isBeforeOrEqual(e){return Je.isBeforeOrEqual(this,e)}static isBeforeOrEqual(e,t){return e.lineNumber<t.lineNumber||!(t.lineNumber<e.lineNumber)&&e.column<=t.column}static compare(e,t){const n=0|e.lineNumber,i=0|t.lineNumber;if(n===i){return(0|e.column)-(0|t.column)}return n-i}clone(){return new Je(this.lineNumber,this.column)}toString(){return"("+this.lineNumber+","+this.column+")"}static lift(e){return new Je(e.lineNumber,e.column)}static isIPosition(e){return e&&"number"==typeof e.lineNumber&&"number"==typeof e.column}}class $e{constructor(e,t,n,i){e>n||e===n&&t>i?(this.startLineNumber=n,this.startColumn=i,this.endLineNumber=e,this.endColumn=t):(this.startLineNumber=e,this.startColumn=t,this.endLineNumber=n,this.endColumn=i)}isEmpty(){return $e.isEmpty(this)}static isEmpty(e){return e.startLineNumber===e.endLineNumber&&e.startColumn===e.endColumn}containsPosition(e){return $e.containsPosition(this,e)}static containsPosition(e,t){return!(t.lineNumber<e.startLineNumber||t.lineNumber>e.endLineNumber)&&(!(t.lineNumber===e.startLineNumber&&t.column<e.startColumn)&&!(t.lineNumber===e.endLineNumber&&t.column>e.endColumn))}static strictContainsPosition(e,t){return!(t.lineNumber<e.startLineNumber||t.lineNumber>e.endLineNumber)&&(!(t.lineNumber===e.startLineNumber&&t.column<=e.startColumn)&&!(t.lineNumber===e.endLineNumber&&t.column>=e.endColumn))}containsRange(e){return $e.containsRange(this,e)}static containsRange(e,t){return!(t.startLineNumber<e.startLineNumber||t.endLineNumber<e.startLineNumber)&&(!(t.startLineNumber>e.endLineNumber||t.endLineNumber>e.endLineNumber)&&(!(t.startLineNumber===e.startLineNumber&&t.startColumn<e.startColumn)&&!(t.endLineNumber===e.endLineNumber&&t.endColumn>e.endColumn)))}strictContainsRange(e){return $e.strictContainsRange(this,e)}static strictContainsRange(e,t){return!(t.startLineNumber<e.startLineNumber||t.endLineNumber<e.startLineNumber)&&(!(t.startLineNumber>e.endLineNumber||t.endLineNumber>e.endLineNumber)&&(!(t.startLineNumber===e.startLineNumber&&t.startColumn<=e.startColumn)&&!(t.endLineNumber===e.endLineNumber&&t.endColumn>=e.endColumn)))}plusRange(e){return $e.plusRange(this,e)}static plusRange(e,t){let n,i,o,a;return t.startLineNumber<e.startLineNumber?(n=t.startLineNumber,i=t.startColumn):t.startLineNumber===e.startLineNumber?(n=t.startLineNumber,i=Math.min(t.startColumn,e.startColumn)):(n=e.startLineNumber,i=e.startColumn),t.endLineNumber>e.endLineNumber?(o=t.endLineNumber,a=t.endColumn):t.endLineNumber===e.endLineNumber?(o=t.endLineNumber,a=Math.max(t.endColumn,e.endColumn)):(o=e.endLineNumber,a=e.endColumn),new $e(n,i,o,a)}intersectRanges(e){return $e.intersectRanges(this,e)}static intersectRanges(e,t){let n=e.startLineNumber,i=e.startColumn,o=e.endLineNumber,a=e.endColumn;const r=t.startLineNumber,s=t.startColumn,l=t.endLineNumber,d=t.endColumn;return n<r?(n=r,i=s):n===r&&(i=Math.max(i,s)),o>l?(o=l,a=d):o===l&&(a=Math.min(a,d)),n>o||n===o&&i>a?null:new $e(n,i,o,a)}equalsRange(e){return $e.equalsRange(this,e)}static equalsRange(e,t){return!e&&!t||!!e&&!!t&&e.startLineNumber===t.startLineNumber&&e.startColumn===t.startColumn&&e.endLineNumber===t.endLineNumber&&e.endColumn===t.endColumn}getEndPosition(){return $e.getEndPosition(this)}static getEndPosition(e){return new Je(e.endLineNumber,e.endColumn)}getStartPosition(){return $e.getStartPosition(this)}static getStartPosition(e){return new Je(e.startLineNumber,e.startColumn)}toString(){return"["+this.startLineNumber+","+this.startColumn+" -> "+this.endLineNumber+","+this.endColumn+"]"}setEndPosition(e,t){return new $e(this.startLineNumber,this.startColumn,e,t)}setStartPosition(e,t){return new $e(e,t,this.endLineNumber,this.endColumn)}collapseToStart(){return $e.collapseToStart(this)}static collapseToStart(e){return new $e(e.startLineNumber,e.startColumn,e.startLineNumber,e.startColumn)}collapseToEnd(){return $e.collapseToEnd(this)}static collapseToEnd(e){return new $e(e.endLineNumber,e.endColumn,e.endLineNumber,e.endColumn)}delta(e){return new $e(this.startLineNumber+e,this.startColumn,this.endLineNumber+e,this.endColumn)}static fromPositions(e,t=e){return new $e(e.lineNumber,e.column,t.lineNumber,t.column)}static lift(e){return e?new $e(e.startLineNumber,e.startColumn,e.endLineNumber,e.endColumn):null}static isIRange(e){return e&&"number"==typeof e.startLineNumber&&"number"==typeof e.startColumn&&"number"==typeof e.endLineNumber&&"number"==typeof e.endColumn}static areIntersectingOrTouching(e,t){return!(e.endLineNumber<t.startLineNumber||e.endLineNumber===t.startLineNumber&&e.endColumn<t.startColumn)&&!(t.endLineNumber<e.startLineNumber||t.endLineNumber===e.startLineNumber&&t.endColumn<e.startColumn)}static areIntersecting(e,t){return!(e.endLineNumber<t.startLineNumber||e.endLineNumber===t.startLineNumber&&e.endColumn<=t.startColumn)&&!(t.endLineNumber<e.startLineNumber||t.endLineNumber===e.startLineNumber&&t.endColumn<=e.startColumn)}static compareRangesUsingStarts(e,t){if(e&&t){const n=0|e.startLineNumber,i=0|t.startLineNumber;if(n===i){const n=0|e.startColumn,i=0|t.startColumn;if(n===i){const n=0|e.endLineNumber,i=0|t.endLineNumber;if(n===i){return(0|e.endColumn)-(0|t.endColumn)}return n-i}return n-i}return n-i}return(e?1:0)-(t?1:0)}static compareRangesUsingEnds(e,t){return e.endLineNumber===t.endLineNumber?e.endColumn===t.endColumn?e.startLineNumber===t.startLineNumber?e.startColumn-t.startColumn:e.startLineNumber-t.startLineNumber:e.endColumn-t.endColumn:e.endLineNumber-t.endLineNumber}static spansMultipleLines(e){return e.endLineNumber>e.startLineNumber}toJSON(){return this}}var Qe;function et(e,t){return(n,i)=>t(e(n),e(i))}!function(e){e.isLessThan=function(e){return e<0},e.isLessThanOrEqual=function(e){return e<=0},e.isGreaterThan=function(e){return e>0},e.isNeitherLessOrGreaterThan=function(e){return 0===e},e.greaterThan=1,e.lessThan=-1,e.neitherLessOrGreaterThan=0}(Qe||(Qe={}));const tt=(e,t)=>e-t;class nt{constructor(e){this.iterate=e}toArray(){const e=[];return this.iterate((t=>(e.push(t),!0))),e}filter(e){return new nt((t=>this.iterate((n=>!e(n)||t(n)))))}map(e){return new nt((t=>this.iterate((n=>t(e(n))))))}findLast(e){let t;return this.iterate((n=>(e(n)&&(t=n),!0))),t}findLastMaxBy(e){let t,n=!0;return this.iterate((i=>((n||Qe.isGreaterThan(e(i,t)))&&(n=!1,t=i),!0))),t}}function it(e){return e<0?0:e>255?255:0|e}function ot(e){return e<0?0:e>4294967295?4294967295:0|e}nt.empty=new nt((e=>{}));class at{constructor(e){this.values=e,this.prefixSum=new Uint32Array(e.length),this.prefixSumValidIndex=new Int32Array(1),this.prefixSumValidIndex[0]=-1}insertValues(e,t){e=ot(e);const n=this.values,i=this.prefixSum,o=t.length;return 0!==o&&(this.values=new Uint32Array(n.length+o),this.values.set(n.subarray(0,e),0),this.values.set(n.subarray(e),e+o),this.values.set(t,e),e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),this.prefixSum=new Uint32Array(this.values.length),this.prefixSumValidIndex[0]>=0&&this.prefixSum.set(i.subarray(0,this.prefixSumValidIndex[0]+1)),!0)}setValue(e,t){return e=ot(e),t=ot(t),this.values[e]!==t&&(this.values[e]=t,e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),!0)}removeValues(e,t){e=ot(e),t=ot(t);const n=this.values,i=this.prefixSum;if(e>=n.length)return!1;const o=n.length-e;return t>=o&&(t=o),0!==t&&(this.values=new Uint32Array(n.length-t),this.values.set(n.subarray(0,e),0),this.values.set(n.subarray(e+t),e),this.prefixSum=new Uint32Array(this.values.length),e-1<this.prefixSumValidIndex[0]&&(this.prefixSumValidIndex[0]=e-1),this.prefixSumValidIndex[0]>=0&&this.prefixSum.set(i.subarray(0,this.prefixSumValidIndex[0]+1)),!0)}getTotalSum(){return 0===this.values.length?0:this._getPrefixSum(this.values.length-1)}getPrefixSum(e){return e<0?0:(e=ot(e),this._getPrefixSum(e))}_getPrefixSum(e){if(e<=this.prefixSumValidIndex[0])return this.prefixSum[e];let t=this.prefixSumValidIndex[0]+1;0===t&&(this.prefixSum[0]=this.values[0],t++),e>=this.values.length&&(e=this.values.length-1);for(let n=t;n<=e;n++)this.prefixSum[n]=this.prefixSum[n-1]+this.values[n];return this.prefixSumValidIndex[0]=Math.max(this.prefixSumValidIndex[0],e),this.prefixSum[e]}getIndexOf(e){e=Math.floor(e),this.getTotalSum();let t=0,n=this.values.length-1,i=0,o=0,a=0;for(;t<=n;)if(i=t+(n-t)/2|0,o=this.prefixSum[i],a=o-this.values[i],e<a)n=i-1;else{if(!(e>=o))break;t=i+1}return new rt(i,e-a)}}class rt{constructor(e,t){this.index=e,this.remainder=t,this._prefixSumIndexOfResultBrand=void 0,this.index=e,this.remainder=t}}class st{constructor(e,t,n,i){this._uri=e,this._lines=t,this._eol=n,this._versionId=i,this._lineStarts=null,this._cachedTextValue=null}dispose(){this._lines.length=0}get version(){return this._versionId}getText(){return null===this._cachedTextValue&&(this._cachedTextValue=this._lines.join(this._eol)),this._cachedTextValue}onEvents(e){e.eol&&e.eol!==this._eol&&(this._eol=e.eol,this._lineStarts=null);const t=e.changes;for(const e of t)this._acceptDeleteRange(e.range),this._acceptInsertText(new Je(e.range.startLineNumber,e.range.startColumn),e.text);this._versionId=e.versionId,this._cachedTextValue=null}_ensureLineStarts(){if(!this._lineStarts){const e=this._eol.length,t=this._lines.length,n=new Uint32Array(t);for(let i=0;i<t;i++)n[i]=this._lines[i].length+e;this._lineStarts=new at(n)}}_setLineText(e,t){this._lines[e]=t,this._lineStarts&&this._lineStarts.setValue(e,this._lines[e].length+this._eol.length)}_acceptDeleteRange(e){if(e.startLineNumber!==e.endLineNumber)this._setLineText(e.startLineNumber-1,this._lines[e.startLineNumber-1].substring(0,e.startColumn-1)+this._lines[e.endLineNumber-1].substring(e.endColumn-1)),this._lines.splice(e.startLineNumber,e.endLineNumber-e.startLineNumber),this._lineStarts&&this._lineStarts.removeValues(e.startLineNumber,e.endLineNumber-e.startLineNumber);else{if(e.startColumn===e.endColumn)return;this._setLineText(e.startLineNumber-1,this._lines[e.startLineNumber-1].substring(0,e.startColumn-1)+this._lines[e.startLineNumber-1].substring(e.endColumn-1))}}_acceptInsertText(e,t){if(0===t.length)return;const n=t.split(/\r\n|\r|\n/);if(1===n.length)return void this._setLineText(e.lineNumber-1,this._lines[e.lineNumber-1].substring(0,e.column-1)+n[0]+this._lines[e.lineNumber-1].substring(e.column-1));n[n.length-1]+=this._lines[e.lineNumber-1].substring(e.column-1),this._setLineText(e.lineNumber-1,this._lines[e.lineNumber-1].substring(0,e.column-1)+n[0]);const i=new Uint32Array(n.length-1);for(let t=1;t<n.length;t++)this._lines.splice(e.lineNumber+t-1,0,n[t]),i[t-1]=n[t].length+this._eol.length;this._lineStarts&&this._lineStarts.insertValues(e.lineNumber,i)}}const lt=function(e=""){let t="(-?\\d*\\.\\d\\w*)|([^";for(const n of"`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?")e.indexOf(n)>=0||(t+="\\"+n);return t+="\\s]+)",new RegExp(t,"g")}();const dt=new E;function ct(e,t,n,i,o){if(o||(o=m.first(dt)),n.length>o.maxLen){let a=e-o.maxLen/2;return a<0?a=0:i+=a,ct(e,t,n=n.substring(a,e+o.maxLen/2),i,o)}const a=Date.now(),r=e-1-i;let s=-1,l=null;for(let e=1;!(Date.now()-a>=o.timeBudget);e++){const i=r-o.windowSize*e;t.lastIndex=Math.max(0,i);const a=ut(t,n,r,s);if(!a&&l)break;if(l=a,i<=0)break;s=i}if(l){const e={word:l[0],startColumn:i+1+l.index,endColumn:i+1+l.index+l[0].length};return t.lastIndex=0,e}return null}function ut(e,t,n,i){let o;for(;o=e.exec(t);){const t=o.index||0;if(t<=n&&e.lastIndex>=n)return o;if(i>0&&t>i)return null}return null}dt.unshift({maxLen:1e3,windowSize:15,timeBudget:150});class mt{constructor(e){const t=it(e);this._defaultValue=t,this._asciiMap=mt._createAsciiMap(t),this._map=new Map}static _createAsciiMap(e){const t=new Uint8Array(256);return t.fill(e),t}set(e,t){const n=it(t);e>=0&&e<256?this._asciiMap[e]=n:this._map.set(e,n)}get(e){return e>=0&&e<256?this._asciiMap[e]:this._map.get(e)||this._defaultValue}clear(){this._asciiMap.fill(this._defaultValue),this._map.clear()}}class ht{constructor(e,t,n){const i=new Uint8Array(e*t);for(let o=0,a=e*t;o<a;o++)i[o]=n;this._data=i,this.rows=e,this.cols=t}get(e,t){return this._data[e*this.cols+t]}set(e,t,n){this._data[e*this.cols+t]=n}}class bt{constructor(e){let t=0,n=0;for(let i=0,o=e.length;i<o;i++){const[o,a,r]=e[i];a>t&&(t=a),o>n&&(n=o),r>n&&(n=r)}t++,n++;const i=new ht(n,t,0);for(let t=0,n=e.length;t<n;t++){const[n,o,a]=e[t];i.set(n,o,a)}this._states=i,this._maxCharCode=t}nextState(e,t){return t<0||t>=this._maxCharCode?0:this._states.get(e,t)}}let Tt=null;let gt=null;class pt{static _createLink(e,t,n,i,o){let a=o-1;do{const n=t.charCodeAt(a);if(2!==e.get(n))break;a--}while(a>i);if(i>0){const e=t.charCodeAt(i-1),n=t.charCodeAt(a);(40===e&&41===n||91===e&&93===n||123===e&&125===n)&&a--}return{range:{startLineNumber:n,startColumn:i+1,endLineNumber:n,endColumn:a+2},url:t.substring(i,a+1)}}static computeLinks(e,t=function(){return null===Tt&&(Tt=new bt([[1,104,2],[1,72,2],[1,102,6],[1,70,6],[2,116,3],[2,84,3],[3,116,4],[3,84,4],[4,112,5],[4,80,5],[5,115,9],[5,83,9],[5,58,10],[6,105,7],[6,73,7],[7,108,8],[7,76,8],[8,101,9],[8,69,9],[9,58,10],[10,47,11],[11,47,12]])),Tt}()){const n=function(){if(null===gt){gt=new mt(0);const e=" \t<>'\"、。｡､，．：；‘〈「『〔（［｛｢｣｝］）〕』」〉’｀～…";for(let t=0;t<e.length;t++)gt.set(e.charCodeAt(t),1);const t=".,;:";for(let e=0;e<t.length;e++)gt.set(t.charCodeAt(e),2)}return gt}(),i=[];for(let o=1,a=e.getLineCount();o<=a;o++){const a=e.getLineContent(o),r=a.length;let s=0,l=0,d=0,c=1,u=!1,m=!1,h=!1,b=!1;for(;s<r;){let e=!1;const r=a.charCodeAt(s);if(13===c){let t;switch(r){case 40:u=!0,t=0;break;case 41:t=u?0:1;break;case 91:h=!0,m=!0,t=0;break;case 93:h=!1,t=m?0:1;break;case 123:b=!0,t=0;break;case 125:t=b?0:1;break;case 39:case 34:case 96:t=d===r?1:39===d||34===d||96===d?0:1;break;case 42:t=42===d?1:0;break;case 124:t=124===d?1:0;break;case 32:t=h?0:1;break;default:t=n.get(r)}1===t&&(i.push(pt._createLink(n,a,o,l,s)),e=!0)}else if(12===c){let t;91===r?(m=!0,t=0):t=n.get(r),1===t?e=!0:c=13}else c=t.nextState(c,r),0===c&&(e=!0);e&&(c=1,u=!1,m=!1,b=!1,l=s+1,d=r),s++}13===c&&i.push(pt._createLink(n,a,o,l,r))}return i}}class xt{constructor(){this._defaultValueSet=[["true","false"],["True","False"],["Private","Public","Friend","ReadOnly","Partial","Protected","WriteOnly"],["public","protected","private"]]}navigateValueSet(e,t,n,i,o){if(e&&t){const n=this.doNavigateValueSet(t,o);if(n)return{range:e,value:n}}if(n&&i){const e=this.doNavigateValueSet(i,o);if(e)return{range:n,value:e}}return null}doNavigateValueSet(e,t){const n=this.numberReplace(e,t);return null!==n?n:this.textReplace(e,t)}numberReplace(e,t){const n=Math.pow(10,e.length-(e.lastIndexOf(".")+1));let i=Number(e);const o=parseFloat(e);return isNaN(i)||isNaN(o)||i!==o?null:0!==i||t?(i=Math.floor(i*n),i+=t?n:-n,String(i/n)):null}textReplace(e,t){return this.valueSetsReplace(this._defaultValueSet,e,t)}valueSetsReplace(e,t,n){let i=null;for(let o=0,a=e.length;null===i&&o<a;o++)i=this.valueSetReplace(e[o],t,n);return i}valueSetReplace(e,t,n){let i=e.indexOf(t);return i>=0?(i+=n?1:-1,i<0?i=e.length-1:i%=e.length,e[i]):null}}xt.INSTANCE=new xt;const kt=Object.freeze((function(e,t){const n=setTimeout(e.bind(t),0);return{dispose(){clearTimeout(n)}}}));var ft,St;(St=ft||(ft={})).isCancellationToken=function(e){return e===St.None||e===St.Cancelled||e instanceof Ct||!(!e||"object"!=typeof e)&&"boolean"==typeof e.isCancellationRequested&&"function"==typeof e.onCancellationRequested},St.None=Object.freeze({isCancellationRequested:!1,onCancellationRequested:I.None}),St.Cancelled=Object.freeze({isCancellationRequested:!0,onCancellationRequested:kt});class Ct{constructor(){this._isCancelled=!1,this._emitter=null}cancel(){this._isCancelled||(this._isCancelled=!0,this._emitter&&(this._emitter.fire(void 0),this.dispose()))}get isCancellationRequested(){return this._isCancelled}get onCancellationRequested(){return this._isCancelled?kt:(this._emitter||(this._emitter=new R),this._emitter.event)}dispose(){this._emitter&&(this._emitter.dispose(),this._emitter=null)}}class Et{constructor(e){this._token=void 0,this._parentListener=void 0,this._parentListener=e&&e.onCancellationRequested(this.cancel,this)}get token(){return this._token||(this._token=new Ct),this._token}cancel(){this._token?this._token instanceof Ct&&this._token.cancel():this._token=ft.Cancelled}dispose(e=!1){var t;e&&this.cancel(),null===(t=this._parentListener)||void 0===t||t.dispose(),this._token?this._token instanceof Ct&&this._token.dispose():this._token=ft.None}}class At{constructor(){this._keyCodeToStr=[],this._strToKeyCode=Object.create(null)}define(e,t){this._keyCodeToStr[e]=t,this._strToKeyCode[t.toLowerCase()]=e}keyCodeToStr(e){return this._keyCodeToStr[e]}strToKeyCode(e){return this._strToKeyCode[e.toLowerCase()]||0}}const yt=new At,It=new At,Lt=new At,Ot=new Array(230),_t={},Nt=[],Rt=Object.create(null),Dt=Object.create(null),Mt=[],vt=[];for(let e=0;e<=193;e++)Mt[e]=-1;for(let e=0;e<=132;e++)vt[e]=-1;var Ft;!function(){const e="",t=[[1,0,"None",0,"unknown",0,"VK_UNKNOWN",e,e],[1,1,"Hyper",0,e,0,e,e,e],[1,2,"Super",0,e,0,e,e,e],[1,3,"Fn",0,e,0,e,e,e],[1,4,"FnLock",0,e,0,e,e,e],[1,5,"Suspend",0,e,0,e,e,e],[1,6,"Resume",0,e,0,e,e,e],[1,7,"Turbo",0,e,0,e,e,e],[1,8,"Sleep",0,e,0,"VK_SLEEP",e,e],[1,9,"WakeUp",0,e,0,e,e,e],[0,10,"KeyA",31,"A",65,"VK_A",e,e],[0,11,"KeyB",32,"B",66,"VK_B",e,e],[0,12,"KeyC",33,"C",67,"VK_C",e,e],[0,13,"KeyD",34,"D",68,"VK_D",e,e],[0,14,"KeyE",35,"E",69,"VK_E",e,e],[0,15,"KeyF",36,"F",70,"VK_F",e,e],[0,16,"KeyG",37,"G",71,"VK_G",e,e],[0,17,"KeyH",38,"H",72,"VK_H",e,e],[0,18,"KeyI",39,"I",73,"VK_I",e,e],[0,19,"KeyJ",40,"J",74,"VK_J",e,e],[0,20,"KeyK",41,"K",75,"VK_K",e,e],[0,21,"KeyL",42,"L",76,"VK_L",e,e],[0,22,"KeyM",43,"M",77,"VK_M",e,e],[0,23,"KeyN",44,"N",78,"VK_N",e,e],[0,24,"KeyO",45,"O",79,"VK_O",e,e],[0,25,"KeyP",46,"P",80,"VK_P",e,e],[0,26,"KeyQ",47,"Q",81,"VK_Q",e,e],[0,27,"KeyR",48,"R",82,"VK_R",e,e],[0,28,"KeyS",49,"S",83,"VK_S",e,e],[0,29,"KeyT",50,"T",84,"VK_T",e,e],[0,30,"KeyU",51,"U",85,"VK_U",e,e],[0,31,"KeyV",52,"V",86,"VK_V",e,e],[0,32,"KeyW",53,"W",87,"VK_W",e,e],[0,33,"KeyX",54,"X",88,"VK_X",e,e],[0,34,"KeyY",55,"Y",89,"VK_Y",e,e],[0,35,"KeyZ",56,"Z",90,"VK_Z",e,e],[0,36,"Digit1",22,"1",49,"VK_1",e,e],[0,37,"Digit2",23,"2",50,"VK_2",e,e],[0,38,"Digit3",24,"3",51,"VK_3",e,e],[0,39,"Digit4",25,"4",52,"VK_4",e,e],[0,40,"Digit5",26,"5",53,"VK_5",e,e],[0,41,"Digit6",27,"6",54,"VK_6",e,e],[0,42,"Digit7",28,"7",55,"VK_7",e,e],[0,43,"Digit8",29,"8",56,"VK_8",e,e],[0,44,"Digit9",30,"9",57,"VK_9",e,e],[0,45,"Digit0",21,"0",48,"VK_0",e,e],[1,46,"Enter",3,"Enter",13,"VK_RETURN",e,e],[1,47,"Escape",9,"Escape",27,"VK_ESCAPE",e,e],[1,48,"Backspace",1,"Backspace",8,"VK_BACK",e,e],[1,49,"Tab",2,"Tab",9,"VK_TAB",e,e],[1,50,"Space",10,"Space",32,"VK_SPACE",e,e],[0,51,"Minus",88,"-",189,"VK_OEM_MINUS","-","OEM_MINUS"],[0,52,"Equal",86,"=",187,"VK_OEM_PLUS","=","OEM_PLUS"],[0,53,"BracketLeft",92,"[",219,"VK_OEM_4","[","OEM_4"],[0,54,"BracketRight",94,"]",221,"VK_OEM_6","]","OEM_6"],[0,55,"Backslash",93,"\\",220,"VK_OEM_5","\\","OEM_5"],[0,56,"IntlHash",0,e,0,e,e,e],[0,57,"Semicolon",85,";",186,"VK_OEM_1",";","OEM_1"],[0,58,"Quote",95,"'",222,"VK_OEM_7","'","OEM_7"],[0,59,"Backquote",91,"`",192,"VK_OEM_3","`","OEM_3"],[0,60,"Comma",87,",",188,"VK_OEM_COMMA",",","OEM_COMMA"],[0,61,"Period",89,".",190,"VK_OEM_PERIOD",".","OEM_PERIOD"],[0,62,"Slash",90,"/",191,"VK_OEM_2","/","OEM_2"],[1,63,"CapsLock",8,"CapsLock",20,"VK_CAPITAL",e,e],[1,64,"F1",59,"F1",112,"VK_F1",e,e],[1,65,"F2",60,"F2",113,"VK_F2",e,e],[1,66,"F3",61,"F3",114,"VK_F3",e,e],[1,67,"F4",62,"F4",115,"VK_F4",e,e],[1,68,"F5",63,"F5",116,"VK_F5",e,e],[1,69,"F6",64,"F6",117,"VK_F6",e,e],[1,70,"F7",65,"F7",118,"VK_F7",e,e],[1,71,"F8",66,"F8",119,"VK_F8",e,e],[1,72,"F9",67,"F9",120,"VK_F9",e,e],[1,73,"F10",68,"F10",121,"VK_F10",e,e],[1,74,"F11",69,"F11",122,"VK_F11",e,e],[1,75,"F12",70,"F12",123,"VK_F12",e,e],[1,76,"PrintScreen",0,e,0,e,e,e],[1,77,"ScrollLock",84,"ScrollLock",145,"VK_SCROLL",e,e],[1,78,"Pause",7,"PauseBreak",19,"VK_PAUSE",e,e],[1,79,"Insert",19,"Insert",45,"VK_INSERT",e,e],[1,80,"Home",14,"Home",36,"VK_HOME",e,e],[1,81,"PageUp",11,"PageUp",33,"VK_PRIOR",e,e],[1,82,"Delete",20,"Delete",46,"VK_DELETE",e,e],[1,83,"End",13,"End",35,"VK_END",e,e],[1,84,"PageDown",12,"PageDown",34,"VK_NEXT",e,e],[1,85,"ArrowRight",17,"RightArrow",39,"VK_RIGHT","Right",e],[1,86,"ArrowLeft",15,"LeftArrow",37,"VK_LEFT","Left",e],[1,87,"ArrowDown",18,"DownArrow",40,"VK_DOWN","Down",e],[1,88,"ArrowUp",16,"UpArrow",38,"VK_UP","Up",e],[1,89,"NumLock",83,"NumLock",144,"VK_NUMLOCK",e,e],[1,90,"NumpadDivide",113,"NumPad_Divide",111,"VK_DIVIDE",e,e],[1,91,"NumpadMultiply",108,"NumPad_Multiply",106,"VK_MULTIPLY",e,e],[1,92,"NumpadSubtract",111,"NumPad_Subtract",109,"VK_SUBTRACT",e,e],[1,93,"NumpadAdd",109,"NumPad_Add",107,"VK_ADD",e,e],[1,94,"NumpadEnter",3,e,0,e,e,e],[1,95,"Numpad1",99,"NumPad1",97,"VK_NUMPAD1",e,e],[1,96,"Numpad2",100,"NumPad2",98,"VK_NUMPAD2",e,e],[1,97,"Numpad3",101,"NumPad3",99,"VK_NUMPAD3",e,e],[1,98,"Numpad4",102,"NumPad4",100,"VK_NUMPAD4",e,e],[1,99,"Numpad5",103,"NumPad5",101,"VK_NUMPAD5",e,e],[1,100,"Numpad6",104,"NumPad6",102,"VK_NUMPAD6",e,e],[1,101,"Numpad7",105,"NumPad7",103,"VK_NUMPAD7",e,e],[1,102,"Numpad8",106,"NumPad8",104,"VK_NUMPAD8",e,e],[1,103,"Numpad9",107,"NumPad9",105,"VK_NUMPAD9",e,e],[1,104,"Numpad0",98,"NumPad0",96,"VK_NUMPAD0",e,e],[1,105,"NumpadDecimal",112,"NumPad_Decimal",110,"VK_DECIMAL",e,e],[0,106,"IntlBackslash",97,"OEM_102",226,"VK_OEM_102",e,e],[1,107,"ContextMenu",58,"ContextMenu",93,e,e,e],[1,108,"Power",0,e,0,e,e,e],[1,109,"NumpadEqual",0,e,0,e,e,e],[1,110,"F13",71,"F13",124,"VK_F13",e,e],[1,111,"F14",72,"F14",125,"VK_F14",e,e],[1,112,"F15",73,"F15",126,"VK_F15",e,e],[1,113,"F16",74,"F16",127,"VK_F16",e,e],[1,114,"F17",75,"F17",128,"VK_F17",e,e],[1,115,"F18",76,"F18",129,"VK_F18",e,e],[1,116,"F19",77,"F19",130,"VK_F19",e,e],[1,117,"F20",78,"F20",131,"VK_F20",e,e],[1,118,"F21",79,"F21",132,"VK_F21",e,e],[1,119,"F22",80,"F22",133,"VK_F22",e,e],[1,120,"F23",81,"F23",134,"VK_F23",e,e],[1,121,"F24",82,"F24",135,"VK_F24",e,e],[1,122,"Open",0,e,0,e,e,e],[1,123,"Help",0,e,0,e,e,e],[1,124,"Select",0,e,0,e,e,e],[1,125,"Again",0,e,0,e,e,e],[1,126,"Undo",0,e,0,e,e,e],[1,127,"Cut",0,e,0,e,e,e],[1,128,"Copy",0,e,0,e,e,e],[1,129,"Paste",0,e,0,e,e,e],[1,130,"Find",0,e,0,e,e,e],[1,131,"AudioVolumeMute",117,"AudioVolumeMute",173,"VK_VOLUME_MUTE",e,e],[1,132,"AudioVolumeUp",118,"AudioVolumeUp",175,"VK_VOLUME_UP",e,e],[1,133,"AudioVolumeDown",119,"AudioVolumeDown",174,"VK_VOLUME_DOWN",e,e],[1,134,"NumpadComma",110,"NumPad_Separator",108,"VK_SEPARATOR",e,e],[0,135,"IntlRo",115,"ABNT_C1",193,"VK_ABNT_C1",e,e],[1,136,"KanaMode",0,e,0,e,e,e],[0,137,"IntlYen",0,e,0,e,e,e],[1,138,"Convert",0,e,0,e,e,e],[1,139,"NonConvert",0,e,0,e,e,e],[1,140,"Lang1",0,e,0,e,e,e],[1,141,"Lang2",0,e,0,e,e,e],[1,142,"Lang3",0,e,0,e,e,e],[1,143,"Lang4",0,e,0,e,e,e],[1,144,"Lang5",0,e,0,e,e,e],[1,145,"Abort",0,e,0,e,e,e],[1,146,"Props",0,e,0,e,e,e],[1,147,"NumpadParenLeft",0,e,0,e,e,e],[1,148,"NumpadParenRight",0,e,0,e,e,e],[1,149,"NumpadBackspace",0,e,0,e,e,e],[1,150,"NumpadMemoryStore",0,e,0,e,e,e],[1,151,"NumpadMemoryRecall",0,e,0,e,e,e],[1,152,"NumpadMemoryClear",0,e,0,e,e,e],[1,153,"NumpadMemoryAdd",0,e,0,e,e,e],[1,154,"NumpadMemorySubtract",0,e,0,e,e,e],[1,155,"NumpadClear",131,"Clear",12,"VK_CLEAR",e,e],[1,156,"NumpadClearEntry",0,e,0,e,e,e],[1,0,e,5,"Ctrl",17,"VK_CONTROL",e,e],[1,0,e,4,"Shift",16,"VK_SHIFT",e,e],[1,0,e,6,"Alt",18,"VK_MENU",e,e],[1,0,e,57,"Meta",91,"VK_COMMAND",e,e],[1,157,"ControlLeft",5,e,0,"VK_LCONTROL",e,e],[1,158,"ShiftLeft",4,e,0,"VK_LSHIFT",e,e],[1,159,"AltLeft",6,e,0,"VK_LMENU",e,e],[1,160,"MetaLeft",57,e,0,"VK_LWIN",e,e],[1,161,"ControlRight",5,e,0,"VK_RCONTROL",e,e],[1,162,"ShiftRight",4,e,0,"VK_RSHIFT",e,e],[1,163,"AltRight",6,e,0,"VK_RMENU",e,e],[1,164,"MetaRight",57,e,0,"VK_RWIN",e,e],[1,165,"BrightnessUp",0,e,0,e,e,e],[1,166,"BrightnessDown",0,e,0,e,e,e],[1,167,"MediaPlay",0,e,0,e,e,e],[1,168,"MediaRecord",0,e,0,e,e,e],[1,169,"MediaFastForward",0,e,0,e,e,e],[1,170,"MediaRewind",0,e,0,e,e,e],[1,171,"MediaTrackNext",124,"MediaTrackNext",176,"VK_MEDIA_NEXT_TRACK",e,e],[1,172,"MediaTrackPrevious",125,"MediaTrackPrevious",177,"VK_MEDIA_PREV_TRACK",e,e],[1,173,"MediaStop",126,"MediaStop",178,"VK_MEDIA_STOP",e,e],[1,174,"Eject",0,e,0,e,e,e],[1,175,"MediaPlayPause",127,"MediaPlayPause",179,"VK_MEDIA_PLAY_PAUSE",e,e],[1,176,"MediaSelect",128,"LaunchMediaPlayer",181,"VK_MEDIA_LAUNCH_MEDIA_SELECT",e,e],[1,177,"LaunchMail",129,"LaunchMail",180,"VK_MEDIA_LAUNCH_MAIL",e,e],[1,178,"LaunchApp2",130,"LaunchApp2",183,"VK_MEDIA_LAUNCH_APP2",e,e],[1,179,"LaunchApp1",0,e,0,"VK_MEDIA_LAUNCH_APP1",e,e],[1,180,"SelectTask",0,e,0,e,e,e],[1,181,"LaunchScreenSaver",0,e,0,e,e,e],[1,182,"BrowserSearch",120,"BrowserSearch",170,"VK_BROWSER_SEARCH",e,e],[1,183,"BrowserHome",121,"BrowserHome",172,"VK_BROWSER_HOME",e,e],[1,184,"BrowserBack",122,"BrowserBack",166,"VK_BROWSER_BACK",e,e],[1,185,"BrowserForward",123,"BrowserForward",167,"VK_BROWSER_FORWARD",e,e],[1,186,"BrowserStop",0,e,0,"VK_BROWSER_STOP",e,e],[1,187,"BrowserRefresh",0,e,0,"VK_BROWSER_REFRESH",e,e],[1,188,"BrowserFavorites",0,e,0,"VK_BROWSER_FAVORITES",e,e],[1,189,"ZoomToggle",0,e,0,e,e,e],[1,190,"MailReply",0,e,0,e,e,e],[1,191,"MailForward",0,e,0,e,e,e],[1,192,"MailSend",0,e,0,e,e,e],[1,0,e,114,"KeyInComposition",229,e,e,e],[1,0,e,116,"ABNT_C2",194,"VK_ABNT_C2",e,e],[1,0,e,96,"OEM_8",223,"VK_OEM_8",e,e],[1,0,e,0,e,0,"VK_KANA",e,e],[1,0,e,0,e,0,"VK_HANGUL",e,e],[1,0,e,0,e,0,"VK_JUNJA",e,e],[1,0,e,0,e,0,"VK_FINAL",e,e],[1,0,e,0,e,0,"VK_HANJA",e,e],[1,0,e,0,e,0,"VK_KANJI",e,e],[1,0,e,0,e,0,"VK_CONVERT",e,e],[1,0,e,0,e,0,"VK_NONCONVERT",e,e],[1,0,e,0,e,0,"VK_ACCEPT",e,e],[1,0,e,0,e,0,"VK_MODECHANGE",e,e],[1,0,e,0,e,0,"VK_SELECT",e,e],[1,0,e,0,e,0,"VK_PRINT",e,e],[1,0,e,0,e,0,"VK_EXECUTE",e,e],[1,0,e,0,e,0,"VK_SNAPSHOT",e,e],[1,0,e,0,e,0,"VK_HELP",e,e],[1,0,e,0,e,0,"VK_APPS",e,e],[1,0,e,0,e,0,"VK_PROCESSKEY",e,e],[1,0,e,0,e,0,"VK_PACKET",e,e],[1,0,e,0,e,0,"VK_DBE_SBCSCHAR",e,e],[1,0,e,0,e,0,"VK_DBE_DBCSCHAR",e,e],[1,0,e,0,e,0,"VK_ATTN",e,e],[1,0,e,0,e,0,"VK_CRSEL",e,e],[1,0,e,0,e,0,"VK_EXSEL",e,e],[1,0,e,0,e,0,"VK_EREOF",e,e],[1,0,e,0,e,0,"VK_PLAY",e,e],[1,0,e,0,e,0,"VK_ZOOM",e,e],[1,0,e,0,e,0,"VK_NONAME",e,e],[1,0,e,0,e,0,"VK_PA1",e,e],[1,0,e,0,e,0,"VK_OEM_CLEAR",e,e]],n=[],i=[];for(const e of t){const[t,o,a,r,s,l,d,c,u]=e;if(i[o]||(i[o]=!0,Nt[o]=a,Rt[a]=o,Dt[a.toLowerCase()]=o,t&&(Mt[o]=r,0!==r&&3!==r&&5!==r&&4!==r&&6!==r&&57!==r&&(vt[r]=o))),!n[r]){if(n[r]=!0,!s)throw new Error(`String representation missing for key code ${r} around scan code ${a}`);yt.define(r,s),It.define(r,c||s),Lt.define(r,u||c||s)}l&&(Ot[l]=r),d&&(_t[d]=r)}vt[3]=46}(),function(e){e.toString=function(e){return yt.keyCodeToStr(e)},e.fromString=function(e){return yt.strToKeyCode(e)},e.toUserSettingsUS=function(e){return It.keyCodeToStr(e)},e.toUserSettingsGeneral=function(e){return Lt.keyCodeToStr(e)},e.fromUserSettings=function(e){return It.strToKeyCode(e)||Lt.strToKeyCode(e)},e.toElectronAccelerator=function(e){if(e>=98&&e<=113)return null;switch(e){case 16:return"Up";case 18:return"Down";case 15:return"Left";case 17:return"Right"}return yt.keyCodeToStr(e)}}(Ft||(Ft={}));class Pt extends $e{constructor(e,t,n,i){super(e,t,n,i),this.selectionStartLineNumber=e,this.selectionStartColumn=t,this.positionLineNumber=n,this.positionColumn=i}toString(){return"["+this.selectionStartLineNumber+","+this.selectionStartColumn+" -> "+this.positionLineNumber+","+this.positionColumn+"]"}equalsSelection(e){return Pt.selectionsEqual(this,e)}static selectionsEqual(e,t){return e.selectionStartLineNumber===t.selectionStartLineNumber&&e.selectionStartColumn===t.selectionStartColumn&&e.positionLineNumber===t.positionLineNumber&&e.positionColumn===t.positionColumn}getDirection(){return this.selectionStartLineNumber===this.startLineNumber&&this.selectionStartColumn===this.startColumn?0:1}setEndPosition(e,t){return 0===this.getDirection()?new Pt(this.startLineNumber,this.startColumn,e,t):new Pt(e,t,this.startLineNumber,this.startColumn)}getPosition(){return new Je(this.positionLineNumber,this.positionColumn)}getSelectionStart(){return new Je(this.selectionStartLineNumber,this.selectionStartColumn)}setStartPosition(e,t){return 0===this.getDirection()?new Pt(e,t,this.endLineNumber,this.endColumn):new Pt(this.endLineNumber,this.endColumn,e,t)}static fromPositions(e,t=e){return new Pt(e.lineNumber,e.column,t.lineNumber,t.column)}static fromRange(e,t){return 0===t?new Pt(e.startLineNumber,e.startColumn,e.endLineNumber,e.endColumn):new Pt(e.endLineNumber,e.endColumn,e.startLineNumber,e.startColumn)}static liftSelection(e){return new Pt(e.selectionStartLineNumber,e.selectionStartColumn,e.positionLineNumber,e.positionColumn)}static selectionsArrEqual(e,t){if(e&&!t||!e&&t)return!1;if(!e&&!t)return!0;if(e.length!==t.length)return!1;for(let n=0,i=e.length;n<i;n++)if(!this.selectionsEqual(e[n],t[n]))return!1;return!0}static isISelection(e){return e&&"number"==typeof e.selectionStartLineNumber&&"number"==typeof e.selectionStartColumn&&"number"==typeof e.positionLineNumber&&"number"==typeof e.positionColumn}static createWithDirection(e,t,n,i,o){return 0===o?new Pt(e,t,n,i):new Pt(n,i,e,t)}}const Bt=Object.create(null);function wt(e,t){if(M(t)){const n=Bt[t];if(void 0===n)throw new Error(`${e} references an unknown codicon: ${t}`);t=n}return Bt[e]=t,{id:e}}const Ut={add:wt("add",6e4),plus:wt("plus",6e4),gistNew:wt("gist-new",6e4),repoCreate:wt("repo-create",6e4),lightbulb:wt("lightbulb",60001),lightBulb:wt("light-bulb",60001),repo:wt("repo",60002),repoDelete:wt("repo-delete",60002),gistFork:wt("gist-fork",60003),repoForked:wt("repo-forked",60003),gitPullRequest:wt("git-pull-request",60004),gitPullRequestAbandoned:wt("git-pull-request-abandoned",60004),recordKeys:wt("record-keys",60005),keyboard:wt("keyboard",60005),tag:wt("tag",60006),tagAdd:wt("tag-add",60006),tagRemove:wt("tag-remove",60006),gitPullRequestLabel:wt("git-pull-request-label",60006),person:wt("person",60007),personFollow:wt("person-follow",60007),personOutline:wt("person-outline",60007),personFilled:wt("person-filled",60007),gitBranch:wt("git-branch",60008),gitBranchCreate:wt("git-branch-create",60008),gitBranchDelete:wt("git-branch-delete",60008),sourceControl:wt("source-control",60008),mirror:wt("mirror",60009),mirrorPublic:wt("mirror-public",60009),star:wt("star",60010),starAdd:wt("star-add",60010),starDelete:wt("star-delete",60010),starEmpty:wt("star-empty",60010),comment:wt("comment",60011),commentAdd:wt("comment-add",60011),alert:wt("alert",60012),warning:wt("warning",60012),search:wt("search",60013),searchSave:wt("search-save",60013),logOut:wt("log-out",60014),signOut:wt("sign-out",60014),logIn:wt("log-in",60015),signIn:wt("sign-in",60015),eye:wt("eye",60016),eyeUnwatch:wt("eye-unwatch",60016),eyeWatch:wt("eye-watch",60016),circleFilled:wt("circle-filled",60017),primitiveDot:wt("primitive-dot",60017),closeDirty:wt("close-dirty",60017),debugBreakpoint:wt("debug-breakpoint",60017),debugBreakpointDisabled:wt("debug-breakpoint-disabled",60017),debugHint:wt("debug-hint",60017),primitiveSquare:wt("primitive-square",60018),edit:wt("edit",60019),pencil:wt("pencil",60019),info:wt("info",60020),issueOpened:wt("issue-opened",60020),gistPrivate:wt("gist-private",60021),gitForkPrivate:wt("git-fork-private",60021),lock:wt("lock",60021),mirrorPrivate:wt("mirror-private",60021),close:wt("close",60022),removeClose:wt("remove-close",60022),x:wt("x",60022),repoSync:wt("repo-sync",60023),sync:wt("sync",60023),clone:wt("clone",60024),desktopDownload:wt("desktop-download",60024),beaker:wt("beaker",60025),microscope:wt("microscope",60025),vm:wt("vm",60026),deviceDesktop:wt("device-desktop",60026),file:wt("file",60027),fileText:wt("file-text",60027),more:wt("more",60028),ellipsis:wt("ellipsis",60028),kebabHorizontal:wt("kebab-horizontal",60028),mailReply:wt("mail-reply",60029),reply:wt("reply",60029),organization:wt("organization",60030),organizationFilled:wt("organization-filled",60030),organizationOutline:wt("organization-outline",60030),newFile:wt("new-file",60031),fileAdd:wt("file-add",60031),newFolder:wt("new-folder",60032),fileDirectoryCreate:wt("file-directory-create",60032),trash:wt("trash",60033),trashcan:wt("trashcan",60033),history:wt("history",60034),clock:wt("clock",60034),folder:wt("folder",60035),fileDirectory:wt("file-directory",60035),symbolFolder:wt("symbol-folder",60035),logoGithub:wt("logo-github",60036),markGithub:wt("mark-github",60036),github:wt("github",60036),terminal:wt("terminal",60037),console:wt("console",60037),repl:wt("repl",60037),zap:wt("zap",60038),symbolEvent:wt("symbol-event",60038),error:wt("error",60039),stop:wt("stop",60039),variable:wt("variable",60040),symbolVariable:wt("symbol-variable",60040),array:wt("array",60042),symbolArray:wt("symbol-array",60042),symbolModule:wt("symbol-module",60043),symbolPackage:wt("symbol-package",60043),symbolNamespace:wt("symbol-namespace",60043),symbolObject:wt("symbol-object",60043),symbolMethod:wt("symbol-method",60044),symbolFunction:wt("symbol-function",60044),symbolConstructor:wt("symbol-constructor",60044),symbolBoolean:wt("symbol-boolean",60047),symbolNull:wt("symbol-null",60047),symbolNumeric:wt("symbol-numeric",60048),symbolNumber:wt("symbol-number",60048),symbolStructure:wt("symbol-structure",60049),symbolStruct:wt("symbol-struct",60049),symbolParameter:wt("symbol-parameter",60050),symbolTypeParameter:wt("symbol-type-parameter",60050),symbolKey:wt("symbol-key",60051),symbolText:wt("symbol-text",60051),symbolReference:wt("symbol-reference",60052),goToFile:wt("go-to-file",60052),symbolEnum:wt("symbol-enum",60053),symbolValue:wt("symbol-value",60053),symbolRuler:wt("symbol-ruler",60054),symbolUnit:wt("symbol-unit",60054),activateBreakpoints:wt("activate-breakpoints",60055),archive:wt("archive",60056),arrowBoth:wt("arrow-both",60057),arrowDown:wt("arrow-down",60058),arrowLeft:wt("arrow-left",60059),arrowRight:wt("arrow-right",60060),arrowSmallDown:wt("arrow-small-down",60061),arrowSmallLeft:wt("arrow-small-left",60062),arrowSmallRight:wt("arrow-small-right",60063),arrowSmallUp:wt("arrow-small-up",60064),arrowUp:wt("arrow-up",60065),bell:wt("bell",60066),bold:wt("bold",60067),book:wt("book",60068),bookmark:wt("bookmark",60069),debugBreakpointConditionalUnverified:wt("debug-breakpoint-conditional-unverified",60070),debugBreakpointConditional:wt("debug-breakpoint-conditional",60071),debugBreakpointConditionalDisabled:wt("debug-breakpoint-conditional-disabled",60071),debugBreakpointDataUnverified:wt("debug-breakpoint-data-unverified",60072),debugBreakpointData:wt("debug-breakpoint-data",60073),debugBreakpointDataDisabled:wt("debug-breakpoint-data-disabled",60073),debugBreakpointLogUnverified:wt("debug-breakpoint-log-unverified",60074),debugBreakpointLog:wt("debug-breakpoint-log",60075),debugBreakpointLogDisabled:wt("debug-breakpoint-log-disabled",60075),briefcase:wt("briefcase",60076),broadcast:wt("broadcast",60077),browser:wt("browser",60078),bug:wt("bug",60079),calendar:wt("calendar",60080),caseSensitive:wt("case-sensitive",60081),check:wt("check",60082),checklist:wt("checklist",60083),chevronDown:wt("chevron-down",60084),dropDownButton:wt("drop-down-button",60084),chevronLeft:wt("chevron-left",60085),chevronRight:wt("chevron-right",60086),chevronUp:wt("chevron-up",60087),chromeClose:wt("chrome-close",60088),chromeMaximize:wt("chrome-maximize",60089),chromeMinimize:wt("chrome-minimize",60090),chromeRestore:wt("chrome-restore",60091),circle:wt("circle",60092),circleOutline:wt("circle-outline",60092),debugBreakpointUnverified:wt("debug-breakpoint-unverified",60092),circleSlash:wt("circle-slash",60093),circuitBoard:wt("circuit-board",60094),clearAll:wt("clear-all",60095),clippy:wt("clippy",60096),closeAll:wt("close-all",60097),cloudDownload:wt("cloud-download",60098),cloudUpload:wt("cloud-upload",60099),code:wt("code",60100),collapseAll:wt("collapse-all",60101),colorMode:wt("color-mode",60102),commentDiscussion:wt("comment-discussion",60103),compareChanges:wt("compare-changes",60157),creditCard:wt("credit-card",60105),dash:wt("dash",60108),dashboard:wt("dashboard",60109),database:wt("database",60110),debugContinue:wt("debug-continue",60111),debugDisconnect:wt("debug-disconnect",60112),debugPause:wt("debug-pause",60113),debugRestart:wt("debug-restart",60114),debugStart:wt("debug-start",60115),debugStepInto:wt("debug-step-into",60116),debugStepOut:wt("debug-step-out",60117),debugStepOver:wt("debug-step-over",60118),debugStop:wt("debug-stop",60119),debug:wt("debug",60120),deviceCameraVideo:wt("device-camera-video",60121),deviceCamera:wt("device-camera",60122),deviceMobile:wt("device-mobile",60123),diffAdded:wt("diff-added",60124),diffIgnored:wt("diff-ignored",60125),diffModified:wt("diff-modified",60126),diffRemoved:wt("diff-removed",60127),diffRenamed:wt("diff-renamed",60128),diff:wt("diff",60129),discard:wt("discard",60130),editorLayout:wt("editor-layout",60131),emptyWindow:wt("empty-window",60132),exclude:wt("exclude",60133),extensions:wt("extensions",60134),eyeClosed:wt("eye-closed",60135),fileBinary:wt("file-binary",60136),fileCode:wt("file-code",60137),fileMedia:wt("file-media",60138),filePdf:wt("file-pdf",60139),fileSubmodule:wt("file-submodule",60140),fileSymlinkDirectory:wt("file-symlink-directory",60141),fileSymlinkFile:wt("file-symlink-file",60142),fileZip:wt("file-zip",60143),files:wt("files",60144),filter:wt("filter",60145),flame:wt("flame",60146),foldDown:wt("fold-down",60147),foldUp:wt("fold-up",60148),fold:wt("fold",60149),folderActive:wt("folder-active",60150),folderOpened:wt("folder-opened",60151),gear:wt("gear",60152),gift:wt("gift",60153),gistSecret:wt("gist-secret",60154),gist:wt("gist",60155),gitCommit:wt("git-commit",60156),gitCompare:wt("git-compare",60157),gitMerge:wt("git-merge",60158),githubAction:wt("github-action",60159),githubAlt:wt("github-alt",60160),globe:wt("globe",60161),grabber:wt("grabber",60162),graph:wt("graph",60163),gripper:wt("gripper",60164),heart:wt("heart",60165),home:wt("home",60166),horizontalRule:wt("horizontal-rule",60167),hubot:wt("hubot",60168),inbox:wt("inbox",60169),issueClosed:wt("issue-closed",60324),issueReopened:wt("issue-reopened",60171),issues:wt("issues",60172),italic:wt("italic",60173),jersey:wt("jersey",60174),json:wt("json",60175),bracket:wt("bracket",60175),kebabVertical:wt("kebab-vertical",60176),key:wt("key",60177),law:wt("law",60178),lightbulbAutofix:wt("lightbulb-autofix",60179),linkExternal:wt("link-external",60180),link:wt("link",60181),listOrdered:wt("list-ordered",60182),listUnordered:wt("list-unordered",60183),liveShare:wt("live-share",60184),loading:wt("loading",60185),location:wt("location",60186),mailRead:wt("mail-read",60187),mail:wt("mail",60188),markdown:wt("markdown",60189),megaphone:wt("megaphone",60190),mention:wt("mention",60191),milestone:wt("milestone",60192),gitPullRequestMilestone:wt("git-pull-request-milestone",60192),mortarBoard:wt("mortar-board",60193),move:wt("move",60194),multipleWindows:wt("multiple-windows",60195),mute:wt("mute",60196),noNewline:wt("no-newline",60197),note:wt("note",60198),octoface:wt("octoface",60199),openPreview:wt("open-preview",60200),package:wt("package",60201),paintcan:wt("paintcan",60202),pin:wt("pin",60203),play:wt("play",60204),run:wt("run",60204),plug:wt("plug",60205),preserveCase:wt("preserve-case",60206),preview:wt("preview",60207),project:wt("project",60208),pulse:wt("pulse",60209),question:wt("question",60210),quote:wt("quote",60211),radioTower:wt("radio-tower",60212),reactions:wt("reactions",60213),references:wt("references",60214),refresh:wt("refresh",60215),regex:wt("regex",60216),remoteExplorer:wt("remote-explorer",60217),remote:wt("remote",60218),remove:wt("remove",60219),replaceAll:wt("replace-all",60220),replace:wt("replace",60221),repoClone:wt("repo-clone",60222),repoForcePush:wt("repo-force-push",60223),repoPull:wt("repo-pull",60224),repoPush:wt("repo-push",60225),report:wt("report",60226),requestChanges:wt("request-changes",60227),rocket:wt("rocket",60228),rootFolderOpened:wt("root-folder-opened",60229),rootFolder:wt("root-folder",60230),rss:wt("rss",60231),ruby:wt("ruby",60232),saveAll:wt("save-all",60233),saveAs:wt("save-as",60234),save:wt("save",60235),screenFull:wt("screen-full",60236),screenNormal:wt("screen-normal",60237),searchStop:wt("search-stop",60238),server:wt("server",60240),settingsGear:wt("settings-gear",60241),settings:wt("settings",60242),shield:wt("shield",60243),smiley:wt("smiley",60244),sortPrecedence:wt("sort-precedence",60245),splitHorizontal:wt("split-horizontal",60246),splitVertical:wt("split-vertical",60247),squirrel:wt("squirrel",60248),starFull:wt("star-full",60249),starHalf:wt("star-half",60250),symbolClass:wt("symbol-class",60251),symbolColor:wt("symbol-color",60252),symbolCustomColor:wt("symbol-customcolor",60252),symbolConstant:wt("symbol-constant",60253),symbolEnumMember:wt("symbol-enum-member",60254),symbolField:wt("symbol-field",60255),symbolFile:wt("symbol-file",60256),symbolInterface:wt("symbol-interface",60257),symbolKeyword:wt("symbol-keyword",60258),symbolMisc:wt("symbol-misc",60259),symbolOperator:wt("symbol-operator",60260),symbolProperty:wt("symbol-property",60261),wrench:wt("wrench",60261),wrenchSubaction:wt("wrench-subaction",60261),symbolSnippet:wt("symbol-snippet",60262),tasklist:wt("tasklist",60263),telescope:wt("telescope",60264),textSize:wt("text-size",60265),threeBars:wt("three-bars",60266),thumbsdown:wt("thumbsdown",60267),thumbsup:wt("thumbsup",60268),tools:wt("tools",60269),triangleDown:wt("triangle-down",60270),triangleLeft:wt("triangle-left",60271),triangleRight:wt("triangle-right",60272),triangleUp:wt("triangle-up",60273),twitter:wt("twitter",60274),unfold:wt("unfold",60275),unlock:wt("unlock",60276),unmute:wt("unmute",60277),unverified:wt("unverified",60278),verified:wt("verified",60279),versions:wt("versions",60280),vmActive:wt("vm-active",60281),vmOutline:wt("vm-outline",60282),vmRunning:wt("vm-running",60283),watch:wt("watch",60284),whitespace:wt("whitespace",60285),wholeWord:wt("whole-word",60286),window:wt("window",60287),wordWrap:wt("word-wrap",60288),zoomIn:wt("zoom-in",60289),zoomOut:wt("zoom-out",60290),listFilter:wt("list-filter",60291),listFlat:wt("list-flat",60292),listSelection:wt("list-selection",60293),selection:wt("selection",60293),listTree:wt("list-tree",60294),debugBreakpointFunctionUnverified:wt("debug-breakpoint-function-unverified",60295),debugBreakpointFunction:wt("debug-breakpoint-function",60296),debugBreakpointFunctionDisabled:wt("debug-breakpoint-function-disabled",60296),debugStackframeActive:wt("debug-stackframe-active",60297),circleSmallFilled:wt("circle-small-filled",60298),debugStackframeDot:wt("debug-stackframe-dot",60298),debugStackframe:wt("debug-stackframe",60299),debugStackframeFocused:wt("debug-stackframe-focused",60299),debugBreakpointUnsupported:wt("debug-breakpoint-unsupported",60300),symbolString:wt("symbol-string",60301),debugReverseContinue:wt("debug-reverse-continue",60302),debugStepBack:wt("debug-step-back",60303),debugRestartFrame:wt("debug-restart-frame",60304),callIncoming:wt("call-incoming",60306),callOutgoing:wt("call-outgoing",60307),menu:wt("menu",60308),expandAll:wt("expand-all",60309),feedback:wt("feedback",60310),gitPullRequestReviewer:wt("git-pull-request-reviewer",60310),groupByRefType:wt("group-by-ref-type",60311),ungroupByRefType:wt("ungroup-by-ref-type",60312),account:wt("account",60313),gitPullRequestAssignee:wt("git-pull-request-assignee",60313),bellDot:wt("bell-dot",60314),debugConsole:wt("debug-console",60315),library:wt("library",60316),output:wt("output",60317),runAll:wt("run-all",60318),syncIgnored:wt("sync-ignored",60319),pinned:wt("pinned",60320),githubInverted:wt("github-inverted",60321),debugAlt:wt("debug-alt",60305),serverProcess:wt("server-process",60322),serverEnvironment:wt("server-environment",60323),pass:wt("pass",60324),stopCircle:wt("stop-circle",60325),playCircle:wt("play-circle",60326),record:wt("record",60327),debugAltSmall:wt("debug-alt-small",60328),vmConnect:wt("vm-connect",60329),cloud:wt("cloud",60330),merge:wt("merge",60331),exportIcon:wt("export",60332),graphLeft:wt("graph-left",60333),magnet:wt("magnet",60334),notebook:wt("notebook",60335),redo:wt("redo",60336),checkAll:wt("check-all",60337),pinnedDirty:wt("pinned-dirty",60338),passFilled:wt("pass-filled",60339),circleLargeFilled:wt("circle-large-filled",60340),circleLarge:wt("circle-large",60341),circleLargeOutline:wt("circle-large-outline",60341),combine:wt("combine",60342),gather:wt("gather",60342),table:wt("table",60343),variableGroup:wt("variable-group",60344),typeHierarchy:wt("type-hierarchy",60345),typeHierarchySub:wt("type-hierarchy-sub",60346),typeHierarchySuper:wt("type-hierarchy-super",60347),gitPullRequestCreate:wt("git-pull-request-create",60348),runAbove:wt("run-above",60349),runBelow:wt("run-below",60350),notebookTemplate:wt("notebook-template",60351),debugRerun:wt("debug-rerun",60352),workspaceTrusted:wt("workspace-trusted",60353),workspaceUntrusted:wt("workspace-untrusted",60354),workspaceUnspecified:wt("workspace-unspecified",60355),terminalCmd:wt("terminal-cmd",60356),terminalDebian:wt("terminal-debian",60357),terminalLinux:wt("terminal-linux",60358),terminalPowershell:wt("terminal-powershell",60359),terminalTmux:wt("terminal-tmux",60360),terminalUbuntu:wt("terminal-ubuntu",60361),terminalBash:wt("terminal-bash",60362),arrowSwap:wt("arrow-swap",60363),copy:wt("copy",60364),personAdd:wt("person-add",60365),filterFilled:wt("filter-filled",60366),wand:wt("wand",60367),debugLineByLine:wt("debug-line-by-line",60368),inspect:wt("inspect",60369),layers:wt("layers",60370),layersDot:wt("layers-dot",60371),layersActive:wt("layers-active",60372),compass:wt("compass",60373),compassDot:wt("compass-dot",60374),compassActive:wt("compass-active",60375),azure:wt("azure",60376),issueDraft:wt("issue-draft",60377),gitPullRequestClosed:wt("git-pull-request-closed",60378),gitPullRequestDraft:wt("git-pull-request-draft",60379),debugAll:wt("debug-all",60380),debugCoverage:wt("debug-coverage",60381),runErrors:wt("run-errors",60382),folderLibrary:wt("folder-library",60383),debugContinueSmall:wt("debug-continue-small",60384),beakerStop:wt("beaker-stop",60385),graphLine:wt("graph-line",60386),graphScatter:wt("graph-scatter",60387),pieChart:wt("pie-chart",60388),bracketDot:wt("bracket-dot",60389),bracketError:wt("bracket-error",60390),lockSmall:wt("lock-small",60391),azureDevops:wt("azure-devops",60392),verifiedFilled:wt("verified-filled",60393),newLine:wt("newline",60394),layout:wt("layout",60395),layoutActivitybarLeft:wt("layout-activitybar-left",60396),layoutActivitybarRight:wt("layout-activitybar-right",60397),layoutPanelLeft:wt("layout-panel-left",60398),layoutPanelCenter:wt("layout-panel-center",60399),layoutPanelJustify:wt("layout-panel-justify",60400),layoutPanelRight:wt("layout-panel-right",60401),layoutPanel:wt("layout-panel",60402),layoutSidebarLeft:wt("layout-sidebar-left",60403),layoutSidebarRight:wt("layout-sidebar-right",60404),layoutStatusbar:wt("layout-statusbar",60405),layoutMenubar:wt("layout-menubar",60406),layoutCentered:wt("layout-centered",60407),layoutSidebarRightOff:wt("layout-sidebar-right-off",60416),layoutPanelOff:wt("layout-panel-off",60417),layoutSidebarLeftOff:wt("layout-sidebar-left-off",60418),target:wt("target",60408),indent:wt("indent",60409),recordSmall:wt("record-small",60410),errorSmall:wt("error-small",60411),arrowCircleDown:wt("arrow-circle-down",60412),arrowCircleLeft:wt("arrow-circle-left",60413),arrowCircleRight:wt("arrow-circle-right",60414),arrowCircleUp:wt("arrow-circle-up",60415),heartFilled:wt("heart-filled",60420),map:wt("map",60421),mapFilled:wt("map-filled",60422),circleSmall:wt("circle-small",60423),bellSlash:wt("bell-slash",60424),bellSlashDot:wt("bell-slash-dot",60425),commentUnresolved:wt("comment-unresolved",60426),gitPullRequestGoToChanges:wt("git-pull-request-go-to-changes",60427),gitPullRequestNewChanges:wt("git-pull-request-new-changes",60428),searchFuzzy:wt("search-fuzzy",60429),commentDraft:wt("comment-draft",60430),send:wt("send",60431),sparkle:wt("sparkle",60432),insert:wt("insert",60433),mic:wt("mic",60434),dialogError:wt("dialog-error","error"),dialogWarning:wt("dialog-warning","warning"),dialogInfo:wt("dialog-info","info"),dialogClose:wt("dialog-close","close"),treeItemExpanded:wt("tree-item-expanded","chevron-down"),treeFilterOnTypeOn:wt("tree-filter-on-type-on","list-filter"),treeFilterOnTypeOff:wt("tree-filter-on-type-off","list-selection"),treeFilterClear:wt("tree-filter-clear","close"),treeItemLoading:wt("tree-item-loading","loading"),menuSelection:wt("menu-selection","check"),menuSubmenu:wt("menu-submenu","chevron-right"),menuBarMore:wt("menubar-more","more"),scrollbarButtonLeft:wt("scrollbar-button-left","triangle-left"),scrollbarButtonRight:wt("scrollbar-button-right","triangle-right"),scrollbarButtonUp:wt("scrollbar-button-up","triangle-up"),scrollbarButtonDown:wt("scrollbar-button-down","triangle-down"),toolBarMore:wt("toolbar-more","more"),quickInputBack:wt("quick-input-back","arrow-left")};var qt=function(e,t,n,i){return new(n||(n=Promise))((function(o,a){function r(e){try{l(i.next(e))}catch(e){a(e)}}function s(e){try{l(i.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,s)}l((i=i.apply(e,t||[])).next())}))};class Ht extends S{get isResolved(){return this._isResolved}constructor(e,t,n){super(),this._registry=e,this._languageId=t,this._factory=n,this._isDisposed=!1,this._resolvePromise=null,this._isResolved=!1}dispose(){this._isDisposed=!0,super.dispose()}resolve(){return qt(this,void 0,void 0,(function*(){return this._resolvePromise||(this._resolvePromise=this._create()),this._resolvePromise}))}_create(){return qt(this,void 0,void 0,(function*(){const e=yield this._factory.tokenizationSupport;this._isResolved=!0,e&&!this._isDisposed&&this._register(this._registry.register(this._languageId,e))}))}}var Vt,jt,Yt,Gt,Kt=n(2);class Wt{constructor(e,t,n){this.offset=e,this.type=t,this.language=n,this._tokenBrand=void 0}toString(){return"("+this.offset+", "+this.type+")"}}!function(e){const t=new Map;t.set(0,Ut.symbolMethod),t.set(1,Ut.symbolFunction),t.set(2,Ut.symbolConstructor),t.set(3,Ut.symbolField),t.set(4,Ut.symbolVariable),t.set(5,Ut.symbolClass),t.set(6,Ut.symbolStruct),t.set(7,Ut.symbolInterface),t.set(8,Ut.symbolModule),t.set(9,Ut.symbolProperty),t.set(10,Ut.symbolEvent),t.set(11,Ut.symbolOperator),t.set(12,Ut.symbolUnit),t.set(13,Ut.symbolValue),t.set(15,Ut.symbolEnum),t.set(14,Ut.symbolConstant),t.set(15,Ut.symbolEnum),t.set(16,Ut.symbolEnumMember),t.set(17,Ut.symbolKeyword),t.set(27,Ut.symbolSnippet),t.set(18,Ut.symbolText),t.set(19,Ut.symbolColor),t.set(20,Ut.symbolFile),t.set(21,Ut.symbolReference),t.set(22,Ut.symbolCustomColor),t.set(23,Ut.symbolFolder),t.set(24,Ut.symbolTypeParameter),t.set(25,Ut.account),t.set(26,Ut.issues),e.toIcon=function(e){let n=t.get(e);return n||(console.info("No codicon found for CompletionItemKind "+e),n=Ut.symbolProperty),n};const n=new Map;n.set("method",0),n.set("function",1),n.set("constructor",2),n.set("field",3),n.set("variable",4),n.set("class",5),n.set("struct",6),n.set("interface",7),n.set("module",8),n.set("property",9),n.set("event",10),n.set("operator",11),n.set("unit",12),n.set("value",13),n.set("constant",14),n.set("enum",15),n.set("enum-member",16),n.set("enumMember",16),n.set("keyword",17),n.set("snippet",27),n.set("text",18),n.set("color",19),n.set("file",20),n.set("reference",21),n.set("customcolor",22),n.set("folder",23),n.set("type-parameter",24),n.set("typeParameter",24),n.set("account",25),n.set("issue",26),e.fromString=function(e,t){let i=n.get(e);return void 0!==i||t||(i=9),i}}(Vt||(Vt={})),function(e){e[e.Automatic=0]="Automatic",e[e.Explicit=1]="Explicit"}(jt||(jt={}));!function(e){e[e.Invoke=1]="Invoke",e[e.TriggerCharacter=2]="TriggerCharacter",e[e.ContentChange=3]="ContentChange"}(Yt||(Yt={})),function(e){e[e.Text=0]="Text",e[e.Read=1]="Read",e[e.Write=2]="Write"}(Gt||(Gt={}));Object(Kt.b)("Array","array"),Object(Kt.b)("Boolean","boolean"),Object(Kt.b)("Class","class"),Object(Kt.b)("Constant","constant"),Object(Kt.b)("Constructor","constructor"),Object(Kt.b)("Enum","enumeration"),Object(Kt.b)("EnumMember","enumeration member"),Object(Kt.b)("Event","event"),Object(Kt.b)("Field","field"),Object(Kt.b)("File","file"),Object(Kt.b)("Function","function"),Object(Kt.b)("Interface","interface"),Object(Kt.b)("Key","key"),Object(Kt.b)("Method","method"),Object(Kt.b)("Module","module"),Object(Kt.b)("Namespace","namespace"),Object(Kt.b)("Null","null"),Object(Kt.b)("Number","number"),Object(Kt.b)("Object","object"),Object(Kt.b)("Operator","operator"),Object(Kt.b)("Package","package"),Object(Kt.b)("Property","property"),Object(Kt.b)("String","string"),Object(Kt.b)("Struct","struct"),Object(Kt.b)("TypeParameter","type parameter"),Object(Kt.b)("Variable","variable");var zt,Zt,Xt;!function(e){const t=new Map;t.set(0,Ut.symbolFile),t.set(1,Ut.symbolModule),t.set(2,Ut.symbolNamespace),t.set(3,Ut.symbolPackage),t.set(4,Ut.symbolClass),t.set(5,Ut.symbolMethod),t.set(6,Ut.symbolProperty),t.set(7,Ut.symbolField),t.set(8,Ut.symbolConstructor),t.set(9,Ut.symbolEnum),t.set(10,Ut.symbolInterface),t.set(11,Ut.symbolFunction),t.set(12,Ut.symbolVariable),t.set(13,Ut.symbolConstant),t.set(14,Ut.symbolString),t.set(15,Ut.symbolNumber),t.set(16,Ut.symbolBoolean),t.set(17,Ut.symbolArray),t.set(18,Ut.symbolObject),t.set(19,Ut.symbolKey),t.set(20,Ut.symbolNull),t.set(21,Ut.symbolEnumMember),t.set(22,Ut.symbolStruct),t.set(23,Ut.symbolEvent),t.set(24,Ut.symbolOperator),t.set(25,Ut.symbolTypeParameter),e.toIcon=function(e){let n=t.get(e);return n||(console.info("No codicon found for SymbolKind "+e),n=Ut.symbolProperty),n}}(zt||(zt={}));class Jt{static fromValue(e){switch(e){case"comment":return Jt.Comment;case"imports":return Jt.Imports;case"region":return Jt.Region}return new Jt(e)}constructor(e){this.value=e}}Jt.Comment=new Jt("comment"),Jt.Imports=new Jt("imports"),Jt.Region=new Jt("region"),function(e){e.is=function(e){return!(!e||"object"!=typeof e)&&("string"==typeof e.id&&"string"==typeof e.title)}}(Zt||(Zt={})),function(e){e[e.Type=1]="Type",e[e.Parameter=2]="Parameter"}(Xt||(Xt={}));new class{constructor(){this._tokenizationSupports=new Map,this._factories=new Map,this._onDidChange=new R,this.onDidChange=this._onDidChange.event,this._colorMap=null}handleChange(e){this._onDidChange.fire({changedLanguages:e,changedColorMap:!1})}register(e,t){return this._tokenizationSupports.set(e,t),this.handleChange([e]),k((()=>{this._tokenizationSupports.get(e)===t&&(this._tokenizationSupports.delete(e),this.handleChange([e]))}))}get(e){return this._tokenizationSupports.get(e)||null}registerFactory(e,t){var n;null===(n=this._factories.get(e))||void 0===n||n.dispose();const i=new Ht(this,e,t);return this._factories.set(e,i),k((()=>{const t=this._factories.get(e);t&&t===i&&(this._factories.delete(e),t.dispose())}))}getOrCreate(e){return qt(this,void 0,void 0,(function*(){const t=this.get(e);if(t)return t;const n=this._factories.get(e);return!n||n.isResolved?null:(yield n.resolve(),this.get(e))}))}isResolved(e){if(this.get(e))return!0;const t=this._factories.get(e);return!(t&&!t.isResolved)}setColorMap(e){this._colorMap=e,this._onDidChange.fire({changedLanguages:Array.from(this._tokenizationSupports.keys()),changedColorMap:!0})}getColorMap(){return this._colorMap}getDefaultBackground(){return this._colorMap&&this._colorMap.length>2?this._colorMap[2]:null}};var $t,Qt,en,tn,nn,on,an,rn,sn,ln,dn,cn,un,mn,hn,bn,Tn,gn,pn,xn,kn,fn,Sn,Cn,En,An,yn,In,Ln,On,_n,Nn,Rn,Dn,Mn,vn,Fn,Pn,Bn;!function(e){e[e.Unknown=0]="Unknown",e[e.Disabled=1]="Disabled",e[e.Enabled=2]="Enabled"}($t||($t={})),function(e){e[e.Invoke=1]="Invoke",e[e.Auto=2]="Auto"}(Qt||(Qt={})),function(e){e[e.None=0]="None",e[e.KeepWhitespace=1]="KeepWhitespace",e[e.InsertAsSnippet=4]="InsertAsSnippet"}(en||(en={})),function(e){e[e.Method=0]="Method",e[e.Function=1]="Function",e[e.Constructor=2]="Constructor",e[e.Field=3]="Field",e[e.Variable=4]="Variable",e[e.Class=5]="Class",e[e.Struct=6]="Struct",e[e.Interface=7]="Interface",e[e.Module=8]="Module",e[e.Property=9]="Property",e[e.Event=10]="Event",e[e.Operator=11]="Operator",e[e.Unit=12]="Unit",e[e.Value=13]="Value",e[e.Constant=14]="Constant",e[e.Enum=15]="Enum",e[e.EnumMember=16]="EnumMember",e[e.Keyword=17]="Keyword",e[e.Text=18]="Text",e[e.Color=19]="Color",e[e.File=20]="File",e[e.Reference=21]="Reference",e[e.Customcolor=22]="Customcolor",e[e.Folder=23]="Folder",e[e.TypeParameter=24]="TypeParameter",e[e.User=25]="User",e[e.Issue=26]="Issue",e[e.Snippet=27]="Snippet"}(tn||(tn={})),function(e){e[e.Deprecated=1]="Deprecated"}(nn||(nn={})),function(e){e[e.Invoke=0]="Invoke",e[e.TriggerCharacter=1]="TriggerCharacter",e[e.TriggerForIncompleteCompletions=2]="TriggerForIncompleteCompletions"}(on||(on={})),function(e){e[e.EXACT=0]="EXACT",e[e.ABOVE=1]="ABOVE",e[e.BELOW=2]="BELOW"}(an||(an={})),function(e){e[e.NotSet=0]="NotSet",e[e.ContentFlush=1]="ContentFlush",e[e.RecoverFromMarkers=2]="RecoverFromMarkers",e[e.Explicit=3]="Explicit",e[e.Paste=4]="Paste",e[e.Undo=5]="Undo",e[e.Redo=6]="Redo"}(rn||(rn={})),function(e){e[e.LF=1]="LF",e[e.CRLF=2]="CRLF"}(sn||(sn={})),function(e){e[e.Text=0]="Text",e[e.Read=1]="Read",e[e.Write=2]="Write"}(ln||(ln={})),function(e){e[e.None=0]="None",e[e.Keep=1]="Keep",e[e.Brackets=2]="Brackets",e[e.Advanced=3]="Advanced",e[e.Full=4]="Full"}(dn||(dn={})),function(e){e[e.acceptSuggestionOnCommitCharacter=0]="acceptSuggestionOnCommitCharacter",e[e.acceptSuggestionOnEnter=1]="acceptSuggestionOnEnter",e[e.accessibilitySupport=2]="accessibilitySupport",e[e.accessibilityPageSize=3]="accessibilityPageSize",e[e.ariaLabel=4]="ariaLabel",e[e.ariaRequired=5]="ariaRequired",e[e.autoClosingBrackets=6]="autoClosingBrackets",e[e.autoClosingComments=7]="autoClosingComments",e[e.screenReaderAnnounceInlineSuggestion=8]="screenReaderAnnounceInlineSuggestion",e[e.autoClosingDelete=9]="autoClosingDelete",e[e.autoClosingOvertype=10]="autoClosingOvertype",e[e.autoClosingQuotes=11]="autoClosingQuotes",e[e.autoIndent=12]="autoIndent",e[e.automaticLayout=13]="automaticLayout",e[e.autoSurround=14]="autoSurround",e[e.bracketPairColorization=15]="bracketPairColorization",e[e.guides=16]="guides",e[e.codeLens=17]="codeLens",e[e.codeLensFontFamily=18]="codeLensFontFamily",e[e.codeLensFontSize=19]="codeLensFontSize",e[e.colorDecorators=20]="colorDecorators",e[e.colorDecoratorsLimit=21]="colorDecoratorsLimit",e[e.columnSelection=22]="columnSelection",e[e.comments=23]="comments",e[e.contextmenu=24]="contextmenu",e[e.copyWithSyntaxHighlighting=25]="copyWithSyntaxHighlighting",e[e.cursorBlinking=26]="cursorBlinking",e[e.cursorSmoothCaretAnimation=27]="cursorSmoothCaretAnimation",e[e.cursorStyle=28]="cursorStyle",e[e.cursorSurroundingLines=29]="cursorSurroundingLines",e[e.cursorSurroundingLinesStyle=30]="cursorSurroundingLinesStyle",e[e.cursorWidth=31]="cursorWidth",e[e.disableLayerHinting=32]="disableLayerHinting",e[e.disableMonospaceOptimizations=33]="disableMonospaceOptimizations",e[e.domReadOnly=34]="domReadOnly",e[e.dragAndDrop=35]="dragAndDrop",e[e.dropIntoEditor=36]="dropIntoEditor",e[e.emptySelectionClipboard=37]="emptySelectionClipboard",e[e.experimentalWhitespaceRendering=38]="experimentalWhitespaceRendering",e[e.extraEditorClassName=39]="extraEditorClassName",e[e.fastScrollSensitivity=40]="fastScrollSensitivity",e[e.find=41]="find",e[e.fixedOverflowWidgets=42]="fixedOverflowWidgets",e[e.folding=43]="folding",e[e.foldingStrategy=44]="foldingStrategy",e[e.foldingHighlight=45]="foldingHighlight",e[e.foldingImportsByDefault=46]="foldingImportsByDefault",e[e.foldingMaximumRegions=47]="foldingMaximumRegions",e[e.unfoldOnClickAfterEndOfLine=48]="unfoldOnClickAfterEndOfLine",e[e.fontFamily=49]="fontFamily",e[e.fontInfo=50]="fontInfo",e[e.fontLigatures=51]="fontLigatures",e[e.fontSize=52]="fontSize",e[e.fontWeight=53]="fontWeight",e[e.fontVariations=54]="fontVariations",e[e.formatOnPaste=55]="formatOnPaste",e[e.formatOnType=56]="formatOnType",e[e.glyphMargin=57]="glyphMargin",e[e.gotoLocation=58]="gotoLocation",e[e.hideCursorInOverviewRuler=59]="hideCursorInOverviewRuler",e[e.hover=60]="hover",e[e.inDiffEditor=61]="inDiffEditor",e[e.inlineSuggest=62]="inlineSuggest",e[e.letterSpacing=63]="letterSpacing",e[e.lightbulb=64]="lightbulb",e[e.lineDecorationsWidth=65]="lineDecorationsWidth",e[e.lineHeight=66]="lineHeight",e[e.lineNumbers=67]="lineNumbers",e[e.lineNumbersMinChars=68]="lineNumbersMinChars",e[e.linkedEditing=69]="linkedEditing",e[e.links=70]="links",e[e.matchBrackets=71]="matchBrackets",e[e.minimap=72]="minimap",e[e.mouseStyle=73]="mouseStyle",e[e.mouseWheelScrollSensitivity=74]="mouseWheelScrollSensitivity",e[e.mouseWheelZoom=75]="mouseWheelZoom",e[e.multiCursorMergeOverlapping=76]="multiCursorMergeOverlapping",e[e.multiCursorModifier=77]="multiCursorModifier",e[e.multiCursorPaste=78]="multiCursorPaste",e[e.multiCursorLimit=79]="multiCursorLimit",e[e.occurrencesHighlight=80]="occurrencesHighlight",e[e.overviewRulerBorder=81]="overviewRulerBorder",e[e.overviewRulerLanes=82]="overviewRulerLanes",e[e.padding=83]="padding",e[e.pasteAs=84]="pasteAs",e[e.parameterHints=85]="parameterHints",e[e.peekWidgetDefaultFocus=86]="peekWidgetDefaultFocus",e[e.definitionLinkOpensInPeek=87]="definitionLinkOpensInPeek",e[e.quickSuggestions=88]="quickSuggestions",e[e.quickSuggestionsDelay=89]="quickSuggestionsDelay",e[e.readOnly=90]="readOnly",e[e.readOnlyMessage=91]="readOnlyMessage",e[e.renameOnType=92]="renameOnType",e[e.renderControlCharacters=93]="renderControlCharacters",e[e.renderFinalNewline=94]="renderFinalNewline",e[e.renderLineHighlight=95]="renderLineHighlight",e[e.renderLineHighlightOnlyWhenFocus=96]="renderLineHighlightOnlyWhenFocus",e[e.renderValidationDecorations=97]="renderValidationDecorations",e[e.renderWhitespace=98]="renderWhitespace",e[e.revealHorizontalRightPadding=99]="revealHorizontalRightPadding",e[e.roundedSelection=100]="roundedSelection",e[e.rulers=101]="rulers",e[e.scrollbar=102]="scrollbar",e[e.scrollBeyondLastColumn=103]="scrollBeyondLastColumn",e[e.scrollBeyondLastLine=104]="scrollBeyondLastLine",e[e.scrollPredominantAxis=105]="scrollPredominantAxis",e[e.selectionClipboard=106]="selectionClipboard",e[e.selectionHighlight=107]="selectionHighlight",e[e.selectOnLineNumbers=108]="selectOnLineNumbers",e[e.showFoldingControls=109]="showFoldingControls",e[e.showUnused=110]="showUnused",e[e.snippetSuggestions=111]="snippetSuggestions",e[e.smartSelect=112]="smartSelect",e[e.smoothScrolling=113]="smoothScrolling",e[e.stickyScroll=114]="stickyScroll",e[e.stickyTabStops=115]="stickyTabStops",e[e.stopRenderingLineAfter=116]="stopRenderingLineAfter",e[e.suggest=117]="suggest",e[e.suggestFontSize=118]="suggestFontSize",e[e.suggestLineHeight=119]="suggestLineHeight",e[e.suggestOnTriggerCharacters=120]="suggestOnTriggerCharacters",e[e.suggestSelection=121]="suggestSelection",e[e.tabCompletion=122]="tabCompletion",e[e.tabIndex=123]="tabIndex",e[e.unicodeHighlighting=124]="unicodeHighlighting",e[e.unusualLineTerminators=125]="unusualLineTerminators",e[e.useShadowDOM=126]="useShadowDOM",e[e.useTabStops=127]="useTabStops",e[e.wordBreak=128]="wordBreak",e[e.wordSeparators=129]="wordSeparators",e[e.wordWrap=130]="wordWrap",e[e.wordWrapBreakAfterCharacters=131]="wordWrapBreakAfterCharacters",e[e.wordWrapBreakBeforeCharacters=132]="wordWrapBreakBeforeCharacters",e[e.wordWrapColumn=133]="wordWrapColumn",e[e.wordWrapOverride1=134]="wordWrapOverride1",e[e.wordWrapOverride2=135]="wordWrapOverride2",e[e.wrappingIndent=136]="wrappingIndent",e[e.wrappingStrategy=137]="wrappingStrategy",e[e.showDeprecated=138]="showDeprecated",e[e.inlayHints=139]="inlayHints",e[e.editorClassName=140]="editorClassName",e[e.pixelRatio=141]="pixelRatio",e[e.tabFocusMode=142]="tabFocusMode",e[e.layoutInfo=143]="layoutInfo",e[e.wrappingInfo=144]="wrappingInfo",e[e.defaultColorDecorators=145]="defaultColorDecorators",e[e.colorDecoratorsActivatedOn=146]="colorDecoratorsActivatedOn",e[e.inlineCompletionsAccessibilityVerbose=147]="inlineCompletionsAccessibilityVerbose"}(cn||(cn={})),function(e){e[e.TextDefined=0]="TextDefined",e[e.LF=1]="LF",e[e.CRLF=2]="CRLF"}(un||(un={})),function(e){e[e.LF=0]="LF",e[e.CRLF=1]="CRLF"}(mn||(mn={})),function(e){e[e.Left=1]="Left",e[e.Right=2]="Right"}(hn||(hn={})),function(e){e[e.None=0]="None",e[e.Indent=1]="Indent",e[e.IndentOutdent=2]="IndentOutdent",e[e.Outdent=3]="Outdent"}(bn||(bn={})),function(e){e[e.Both=0]="Both",e[e.Right=1]="Right",e[e.Left=2]="Left",e[e.None=3]="None"}(Tn||(Tn={})),function(e){e[e.Type=1]="Type",e[e.Parameter=2]="Parameter"}(gn||(gn={})),function(e){e[e.Automatic=0]="Automatic",e[e.Explicit=1]="Explicit"}(pn||(pn={})),function(e){e[e.DependsOnKbLayout=-1]="DependsOnKbLayout",e[e.Unknown=0]="Unknown",e[e.Backspace=1]="Backspace",e[e.Tab=2]="Tab",e[e.Enter=3]="Enter",e[e.Shift=4]="Shift",e[e.Ctrl=5]="Ctrl",e[e.Alt=6]="Alt",e[e.PauseBreak=7]="PauseBreak",e[e.CapsLock=8]="CapsLock",e[e.Escape=9]="Escape",e[e.Space=10]="Space",e[e.PageUp=11]="PageUp",e[e.PageDown=12]="PageDown",e[e.End=13]="End",e[e.Home=14]="Home",e[e.LeftArrow=15]="LeftArrow",e[e.UpArrow=16]="UpArrow",e[e.RightArrow=17]="RightArrow",e[e.DownArrow=18]="DownArrow",e[e.Insert=19]="Insert",e[e.Delete=20]="Delete",e[e.Digit0=21]="Digit0",e[e.Digit1=22]="Digit1",e[e.Digit2=23]="Digit2",e[e.Digit3=24]="Digit3",e[e.Digit4=25]="Digit4",e[e.Digit5=26]="Digit5",e[e.Digit6=27]="Digit6",e[e.Digit7=28]="Digit7",e[e.Digit8=29]="Digit8",e[e.Digit9=30]="Digit9",e[e.KeyA=31]="KeyA",e[e.KeyB=32]="KeyB",e[e.KeyC=33]="KeyC",e[e.KeyD=34]="KeyD",e[e.KeyE=35]="KeyE",e[e.KeyF=36]="KeyF",e[e.KeyG=37]="KeyG",e[e.KeyH=38]="KeyH",e[e.KeyI=39]="KeyI",e[e.KeyJ=40]="KeyJ",e[e.KeyK=41]="KeyK",e[e.KeyL=42]="KeyL",e[e.KeyM=43]="KeyM",e[e.KeyN=44]="KeyN",e[e.KeyO=45]="KeyO",e[e.KeyP=46]="KeyP",e[e.KeyQ=47]="KeyQ",e[e.KeyR=48]="KeyR",e[e.KeyS=49]="KeyS",e[e.KeyT=50]="KeyT",e[e.KeyU=51]="KeyU",e[e.KeyV=52]="KeyV",e[e.KeyW=53]="KeyW",e[e.KeyX=54]="KeyX",e[e.KeyY=55]="KeyY",e[e.KeyZ=56]="KeyZ",e[e.Meta=57]="Meta",e[e.ContextMenu=58]="ContextMenu",e[e.F1=59]="F1",e[e.F2=60]="F2",e[e.F3=61]="F3",e[e.F4=62]="F4",e[e.F5=63]="F5",e[e.F6=64]="F6",e[e.F7=65]="F7",e[e.F8=66]="F8",e[e.F9=67]="F9",e[e.F10=68]="F10",e[e.F11=69]="F11",e[e.F12=70]="F12",e[e.F13=71]="F13",e[e.F14=72]="F14",e[e.F15=73]="F15",e[e.F16=74]="F16",e[e.F17=75]="F17",e[e.F18=76]="F18",e[e.F19=77]="F19",e[e.F20=78]="F20",e[e.F21=79]="F21",e[e.F22=80]="F22",e[e.F23=81]="F23",e[e.F24=82]="F24",e[e.NumLock=83]="NumLock",e[e.ScrollLock=84]="ScrollLock",e[e.Semicolon=85]="Semicolon",e[e.Equal=86]="Equal",e[e.Comma=87]="Comma",e[e.Minus=88]="Minus",e[e.Period=89]="Period",e[e.Slash=90]="Slash",e[e.Backquote=91]="Backquote",e[e.BracketLeft=92]="BracketLeft",e[e.Backslash=93]="Backslash",e[e.BracketRight=94]="BracketRight",e[e.Quote=95]="Quote",e[e.OEM_8=96]="OEM_8",e[e.IntlBackslash=97]="IntlBackslash",e[e.Numpad0=98]="Numpad0",e[e.Numpad1=99]="Numpad1",e[e.Numpad2=100]="Numpad2",e[e.Numpad3=101]="Numpad3",e[e.Numpad4=102]="Numpad4",e[e.Numpad5=103]="Numpad5",e[e.Numpad6=104]="Numpad6",e[e.Numpad7=105]="Numpad7",e[e.Numpad8=106]="Numpad8",e[e.Numpad9=107]="Numpad9",e[e.NumpadMultiply=108]="NumpadMultiply",e[e.NumpadAdd=109]="NumpadAdd",e[e.NUMPAD_SEPARATOR=110]="NUMPAD_SEPARATOR",e[e.NumpadSubtract=111]="NumpadSubtract",e[e.NumpadDecimal=112]="NumpadDecimal",e[e.NumpadDivide=113]="NumpadDivide",e[e.KEY_IN_COMPOSITION=114]="KEY_IN_COMPOSITION",e[e.ABNT_C1=115]="ABNT_C1",e[e.ABNT_C2=116]="ABNT_C2",e[e.AudioVolumeMute=117]="AudioVolumeMute",e[e.AudioVolumeUp=118]="AudioVolumeUp",e[e.AudioVolumeDown=119]="AudioVolumeDown",e[e.BrowserSearch=120]="BrowserSearch",e[e.BrowserHome=121]="BrowserHome",e[e.BrowserBack=122]="BrowserBack",e[e.BrowserForward=123]="BrowserForward",e[e.MediaTrackNext=124]="MediaTrackNext",e[e.MediaTrackPrevious=125]="MediaTrackPrevious",e[e.MediaStop=126]="MediaStop",e[e.MediaPlayPause=127]="MediaPlayPause",e[e.LaunchMediaPlayer=128]="LaunchMediaPlayer",e[e.LaunchMail=129]="LaunchMail",e[e.LaunchApp2=130]="LaunchApp2",e[e.Clear=131]="Clear",e[e.MAX_VALUE=132]="MAX_VALUE"}(xn||(xn={})),function(e){e[e.Hint=1]="Hint",e[e.Info=2]="Info",e[e.Warning=4]="Warning",e[e.Error=8]="Error"}(kn||(kn={})),function(e){e[e.Unnecessary=1]="Unnecessary",e[e.Deprecated=2]="Deprecated"}(fn||(fn={})),function(e){e[e.Inline=1]="Inline",e[e.Gutter=2]="Gutter"}(Sn||(Sn={})),function(e){e[e.UNKNOWN=0]="UNKNOWN",e[e.TEXTAREA=1]="TEXTAREA",e[e.GUTTER_GLYPH_MARGIN=2]="GUTTER_GLYPH_MARGIN",e[e.GUTTER_LINE_NUMBERS=3]="GUTTER_LINE_NUMBERS",e[e.GUTTER_LINE_DECORATIONS=4]="GUTTER_LINE_DECORATIONS",e[e.GUTTER_VIEW_ZONE=5]="GUTTER_VIEW_ZONE",e[e.CONTENT_TEXT=6]="CONTENT_TEXT",e[e.CONTENT_EMPTY=7]="CONTENT_EMPTY",e[e.CONTENT_VIEW_ZONE=8]="CONTENT_VIEW_ZONE",e[e.CONTENT_WIDGET=9]="CONTENT_WIDGET",e[e.OVERVIEW_RULER=10]="OVERVIEW_RULER",e[e.SCROLLBAR=11]="SCROLLBAR",e[e.OVERLAY_WIDGET=12]="OVERLAY_WIDGET",e[e.OUTSIDE_EDITOR=13]="OUTSIDE_EDITOR"}(Cn||(Cn={})),function(e){e[e.TOP_RIGHT_CORNER=0]="TOP_RIGHT_CORNER",e[e.BOTTOM_RIGHT_CORNER=1]="BOTTOM_RIGHT_CORNER",e[e.TOP_CENTER=2]="TOP_CENTER"}(En||(En={})),function(e){e[e.Left=1]="Left",e[e.Center=2]="Center",e[e.Right=4]="Right",e[e.Full=7]="Full"}(An||(An={})),function(e){e[e.Left=0]="Left",e[e.Right=1]="Right",e[e.None=2]="None",e[e.LeftOfInjectedText=3]="LeftOfInjectedText",e[e.RightOfInjectedText=4]="RightOfInjectedText"}(yn||(yn={})),function(e){e[e.Off=0]="Off",e[e.On=1]="On",e[e.Relative=2]="Relative",e[e.Interval=3]="Interval",e[e.Custom=4]="Custom"}(In||(In={})),function(e){e[e.None=0]="None",e[e.Text=1]="Text",e[e.Blocks=2]="Blocks"}(Ln||(Ln={})),function(e){e[e.Smooth=0]="Smooth",e[e.Immediate=1]="Immediate"}(On||(On={})),function(e){e[e.Auto=1]="Auto",e[e.Hidden=2]="Hidden",e[e.Visible=3]="Visible"}(_n||(_n={})),function(e){e[e.LTR=0]="LTR",e[e.RTL=1]="RTL"}(Nn||(Nn={})),function(e){e[e.Invoke=1]="Invoke",e[e.TriggerCharacter=2]="TriggerCharacter",e[e.ContentChange=3]="ContentChange"}(Rn||(Rn={})),function(e){e[e.File=0]="File",e[e.Module=1]="Module",e[e.Namespace=2]="Namespace",e[e.Package=3]="Package",e[e.Class=4]="Class",e[e.Method=5]="Method",e[e.Property=6]="Property",e[e.Field=7]="Field",e[e.Constructor=8]="Constructor",e[e.Enum=9]="Enum",e[e.Interface=10]="Interface",e[e.Function=11]="Function",e[e.Variable=12]="Variable",e[e.Constant=13]="Constant",e[e.String=14]="String",e[e.Number=15]="Number",e[e.Boolean=16]="Boolean",e[e.Array=17]="Array",e[e.Object=18]="Object",e[e.Key=19]="Key",e[e.Null=20]="Null",e[e.EnumMember=21]="EnumMember",e[e.Struct=22]="Struct",e[e.Event=23]="Event",e[e.Operator=24]="Operator",e[e.TypeParameter=25]="TypeParameter"}(Dn||(Dn={})),function(e){e[e.Deprecated=1]="Deprecated"}(Mn||(Mn={})),function(e){e[e.Hidden=0]="Hidden",e[e.Blink=1]="Blink",e[e.Smooth=2]="Smooth",e[e.Phase=3]="Phase",e[e.Expand=4]="Expand",e[e.Solid=5]="Solid"}(vn||(vn={})),function(e){e[e.Line=1]="Line",e[e.Block=2]="Block",e[e.Underline=3]="Underline",e[e.LineThin=4]="LineThin",e[e.BlockOutline=5]="BlockOutline",e[e.UnderlineThin=6]="UnderlineThin"}(Fn||(Fn={})),function(e){e[e.AlwaysGrowsWhenTypingAtEdges=0]="AlwaysGrowsWhenTypingAtEdges",e[e.NeverGrowsWhenTypingAtEdges=1]="NeverGrowsWhenTypingAtEdges",e[e.GrowsOnlyWhenTypingBefore=2]="GrowsOnlyWhenTypingBefore",e[e.GrowsOnlyWhenTypingAfter=3]="GrowsOnlyWhenTypingAfter"}(Pn||(Pn={})),function(e){e[e.None=0]="None",e[e.Same=1]="Same",e[e.Indent=2]="Indent",e[e.DeepIndent=3]="DeepIndent"}(Bn||(Bn={}));class wn{static chord(e,t){return function(e,t){return(e|(65535&t)<<16>>>0)>>>0}(e,t)}}wn.CtrlCmd=2048,wn.Shift=1024,wn.Alt=512,wn.WinCtrl=256;class Un extends mt{constructor(e){super(0);for(let t=0,n=e.length;t<n;t++)this.set(e.charCodeAt(t),2);this.set(32,1),this.set(9,1)}}!function(e){const t={}}((e=>new Un(e)));var qn,Hn,Vn,jn;!function(e){e[e.Left=1]="Left",e[e.Center=2]="Center",e[e.Right=4]="Right",e[e.Full=7]="Full"}(qn||(qn={})),function(e){e[e.Left=1]="Left",e[e.Right=2]="Right"}(Hn||(Hn={})),function(e){e[e.Inline=1]="Inline",e[e.Gutter=2]="Gutter"}(Vn||(Vn={})),function(e){e[e.Both=0]="Both",e[e.Right=1]="Right",e[e.Left=2]="Left",e[e.None=3]="None"}(jn||(jn={}));function Yn(e,t,n,i,o){return function(e,t,n,i,o){if(0===i)return!0;const a=t.charCodeAt(i-1);if(0!==e.get(a))return!0;if(13===a||10===a)return!0;if(o>0){const n=t.charCodeAt(i);if(0!==e.get(n))return!0}return!1}(e,t,0,i,o)&&function(e,t,n,i,o){if(i+o===n)return!0;const a=t.charCodeAt(i+o);if(0!==e.get(a))return!0;if(13===a||10===a)return!0;if(o>0){const n=t.charCodeAt(i+o-1);if(0!==e.get(n))return!0}return!1}(e,t,n,i,o)}class Gn{constructor(e,t){this._wordSeparators=e,this._searchRegex=t,this._prevMatchStartIndex=-1,this._prevMatchLength=0}reset(e){this._searchRegex.lastIndex=e,this._prevMatchStartIndex=-1,this._prevMatchLength=0}next(e){const t=e.length;let n;do{if(this._prevMatchStartIndex+this._prevMatchLength===t)return null;if(n=this._searchRegex.exec(e),!n)return null;const i=n.index,o=n[0].length;if(i===this._prevMatchStartIndex&&o===this._prevMatchLength){if(0===o){j(e,t,this._searchRegex.lastIndex)>65535?this._searchRegex.lastIndex+=2:this._searchRegex.lastIndex+=1;continue}return null}if(this._prevMatchStartIndex=i,this._prevMatchLength=o,!this._wordSeparators||Yn(this._wordSeparators,e,t,i,o))return n}while(n);return null}}function Kn(e,t="Unreachable"){throw new Error(t)}function Wn(e){e()||(e(),o(new c("Assertion Failed")))}function zn(e,t){let n=0;for(;n<e.length-1;){if(!t(e[n],e[n+1]))return!1;n++}return!0}class Zn{static computeUnicodeHighlights(e,t,n){const i=n?n.startLineNumber:1,o=n?n.endLineNumber:e.getLineCount(),a=new Xn(t),r=a.getCandidateCodePoints();let s;s="allNonBasicAscii"===r?new RegExp("[^\\t\\n\\r\\x20-\\x7E]","g"):new RegExp(""+`[${w(Array.from(r).map((e=>String.fromCodePoint(e))).join(""))}]`,"g");const l=new Gn(null,s),d=[];let c,u=!1,m=0,h=0,b=0;e:for(let t=i,n=o;t<=n;t++){const n=e.getLineContent(t),i=n.length;l.reset(0);do{if(c=l.next(n),c){let e=c.index,o=c.index+c[0].length;if(e>0){q(n.charCodeAt(e-1))&&e--}if(o+1<i){q(n.charCodeAt(o-1))&&o++}const r=n.substring(e,o);let s=ct(e+1,lt,n,0);s&&s.endColumn<=e+1&&(s=null);const l=a.shouldHighlightNonBasicASCII(r,s?s.word:null);if(0!==l){3===l?m++:2===l?h++:1===l?b++:Kn();const n=1e3;if(d.length>=n){u=!0;break e}d.push(new $e(t,e+1,t,o+1))}}}while(c)}return{ranges:d,hasMore:u,ambiguousCharacterCount:m,invisibleCharacterCount:h,nonBasicAsciiCharacterCount:b}}static computeUnicodeHighlightReason(e,t){const n=new Xn(t);switch(n.shouldHighlightNonBasicASCII(e,null)){case 0:return null;case 2:return{kind:1};case 3:{const i=e.codePointAt(0),o=n.ambiguousCharacters.getPrimaryConfusable(i),a=K.getLocales().filter((e=>!K.getInstance(new Set([...t.allowedLocales,e])).isAmbiguous(i)));return{kind:0,confusableWith:String.fromCodePoint(o),notAmbiguousInLocales:a}}case 1:return{kind:2}}}}class Xn{constructor(e){this.options=e,this.allowedCodePoints=new Set(e.allowedCodePoints),this.ambiguousCharacters=K.getInstance(new Set(e.allowedLocales))}getCandidateCodePoints(){if(this.options.nonBasicASCII)return"allNonBasicAscii";const e=new Set;if(this.options.invisibleCharacters)for(const t of W.codePoints)Jn(String.fromCodePoint(t))||e.add(t);if(this.options.ambiguousCharacters)for(const t of this.ambiguousCharacters.getConfusableCodePoints())e.add(t);for(const t of this.allowedCodePoints)e.delete(t);return e}shouldHighlightNonBasicASCII(e,t){const n=e.codePointAt(0);if(this.allowedCodePoints.has(n))return 0;if(this.options.nonBasicASCII)return 1;let i=!1,o=!1;if(t)for(const e of t){const t=e.codePointAt(0),n=(a=e,Y.test(a));i=i||n,n||this.ambiguousCharacters.isAmbiguous(t)||W.isInvisibleCharacter(t)||(o=!0)}var a;return!i&&o?0:this.options.invisibleCharacters&&!Jn(e)&&W.isInvisibleCharacter(n)?2:this.options.ambiguousCharacters&&this.ambiguousCharacters.isAmbiguous(n)?3:0}}function Jn(e){return" "===e||"\n"===e||"\t"===e}class $n{constructor(e,t,n){this.changes=e,this.moves=t,this.hitTimeout=n}}class Qn{constructor(e,t){this.lineRangeMapping=e,this.changes=t}}class ei{static addRange(e,t){let n=0;for(;n<t.length&&t[n].endExclusive<e.start;)n++;let i=n;for(;i<t.length&&t[i].start<=e.endExclusive;)i++;if(n===i)t.splice(n,0,e);else{const o=Math.min(e.start,t[n].start),a=Math.max(e.endExclusive,t[i-1].endExclusive);t.splice(n,i-n,new ei(o,a))}}static tryCreate(e,t){if(!(e>t))return new ei(e,t)}static ofLength(e){return new ei(0,e)}constructor(e,t){if(this.start=e,this.endExclusive=t,e>t)throw new c(`Invalid range: ${this.toString()}`)}get isEmpty(){return this.start===this.endExclusive}delta(e){return new ei(this.start+e,this.endExclusive+e)}deltaStart(e){return new ei(this.start+e,this.endExclusive)}deltaEnd(e){return new ei(this.start,this.endExclusive+e)}get length(){return this.endExclusive-this.start}toString(){return`[${this.start}, ${this.endExclusive})`}equals(e){return this.start===e.start&&this.endExclusive===e.endExclusive}containsRange(e){return this.start<=e.start&&e.endExclusive<=this.endExclusive}contains(e){return this.start<=e&&e<this.endExclusive}join(e){return new ei(Math.min(this.start,e.start),Math.max(this.endExclusive,e.endExclusive))}intersect(e){const t=Math.max(this.start,e.start),n=Math.min(this.endExclusive,e.endExclusive);if(t<=n)return new ei(t,n)}slice(e){return e.slice(this.start,this.endExclusive)}clip(e){if(this.isEmpty)throw new c(`Invalid clipping range: ${this.toString()}`);return Math.max(this.start,Math.min(this.endExclusive-1,e))}clipCyclic(e){if(this.isEmpty)throw new c(`Invalid clipping range: ${this.toString()}`);return e<this.start?this.endExclusive-(this.start-e)%this.length:e>=this.endExclusive?this.start+(e-this.start)%this.length:e}forEach(e){for(let t=this.start;t<this.endExclusive;t++)e(t)}}function ti(e,t){const n=ni(e,t);return-1===n?void 0:e[n]}function ni(e,t,n=0,i=e.length){let o=n,a=i;for(;o<a;){const n=Math.floor((o+a)/2);t(e[n])?o=n+1:a=n}return o-1}function ii(e,t,n=0,i=e.length){let o=n,a=i;for(;o<a;){const n=Math.floor((o+a)/2);t(e[n])?a=n:o=n+1}return o}class oi{constructor(e){this._array=e,this._findLastMonotonousLastIdx=0}findLastMonotonous(e){if(oi.assertInvariants){if(this._prevFindLastPredicate)for(const t of this._array)if(this._prevFindLastPredicate(t)&&!e(t))throw new Error("MonotonousArray: current predicate must be weaker than (or equal to) the previous predicate.");this._prevFindLastPredicate=e}const t=ni(this._array,e,this._findLastMonotonousLastIdx);return this._findLastMonotonousLastIdx=t+1,-1===t?void 0:this._array[t]}}oi.assertInvariants=!1;class ai{static fromRange(e){return new ai(e.startLineNumber,e.endLineNumber)}static joinMany(e){if(0===e.length)return[];let t=new ri(e[0].slice());for(let n=1;n<e.length;n++)t=t.getUnion(new ri(e[n].slice()));return t.ranges}static ofLength(e,t){return new ai(e,e+t)}static deserialize(e){return new ai(e[0],e[1])}constructor(e,t){if(e>t)throw new c(`startLineNumber ${e} cannot be after endLineNumberExclusive ${t}`);this.startLineNumber=e,this.endLineNumberExclusive=t}contains(e){return this.startLineNumber<=e&&e<this.endLineNumberExclusive}get isEmpty(){return this.startLineNumber===this.endLineNumberExclusive}delta(e){return new ai(this.startLineNumber+e,this.endLineNumberExclusive+e)}deltaLength(e){return new ai(this.startLineNumber,this.endLineNumberExclusive+e)}get length(){return this.endLineNumberExclusive-this.startLineNumber}join(e){return new ai(Math.min(this.startLineNumber,e.startLineNumber),Math.max(this.endLineNumberExclusive,e.endLineNumberExclusive))}toString(){return`[${this.startLineNumber},${this.endLineNumberExclusive})`}intersect(e){const t=Math.max(this.startLineNumber,e.startLineNumber),n=Math.min(this.endLineNumberExclusive,e.endLineNumberExclusive);if(t<=n)return new ai(t,n)}intersectsStrict(e){return this.startLineNumber<e.endLineNumberExclusive&&e.startLineNumber<this.endLineNumberExclusive}overlapOrTouch(e){return this.startLineNumber<=e.endLineNumberExclusive&&e.startLineNumber<=this.endLineNumberExclusive}equals(e){return this.startLineNumber===e.startLineNumber&&this.endLineNumberExclusive===e.endLineNumberExclusive}toInclusiveRange(){return this.isEmpty?null:new $e(this.startLineNumber,1,this.endLineNumberExclusive-1,Number.MAX_SAFE_INTEGER)}toExclusiveRange(){return new $e(this.startLineNumber,1,this.endLineNumberExclusive,1)}mapToLineArray(e){const t=[];for(let n=this.startLineNumber;n<this.endLineNumberExclusive;n++)t.push(e(n));return t}forEach(e){for(let t=this.startLineNumber;t<this.endLineNumberExclusive;t++)e(t)}serialize(){return[this.startLineNumber,this.endLineNumberExclusive]}includes(e){return this.startLineNumber<=e&&e<this.endLineNumberExclusive}toOffsetRange(){return new ei(this.startLineNumber-1,this.endLineNumberExclusive-1)}}class ri{constructor(e=[]){this._normalizedRanges=e}get ranges(){return this._normalizedRanges}addRange(e){if(0===e.length)return;const t=ii(this._normalizedRanges,(t=>t.endLineNumberExclusive>=e.startLineNumber)),n=ni(this._normalizedRanges,(t=>t.startLineNumber<=e.endLineNumberExclusive))+1;if(t===n)this._normalizedRanges.splice(t,0,e);else if(t===n-1){const n=this._normalizedRanges[t];this._normalizedRanges[t]=n.join(e)}else{const i=this._normalizedRanges[t].join(this._normalizedRanges[n-1]).join(e);this._normalizedRanges.splice(t,n-t,i)}}contains(e){const t=ti(this._normalizedRanges,(t=>t.startLineNumber<=e));return!!t&&t.endLineNumberExclusive>e}getUnion(e){if(0===this._normalizedRanges.length)return e;if(0===e._normalizedRanges.length)return this;const t=[];let n=0,i=0,o=null;for(;n<this._normalizedRanges.length||i<e._normalizedRanges.length;){let a=null;if(n<this._normalizedRanges.length&&i<e._normalizedRanges.length){const t=this._normalizedRanges[n],o=e._normalizedRanges[i];t.startLineNumber<o.startLineNumber?(a=t,n++):(a=o,i++)}else n<this._normalizedRanges.length?(a=this._normalizedRanges[n],n++):(a=e._normalizedRanges[i],i++);null===o?o=a:o.endLineNumberExclusive>=a.startLineNumber?o=new ai(o.startLineNumber,Math.max(o.endLineNumberExclusive,a.endLineNumberExclusive)):(t.push(o),o=a)}return null!==o&&t.push(o),new ri(t)}subtractFrom(e){const t=ii(this._normalizedRanges,(t=>t.endLineNumberExclusive>=e.startLineNumber)),n=ni(this._normalizedRanges,(t=>t.startLineNumber<=e.endLineNumberExclusive))+1;if(t===n)return new ri([e]);const i=[];let o=e.startLineNumber;for(let e=t;e<n;e++){const t=this._normalizedRanges[e];t.startLineNumber>o&&i.push(new ai(o,t.startLineNumber)),o=t.endLineNumberExclusive}return o<e.endLineNumberExclusive&&i.push(new ai(o,e.endLineNumberExclusive)),new ri(i)}toString(){return this._normalizedRanges.map((e=>e.toString())).join(", ")}getIntersection(e){const t=[];let n=0,i=0;for(;n<this._normalizedRanges.length&&i<e._normalizedRanges.length;){const o=this._normalizedRanges[n],a=e._normalizedRanges[i],r=o.intersect(a);r&&!r.isEmpty&&t.push(r),o.endLineNumberExclusive<a.endLineNumberExclusive?n++:i++}return new ri(t)}getWithDelta(e){return new ri(this._normalizedRanges.map((t=>t.delta(e))))}}class si{static inverse(e,t,n){const i=[];let o=1,a=1;for(const t of e){const e=new li(new ai(o,t.original.startLineNumber),new ai(a,t.modified.startLineNumber),void 0);e.modified.isEmpty||i.push(e),o=t.original.endLineNumberExclusive,a=t.modified.endLineNumberExclusive}const r=new li(new ai(o,t+1),new ai(a,n+1),void 0);return r.modified.isEmpty||i.push(r),i}constructor(e,t){this.original=e,this.modified=t}toString(){return`{${this.original.toString()}->${this.modified.toString()}}`}flip(){return new si(this.modified,this.original)}join(e){return new si(this.original.join(e.original),this.modified.join(e.modified))}}class li extends si{constructor(e,t,n){super(e,t),this.innerChanges=n}flip(){var e;return new li(this.modified,this.original,null===(e=this.innerChanges)||void 0===e?void 0:e.map((e=>e.flip())))}}class di{constructor(e,t){this.originalRange=e,this.modifiedRange=t}toString(){return`{${this.originalRange.toString()}->${this.modifiedRange.toString()}}`}flip(){return new di(this.modifiedRange,this.originalRange)}}class ci{computeDiff(e,t,n){var i;const o=new gi(e,t,{maxComputationTime:n.maxComputationTimeMs,shouldIgnoreTrimWhitespace:n.ignoreTrimWhitespace,shouldComputeCharChanges:!0,shouldMakePrettyDiff:!0,shouldPostProcessCharChanges:!0}).computeDiff(),a=[];let r=null;for(const e of o.changes){let t,n;t=0===e.originalEndLineNumber?new ai(e.originalStartLineNumber+1,e.originalStartLineNumber+1):new ai(e.originalStartLineNumber,e.originalEndLineNumber+1),n=0===e.modifiedEndLineNumber?new ai(e.modifiedStartLineNumber+1,e.modifiedStartLineNumber+1):new ai(e.modifiedStartLineNumber,e.modifiedEndLineNumber+1);let o=new li(t,n,null===(i=e.charChanges)||void 0===i?void 0:i.map((e=>new di(new $e(e.originalStartLineNumber,e.originalStartColumn,e.originalEndLineNumber,e.originalEndColumn),new $e(e.modifiedStartLineNumber,e.modifiedStartColumn,e.modifiedEndLineNumber,e.modifiedEndColumn)))));r&&(r.modified.endLineNumberExclusive!==o.modified.startLineNumber&&r.original.endLineNumberExclusive!==o.original.startLineNumber||(o=new li(r.original.join(o.original),r.modified.join(o.modified),r.innerChanges&&o.innerChanges?r.innerChanges.concat(o.innerChanges):void 0),a.pop())),a.push(o),r=o}return Wn((()=>zn(a,((e,t)=>t.original.startLineNumber-e.original.endLineNumberExclusive==t.modified.startLineNumber-e.modified.endLineNumberExclusive&&e.original.endLineNumberExclusive<t.original.startLineNumber&&e.modified.endLineNumberExclusive<t.modified.startLineNumber)))),new $n(a,[],o.quitEarly)}}function ui(e,t,n,i){return new pe(e,t,n).ComputeDiff(i)}class mi{constructor(e){const t=[],n=[];for(let i=0,o=e.length;i<o;i++)t[i]=pi(e[i],1),n[i]=xi(e[i],1);this.lines=e,this._startColumns=t,this._endColumns=n}getElements(){const e=[];for(let t=0,n=this.lines.length;t<n;t++)e[t]=this.lines[t].substring(this._startColumns[t]-1,this._endColumns[t]-1);return e}getStrictElement(e){return this.lines[e]}getStartLineNumber(e){return e+1}getEndLineNumber(e){return e+1}createCharSequence(e,t,n){const i=[],o=[],a=[];let r=0;for(let s=t;s<=n;s++){const t=this.lines[s],l=e?this._startColumns[s]:1,d=e?this._endColumns[s]:t.length+1;for(let e=l;e<d;e++)i[r]=t.charCodeAt(e-1),o[r]=s+1,a[r]=e,r++;!e&&s<n&&(i[r]=10,o[r]=s+1,a[r]=t.length+1,r++)}return new hi(i,o,a)}}class hi{constructor(e,t,n){this._charCodes=e,this._lineNumbers=t,this._columns=n}toString(){return"["+this._charCodes.map(((e,t)=>(10===e?"\\n":String.fromCharCode(e))+`-(${this._lineNumbers[t]},${this._columns[t]})`)).join(", ")+"]"}_assertIndex(e,t){if(e<0||e>=t.length)throw new Error("Illegal index")}getElements(){return this._charCodes}getStartLineNumber(e){return e>0&&e===this._lineNumbers.length?this.getEndLineNumber(e-1):(this._assertIndex(e,this._lineNumbers),this._lineNumbers[e])}getEndLineNumber(e){return-1===e?this.getStartLineNumber(e+1):(this._assertIndex(e,this._lineNumbers),10===this._charCodes[e]?this._lineNumbers[e]+1:this._lineNumbers[e])}getStartColumn(e){return e>0&&e===this._columns.length?this.getEndColumn(e-1):(this._assertIndex(e,this._columns),this._columns[e])}getEndColumn(e){return-1===e?this.getStartColumn(e+1):(this._assertIndex(e,this._columns),10===this._charCodes[e]?1:this._columns[e]+1)}}class bi{constructor(e,t,n,i,o,a,r,s){this.originalStartLineNumber=e,this.originalStartColumn=t,this.originalEndLineNumber=n,this.originalEndColumn=i,this.modifiedStartLineNumber=o,this.modifiedStartColumn=a,this.modifiedEndLineNumber=r,this.modifiedEndColumn=s}static createFromDiffChange(e,t,n){const i=t.getStartLineNumber(e.originalStart),o=t.getStartColumn(e.originalStart),a=t.getEndLineNumber(e.originalStart+e.originalLength-1),r=t.getEndColumn(e.originalStart+e.originalLength-1),s=n.getStartLineNumber(e.modifiedStart),l=n.getStartColumn(e.modifiedStart),d=n.getEndLineNumber(e.modifiedStart+e.modifiedLength-1),c=n.getEndColumn(e.modifiedStart+e.modifiedLength-1);return new bi(i,o,a,r,s,l,d,c)}}class Ti{constructor(e,t,n,i,o){this.originalStartLineNumber=e,this.originalEndLineNumber=t,this.modifiedStartLineNumber=n,this.modifiedEndLineNumber=i,this.charChanges=o}static createFromDiffResult(e,t,n,i,o,a,r){let s,l,d,c,u;if(0===t.originalLength?(s=n.getStartLineNumber(t.originalStart)-1,l=0):(s=n.getStartLineNumber(t.originalStart),l=n.getEndLineNumber(t.originalStart+t.originalLength-1)),0===t.modifiedLength?(d=i.getStartLineNumber(t.modifiedStart)-1,c=0):(d=i.getStartLineNumber(t.modifiedStart),c=i.getEndLineNumber(t.modifiedStart+t.modifiedLength-1)),a&&t.originalLength>0&&t.originalLength<20&&t.modifiedLength>0&&t.modifiedLength<20&&o()){const a=n.createCharSequence(e,t.originalStart,t.originalStart+t.originalLength-1),s=i.createCharSequence(e,t.modifiedStart,t.modifiedStart+t.modifiedLength-1);if(a.getElements().length>0&&s.getElements().length>0){let e=ui(a,s,o,!0).changes;r&&(e=function(e){if(e.length<=1)return e;const t=[e[0]];let n=t[0];for(let i=1,o=e.length;i<o;i++){const o=e[i],a=o.originalStart-(n.originalStart+n.originalLength),r=o.modifiedStart-(n.modifiedStart+n.modifiedLength);Math.min(a,r)<3?(n.originalLength=o.originalStart+o.originalLength-n.originalStart,n.modifiedLength=o.modifiedStart+o.modifiedLength-n.modifiedStart):(t.push(o),n=o)}return t}(e)),u=[];for(let t=0,n=e.length;t<n;t++)u.push(bi.createFromDiffChange(e[t],a,s))}}return new Ti(s,l,d,c,u)}}class gi{constructor(e,t,n){this.shouldComputeCharChanges=n.shouldComputeCharChanges,this.shouldPostProcessCharChanges=n.shouldPostProcessCharChanges,this.shouldIgnoreTrimWhitespace=n.shouldIgnoreTrimWhitespace,this.shouldMakePrettyDiff=n.shouldMakePrettyDiff,this.originalLines=e,this.modifiedLines=t,this.original=new mi(e),this.modified=new mi(t),this.continueLineDiff=ki(n.maxComputationTime),this.continueCharDiff=ki(0===n.maxComputationTime?0:Math.min(n.maxComputationTime,5e3))}computeDiff(){if(1===this.original.lines.length&&0===this.original.lines[0].length)return 1===this.modified.lines.length&&0===this.modified.lines[0].length?{quitEarly:!1,changes:[]}:{quitEarly:!1,changes:[{originalStartLineNumber:1,originalEndLineNumber:1,modifiedStartLineNumber:1,modifiedEndLineNumber:this.modified.lines.length,charChanges:void 0}]};if(1===this.modified.lines.length&&0===this.modified.lines[0].length)return{quitEarly:!1,changes:[{originalStartLineNumber:1,originalEndLineNumber:this.original.lines.length,modifiedStartLineNumber:1,modifiedEndLineNumber:1,charChanges:void 0}]};const e=ui(this.original,this.modified,this.continueLineDiff,this.shouldMakePrettyDiff),t=e.changes,n=e.quitEarly;if(this.shouldIgnoreTrimWhitespace){const e=[];for(let n=0,i=t.length;n<i;n++)e.push(Ti.createFromDiffResult(this.shouldIgnoreTrimWhitespace,t[n],this.original,this.modified,this.continueCharDiff,this.shouldComputeCharChanges,this.shouldPostProcessCharChanges));return{quitEarly:n,changes:e}}const i=[];let o=0,a=0;for(let e=-1,n=t.length;e<n;e++){const r=e+1<n?t[e+1]:null,s=r?r.originalStart:this.originalLines.length,l=r?r.modifiedStart:this.modifiedLines.length;for(;o<s&&a<l;){const e=this.originalLines[o],t=this.modifiedLines[a];if(e!==t){{let n=pi(e,1),r=pi(t,1);for(;n>1&&r>1;){if(e.charCodeAt(n-2)!==t.charCodeAt(r-2))break;n--,r--}(n>1||r>1)&&this._pushTrimWhitespaceCharChange(i,o+1,1,n,a+1,1,r)}{let n=xi(e,1),r=xi(t,1);const s=e.length+1,l=t.length+1;for(;n<s&&r<l;){if(e.charCodeAt(n-1)!==e.charCodeAt(r-1))break;n++,r++}(n<s||r<l)&&this._pushTrimWhitespaceCharChange(i,o+1,n,s,a+1,r,l)}}o++,a++}r&&(i.push(Ti.createFromDiffResult(this.shouldIgnoreTrimWhitespace,r,this.original,this.modified,this.continueCharDiff,this.shouldComputeCharChanges,this.shouldPostProcessCharChanges)),o+=r.originalLength,a+=r.modifiedLength)}return{quitEarly:n,changes:i}}_pushTrimWhitespaceCharChange(e,t,n,i,o,a,r){if(this._mergeTrimWhitespaceCharChange(e,t,n,i,o,a,r))return;let s;this.shouldComputeCharChanges&&(s=[new bi(t,n,t,i,o,a,o,r)]),e.push(new Ti(t,t,o,o,s))}_mergeTrimWhitespaceCharChange(e,t,n,i,o,a,r){const s=e.length;if(0===s)return!1;const l=e[s-1];return 0!==l.originalEndLineNumber&&0!==l.modifiedEndLineNumber&&(l.originalEndLineNumber===t&&l.modifiedEndLineNumber===o?(this.shouldComputeCharChanges&&l.charChanges&&l.charChanges.push(new bi(t,n,t,i,o,a,o,r)),!0):l.originalEndLineNumber+1===t&&l.modifiedEndLineNumber+1===o&&(l.originalEndLineNumber=t,l.modifiedEndLineNumber=o,this.shouldComputeCharChanges&&l.charChanges&&l.charChanges.push(new bi(t,n,t,i,o,a,o,r)),!0))}}function pi(e,t){const n=function(e){for(let t=0,n=e.length;t<n;t++){const n=e.charCodeAt(t);if(32!==n&&9!==n)return t}return-1}(e);return-1===n?t:n+1}function xi(e,t){const n=function(e,t=e.length-1){for(let n=t;n>=0;n--){const t=e.charCodeAt(n);if(32!==t&&9!==t)return n}return-1}(e);return-1===n?t:n+2}function ki(e){if(0===e)return()=>!0;const t=Date.now();return()=>Date.now()-t<e}class fi{static trivial(e,t){return new fi([new Si(ei.ofLength(e.length),ei.ofLength(t.length))],!1)}static trivialTimedOut(e,t){return new fi([new Si(ei.ofLength(e.length),ei.ofLength(t.length))],!0)}constructor(e,t){this.diffs=e,this.hitTimeout=t}}class Si{static invert(e,t){const n=[];return function(e,t){for(let n=0;n<=e.length;n++)t(0===n?void 0:e[n-1],n===e.length?void 0:e[n])}(e,((e,i)=>{n.push(Si.fromOffsetPairs(e?e.getEndExclusives():Ci.zero,i?i.getStarts():new Ci(t,(e?e.seq2Range.endExclusive-e.seq1Range.endExclusive:0)+t)))})),n}static fromOffsetPairs(e,t){return new Si(new ei(e.offset1,t.offset1),new ei(e.offset2,t.offset2))}constructor(e,t){this.seq1Range=e,this.seq2Range=t}swap(){return new Si(this.seq2Range,this.seq1Range)}toString(){return`${this.seq1Range} <-> ${this.seq2Range}`}join(e){return new Si(this.seq1Range.join(e.seq1Range),this.seq2Range.join(e.seq2Range))}delta(e){return 0===e?this:new Si(this.seq1Range.delta(e),this.seq2Range.delta(e))}deltaStart(e){return 0===e?this:new Si(this.seq1Range.deltaStart(e),this.seq2Range.deltaStart(e))}deltaEnd(e){return 0===e?this:new Si(this.seq1Range.deltaEnd(e),this.seq2Range.deltaEnd(e))}intersect(e){const t=this.seq1Range.intersect(e.seq1Range),n=this.seq2Range.intersect(e.seq2Range);if(t&&n)return new Si(t,n)}getStarts(){return new Ci(this.seq1Range.start,this.seq2Range.start)}getEndExclusives(){return new Ci(this.seq1Range.endExclusive,this.seq2Range.endExclusive)}}class Ci{constructor(e,t){this.offset1=e,this.offset2=t}toString(){return`${this.offset1} <-> ${this.offset2}`}}Ci.zero=new Ci(0,0),Ci.max=new Ci(Number.MAX_SAFE_INTEGER,Number.MAX_SAFE_INTEGER);class Ei{isValid(){return!0}}Ei.instance=new Ei;class Ai{constructor(e){if(this.timeout=e,this.startTime=Date.now(),this.valid=!0,e<=0)throw new c("timeout must be positive")}isValid(){return!(Date.now()-this.startTime<this.timeout)&&this.valid&&(this.valid=!1),this.valid}}class yi{constructor(e,t){this.width=e,this.height=t,this.array=[],this.array=new Array(e*t)}get(e,t){return this.array[e+t*this.width]}set(e,t,n){this.array[e+t*this.width]=n}}function Ii(e){return 32===e||9===e}class Li{static getKey(e){let t=this.chrKeys.get(e);return void 0===t&&(t=this.chrKeys.size,this.chrKeys.set(e,t)),t}constructor(e,t,n){this.range=e,this.lines=t,this.source=n,this.histogram=[];let i=0;for(let n=e.startLineNumber-1;n<e.endLineNumberExclusive-1;n++){const e=t[n];for(let t=0;t<e.length;t++){i++;const n=e[t],o=Li.getKey(n);this.histogram[o]=(this.histogram[o]||0)+1}i++;const o=Li.getKey("\n");this.histogram[o]=(this.histogram[o]||0)+1}this.totalCount=i}computeSimilarity(e){var t,n;let i=0;const o=Math.max(this.histogram.length,e.histogram.length);for(let a=0;a<o;a++)i+=Math.abs((null!==(t=this.histogram[a])&&void 0!==t?t:0)-(null!==(n=e.histogram[a])&&void 0!==n?n:0));return 1-i/(this.totalCount+e.totalCount)}}Li.chrKeys=new Map;class Oi{compute(e,t,n=Ei.instance,i){if(0===e.length||0===t.length)return fi.trivial(e,t);const o=new yi(e.length,t.length),a=new yi(e.length,t.length),r=new yi(e.length,t.length);for(let s=0;s<e.length;s++)for(let l=0;l<t.length;l++){if(!n.isValid())return fi.trivialTimedOut(e,t);const d=0===s?0:o.get(s-1,l),c=0===l?0:o.get(s,l-1);let u;e.getElement(s)===t.getElement(l)?(u=0===s||0===l?0:o.get(s-1,l-1),s>0&&l>0&&3===a.get(s-1,l-1)&&(u+=r.get(s-1,l-1)),u+=i?i(s,l):1):u=-1;const m=Math.max(d,c,u);if(m===u){const e=s>0&&l>0?r.get(s-1,l-1):0;r.set(s,l,e+1),a.set(s,l,3)}else m===d?(r.set(s,l,0),a.set(s,l,1)):m===c&&(r.set(s,l,0),a.set(s,l,2));o.set(s,l,m)}const s=[];let l=e.length,d=t.length;function c(e,t){e+1===l&&t+1===d||s.push(new Si(new ei(e+1,l),new ei(t+1,d))),l=e,d=t}let u=e.length-1,m=t.length-1;for(;u>=0&&m>=0;)3===a.get(u,m)?(c(u,m),u--,m--):1===a.get(u,m)?u--:m--;return c(-1,-1),s.reverse(),new fi(s,!1)}}class _i{compute(e,t,n=Ei.instance){if(0===e.length||0===t.length)return fi.trivial(e,t);const i=e,o=t;function a(e,t){for(;e<i.length&&t<o.length&&i.getElement(e)===o.getElement(t);)e++,t++;return e}let r=0;const s=new Ri;s.set(0,a(0,0));const l=new Di;l.set(0,0===s.get(0)?null:new Ni(null,0,0,s.get(0)));let d=0;e:for(;;){if(r++,!n.isValid())return fi.trivialTimedOut(i,o);const e=-Math.min(r,o.length+r%2),t=Math.min(r,i.length+r%2);for(d=e;d<=t;d+=2){let n=0;const r=d===t?-1:s.get(d+1),c=d===e?-1:s.get(d-1)+1;n++;const u=Math.min(Math.max(r,c),i.length),m=u-d;if(n++,u>i.length||m>o.length)continue;const h=a(u,m);s.set(d,h);const b=u===r?l.get(d+1):l.get(d-1);if(l.set(d,h!==u?new Ni(b,u,m,h-u):b),s.get(d)===i.length&&s.get(d)-d===o.length)break e}}let c=l.get(d);const u=[];let m=i.length,h=o.length;for(;;){const e=c?c.x+c.length:0,t=c?c.y+c.length:0;if(e===m&&t===h||u.push(new Si(new ei(e,m),new ei(t,h))),!c)break;m=c.x,h=c.y,c=c.prev}return u.reverse(),new fi(u,!1)}}class Ni{constructor(e,t,n,i){this.prev=e,this.x=t,this.y=n,this.length=i}}class Ri{constructor(){this.positiveArr=new Int32Array(10),this.negativeArr=new Int32Array(10)}get(e){return e<0?(e=-e-1,this.negativeArr[e]):this.positiveArr[e]}set(e,t){if(e<0){if((e=-e-1)>=this.negativeArr.length){const e=this.negativeArr;this.negativeArr=new Int32Array(2*e.length),this.negativeArr.set(e)}this.negativeArr[e]=t}else{if(e>=this.positiveArr.length){const e=this.positiveArr;this.positiveArr=new Int32Array(2*e.length),this.positiveArr.set(e)}this.positiveArr[e]=t}}}class Di{constructor(){this.positiveArr=[],this.negativeArr=[]}get(e){return e<0?(e=-e-1,this.negativeArr[e]):this.positiveArr[e]}set(e,t){e<0?(e=-e-1,this.negativeArr[e]=t):this.positiveArr[e]=t}}var Mi;class vi{constructor(e,t){this.uri=e,this.value=t}}class Fi{constructor(e,t){if(this[Mi]="ResourceMap",e instanceof Fi)this.map=new Map(e.map),this.toKey=null!=t?t:Fi.defaultToKey;else if(function(e){return Array.isArray(e)}(e)){this.map=new Map,this.toKey=null!=t?t:Fi.defaultToKey;for(const[t,n]of e)this.set(t,n)}else this.map=new Map,this.toKey=null!=e?e:Fi.defaultToKey}set(e,t){return this.map.set(this.toKey(e),new vi(e,t)),this}get(e){var t;return null===(t=this.map.get(this.toKey(e)))||void 0===t?void 0:t.value}has(e){return this.map.has(this.toKey(e))}get size(){return this.map.size}clear(){this.map.clear()}delete(e){return this.map.delete(this.toKey(e))}forEach(e,t){void 0!==t&&(e=e.bind(t));for(const[t,n]of this.map)e(n.value,n.uri,this)}*values(){for(const e of this.map.values())yield e.value}*keys(){for(const e of this.map.values())yield e.uri}*entries(){for(const e of this.map.values())yield[e.uri,e.value]}*[(Mi=Symbol.toStringTag,Symbol.iterator)](){for(const[,e]of this.map)yield[e.uri,e.value]}}Fi.defaultToKey=e=>e.toString();Symbol.toStringTag,Symbol.iterator;class Pi{constructor(){this.map=new Map}add(e,t){let n=this.map.get(e);n||(n=new Set,this.map.set(e,n)),n.add(t)}delete(e,t){const n=this.map.get(e);n&&(n.delete(t),0===n.size&&this.map.delete(e))}forEach(e,t){const n=this.map.get(e);n&&n.forEach(t)}get(e){const t=this.map.get(e);return t||new Set}}class Bi{constructor(e,t,n){this.lines=e,this.considerWhitespaceChanges=n,this.elements=[],this.firstCharOffsetByLine=[],this.additionalOffsetByLine=[];let i=!1;t.start>0&&t.endExclusive>=e.length&&(t=new ei(t.start-1,t.endExclusive),i=!0),this.lineRange=t,this.firstCharOffsetByLine[0]=0;for(let t=this.lineRange.start;t<this.lineRange.endExclusive;t++){let o=e[t],a=0;if(i)a=o.length,o="",i=!1;else if(!n){const e=o.trimStart();a=o.length-e.length,o=e.trimEnd()}this.additionalOffsetByLine.push(a);for(let e=0;e<o.length;e++)this.elements.push(o.charCodeAt(e));t<e.length-1&&(this.elements.push("\n".charCodeAt(0)),this.firstCharOffsetByLine[t-this.lineRange.start+1]=this.elements.length)}this.additionalOffsetByLine.push(0)}toString(){return`Slice: "${this.text}"`}get text(){return this.getText(new ei(0,this.length))}getText(e){return this.elements.slice(e.start,e.endExclusive).map((e=>String.fromCharCode(e))).join("")}getElement(e){return this.elements[e]}get length(){return this.elements.length}getBoundaryScore(e){const t=Hi(e>0?this.elements[e-1]:-1),n=Hi(e<this.elements.length?this.elements[e]:-1);if(6===t&&7===n)return 0;let i=0;return t!==n&&(i+=10,0===t&&1===n&&(i+=1)),i+=qi(t),i+=qi(n),i}translateOffset(e){if(this.lineRange.isEmpty)return new Je(this.lineRange.start+1,1);const t=ni(this.firstCharOffsetByLine,(t=>t<=e));return new Je(this.lineRange.start+t+1,e-this.firstCharOffsetByLine[t]+this.additionalOffsetByLine[t]+1)}translateRange(e){return $e.fromPositions(this.translateOffset(e.start),this.translateOffset(e.endExclusive))}findWordContaining(e){if(e<0||e>=this.elements.length)return;if(!wi(this.elements[e]))return;let t=e;for(;t>0&&wi(this.elements[t-1]);)t--;let n=e;for(;n<this.elements.length&&wi(this.elements[n]);)n++;return new ei(t,n)}countLinesIn(e){return this.translateOffset(e.endExclusive).lineNumber-this.translateOffset(e.start).lineNumber}isStronglyEqual(e,t){return this.elements[e]===this.elements[t]}extendToFullLines(e){var t,n;const i=null!==(t=ti(this.firstCharOffsetByLine,(t=>t<=e.start)))&&void 0!==t?t:0,o=null!==(n=function(e,t){const n=ii(e,t);return n===e.length?void 0:e[n]}(this.firstCharOffsetByLine,(t=>e.endExclusive<=t)))&&void 0!==n?n:this.elements.length;return new ei(i,o)}}function wi(e){return e>=97&&e<=122||e>=65&&e<=90||e>=48&&e<=57}const Ui={0:0,1:0,2:0,3:10,4:2,5:3,6:10,7:10};function qi(e){return Ui[e]}function Hi(e){return 10===e?7:13===e?6:Ii(e)?5:e>=97&&e<=122?0:e>=65&&e<=90?1:e>=48&&e<=57?2:-1===e?3:4}function Vi(e,t,n,i,o,a){let{moves:r,excludedChanges:s}=function(e,t,n,i){const o=[],a=e.filter((e=>e.modified.isEmpty&&e.original.length>=3)).map((e=>new Li(e.original,t,e))),r=new Set(e.filter((e=>e.original.isEmpty&&e.modified.length>=3)).map((e=>new Li(e.modified,n,e)))),s=new Set;for(const e of a){let t,n=-1;for(const i of r){const o=e.computeSimilarity(i);o>n&&(n=o,t=i)}if(n>.9&&t&&(r.delete(t),o.push(new si(e.range,t.range)),s.add(e.source),s.add(t.source)),!i.isValid())return{moves:o,excludedChanges:s}}return{moves:o,excludedChanges:s}}(e,t,n,a);if(!a.isValid())return[];const l=function(e,t,n,i,o,a){const r=[],s=new Pi;for(const n of e)for(let e=n.original.startLineNumber;e<n.original.endLineNumberExclusive-2;e++){const n=`${t[e-1]}:${t[e+1-1]}:${t[e+2-1]}`;s.add(n,{range:new ai(e,e+3)})}const l=[];e.sort(et((e=>e.modified.startLineNumber),tt));for(const t of e){let e=[];for(let i=t.modified.startLineNumber;i<t.modified.endLineNumberExclusive-2;i++){const t=`${n[i-1]}:${n[i+1-1]}:${n[i+2-1]}`,o=new ai(i,i+3),a=[];s.forEach(t,(({range:t})=>{for(const n of e)if(n.originalLineRange.endLineNumberExclusive+1===t.endLineNumberExclusive&&n.modifiedLineRange.endLineNumberExclusive+1===o.endLineNumberExclusive)return n.originalLineRange=new ai(n.originalLineRange.startLineNumber,t.endLineNumberExclusive),n.modifiedLineRange=new ai(n.modifiedLineRange.startLineNumber,o.endLineNumberExclusive),void a.push(n);const n={modifiedLineRange:o,originalLineRange:t};l.push(n),a.push(n)})),e=a}if(!a.isValid())return[]}l.sort((d=et((e=>e.modifiedLineRange.length),tt),(e,t)=>-d(e,t)));var d;const c=new ri,u=new ri;for(const e of l){const t=e.modifiedLineRange.startLineNumber-e.originalLineRange.startLineNumber,n=c.subtractFrom(e.modifiedLineRange),i=u.subtractFrom(e.originalLineRange).getWithDelta(t),o=n.getIntersection(i);for(const e of o.ranges){if(e.length<3)continue;const n=e,i=e.delta(-t);r.push(new si(i,n)),c.addRange(n),u.addRange(i)}}r.sort(et((e=>e.original.startLineNumber),tt));const m=new oi(e);for(let t=0;t<r.length;t++){const n=r[t],s=m.findLastMonotonous((e=>e.original.startLineNumber<=n.original.startLineNumber)),l=ti(e,(e=>e.modified.startLineNumber<=n.modified.startLineNumber)),d=Math.max(n.original.startLineNumber-s.original.startLineNumber,n.modified.startLineNumber-l.modified.startLineNumber),h=m.findLastMonotonous((e=>e.original.startLineNumber<n.original.endLineNumberExclusive)),b=ti(e,(e=>e.modified.startLineNumber<n.modified.endLineNumberExclusive)),T=Math.max(h.original.endLineNumberExclusive-n.original.endLineNumberExclusive,b.modified.endLineNumberExclusive-n.modified.endLineNumberExclusive);let g,p;for(g=0;g<d;g++){const e=n.original.startLineNumber-g-1,t=n.modified.startLineNumber-g-1;if(e>i.length||t>o.length)break;if(c.contains(t)||u.contains(e))break;if(!ji(i[e-1],o[t-1],a))break}for(g>0&&(u.addRange(new ai(n.original.startLineNumber-g,n.original.startLineNumber)),c.addRange(new ai(n.modified.startLineNumber-g,n.modified.startLineNumber))),p=0;p<T;p++){const e=n.original.endLineNumberExclusive+p,t=n.modified.endLineNumberExclusive+p;if(e>i.length||t>o.length)break;if(c.contains(t)||u.contains(e))break;if(!ji(i[e-1],o[t-1],a))break}p>0&&(u.addRange(new ai(n.original.endLineNumberExclusive,n.original.endLineNumberExclusive+p)),c.addRange(new ai(n.modified.endLineNumberExclusive,n.modified.endLineNumberExclusive+p))),(g>0||p>0)&&(r[t]=new si(new ai(n.original.startLineNumber-g,n.original.endLineNumberExclusive+p),new ai(n.modified.startLineNumber-g,n.modified.endLineNumberExclusive+p)))}return r}(e.filter((e=>!s.has(e))),i,o,t,n,a);return function(e,t){for(const n of t)e.push(n)}(r,l),r=function(e){if(0===e.length)return e;e.sort(et((e=>e.original.startLineNumber),tt));const t=[e[0]];for(let n=1;n<e.length;n++){const i=t[t.length-1],o=e[n],a=o.original.startLineNumber-i.original.endLineNumberExclusive,r=o.modified.startLineNumber-i.modified.endLineNumberExclusive;a>=0&&r>=0&&a+r<=2?t[t.length-1]=i.join(o):t.push(o)}return t}(r),r=r.filter((e=>e.original.toOffsetRange().slice(t).map((e=>e.trim())).join("\n").length>=10)),r=function(e,t){const n=new oi(e);return t=t.filter((t=>(n.findLastMonotonous((e=>e.original.endLineNumberExclusive<t.original.endLineNumberExclusive))||new si(new ai(1,1),new ai(1,1)))!==ti(e,(e=>e.modified.endLineNumberExclusive<t.modified.endLineNumberExclusive)))),t}(e,r),r}function ji(e,t,n){if(e.trim()===t.trim())return!0;if(e.length>300&&t.length>300)return!1;const i=(new _i).compute(new Bi([e],new ei(0,1),!1),new Bi([t],new ei(0,1),!1),n);let o=0;const a=Si.invert(i.diffs,e.length);for(const t of a)t.seq1Range.forEach((t=>{Ii(e.charCodeAt(t))||o++}));const r=function(t){let n=0;for(let i=0;i<e.length;i++)Ii(t.charCodeAt(i))||n++;return n}(e.length>t.length?e:t);return o/r>.6&&r>10}function Yi(e,t,n){let i=n;return i=function(e,t,n){if(0===n.length)return n;const i=[];i.push(n[0]);for(let o=1;o<n.length;o++){const a=i[i.length-1];let r=n[o];if(r.seq1Range.isEmpty||r.seq2Range.isEmpty){const n=r.seq1Range.start-a.seq1Range.endExclusive;let o;for(o=1;o<=n&&(e.getElement(r.seq1Range.start-o)===e.getElement(r.seq1Range.endExclusive-o)&&t.getElement(r.seq2Range.start-o)===t.getElement(r.seq2Range.endExclusive-o));o++);if(o--,o===n){i[i.length-1]=new Si(new ei(a.seq1Range.start,r.seq1Range.endExclusive-n),new ei(a.seq2Range.start,r.seq2Range.endExclusive-n));continue}r=r.delta(-o)}i.push(r)}const o=[];for(let n=0;n<i.length-1;n++){const a=i[n+1];let r=i[n];if(r.seq1Range.isEmpty||r.seq2Range.isEmpty){const o=a.seq1Range.start-r.seq1Range.endExclusive;let s;for(s=0;s<o&&(e.isStronglyEqual(r.seq1Range.start+s,r.seq1Range.endExclusive+s)&&t.isStronglyEqual(r.seq2Range.start+s,r.seq2Range.endExclusive+s));s++);if(s===o){i[n+1]=new Si(new ei(r.seq1Range.start+o,a.seq1Range.endExclusive),new ei(r.seq2Range.start+o,a.seq2Range.endExclusive));continue}s>0&&(r=r.delta(s))}o.push(r)}i.length>0&&o.push(i[i.length-1]);return o}(e,t,i),i=function(e,t,n){if(!e.getBoundaryScore||!t.getBoundaryScore)return n;for(let i=0;i<n.length;i++){const o=i>0?n[i-1]:void 0,a=n[i],r=i+1<n.length?n[i+1]:void 0,s=new ei(o?o.seq1Range.start+1:0,r?r.seq1Range.endExclusive-1:e.length),l=new ei(o?o.seq2Range.start+1:0,r?r.seq2Range.endExclusive-1:t.length);a.seq1Range.isEmpty?n[i]=Gi(a,e,t,s,l):a.seq2Range.isEmpty&&(n[i]=Gi(a.swap(),t,e,l,s).swap())}return n}(e,t,i),i}function Gi(e,t,n,i,o){let a=1;for(;e.seq1Range.start-a>=i.start&&e.seq2Range.start-a>=o.start&&n.isStronglyEqual(e.seq2Range.start-a,e.seq2Range.endExclusive-a)&&a<100;)a++;a--;let r=0;for(;e.seq1Range.start+r<i.endExclusive&&e.seq2Range.endExclusive+r<o.endExclusive&&n.isStronglyEqual(e.seq2Range.start+r,e.seq2Range.endExclusive+r)&&r<100;)r++;if(0===a&&0===r)return e;let s=0,l=-1;for(let i=-a;i<=r;i++){const o=e.seq2Range.start+i,a=e.seq2Range.endExclusive+i,r=e.seq1Range.start+i,d=t.getBoundaryScore(r)+n.getBoundaryScore(o)+n.getBoundaryScore(a);d>l&&(l=d,s=i)}return e.delta(s)}class Ki{constructor(e,t){this.trimmedHash=e,this.lines=t}getElement(e){return this.trimmedHash[e]}get length(){return this.trimmedHash.length}getBoundaryScore(e){return 1e3-((0===e?0:Wi(this.lines[e-1]))+(e===this.lines.length?0:Wi(this.lines[e])))}getText(e){return this.lines.slice(e.start,e.endExclusive).join("\n")}isStronglyEqual(e,t){return this.lines[e]===this.lines[t]}}function Wi(e){let t=0;for(;t<e.length&&(32===e.charCodeAt(t)||9===e.charCodeAt(t));)t++;return t}class zi{constructor(){this.dynamicProgrammingDiffing=new Oi,this.myersDiffingAlgorithm=new _i}computeDiff(e,t,n){if(e.length<=1&&function(e,t,n=((e,t)=>e===t)){if(e===t)return!0;if(!e||!t)return!1;if(e.length!==t.length)return!1;for(let i=0,o=e.length;i<o;i++)if(!n(e[i],t[i]))return!1;return!0}(e,t,((e,t)=>e===t)))return new $n([],[],!1);if(1===e.length&&0===e[0].length||1===t.length&&0===t[0].length)return new $n([new li(new ai(1,e.length+1),new ai(1,t.length+1),[new di(new $e(1,1,e.length,e[0].length+1),new $e(1,1,t.length,t[0].length+1))])],[],!1);const i=0===n.maxComputationTimeMs?Ei.instance:new Ai(n.maxComputationTimeMs),o=!n.ignoreTrimWhitespace,a=new Map;function r(e){let t=a.get(e);return void 0===t&&(t=a.size,a.set(e,t)),t}const s=e.map((e=>r(e.trim()))),l=t.map((e=>r(e.trim()))),d=new Ki(s,e),c=new Ki(l,t),u=(()=>d.length+c.length<1700?this.dynamicProgrammingDiffing.compute(d,c,i,((n,i)=>e[n]===t[i]?0===t[i].length?.1:1+Math.log(1+t[i].length):.99)):this.myersDiffingAlgorithm.compute(d,c))();let m=u.diffs,h=u.hitTimeout;m=Yi(d,c,m),m=function(e,t,n){let i=n;if(0===i.length)return i;let o,a=0;do{o=!1;const r=[i[0]];for(let s=1;s<i.length;s++){const l=i[s],d=r[r.length-1];function c(t,n){const i=new ei(d.seq1Range.endExclusive,l.seq1Range.start);return e.getText(i).replace(/\s/g,"").length<=4&&(t.seq1Range.length+t.seq2Range.length>5||n.seq1Range.length+n.seq2Range.length>5)}c(d,l)?(o=!0,r[r.length-1]=r[r.length-1].join(l)):r.push(l)}i=r}while(a++<10&&o);return i}(d,0,m);const b=[],T=n=>{if(o)for(let a=0;a<n;a++){const n=g+a,r=p+a;if(e[n]!==t[r]){const a=this.refineDiff(e,t,new Si(new ei(n,n+1),new ei(r,r+1)),i,o);for(const e of a.mappings)b.push(e);a.hitTimeout&&(h=!0)}}};let g=0,p=0;for(const n of m){Wn((()=>n.seq1Range.start-g==n.seq2Range.start-p));T(n.seq1Range.start-g),g=n.seq1Range.endExclusive,p=n.seq2Range.endExclusive;const a=this.refineDiff(e,t,n,i,o);a.hitTimeout&&(h=!0);for(const e of a.mappings)b.push(e)}T(e.length-g);const x=Zi(b,e,t);let k=[];return n.computeMoves&&(k=this.computeMoves(x,e,t,s,l,i,o)),Wn((()=>{function n(e,t){if(e.lineNumber<1||e.lineNumber>t.length)return!1;const n=t[e.lineNumber-1];return!(e.column<1||e.column>n.length+1)}function i(e,t){return!(e.startLineNumber<1||e.startLineNumber>t.length+1)&&!(e.endLineNumberExclusive<1||e.endLineNumberExclusive>t.length+1)}for(const o of x){if(!o.innerChanges)return!1;for(const i of o.innerChanges){if(!(n(i.modifiedRange.getStartPosition(),t)&&n(i.modifiedRange.getEndPosition(),t)&&n(i.originalRange.getStartPosition(),e)&&n(i.originalRange.getEndPosition(),e)))return!1}if(!i(o.modified,t)||!i(o.original,e))return!1}return!0})),new $n(x,k,h)}computeMoves(e,t,n,i,o,a,r){return Vi(e,t,n,i,o,a).map((e=>{const i=Zi(this.refineDiff(t,n,new Si(e.original.toOffsetRange(),e.modified.toOffsetRange()),a,r).mappings,t,n,!0);return new Qn(e,i)}))}refineDiff(e,t,n,i,o){const a=new Bi(e,n.seq1Range,o),r=new Bi(t,n.seq2Range,o),s=a.length+r.length<500?this.dynamicProgrammingDiffing.compute(a,r,i):this.myersDiffingAlgorithm.compute(a,r,i);let l=s.diffs;l=Yi(a,r,l),l=function(e,t,n){const i=[];let o;function a(){if(!o)return;const e=o.s1Range.length-o.deleted;o.s2Range.length,o.added,Math.max(o.deleted,o.added)+(o.count-1)>e&&i.push(new Si(o.s1Range,o.s2Range)),o=void 0}for(const r of n){function s(e,t){var n,i,s,l;if(!o||!o.s1Range.containsRange(e)||!o.s2Range.containsRange(t))if(!o||o.s1Range.endExclusive<e.start&&o.s2Range.endExclusive<t.start)a(),o={added:0,deleted:0,count:0,s1Range:e,s2Range:t};else{const a=ei.tryCreate(o.s1Range.endExclusive,e.start),r=ei.tryCreate(o.s2Range.endExclusive,t.start);o.deleted+=null!==(n=null==a?void 0:a.length)&&void 0!==n?n:0,o.added+=null!==(i=null==r?void 0:r.length)&&void 0!==i?i:0,o.s1Range=o.s1Range.join(e),o.s2Range=o.s2Range.join(t)}const d=e.intersect(r.seq1Range),c=t.intersect(r.seq2Range);o.count++,o.deleted+=null!==(s=null==d?void 0:d.length)&&void 0!==s?s:0,o.added+=null!==(l=null==c?void 0:c.length)&&void 0!==l?l:0}const l=e.findWordContaining(r.seq1Range.start-1),d=t.findWordContaining(r.seq2Range.start-1),c=e.findWordContaining(r.seq1Range.endExclusive),u=t.findWordContaining(r.seq2Range.endExclusive);l&&c&&d&&u&&l.equals(c)&&d.equals(u)?s(l,d):(l&&d&&s(l,d),c&&u&&s(c,u))}return a(),function(e,t){const n=[];for(;e.length>0||t.length>0;){const i=e[0],o=t[0];let a;a=i&&(!o||i.seq1Range.start<o.seq1Range.start)?e.shift():t.shift(),n.length>0&&n[n.length-1].seq1Range.endExclusive>=a.seq1Range.start?n[n.length-1]=n[n.length-1].join(a):n.push(a)}return n}(n,i)}(a,r,l),l=function(e,t,n){const i=[];for(const e of n){const t=i[i.length-1];t&&(e.seq1Range.start-t.seq1Range.endExclusive<=2||e.seq2Range.start-t.seq2Range.endExclusive<=2)?i[i.length-1]=new Si(t.seq1Range.join(e.seq1Range),t.seq2Range.join(e.seq2Range)):i.push(e)}return i}(0,0,l),l=function(e,t,n){let i=n;if(0===i.length)return i;let o,a=0;do{o=!1;const s=[i[0]];for(let l=1;l<i.length;l++){const d=i[l],c=s[s.length-1];function u(n,i){const o=new ei(c.seq1Range.endExclusive,d.seq1Range.start);if(e.countLinesIn(o)>5||o.length>500)return!1;const a=e.getText(o).trim();if(a.length>20||a.split(/\r\n|\r|\n/).length>1)return!1;const r=e.countLinesIn(n.seq1Range),s=n.seq1Range.length,l=t.countLinesIn(n.seq2Range),u=n.seq2Range.length,m=e.countLinesIn(i.seq1Range),h=i.seq1Range.length,b=t.countLinesIn(i.seq2Range),T=i.seq2Range.length;function g(e){return Math.min(e,130)}return Math.pow(Math.pow(g(40*r+s),1.5)+Math.pow(g(40*l+u),1.5),1.5)+Math.pow(Math.pow(g(40*m+h),1.5)+Math.pow(g(40*b+T),1.5),1.5)>1.3*Math.pow(Math.pow(130,1.5),1.5)}u(c,d)?(o=!0,s[s.length-1]=s[s.length-1].join(d)):s.push(d)}i=s}while(a++<10&&o);const r=[];return function(e,t){for(let n=0;n<e.length;n++)t(0===n?void 0:e[n-1],e[n],n+1===e.length?void 0:e[n+1])}(i,((t,n,i)=>{let o=n;function a(e){return e.length>0&&e.trim().length<=3&&n.seq1Range.length+n.seq2Range.length>100}const s=e.extendToFullLines(n.seq1Range),l=e.getText(new ei(s.start,n.seq1Range.start));a(l)&&(o=o.deltaStart(-l.length));const d=e.getText(new ei(n.seq1Range.endExclusive,s.endExclusive));a(d)&&(o=o.deltaEnd(d.length));const c=Si.fromOffsetPairs(t?t.getEndExclusives():Ci.zero,i?i.getStarts():Ci.max),u=o.intersect(c);r.push(u)})),r}(a,r,l);return{mappings:l.map((e=>new di(a.translateRange(e.seq1Range),r.translateRange(e.seq2Range)))),hitTimeout:s.hitTimeout}}}function Zi(e,t,n,i=!1){const o=[];for(const i of function*(e,t){let n,i;for(const o of e)void 0!==i&&t(i,o)?n.push(o):(n&&(yield n),n=[o]),i=o;n&&(yield n)}(e.map((e=>function(e,t,n){let i=0,o=0;1===e.modifiedRange.endColumn&&1===e.originalRange.endColumn&&e.originalRange.startLineNumber+i<=e.originalRange.endLineNumber&&e.modifiedRange.startLineNumber+i<=e.modifiedRange.endLineNumber&&(o=-1);e.modifiedRange.startColumn-1>=n[e.modifiedRange.startLineNumber-1].length&&e.originalRange.startColumn-1>=t[e.originalRange.startLineNumber-1].length&&e.originalRange.startLineNumber<=e.originalRange.endLineNumber+o&&e.modifiedRange.startLineNumber<=e.modifiedRange.endLineNumber+o&&(i=1);const a=new ai(e.originalRange.startLineNumber+i,e.originalRange.endLineNumber+1+o),r=new ai(e.modifiedRange.startLineNumber+i,e.modifiedRange.endLineNumber+1+o);return new li(a,r,[e])}(e,t,n))),((e,t)=>e.original.overlapOrTouch(t.original)||e.modified.overlapOrTouch(t.modified)))){const e=i[0],t=i[i.length-1];o.push(new li(e.original.join(t.original),e.modified.join(t.modified),i.map((e=>e.innerChanges[0]))))}return Wn((()=>!(!i&&o.length>0&&o[0].original.startLineNumber!==o[0].modified.startLineNumber)&&zn(o,((e,t)=>t.original.startLineNumber-e.original.endLineNumberExclusive==t.modified.startLineNumber-e.modified.endLineNumberExclusive&&e.original.endLineNumberExclusive<t.original.startLineNumber&&e.modified.endLineNumberExclusive<t.modified.startLineNumber)))),o}const Xi=()=>new ci,Ji=()=>new zi;function $i(e,t){const n=Math.pow(10,t);return Math.round(e*n)/n}class Qi{constructor(e,t,n,i=1){this._rgbaBrand=void 0,this.r=0|Math.min(255,Math.max(0,e)),this.g=0|Math.min(255,Math.max(0,t)),this.b=0|Math.min(255,Math.max(0,n)),this.a=$i(Math.max(Math.min(1,i),0),3)}static equals(e,t){return e.r===t.r&&e.g===t.g&&e.b===t.b&&e.a===t.a}}class eo{constructor(e,t,n,i){this._hslaBrand=void 0,this.h=0|Math.max(Math.min(360,e),0),this.s=$i(Math.max(Math.min(1,t),0),3),this.l=$i(Math.max(Math.min(1,n),0),3),this.a=$i(Math.max(Math.min(1,i),0),3)}static equals(e,t){return e.h===t.h&&e.s===t.s&&e.l===t.l&&e.a===t.a}static fromRGBA(e){const t=e.r/255,n=e.g/255,i=e.b/255,o=e.a,a=Math.max(t,n,i),r=Math.min(t,n,i);let s=0,l=0;const d=(r+a)/2,c=a-r;if(c>0){switch(l=Math.min(d<=.5?c/(2*d):c/(2-2*d),1),a){case t:s=(n-i)/c+(n<i?6:0);break;case n:s=(i-t)/c+2;break;case i:s=(t-n)/c+4}s*=60,s=Math.round(s)}return new eo(s,l,d,o)}static _hue2rgb(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}static toRGBA(e){const t=e.h/360,{s:n,l:i,a:o}=e;let a,r,s;if(0===n)a=r=s=i;else{const e=i<.5?i*(1+n):i+n-i*n,o=2*i-e;a=eo._hue2rgb(o,e,t+1/3),r=eo._hue2rgb(o,e,t),s=eo._hue2rgb(o,e,t-1/3)}return new Qi(Math.round(255*a),Math.round(255*r),Math.round(255*s),o)}}class to{constructor(e,t,n,i){this._hsvaBrand=void 0,this.h=0|Math.max(Math.min(360,e),0),this.s=$i(Math.max(Math.min(1,t),0),3),this.v=$i(Math.max(Math.min(1,n),0),3),this.a=$i(Math.max(Math.min(1,i),0),3)}static equals(e,t){return e.h===t.h&&e.s===t.s&&e.v===t.v&&e.a===t.a}static fromRGBA(e){const t=e.r/255,n=e.g/255,i=e.b/255,o=Math.max(t,n,i),a=o-Math.min(t,n,i),r=0===o?0:a/o;let s;return s=0===a?0:o===t?((n-i)/a%6+6)%6:o===n?(i-t)/a+2:(t-n)/a+4,new to(Math.round(60*s),r,o,e.a)}static toRGBA(e){const{h:t,s:n,v:i,a:o}=e,a=i*n,r=a*(1-Math.abs(t/60%2-1)),s=i-a;let[l,d,c]=[0,0,0];return t<60?(l=a,d=r):t<120?(l=r,d=a):t<180?(d=a,c=r):t<240?(d=r,c=a):t<300?(l=r,c=a):t<=360&&(l=a,c=r),l=Math.round(255*(l+s)),d=Math.round(255*(d+s)),c=Math.round(255*(c+s)),new Qi(l,d,c,o)}}class no{static fromHex(e){return no.Format.CSS.parseHex(e)||no.red}static equals(e,t){return!e&&!t||!(!e||!t)&&e.equals(t)}get hsla(){return this._hsla?this._hsla:eo.fromRGBA(this.rgba)}get hsva(){return this._hsva?this._hsva:to.fromRGBA(this.rgba)}constructor(e){if(!e)throw new Error("Color needs a value");if(e instanceof Qi)this.rgba=e;else if(e instanceof eo)this._hsla=e,this.rgba=eo.toRGBA(e);else{if(!(e instanceof to))throw new Error("Invalid color ctor argument");this._hsva=e,this.rgba=to.toRGBA(e)}}equals(e){return!!e&&Qi.equals(this.rgba,e.rgba)&&eo.equals(this.hsla,e.hsla)&&to.equals(this.hsva,e.hsva)}getRelativeLuminance(){return $i(.2126*no._relativeLuminanceForComponent(this.rgba.r)+.7152*no._relativeLuminanceForComponent(this.rgba.g)+.0722*no._relativeLuminanceForComponent(this.rgba.b),4)}static _relativeLuminanceForComponent(e){const t=e/255;return t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4)}isLighter(){return(299*this.rgba.r+587*this.rgba.g+114*this.rgba.b)/1e3>=128}isLighterThan(e){return this.getRelativeLuminance()>e.getRelativeLuminance()}isDarkerThan(e){return this.getRelativeLuminance()<e.getRelativeLuminance()}lighten(e){return new no(new eo(this.hsla.h,this.hsla.s,this.hsla.l+this.hsla.l*e,this.hsla.a))}darken(e){return new no(new eo(this.hsla.h,this.hsla.s,this.hsla.l-this.hsla.l*e,this.hsla.a))}transparent(e){const{r:t,g:n,b:i,a:o}=this.rgba;return new no(new Qi(t,n,i,o*e))}isTransparent(){return 0===this.rgba.a}isOpaque(){return 1===this.rgba.a}opposite(){return new no(new Qi(255-this.rgba.r,255-this.rgba.g,255-this.rgba.b,this.rgba.a))}makeOpaque(e){if(this.isOpaque()||1!==e.rgba.a)return this;const{r:t,g:n,b:i,a:o}=this.rgba;return new no(new Qi(e.rgba.r-o*(e.rgba.r-t),e.rgba.g-o*(e.rgba.g-n),e.rgba.b-o*(e.rgba.b-i),1))}toString(){return this._toString||(this._toString=no.Format.CSS.format(this)),this._toString}static getLighterColor(e,t,n){if(e.isLighterThan(t))return e;n=n||.5;const i=e.getRelativeLuminance(),o=t.getRelativeLuminance();return n=n*(o-i)/o,e.lighten(n)}static getDarkerColor(e,t,n){if(e.isDarkerThan(t))return e;n=n||.5;const i=e.getRelativeLuminance();return n=n*(i-t.getRelativeLuminance())/i,e.darken(n)}}function io(e){const t=[];for(const n of e){const e=Number(n);(e||0===e&&""!==n.replace(/\s/g,""))&&t.push(e)}return t}function oo(e,t,n,i){return{red:e/255,blue:n/255,green:t/255,alpha:i}}function ao(e,t){const n=t.index,i=t[0].length;if(!n)return;const o=e.positionAt(n);return{startLineNumber:o.lineNumber,startColumn:o.column,endLineNumber:o.lineNumber,endColumn:o.column+i}}function ro(e,t){if(!e)return;const n=no.Format.CSS.parseHex(t);return n?{range:e,color:oo(n.rgba.r,n.rgba.g,n.rgba.b,n.rgba.a)}:void 0}function so(e,t,n){if(!e||1!==t.length)return;const i=io(t[0].values());return{range:e,color:oo(i[0],i[1],i[2],n?i[3]:1)}}function lo(e,t,n){if(!e||1!==t.length)return;const i=io(t[0].values()),o=new no(new eo(i[0],i[1]/100,i[2]/100,n?i[3]:1));return{range:e,color:oo(o.rgba.r,o.rgba.g,o.rgba.b,o.rgba.a)}}function co(e,t){return"string"==typeof e?[...e.matchAll(t)]:e.findMatches(t)}function uo(e){return e&&"function"==typeof e.getValue&&"function"==typeof e.positionAt?function(e){const t=[],n=co(e,/\b(rgb|rgba|hsl|hsla)(\([0-9\s,.\%]*\))|(#)([A-Fa-f0-9]{3})\b|(#)([A-Fa-f0-9]{4})\b|(#)([A-Fa-f0-9]{6})\b|(#)([A-Fa-f0-9]{8})\b/gm);if(n.length>0)for(const i of n){const n=i.filter((e=>void 0!==e)),o=n[1],a=n[2];if(!a)continue;let r;if("rgb"===o){const t=/^\(\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*\)$/gm;r=so(ao(e,i),co(a,t),!1)}else if("rgba"===o){const t=/^\(\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\s*,\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\s*\)$/gm;r=so(ao(e,i),co(a,t),!0)}else if("hsl"===o){const t=/^\(\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\s*,\s*(100|\d{1,2}[.]\d*|\d{1,2})%\s*,\s*(100|\d{1,2}[.]\d*|\d{1,2})%\s*\)$/gm;r=lo(ao(e,i),co(a,t),!1)}else if("hsla"===o){const t=/^\(\s*(36[0]|3[0-5][0-9]|[12][0-9][0-9]|[1-9]?[0-9])\s*,\s*(100|\d{1,2}[.]\d*|\d{1,2})%\s*,\s*(100|\d{1,2}[.]\d*|\d{1,2})%\s*,\s*(0[.][0-9]+|[.][0-9]+|[01][.]|[01])\s*\)$/gm;r=lo(ao(e,i),co(a,t),!0)}else"#"===o&&(r=ro(ao(e,i),o+a));r&&t.push(r)}return t}(e):[]}no.white=new no(new Qi(255,255,255,1)),no.black=new no(new Qi(0,0,0,1)),no.red=new no(new Qi(255,0,0,1)),no.blue=new no(new Qi(0,0,255,1)),no.green=new no(new Qi(0,255,0,1)),no.cyan=new no(new Qi(0,255,255,1)),no.lightgrey=new no(new Qi(211,211,211,1)),no.transparent=new no(new Qi(0,0,0,0)),function(e){let t;!function(t){let n;!function(t){function n(e){const t=e.toString(16);return 2!==t.length?"0"+t:t}function i(e){switch(e){case 48:return 0;case 49:return 1;case 50:return 2;case 51:return 3;case 52:return 4;case 53:return 5;case 54:return 6;case 55:return 7;case 56:return 8;case 57:return 9;case 97:case 65:return 10;case 98:case 66:return 11;case 99:case 67:return 12;case 100:case 68:return 13;case 101:case 69:return 14;case 102:case 70:return 15}return 0}t.formatRGB=function(t){return 1===t.rgba.a?`rgb(${t.rgba.r}, ${t.rgba.g}, ${t.rgba.b})`:e.Format.CSS.formatRGBA(t)},t.formatRGBA=function(e){return`rgba(${e.rgba.r}, ${e.rgba.g}, ${e.rgba.b}, ${+e.rgba.a.toFixed(2)})`},t.formatHSL=function(t){return 1===t.hsla.a?`hsl(${t.hsla.h}, ${(100*t.hsla.s).toFixed(2)}%, ${(100*t.hsla.l).toFixed(2)}%)`:e.Format.CSS.formatHSLA(t)},t.formatHSLA=function(e){return`hsla(${e.hsla.h}, ${(100*e.hsla.s).toFixed(2)}%, ${(100*e.hsla.l).toFixed(2)}%, ${e.hsla.a.toFixed(2)})`},t.formatHex=function(e){return`#${n(e.rgba.r)}${n(e.rgba.g)}${n(e.rgba.b)}`},t.formatHexA=function(t,i=!1){return i&&1===t.rgba.a?e.Format.CSS.formatHex(t):`#${n(t.rgba.r)}${n(t.rgba.g)}${n(t.rgba.b)}${n(Math.round(255*t.rgba.a))}`},t.format=function(t){return t.isOpaque()?e.Format.CSS.formatHex(t):e.Format.CSS.formatRGBA(t)},t.parseHex=function(t){const n=t.length;if(0===n)return null;if(35!==t.charCodeAt(0))return null;if(7===n){const n=16*i(t.charCodeAt(1))+i(t.charCodeAt(2)),o=16*i(t.charCodeAt(3))+i(t.charCodeAt(4)),a=16*i(t.charCodeAt(5))+i(t.charCodeAt(6));return new e(new Qi(n,o,a,1))}if(9===n){const n=16*i(t.charCodeAt(1))+i(t.charCodeAt(2)),o=16*i(t.charCodeAt(3))+i(t.charCodeAt(4)),a=16*i(t.charCodeAt(5))+i(t.charCodeAt(6)),r=16*i(t.charCodeAt(7))+i(t.charCodeAt(8));return new e(new Qi(n,o,a,r/255))}if(4===n){const n=i(t.charCodeAt(1)),o=i(t.charCodeAt(2)),a=i(t.charCodeAt(3));return new e(new Qi(16*n+n,16*o+o,16*a+a))}if(5===n){const n=i(t.charCodeAt(1)),o=i(t.charCodeAt(2)),a=i(t.charCodeAt(3)),r=i(t.charCodeAt(4));return new e(new Qi(16*n+n,16*o+o,16*a+a,(16*r+r)/255))}return null}}(n=t.CSS||(t.CSS={}))}(t=e.Format||(e.Format={}))}(no||(no={}));var mo=function(e,t,n,i){return new(n||(n=Promise))((function(o,a){function r(e){try{l(i.next(e))}catch(e){a(e)}}function s(e){try{l(i.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,s)}l((i=i.apply(e,t||[])).next())}))};class ho extends st{get uri(){return this._uri}get eol(){return this._eol}getValue(){return this.getText()}findMatches(e){const t=[];for(let n=0;n<this._lines.length;n++){const i=this._lines[n],o=this.offsetAt(new Je(n+1,1)),a=i.matchAll(e);for(const e of a)(e.index||0===e.index)&&(e.index=e.index+o),t.push(e)}return t}getLinesContent(){return this._lines.slice(0)}getLineCount(){return this._lines.length}getLineContent(e){return this._lines[e-1]}getWordAtPosition(e,t){const n=ct(e.column,function(e){let t=lt;if(e&&e instanceof RegExp)if(e.global)t=e;else{let n="g";e.ignoreCase&&(n+="i"),e.multiline&&(n+="m"),e.unicode&&(n+="u"),t=new RegExp(e.source,n)}return t.lastIndex=0,t}(t),this._lines[e.lineNumber-1],0);return n?new $e(e.lineNumber,n.startColumn,e.lineNumber,n.endColumn):null}words(e){const t=this._lines,n=this._wordenize.bind(this);let i=0,o="",a=0,r=[];return{*[Symbol.iterator](){for(;;)if(a<r.length){const e=o.substring(r[a].start,r[a].end);a+=1,yield e}else{if(!(i<t.length))break;o=t[i],r=n(o,e),a=0,i+=1}}}}getLineWords(e,t){const n=this._lines[e-1],i=this._wordenize(n,t),o=[];for(const e of i)o.push({word:n.substring(e.start,e.end),startColumn:e.start+1,endColumn:e.end+1});return o}_wordenize(e,t){const n=[];let i;for(t.lastIndex=0;(i=t.exec(e))&&0!==i[0].length;)n.push({start:i.index,end:i.index+i[0].length});return n}getValueInRange(e){if((e=this._validateRange(e)).startLineNumber===e.endLineNumber)return this._lines[e.startLineNumber-1].substring(e.startColumn-1,e.endColumn-1);const t=this._eol,n=e.startLineNumber-1,i=e.endLineNumber-1,o=[];o.push(this._lines[n].substring(e.startColumn-1));for(let e=n+1;e<i;e++)o.push(this._lines[e]);return o.push(this._lines[i].substring(0,e.endColumn-1)),o.join(t)}offsetAt(e){return e=this._validatePosition(e),this._ensureLineStarts(),this._lineStarts.getPrefixSum(e.lineNumber-2)+(e.column-1)}positionAt(e){e=Math.floor(e),e=Math.max(0,e),this._ensureLineStarts();const t=this._lineStarts.getIndexOf(e),n=this._lines[t.index].length;return{lineNumber:1+t.index,column:1+Math.min(t.remainder,n)}}_validateRange(e){const t=this._validatePosition({lineNumber:e.startLineNumber,column:e.startColumn}),n=this._validatePosition({lineNumber:e.endLineNumber,column:e.endColumn});return t.lineNumber!==e.startLineNumber||t.column!==e.startColumn||n.lineNumber!==e.endLineNumber||n.column!==e.endColumn?{startLineNumber:t.lineNumber,startColumn:t.column,endLineNumber:n.lineNumber,endColumn:n.column}:e}_validatePosition(e){if(!Je.isIPosition(e))throw new Error("bad position");let{lineNumber:t,column:n}=e,i=!1;if(t<1)t=1,n=1,i=!0;else if(t>this._lines.length)t=this._lines.length,n=this._lines[t-1].length+1,i=!0;else{const e=this._lines[t-1].length+1;n<1?(n=1,i=!0):n>e&&(n=e,i=!0)}return i?{lineNumber:t,column:n}:e}}class bo{constructor(e,t){this._host=e,this._models=Object.create(null),this._foreignModuleFactory=t,this._foreignModule=null}dispose(){this._models=Object.create(null)}_getModel(e){return this._models[e]}_getModels(){const e=[];return Object.keys(this._models).forEach((t=>e.push(this._models[t]))),e}acceptNewModel(e){this._models[e.url]=new ho(qe.parse(e.url),e.lines,e.EOL,e.versionId)}acceptModelChanged(e,t){if(!this._models[e])return;this._models[e].onEvents(t)}acceptRemovedModel(e){this._models[e]&&delete this._models[e]}computeUnicodeHighlights(e,t,n){return mo(this,void 0,void 0,(function*(){const i=this._getModel(e);return i?Zn.computeUnicodeHighlights(i,t,n):{ranges:[],hasMore:!1,ambiguousCharacterCount:0,invisibleCharacterCount:0,nonBasicAsciiCharacterCount:0}}))}computeDiff(e,t,n,i){return mo(this,void 0,void 0,(function*(){const o=this._getModel(e),a=this._getModel(t);return o&&a?bo.computeDiff(o,a,n,i):null}))}static computeDiff(e,t,n,i){const o="advanced"===i?Ji():Xi(),a=e.getLinesContent(),r=t.getLinesContent(),s=o.computeDiff(a,r,n);function l(e){return e.map((e=>{var t;return[e.original.startLineNumber,e.original.endLineNumberExclusive,e.modified.startLineNumber,e.modified.endLineNumberExclusive,null===(t=e.innerChanges)||void 0===t?void 0:t.map((e=>[e.originalRange.startLineNumber,e.originalRange.startColumn,e.originalRange.endLineNumber,e.originalRange.endColumn,e.modifiedRange.startLineNumber,e.modifiedRange.startColumn,e.modifiedRange.endLineNumber,e.modifiedRange.endColumn]))]}))}return{identical:!(s.changes.length>0)&&this._modelsAreIdentical(e,t),quitEarly:s.hitTimeout,changes:l(s.changes),moves:s.moves.map((e=>[e.lineRangeMapping.original.startLineNumber,e.lineRangeMapping.original.endLineNumberExclusive,e.lineRangeMapping.modified.startLineNumber,e.lineRangeMapping.modified.endLineNumberExclusive,l(e.changes)]))}}static _modelsAreIdentical(e,t){const n=e.getLineCount();if(n!==t.getLineCount())return!1;for(let i=1;i<=n;i++){if(e.getLineContent(i)!==t.getLineContent(i))return!1}return!0}computeMoreMinimalEdits(e,t,n){return mo(this,void 0,void 0,(function*(){const i=this._getModel(e);if(!i)return t;const o=[];let a;t=t.slice(0).sort(((e,t)=>{if(e.range&&t.range)return $e.compareRangesUsingStarts(e.range,t.range);return(e.range?0:1)-(t.range?0:1)}));let r=0;for(let e=1;e<t.length;e++)$e.getEndPosition(t[r].range).equals($e.getStartPosition(t[e].range))?(t[r].range=$e.fromPositions($e.getStartPosition(t[r].range),$e.getEndPosition(t[e].range)),t[r].text+=t[e].text):(r++,t[r]=t[e]);t.length=r+1;for(let{range:e,text:r,eol:s}of t){if("number"==typeof s&&(a=s),$e.isEmpty(e)&&!r)continue;const t=i.getValueInRange(e);if(r=r.replace(/\r\n|\n|\r/g,i.eol),t===r)continue;if(Math.max(r.length,t.length)>bo._diffLimit){o.push({range:e,text:r});continue}const l=he(t,r,n),d=i.offsetAt($e.lift(e).getStartPosition());for(const e of l){const t=i.positionAt(d+e.originalStart),n=i.positionAt(d+e.originalStart+e.originalLength),a={text:r.substr(e.modifiedStart,e.modifiedLength),range:{startLineNumber:t.lineNumber,startColumn:t.column,endLineNumber:n.lineNumber,endColumn:n.column}};i.getValueInRange(a.range)!==a.text&&o.push(a)}}return"number"==typeof a&&o.push({eol:a,text:"",range:{startLineNumber:0,startColumn:0,endLineNumber:0,endColumn:0}}),o}))}computeLinks(e){return mo(this,void 0,void 0,(function*(){const t=this._getModel(e);return t?function(e){return e&&"function"==typeof e.getLineCount&&"function"==typeof e.getLineContent?pt.computeLinks(e):[]}(t):null}))}computeDefaultDocumentColors(e){return mo(this,void 0,void 0,(function*(){const t=this._getModel(e);return t?uo(t):null}))}textualSuggest(e,t,n,i){return mo(this,void 0,void 0,(function*(){const o=new y,a=new RegExp(n,i),r=new Set;e:for(const n of e){const e=this._getModel(n);if(e)for(const n of e.words(a))if(n!==t&&isNaN(Number(n))&&(r.add(n),r.size>bo._suggestionsLimit))break e}return{words:Array.from(r),duration:o.elapsed()}}))}computeWordRanges(e,t,n,i){return mo(this,void 0,void 0,(function*(){const o=this._getModel(e);if(!o)return Object.create(null);const a=new RegExp(n,i),r=Object.create(null);for(let e=t.startLineNumber;e<t.endLineNumber;e++){const t=o.getLineWords(e,a);for(const n of t){if(!isNaN(Number(n.word)))continue;let t=r[n.word];t||(t=[],r[n.word]=t),t.push({startLineNumber:e,startColumn:n.startColumn,endLineNumber:e,endColumn:n.endColumn})}}return r}))}navigateValueSet(e,t,n,i,o){return mo(this,void 0,void 0,(function*(){const a=this._getModel(e);if(!a)return null;const r=new RegExp(i,o);t.startColumn===t.endColumn&&(t={startLineNumber:t.startLineNumber,startColumn:t.startColumn,endLineNumber:t.endLineNumber,endColumn:t.endColumn+1});const s=a.getValueInRange(t),l=a.getWordAtPosition({lineNumber:t.startLineNumber,column:t.startColumn},r);if(!l)return null;const d=a.getValueInRange(l);return xt.INSTANCE.navigateValueSet(t,s,l,d,n)}))}loadForeignModule(e,t,n){const i=function(e,t){const n=e=>function(){const n=Array.prototype.slice.call(arguments,0);return t(e,n)},i={};for(const t of e)i[t]=n(t);return i}(n,((e,t)=>this._host.fhr(e,t))),o={host:i,getMirrorModels:()=>this._getModels()};return this._foreignModuleFactory?(this._foreignModule=this._foreignModuleFactory(o,t),Promise.resolve(v(this._foreignModule))):Promise.reject(new Error("Unexpected usage"))}fmr(e,t){if(!this._foreignModule||"function"!=typeof this._foreignModule[e])return Promise.reject(new Error("Missing requestHandler or method: "+e));try{return Promise.resolve(this._foreignModule[e].apply(this._foreignModule,t))}catch(e){return Promise.reject(e)}}}bo._diffLimit=1e5,bo._suggestionsLimit=1e4,"function"==typeof importScripts&&(globalThis.monaco={editor:void 0,languages:void 0,CancellationTokenSource:Et,Emitter:R,KeyCode:xn,KeyMod:wn,Position:Je,Range:$e,Selection:Pt,SelectionDirection:Nn,MarkerSeverity:kn,MarkerTag:fn,Uri:qe,Token:Wt});let To=!1;function go(e){if(To)return;To=!0;const t=new oe((e=>{globalThis.postMessage(e)}),(t=>new bo(t,e)));globalThis.onmessage=e=>{t.onmessage(e.data)}}globalThis.onmessage=e=>{To||go(null)}},,function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var i=n(10).default,o=n(15);e.exports=function(e){var t=o(e,"string");return"symbol"==i(t)?t:t+""},e.exports.__esModule=!0,e.exports.default=e.exports},function(e,t,n){var i=n(10).default;e.exports=function(e,t){if("object"!=i(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,t||"default");if("object"!=i(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)},e.exports.__esModule=!0,e.exports.default=e.exports},,,function(e,t,n){var i=n(19)();e.exports=i;try{regeneratorRuntime=i}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=i:Function("r","regeneratorRuntime = r")(i)}},function(e,t,n){var i=n(10).default;function o(){"use strict";e.exports=o=function(){return n},e.exports.__esModule=!0,e.exports.default=e.exports;var t,n={},a=Object.prototype,r=a.hasOwnProperty,s=Object.defineProperty||function(e,t,n){e[t]=n.value},l="function"==typeof Symbol?Symbol:{},d=l.iterator||"@@iterator",c=l.asyncIterator||"@@asyncIterator",u=l.toStringTag||"@@toStringTag";function m(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{m({},"")}catch(t){m=function(e,t,n){return e[t]=n}}function h(e,t,n,i){var o=t&&t.prototype instanceof f?t:f,a=Object.create(o.prototype),r=new M(i||[]);return s(a,"_invoke",{value:_(e,n,r)}),a}function b(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}n.wrap=h;var T="suspendedStart",g="suspendedYield",p="executing",x="completed",k={};function f(){}function S(){}function C(){}var E={};m(E,d,(function(){return this}));var A=Object.getPrototypeOf,y=A&&A(A(v([])));y&&y!==a&&r.call(y,d)&&(E=y);var I=C.prototype=f.prototype=Object.create(E);function L(e){["next","throw","return"].forEach((function(t){m(e,t,(function(e){return this._invoke(t,e)}))}))}function O(e,t){function n(o,a,s,l){var d=b(e[o],e,a);if("throw"!==d.type){var c=d.arg,u=c.value;return u&&"object"==i(u)&&r.call(u,"__await")?t.resolve(u.__await).then((function(e){n("next",e,s,l)}),(function(e){n("throw",e,s,l)})):t.resolve(u).then((function(e){c.value=e,s(c)}),(function(e){return n("throw",e,s,l)}))}l(d.arg)}var o;s(this,"_invoke",{value:function(e,i){function a(){return new t((function(t,o){n(e,i,t,o)}))}return o=o?o.then(a,a):a()}})}function _(e,n,i){var o=T;return function(a,r){if(o===p)throw Error("Generator is already running");if(o===x){if("throw"===a)throw r;return{value:t,done:!0}}for(i.method=a,i.arg=r;;){var s=i.delegate;if(s){var l=N(s,i);if(l){if(l===k)continue;return l}}if("next"===i.method)i.sent=i._sent=i.arg;else if("throw"===i.method){if(o===T)throw o=x,i.arg;i.dispatchException(i.arg)}else"return"===i.method&&i.abrupt("return",i.arg);o=p;var d=b(e,n,i);if("normal"===d.type){if(o=i.done?x:g,d.arg===k)continue;return{value:d.arg,done:i.done}}"throw"===d.type&&(o=x,i.method="throw",i.arg=d.arg)}}}function N(e,n){var i=n.method,o=e.iterator[i];if(o===t)return n.delegate=null,"throw"===i&&e.iterator.return&&(n.method="return",n.arg=t,N(e,n),"throw"===n.method)||"return"!==i&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+i+"' method")),k;var a=b(o,e.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,k;var r=a.arg;return r?r.done?(n[e.resultName]=r.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,k):r:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,k)}function R(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function D(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function M(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(R,this),this.reset(!0)}function v(e){if(e||""===e){var n=e[d];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,a=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return a.next=a}}throw new TypeError(i(e)+" is not iterable")}return S.prototype=C,s(I,"constructor",{value:C,configurable:!0}),s(C,"constructor",{value:S,configurable:!0}),S.displayName=m(C,u,"GeneratorFunction"),n.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===S||"GeneratorFunction"===(t.displayName||t.name))},n.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,C):(e.__proto__=C,m(e,u,"GeneratorFunction")),e.prototype=Object.create(I),e},n.awrap=function(e){return{__await:e}},L(O.prototype),m(O.prototype,c,(function(){return this})),n.AsyncIterator=O,n.async=function(e,t,i,o,a){void 0===a&&(a=Promise);var r=new O(h(e,t,i,o),a);return n.isGeneratorFunction(t)?r:r.next().then((function(e){return e.done?e.value:r.next()}))},L(I),m(I,u,"Generator"),m(I,d,(function(){return this})),m(I,"toString",(function(){return"[object Generator]"})),n.keys=function(e){var t=Object(e),n=[];for(var i in t)n.push(i);return n.reverse(),function e(){for(;n.length;){var i=n.pop();if(i in t)return e.value=i,e.done=!1,e}return e.done=!0,e}},n.values=v,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(D),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function i(i,o){return s.type="throw",s.arg=e,n.next=i,o&&(n.method="next",n.arg=t),!!o}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],s=a.completion;if("root"===a.tryLoc)return i("end");if(a.tryLoc<=this.prev){var l=r.call(a,"catchLoc"),d=r.call(a,"finallyLoc");if(l&&d){if(this.prev<a.catchLoc)return i(a.catchLoc,!0);if(this.prev<a.finallyLoc)return i(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return i(a.catchLoc,!0)}else{if(!d)throw Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return i(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=e,a.arg=t,o?(this.method="next",this.next=o.finallyLoc,k):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),k},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),D(n),k}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var i=n.completion;if("throw"===i.type){var o=i.arg;D(n)}return o}}throw Error("illegal catch attempt")},delegateYield:function(e,n,i){return this.delegate={iterator:v(e),resultName:n,nextLoc:i},"next"===this.method&&(this.arg=t),k}},n}e.exports=o,e.exports.__esModule=!0,e.exports.default=e.exports},,,,,,function(e){e.exports=JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}},{"label":"org.elasticsearch.xpack.runtimefields.mapper.StringFieldScript","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.StringFieldScript","insertText":"org.elasticsearch.xpack.runtimefields.mapper.StringFieldScript","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"org.elasticsearch.xpack.runtimefields.mapper.StringFieldScript.Factory","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.StringFieldScript.Factory","insertText":"org.elasticsearch.xpack.runtimefields.mapper.StringFieldScript.Factory","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}')},function(e){e.exports=JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}},{"label":"DenseVectorScriptDocValues","kind":"class","documentation":"Class: DenseVectorScriptDocValues","insertText":"DenseVectorScriptDocValues","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"VersionScriptDocValues","kind":"class","documentation":"Class: VersionScriptDocValues","insertText":"VersionScriptDocValues","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): String","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): String","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}')},function(e){e.exports=JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}}]}')},function(e){e.exports=JSON.parse('{"suggestions":[{"label":"Appendable","kind":"class","documentation":"Class: Appendable","insertText":"Appendable","properties":[{"label":"append","kind":"method","documentation":"append(CharSequence a, int b, int c): Appendable","insertText":"append"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ArithmeticException","kind":"class","documentation":"Class: ArithmeticException","insertText":"ArithmeticException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ArithmeticException","kind":"constructor","documentation":"Constructor: ArithmeticException","insertText":"ArithmeticException"}},{"label":"ArrayIndexOutOfBoundsException","kind":"class","documentation":"Class: ArrayIndexOutOfBoundsException","insertText":"ArrayIndexOutOfBoundsException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ArrayIndexOutOfBoundsException","kind":"constructor","documentation":"Constructor: ArrayIndexOutOfBoundsException","insertText":"ArrayIndexOutOfBoundsException"}},{"label":"ArrayStoreException","kind":"class","documentation":"Class: ArrayStoreException","insertText":"ArrayStoreException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ArrayStoreException","kind":"constructor","documentation":"Constructor: ArrayStoreException","insertText":"ArrayStoreException"}},{"label":"Boolean","kind":"class","documentation":"Class: Boolean","insertText":"Boolean","properties":[{"label":"FALSE","kind":"property","documentation":"FALSE: Boolean","insertText":"FALSE"},{"label":"TRUE","kind":"property","documentation":"TRUE: Boolean","insertText":"TRUE"},{"label":"compare","kind":"method","documentation":"compare(boolean a, boolean b): int","insertText":"compare"},{"label":"hashCode","kind":"method","documentation":"hashCode(boolean a): int","insertText":"hashCode"},{"label":"logicalAnd","kind":"method","documentation":"logicalAnd(boolean a, boolean b): boolean","insertText":"logicalAnd"},{"label":"logicalOr","kind":"method","documentation":"logicalOr(boolean a, boolean b): boolean","insertText":"logicalOr"},{"label":"logicalXor","kind":"method","documentation":"logicalXor(boolean a, boolean b): boolean","insertText":"logicalXor"},{"label":"parseBoolean","kind":"method","documentation":"parseBoolean(String a): boolean","insertText":"parseBoolean"},{"label":"toString","kind":"method","documentation":"toString(boolean a): String","insertText":"toString"},{"label":"valueOf","kind":"method","documentation":"valueOf(boolean a): Boolean","insertText":"valueOf"},{"label":"booleanValue","kind":"method","documentation":"booleanValue(): boolean","insertText":"booleanValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Boolean a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Byte","kind":"class","documentation":"Class: Byte","insertText":"Byte","properties":[{"label":"BYTES","kind":"property","documentation":"BYTES: int","insertText":"BYTES"},{"label":"MAX_VALUE","kind":"property","documentation":"MAX_VALUE: byte","insertText":"MAX_VALUE"},{"label":"MIN_VALUE","kind":"property","documentation":"MIN_VALUE: byte","insertText":"MIN_VALUE"},{"label":"SIZE","kind":"property","documentation":"SIZE: int","insertText":"SIZE"},{"label":"compare","kind":"method","documentation":"compare(byte a, byte b): int","insertText":"compare"},{"label":"decode","kind":"method","documentation":"decode(String a): Byte","insertText":"decode"},{"label":"hashCode","kind":"method","documentation":"hashCode(byte a): int","insertText":"hashCode"},{"label":"parseByte","kind":"method","documentation":"parseByte(String a, int b | String a): byte","insertText":"parseByte"},{"label":"toString","kind":"method","documentation":"toString(byte a): String","insertText":"toString"},{"label":"toUnsignedInt","kind":"method","documentation":"toUnsignedInt(byte a): int","insertText":"toUnsignedInt"},{"label":"toUnsignedLong","kind":"method","documentation":"toUnsignedLong(byte a): long","insertText":"toUnsignedLong"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a, int b | byte a): Byte","insertText":"valueOf"},{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Byte a): int","insertText":"compareTo"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"CharSequence","kind":"class","documentation":"Class: CharSequence","insertText":"CharSequence","properties":[{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Character","kind":"class","documentation":"Class: Character","insertText":"Character","properties":[{"label":"BYTES","kind":"property","documentation":"BYTES: int","insertText":"BYTES"},{"label":"COMBINING_SPACING_MARK","kind":"property","documentation":"COMBINING_SPACING_MARK: byte","insertText":"COMBINING_SPACING_MARK"},{"label":"CONNECTOR_PUNCTUATION","kind":"property","documentation":"CONNECTOR_PUNCTUATION: byte","insertText":"CONNECTOR_PUNCTUATION"},{"label":"CONTROL","kind":"property","documentation":"CONTROL: byte","insertText":"CONTROL"},{"label":"CURRENCY_SYMBOL","kind":"property","documentation":"CURRENCY_SYMBOL: byte","insertText":"CURRENCY_SYMBOL"},{"label":"DASH_PUNCTUATION","kind":"property","documentation":"DASH_PUNCTUATION: byte","insertText":"DASH_PUNCTUATION"},{"label":"DECIMAL_DIGIT_NUMBER","kind":"property","documentation":"DECIMAL_DIGIT_NUMBER: byte","insertText":"DECIMAL_DIGIT_NUMBER"},{"label":"DIRECTIONALITY_ARABIC_NUMBER","kind":"property","documentation":"DIRECTIONALITY_ARABIC_NUMBER: byte","insertText":"DIRECTIONALITY_ARABIC_NUMBER"},{"label":"DIRECTIONALITY_BOUNDARY_NEUTRAL","kind":"property","documentation":"DIRECTIONALITY_BOUNDARY_NEUTRAL: byte","insertText":"DIRECTIONALITY_BOUNDARY_NEUTRAL"},{"label":"DIRECTIONALITY_COMMON_NUMBER_SEPARATOR","kind":"property","documentation":"DIRECTIONALITY_COMMON_NUMBER_SEPARATOR: byte","insertText":"DIRECTIONALITY_COMMON_NUMBER_SEPARATOR"},{"label":"DIRECTIONALITY_EUROPEAN_NUMBER","kind":"property","documentation":"DIRECTIONALITY_EUROPEAN_NUMBER: byte","insertText":"DIRECTIONALITY_EUROPEAN_NUMBER"},{"label":"DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR","kind":"property","documentation":"DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR: byte","insertText":"DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR"},{"label":"DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR","kind":"property","documentation":"DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR: byte","insertText":"DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR"},{"label":"DIRECTIONALITY_LEFT_TO_RIGHT","kind":"property","documentation":"DIRECTIONALITY_LEFT_TO_RIGHT: byte","insertText":"DIRECTIONALITY_LEFT_TO_RIGHT"},{"label":"DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING","kind":"property","documentation":"DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING: byte","insertText":"DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING"},{"label":"DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE","kind":"property","documentation":"DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE: byte","insertText":"DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE"},{"label":"DIRECTIONALITY_NONSPACING_MARK","kind":"property","documentation":"DIRECTIONALITY_NONSPACING_MARK: byte","insertText":"DIRECTIONALITY_NONSPACING_MARK"},{"label":"DIRECTIONALITY_OTHER_NEUTRALS","kind":"property","documentation":"DIRECTIONALITY_OTHER_NEUTRALS: byte","insertText":"DIRECTIONALITY_OTHER_NEUTRALS"},{"label":"DIRECTIONALITY_PARAGRAPH_SEPARATOR","kind":"property","documentation":"DIRECTIONALITY_PARAGRAPH_SEPARATOR: byte","insertText":"DIRECTIONALITY_PARAGRAPH_SEPARATOR"},{"label":"DIRECTIONALITY_POP_DIRECTIONAL_FORMAT","kind":"property","documentation":"DIRECTIONALITY_POP_DIRECTIONAL_FORMAT: byte","insertText":"DIRECTIONALITY_POP_DIRECTIONAL_FORMAT"},{"label":"DIRECTIONALITY_RIGHT_TO_LEFT","kind":"property","documentation":"DIRECTIONALITY_RIGHT_TO_LEFT: byte","insertText":"DIRECTIONALITY_RIGHT_TO_LEFT"},{"label":"DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC","kind":"property","documentation":"DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC: byte","insertText":"DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC"},{"label":"DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING","kind":"property","documentation":"DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING: byte","insertText":"DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING"},{"label":"DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE","kind":"property","documentation":"DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE: byte","insertText":"DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE"},{"label":"DIRECTIONALITY_SEGMENT_SEPARATOR","kind":"property","documentation":"DIRECTIONALITY_SEGMENT_SEPARATOR: byte","insertText":"DIRECTIONALITY_SEGMENT_SEPARATOR"},{"label":"DIRECTIONALITY_UNDEFINED","kind":"property","documentation":"DIRECTIONALITY_UNDEFINED: byte","insertText":"DIRECTIONALITY_UNDEFINED"},{"label":"DIRECTIONALITY_WHITESPACE","kind":"property","documentation":"DIRECTIONALITY_WHITESPACE: byte","insertText":"DIRECTIONALITY_WHITESPACE"},{"label":"ENCLOSING_MARK","kind":"property","documentation":"ENCLOSING_MARK: byte","insertText":"ENCLOSING_MARK"},{"label":"END_PUNCTUATION","kind":"property","documentation":"END_PUNCTUATION: byte","insertText":"END_PUNCTUATION"},{"label":"FINAL_QUOTE_PUNCTUATION","kind":"property","documentation":"FINAL_QUOTE_PUNCTUATION: byte","insertText":"FINAL_QUOTE_PUNCTUATION"},{"label":"FORMAT","kind":"property","documentation":"FORMAT: byte","insertText":"FORMAT"},{"label":"INITIAL_QUOTE_PUNCTUATION","kind":"property","documentation":"INITIAL_QUOTE_PUNCTUATION: byte","insertText":"INITIAL_QUOTE_PUNCTUATION"},{"label":"LETTER_NUMBER","kind":"property","documentation":"LETTER_NUMBER: byte","insertText":"LETTER_NUMBER"},{"label":"LINE_SEPARATOR","kind":"property","documentation":"LINE_SEPARATOR: byte","insertText":"LINE_SEPARATOR"},{"label":"LOWERCASE_LETTER","kind":"property","documentation":"LOWERCASE_LETTER: byte","insertText":"LOWERCASE_LETTER"},{"label":"MATH_SYMBOL","kind":"property","documentation":"MATH_SYMBOL: byte","insertText":"MATH_SYMBOL"},{"label":"MAX_CODE_POINT","kind":"property","documentation":"MAX_CODE_POINT: int","insertText":"MAX_CODE_POINT"},{"label":"MAX_HIGH_SURROGATE","kind":"property","documentation":"MAX_HIGH_SURROGATE: char","insertText":"MAX_HIGH_SURROGATE"},{"label":"MAX_LOW_SURROGATE","kind":"property","documentation":"MAX_LOW_SURROGATE: char","insertText":"MAX_LOW_SURROGATE"},{"label":"MAX_RADIX","kind":"property","documentation":"MAX_RADIX: int","insertText":"MAX_RADIX"},{"label":"MAX_SURROGATE","kind":"property","documentation":"MAX_SURROGATE: char","insertText":"MAX_SURROGATE"},{"label":"MAX_VALUE","kind":"property","documentation":"MAX_VALUE: char","insertText":"MAX_VALUE"},{"label":"MIN_CODE_POINT","kind":"property","documentation":"MIN_CODE_POINT: int","insertText":"MIN_CODE_POINT"},{"label":"MIN_HIGH_SURROGATE","kind":"property","documentation":"MIN_HIGH_SURROGATE: char","insertText":"MIN_HIGH_SURROGATE"},{"label":"MIN_LOW_SURROGATE","kind":"property","documentation":"MIN_LOW_SURROGATE: char","insertText":"MIN_LOW_SURROGATE"},{"label":"MIN_RADIX","kind":"property","documentation":"MIN_RADIX: int","insertText":"MIN_RADIX"},{"label":"MIN_SUPPLEMENTARY_CODE_POINT","kind":"property","documentation":"MIN_SUPPLEMENTARY_CODE_POINT: int","insertText":"MIN_SUPPLEMENTARY_CODE_POINT"},{"label":"MIN_SURROGATE","kind":"property","documentation":"MIN_SURROGATE: char","insertText":"MIN_SURROGATE"},{"label":"MIN_VALUE","kind":"property","documentation":"MIN_VALUE: char","insertText":"MIN_VALUE"},{"label":"MODIFIER_LETTER","kind":"property","documentation":"MODIFIER_LETTER: byte","insertText":"MODIFIER_LETTER"},{"label":"MODIFIER_SYMBOL","kind":"property","documentation":"MODIFIER_SYMBOL: byte","insertText":"MODIFIER_SYMBOL"},{"label":"NON_SPACING_MARK","kind":"property","documentation":"NON_SPACING_MARK: byte","insertText":"NON_SPACING_MARK"},{"label":"OTHER_LETTER","kind":"property","documentation":"OTHER_LETTER: byte","insertText":"OTHER_LETTER"},{"label":"OTHER_NUMBER","kind":"property","documentation":"OTHER_NUMBER: byte","insertText":"OTHER_NUMBER"},{"label":"OTHER_PUNCTUATION","kind":"property","documentation":"OTHER_PUNCTUATION: byte","insertText":"OTHER_PUNCTUATION"},{"label":"OTHER_SYMBOL","kind":"property","documentation":"OTHER_SYMBOL: byte","insertText":"OTHER_SYMBOL"},{"label":"PARAGRAPH_SEPARATOR","kind":"property","documentation":"PARAGRAPH_SEPARATOR: byte","insertText":"PARAGRAPH_SEPARATOR"},{"label":"PRIVATE_USE","kind":"property","documentation":"PRIVATE_USE: byte","insertText":"PRIVATE_USE"},{"label":"SIZE","kind":"property","documentation":"SIZE: int","insertText":"SIZE"},{"label":"SPACE_SEPARATOR","kind":"property","documentation":"SPACE_SEPARATOR: byte","insertText":"SPACE_SEPARATOR"},{"label":"START_PUNCTUATION","kind":"property","documentation":"START_PUNCTUATION: byte","insertText":"START_PUNCTUATION"},{"label":"SURROGATE","kind":"property","documentation":"SURROGATE: byte","insertText":"SURROGATE"},{"label":"TITLECASE_LETTER","kind":"property","documentation":"TITLECASE_LETTER: byte","insertText":"TITLECASE_LETTER"},{"label":"UNASSIGNED","kind":"property","documentation":"UNASSIGNED: byte","insertText":"UNASSIGNED"},{"label":"UPPERCASE_LETTER","kind":"property","documentation":"UPPERCASE_LETTER: byte","insertText":"UPPERCASE_LETTER"},{"label":"charCount","kind":"method","documentation":"charCount(int a): int","insertText":"charCount"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(char[] a, int b, int c | CharSequence a, int b): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(char[] a, int b, int c | CharSequence a, int b): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(CharSequence a, int b, int c): int","insertText":"codePointCount"},{"label":"compare","kind":"method","documentation":"compare(char a, char b): int","insertText":"compare"},{"label":"digit","kind":"method","documentation":"digit(int a, int b): int","insertText":"digit"},{"label":"forDigit","kind":"method","documentation":"forDigit(int a, int b): char","insertText":"forDigit"},{"label":"getDirectionality","kind":"method","documentation":"getDirectionality(int a): byte","insertText":"getDirectionality"},{"label":"getName","kind":"method","documentation":"getName(int a): String","insertText":"getName"},{"label":"getNumericValue","kind":"method","documentation":"getNumericValue(int a): int","insertText":"getNumericValue"},{"label":"getType","kind":"method","documentation":"getType(int a): int","insertText":"getType"},{"label":"hashCode","kind":"method","documentation":"hashCode(char a): int","insertText":"hashCode"},{"label":"highSurrogate","kind":"method","documentation":"highSurrogate(int a): char","insertText":"highSurrogate"},{"label":"isAlphabetic","kind":"method","documentation":"isAlphabetic(int a): boolean","insertText":"isAlphabetic"},{"label":"isBmpCodePoint","kind":"method","documentation":"isBmpCodePoint(int a): boolean","insertText":"isBmpCodePoint"},{"label":"isDefined","kind":"method","documentation":"isDefined(int a): boolean","insertText":"isDefined"},{"label":"isDigit","kind":"method","documentation":"isDigit(int a): boolean","insertText":"isDigit"},{"label":"isHighSurrogate","kind":"method","documentation":"isHighSurrogate(char a): boolean","insertText":"isHighSurrogate"},{"label":"isISOControl","kind":"method","documentation":"isISOControl(int a): boolean","insertText":"isISOControl"},{"label":"isIdentifierIgnorable","kind":"method","documentation":"isIdentifierIgnorable(int a): boolean","insertText":"isIdentifierIgnorable"},{"label":"isIdeographic","kind":"method","documentation":"isIdeographic(int a): boolean","insertText":"isIdeographic"},{"label":"isJavaIdentifierPart","kind":"method","documentation":"isJavaIdentifierPart(int a): boolean","insertText":"isJavaIdentifierPart"},{"label":"isJavaIdentifierStart","kind":"method","documentation":"isJavaIdentifierStart(int a): boolean","insertText":"isJavaIdentifierStart"},{"label":"isLetter","kind":"method","documentation":"isLetter(int a): boolean","insertText":"isLetter"},{"label":"isLetterOrDigit","kind":"method","documentation":"isLetterOrDigit(int a): boolean","insertText":"isLetterOrDigit"},{"label":"isLowerCase","kind":"method","documentation":"isLowerCase(int a): boolean","insertText":"isLowerCase"},{"label":"isMirrored","kind":"method","documentation":"isMirrored(int a): boolean","insertText":"isMirrored"},{"label":"isSpaceChar","kind":"method","documentation":"isSpaceChar(int a): boolean","insertText":"isSpaceChar"},{"label":"isSupplementaryCodePoint","kind":"method","documentation":"isSupplementaryCodePoint(int a): boolean","insertText":"isSupplementaryCodePoint"},{"label":"isSurrogate","kind":"method","documentation":"isSurrogate(char a): boolean","insertText":"isSurrogate"},{"label":"isSurrogatePair","kind":"method","documentation":"isSurrogatePair(char a, char b): boolean","insertText":"isSurrogatePair"},{"label":"isTitleCase","kind":"method","documentation":"isTitleCase(int a): boolean","insertText":"isTitleCase"},{"label":"isUnicodeIdentifierPart","kind":"method","documentation":"isUnicodeIdentifierPart(int a): boolean","insertText":"isUnicodeIdentifierPart"},{"label":"isUnicodeIdentifierStart","kind":"method","documentation":"isUnicodeIdentifierStart(int a): boolean","insertText":"isUnicodeIdentifierStart"},{"label":"isUpperCase","kind":"method","documentation":"isUpperCase(int a): boolean","insertText":"isUpperCase"},{"label":"isValidCodePoint","kind":"method","documentation":"isValidCodePoint(int a): boolean","insertText":"isValidCodePoint"},{"label":"isWhitespace","kind":"method","documentation":"isWhitespace(int a): boolean","insertText":"isWhitespace"},{"label":"lowSurrogate","kind":"method","documentation":"lowSurrogate(int a): char","insertText":"lowSurrogate"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(char[] a, int b, int c, int d, int e | CharSequence a, int b, int c): int","insertText":"offsetByCodePoints"},{"label":"reverseBytes","kind":"method","documentation":"reverseBytes(char a): char","insertText":"reverseBytes"},{"label":"toChars","kind":"method","documentation":"toChars(int a, char[] b, int c | int a): int | char[]","insertText":"toChars"},{"label":"toCodePoint","kind":"method","documentation":"toCodePoint(char a, char b): int","insertText":"toCodePoint"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(char a): char","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(char a): String","insertText":"toString"},{"label":"toTitleCase","kind":"method","documentation":"toTitleCase(char a): char","insertText":"toTitleCase"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(char a): char","insertText":"toUpperCase"},{"label":"valueOf","kind":"method","documentation":"valueOf(char a): Character","insertText":"valueOf"},{"label":"charValue","kind":"method","documentation":"charValue(): char","insertText":"charValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Character a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Subset","kind":"class","documentation":"Class: Subset","insertText":"Subset","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"UnicodeBlock","kind":"class","documentation":"Class: UnicodeBlock","insertText":"UnicodeBlock","properties":[{"label":"AEGEAN_NUMBERS","kind":"property","documentation":"AEGEAN_NUMBERS: Character.UnicodeBlock","insertText":"AEGEAN_NUMBERS"},{"label":"ALCHEMICAL_SYMBOLS","kind":"property","documentation":"ALCHEMICAL_SYMBOLS: Character.UnicodeBlock","insertText":"ALCHEMICAL_SYMBOLS"},{"label":"ALPHABETIC_PRESENTATION_FORMS","kind":"property","documentation":"ALPHABETIC_PRESENTATION_FORMS: Character.UnicodeBlock","insertText":"ALPHABETIC_PRESENTATION_FORMS"},{"label":"ANCIENT_GREEK_MUSICAL_NOTATION","kind":"property","documentation":"ANCIENT_GREEK_MUSICAL_NOTATION: Character.UnicodeBlock","insertText":"ANCIENT_GREEK_MUSICAL_NOTATION"},{"label":"ANCIENT_GREEK_NUMBERS","kind":"property","documentation":"ANCIENT_GREEK_NUMBERS: Character.UnicodeBlock","insertText":"ANCIENT_GREEK_NUMBERS"},{"label":"ANCIENT_SYMBOLS","kind":"property","documentation":"ANCIENT_SYMBOLS: Character.UnicodeBlock","insertText":"ANCIENT_SYMBOLS"},{"label":"ARABIC","kind":"property","documentation":"ARABIC: Character.UnicodeBlock","insertText":"ARABIC"},{"label":"ARABIC_EXTENDED_A","kind":"property","documentation":"ARABIC_EXTENDED_A: Character.UnicodeBlock","insertText":"ARABIC_EXTENDED_A"},{"label":"ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS","kind":"property","documentation":"ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS: Character.UnicodeBlock","insertText":"ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS"},{"label":"ARABIC_PRESENTATION_FORMS_A","kind":"property","documentation":"ARABIC_PRESENTATION_FORMS_A: Character.UnicodeBlock","insertText":"ARABIC_PRESENTATION_FORMS_A"},{"label":"ARABIC_PRESENTATION_FORMS_B","kind":"property","documentation":"ARABIC_PRESENTATION_FORMS_B: Character.UnicodeBlock","insertText":"ARABIC_PRESENTATION_FORMS_B"},{"label":"ARABIC_SUPPLEMENT","kind":"property","documentation":"ARABIC_SUPPLEMENT: Character.UnicodeBlock","insertText":"ARABIC_SUPPLEMENT"},{"label":"ARMENIAN","kind":"property","documentation":"ARMENIAN: Character.UnicodeBlock","insertText":"ARMENIAN"},{"label":"ARROWS","kind":"property","documentation":"ARROWS: Character.UnicodeBlock","insertText":"ARROWS"},{"label":"AVESTAN","kind":"property","documentation":"AVESTAN: Character.UnicodeBlock","insertText":"AVESTAN"},{"label":"BALINESE","kind":"property","documentation":"BALINESE: Character.UnicodeBlock","insertText":"BALINESE"},{"label":"BAMUM","kind":"property","documentation":"BAMUM: Character.UnicodeBlock","insertText":"BAMUM"},{"label":"BAMUM_SUPPLEMENT","kind":"property","documentation":"BAMUM_SUPPLEMENT: Character.UnicodeBlock","insertText":"BAMUM_SUPPLEMENT"},{"label":"BASIC_LATIN","kind":"property","documentation":"BASIC_LATIN: Character.UnicodeBlock","insertText":"BASIC_LATIN"},{"label":"BATAK","kind":"property","documentation":"BATAK: Character.UnicodeBlock","insertText":"BATAK"},{"label":"BENGALI","kind":"property","documentation":"BENGALI: Character.UnicodeBlock","insertText":"BENGALI"},{"label":"BLOCK_ELEMENTS","kind":"property","documentation":"BLOCK_ELEMENTS: Character.UnicodeBlock","insertText":"BLOCK_ELEMENTS"},{"label":"BOPOMOFO","kind":"property","documentation":"BOPOMOFO: Character.UnicodeBlock","insertText":"BOPOMOFO"},{"label":"BOPOMOFO_EXTENDED","kind":"property","documentation":"BOPOMOFO_EXTENDED: Character.UnicodeBlock","insertText":"BOPOMOFO_EXTENDED"},{"label":"BOX_DRAWING","kind":"property","documentation":"BOX_DRAWING: Character.UnicodeBlock","insertText":"BOX_DRAWING"},{"label":"BRAHMI","kind":"property","documentation":"BRAHMI: Character.UnicodeBlock","insertText":"BRAHMI"},{"label":"BRAILLE_PATTERNS","kind":"property","documentation":"BRAILLE_PATTERNS: Character.UnicodeBlock","insertText":"BRAILLE_PATTERNS"},{"label":"BUGINESE","kind":"property","documentation":"BUGINESE: Character.UnicodeBlock","insertText":"BUGINESE"},{"label":"BUHID","kind":"property","documentation":"BUHID: Character.UnicodeBlock","insertText":"BUHID"},{"label":"BYZANTINE_MUSICAL_SYMBOLS","kind":"property","documentation":"BYZANTINE_MUSICAL_SYMBOLS: Character.UnicodeBlock","insertText":"BYZANTINE_MUSICAL_SYMBOLS"},{"label":"CARIAN","kind":"property","documentation":"CARIAN: Character.UnicodeBlock","insertText":"CARIAN"},{"label":"CHAKMA","kind":"property","documentation":"CHAKMA: Character.UnicodeBlock","insertText":"CHAKMA"},{"label":"CHAM","kind":"property","documentation":"CHAM: Character.UnicodeBlock","insertText":"CHAM"},{"label":"CHEROKEE","kind":"property","documentation":"CHEROKEE: Character.UnicodeBlock","insertText":"CHEROKEE"},{"label":"CJK_COMPATIBILITY","kind":"property","documentation":"CJK_COMPATIBILITY: Character.UnicodeBlock","insertText":"CJK_COMPATIBILITY"},{"label":"CJK_COMPATIBILITY_FORMS","kind":"property","documentation":"CJK_COMPATIBILITY_FORMS: Character.UnicodeBlock","insertText":"CJK_COMPATIBILITY_FORMS"},{"label":"CJK_COMPATIBILITY_IDEOGRAPHS","kind":"property","documentation":"CJK_COMPATIBILITY_IDEOGRAPHS: Character.UnicodeBlock","insertText":"CJK_COMPATIBILITY_IDEOGRAPHS"},{"label":"CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT","kind":"property","documentation":"CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT: Character.UnicodeBlock","insertText":"CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT"},{"label":"CJK_RADICALS_SUPPLEMENT","kind":"property","documentation":"CJK_RADICALS_SUPPLEMENT: Character.UnicodeBlock","insertText":"CJK_RADICALS_SUPPLEMENT"},{"label":"CJK_STROKES","kind":"property","documentation":"CJK_STROKES: Character.UnicodeBlock","insertText":"CJK_STROKES"},{"label":"CJK_SYMBOLS_AND_PUNCTUATION","kind":"property","documentation":"CJK_SYMBOLS_AND_PUNCTUATION: Character.UnicodeBlock","insertText":"CJK_SYMBOLS_AND_PUNCTUATION"},{"label":"CJK_UNIFIED_IDEOGRAPHS","kind":"property","documentation":"CJK_UNIFIED_IDEOGRAPHS: Character.UnicodeBlock","insertText":"CJK_UNIFIED_IDEOGRAPHS"},{"label":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A","kind":"property","documentation":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A: Character.UnicodeBlock","insertText":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A"},{"label":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B","kind":"property","documentation":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B: Character.UnicodeBlock","insertText":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B"},{"label":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C","kind":"property","documentation":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C: Character.UnicodeBlock","insertText":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C"},{"label":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D","kind":"property","documentation":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D: Character.UnicodeBlock","insertText":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D"},{"label":"COMBINING_DIACRITICAL_MARKS","kind":"property","documentation":"COMBINING_DIACRITICAL_MARKS: Character.UnicodeBlock","insertText":"COMBINING_DIACRITICAL_MARKS"},{"label":"COMBINING_DIACRITICAL_MARKS_SUPPLEMENT","kind":"property","documentation":"COMBINING_DIACRITICAL_MARKS_SUPPLEMENT: Character.UnicodeBlock","insertText":"COMBINING_DIACRITICAL_MARKS_SUPPLEMENT"},{"label":"COMBINING_HALF_MARKS","kind":"property","documentation":"COMBINING_HALF_MARKS: Character.UnicodeBlock","insertText":"COMBINING_HALF_MARKS"},{"label":"COMBINING_MARKS_FOR_SYMBOLS","kind":"property","documentation":"COMBINING_MARKS_FOR_SYMBOLS: Character.UnicodeBlock","insertText":"COMBINING_MARKS_FOR_SYMBOLS"},{"label":"COMMON_INDIC_NUMBER_FORMS","kind":"property","documentation":"COMMON_INDIC_NUMBER_FORMS: Character.UnicodeBlock","insertText":"COMMON_INDIC_NUMBER_FORMS"},{"label":"CONTROL_PICTURES","kind":"property","documentation":"CONTROL_PICTURES: Character.UnicodeBlock","insertText":"CONTROL_PICTURES"},{"label":"COPTIC","kind":"property","documentation":"COPTIC: Character.UnicodeBlock","insertText":"COPTIC"},{"label":"COUNTING_ROD_NUMERALS","kind":"property","documentation":"COUNTING_ROD_NUMERALS: Character.UnicodeBlock","insertText":"COUNTING_ROD_NUMERALS"},{"label":"CUNEIFORM","kind":"property","documentation":"CUNEIFORM: Character.UnicodeBlock","insertText":"CUNEIFORM"},{"label":"CUNEIFORM_NUMBERS_AND_PUNCTUATION","kind":"property","documentation":"CUNEIFORM_NUMBERS_AND_PUNCTUATION: Character.UnicodeBlock","insertText":"CUNEIFORM_NUMBERS_AND_PUNCTUATION"},{"label":"CURRENCY_SYMBOLS","kind":"property","documentation":"CURRENCY_SYMBOLS: Character.UnicodeBlock","insertText":"CURRENCY_SYMBOLS"},{"label":"CYPRIOT_SYLLABARY","kind":"property","documentation":"CYPRIOT_SYLLABARY: Character.UnicodeBlock","insertText":"CYPRIOT_SYLLABARY"},{"label":"CYRILLIC","kind":"property","documentation":"CYRILLIC: Character.UnicodeBlock","insertText":"CYRILLIC"},{"label":"CYRILLIC_EXTENDED_A","kind":"property","documentation":"CYRILLIC_EXTENDED_A: Character.UnicodeBlock","insertText":"CYRILLIC_EXTENDED_A"},{"label":"CYRILLIC_EXTENDED_B","kind":"property","documentation":"CYRILLIC_EXTENDED_B: Character.UnicodeBlock","insertText":"CYRILLIC_EXTENDED_B"},{"label":"CYRILLIC_SUPPLEMENTARY","kind":"property","documentation":"CYRILLIC_SUPPLEMENTARY: Character.UnicodeBlock","insertText":"CYRILLIC_SUPPLEMENTARY"},{"label":"DESERET","kind":"property","documentation":"DESERET: Character.UnicodeBlock","insertText":"DESERET"},{"label":"DEVANAGARI","kind":"property","documentation":"DEVANAGARI: Character.UnicodeBlock","insertText":"DEVANAGARI"},{"label":"DEVANAGARI_EXTENDED","kind":"property","documentation":"DEVANAGARI_EXTENDED: Character.UnicodeBlock","insertText":"DEVANAGARI_EXTENDED"},{"label":"DINGBATS","kind":"property","documentation":"DINGBATS: Character.UnicodeBlock","insertText":"DINGBATS"},{"label":"DOMINO_TILES","kind":"property","documentation":"DOMINO_TILES: Character.UnicodeBlock","insertText":"DOMINO_TILES"},{"label":"EGYPTIAN_HIEROGLYPHS","kind":"property","documentation":"EGYPTIAN_HIEROGLYPHS: Character.UnicodeBlock","insertText":"EGYPTIAN_HIEROGLYPHS"},{"label":"EMOTICONS","kind":"property","documentation":"EMOTICONS: Character.UnicodeBlock","insertText":"EMOTICONS"},{"label":"ENCLOSED_ALPHANUMERICS","kind":"property","documentation":"ENCLOSED_ALPHANUMERICS: Character.UnicodeBlock","insertText":"ENCLOSED_ALPHANUMERICS"},{"label":"ENCLOSED_ALPHANUMERIC_SUPPLEMENT","kind":"property","documentation":"ENCLOSED_ALPHANUMERIC_SUPPLEMENT: Character.UnicodeBlock","insertText":"ENCLOSED_ALPHANUMERIC_SUPPLEMENT"},{"label":"ENCLOSED_CJK_LETTERS_AND_MONTHS","kind":"property","documentation":"ENCLOSED_CJK_LETTERS_AND_MONTHS: Character.UnicodeBlock","insertText":"ENCLOSED_CJK_LETTERS_AND_MONTHS"},{"label":"ENCLOSED_IDEOGRAPHIC_SUPPLEMENT","kind":"property","documentation":"ENCLOSED_IDEOGRAPHIC_SUPPLEMENT: Character.UnicodeBlock","insertText":"ENCLOSED_IDEOGRAPHIC_SUPPLEMENT"},{"label":"ETHIOPIC","kind":"property","documentation":"ETHIOPIC: Character.UnicodeBlock","insertText":"ETHIOPIC"},{"label":"ETHIOPIC_EXTENDED","kind":"property","documentation":"ETHIOPIC_EXTENDED: Character.UnicodeBlock","insertText":"ETHIOPIC_EXTENDED"},{"label":"ETHIOPIC_EXTENDED_A","kind":"property","documentation":"ETHIOPIC_EXTENDED_A: Character.UnicodeBlock","insertText":"ETHIOPIC_EXTENDED_A"},{"label":"ETHIOPIC_SUPPLEMENT","kind":"property","documentation":"ETHIOPIC_SUPPLEMENT: Character.UnicodeBlock","insertText":"ETHIOPIC_SUPPLEMENT"},{"label":"GENERAL_PUNCTUATION","kind":"property","documentation":"GENERAL_PUNCTUATION: Character.UnicodeBlock","insertText":"GENERAL_PUNCTUATION"},{"label":"GEOMETRIC_SHAPES","kind":"property","documentation":"GEOMETRIC_SHAPES: Character.UnicodeBlock","insertText":"GEOMETRIC_SHAPES"},{"label":"GEORGIAN","kind":"property","documentation":"GEORGIAN: Character.UnicodeBlock","insertText":"GEORGIAN"},{"label":"GEORGIAN_SUPPLEMENT","kind":"property","documentation":"GEORGIAN_SUPPLEMENT: Character.UnicodeBlock","insertText":"GEORGIAN_SUPPLEMENT"},{"label":"GLAGOLITIC","kind":"property","documentation":"GLAGOLITIC: Character.UnicodeBlock","insertText":"GLAGOLITIC"},{"label":"GOTHIC","kind":"property","documentation":"GOTHIC: Character.UnicodeBlock","insertText":"GOTHIC"},{"label":"GREEK","kind":"property","documentation":"GREEK: Character.UnicodeBlock","insertText":"GREEK"},{"label":"GREEK_EXTENDED","kind":"property","documentation":"GREEK_EXTENDED: Character.UnicodeBlock","insertText":"GREEK_EXTENDED"},{"label":"GUJARATI","kind":"property","documentation":"GUJARATI: Character.UnicodeBlock","insertText":"GUJARATI"},{"label":"GURMUKHI","kind":"property","documentation":"GURMUKHI: Character.UnicodeBlock","insertText":"GURMUKHI"},{"label":"HALFWIDTH_AND_FULLWIDTH_FORMS","kind":"property","documentation":"HALFWIDTH_AND_FULLWIDTH_FORMS: Character.UnicodeBlock","insertText":"HALFWIDTH_AND_FULLWIDTH_FORMS"},{"label":"HANGUL_COMPATIBILITY_JAMO","kind":"property","documentation":"HANGUL_COMPATIBILITY_JAMO: Character.UnicodeBlock","insertText":"HANGUL_COMPATIBILITY_JAMO"},{"label":"HANGUL_JAMO","kind":"property","documentation":"HANGUL_JAMO: Character.UnicodeBlock","insertText":"HANGUL_JAMO"},{"label":"HANGUL_JAMO_EXTENDED_A","kind":"property","documentation":"HANGUL_JAMO_EXTENDED_A: Character.UnicodeBlock","insertText":"HANGUL_JAMO_EXTENDED_A"},{"label":"HANGUL_JAMO_EXTENDED_B","kind":"property","documentation":"HANGUL_JAMO_EXTENDED_B: Character.UnicodeBlock","insertText":"HANGUL_JAMO_EXTENDED_B"},{"label":"HANGUL_SYLLABLES","kind":"property","documentation":"HANGUL_SYLLABLES: Character.UnicodeBlock","insertText":"HANGUL_SYLLABLES"},{"label":"HANUNOO","kind":"property","documentation":"HANUNOO: Character.UnicodeBlock","insertText":"HANUNOO"},{"label":"HEBREW","kind":"property","documentation":"HEBREW: Character.UnicodeBlock","insertText":"HEBREW"},{"label":"HIGH_PRIVATE_USE_SURROGATES","kind":"property","documentation":"HIGH_PRIVATE_USE_SURROGATES: Character.UnicodeBlock","insertText":"HIGH_PRIVATE_USE_SURROGATES"},{"label":"HIGH_SURROGATES","kind":"property","documentation":"HIGH_SURROGATES: Character.UnicodeBlock","insertText":"HIGH_SURROGATES"},{"label":"HIRAGANA","kind":"property","documentation":"HIRAGANA: Character.UnicodeBlock","insertText":"HIRAGANA"},{"label":"IDEOGRAPHIC_DESCRIPTION_CHARACTERS","kind":"property","documentation":"IDEOGRAPHIC_DESCRIPTION_CHARACTERS: Character.UnicodeBlock","insertText":"IDEOGRAPHIC_DESCRIPTION_CHARACTERS"},{"label":"IMPERIAL_ARAMAIC","kind":"property","documentation":"IMPERIAL_ARAMAIC: Character.UnicodeBlock","insertText":"IMPERIAL_ARAMAIC"},{"label":"INSCRIPTIONAL_PAHLAVI","kind":"property","documentation":"INSCRIPTIONAL_PAHLAVI: Character.UnicodeBlock","insertText":"INSCRIPTIONAL_PAHLAVI"},{"label":"INSCRIPTIONAL_PARTHIAN","kind":"property","documentation":"INSCRIPTIONAL_PARTHIAN: Character.UnicodeBlock","insertText":"INSCRIPTIONAL_PARTHIAN"},{"label":"IPA_EXTENSIONS","kind":"property","documentation":"IPA_EXTENSIONS: Character.UnicodeBlock","insertText":"IPA_EXTENSIONS"},{"label":"JAVANESE","kind":"property","documentation":"JAVANESE: Character.UnicodeBlock","insertText":"JAVANESE"},{"label":"KAITHI","kind":"property","documentation":"KAITHI: Character.UnicodeBlock","insertText":"KAITHI"},{"label":"KANA_SUPPLEMENT","kind":"property","documentation":"KANA_SUPPLEMENT: Character.UnicodeBlock","insertText":"KANA_SUPPLEMENT"},{"label":"KANBUN","kind":"property","documentation":"KANBUN: Character.UnicodeBlock","insertText":"KANBUN"},{"label":"KANGXI_RADICALS","kind":"property","documentation":"KANGXI_RADICALS: Character.UnicodeBlock","insertText":"KANGXI_RADICALS"},{"label":"KANNADA","kind":"property","documentation":"KANNADA: Character.UnicodeBlock","insertText":"KANNADA"},{"label":"KATAKANA","kind":"property","documentation":"KATAKANA: Character.UnicodeBlock","insertText":"KATAKANA"},{"label":"KATAKANA_PHONETIC_EXTENSIONS","kind":"property","documentation":"KATAKANA_PHONETIC_EXTENSIONS: Character.UnicodeBlock","insertText":"KATAKANA_PHONETIC_EXTENSIONS"},{"label":"KAYAH_LI","kind":"property","documentation":"KAYAH_LI: Character.UnicodeBlock","insertText":"KAYAH_LI"},{"label":"KHAROSHTHI","kind":"property","documentation":"KHAROSHTHI: Character.UnicodeBlock","insertText":"KHAROSHTHI"},{"label":"KHMER","kind":"property","documentation":"KHMER: Character.UnicodeBlock","insertText":"KHMER"},{"label":"KHMER_SYMBOLS","kind":"property","documentation":"KHMER_SYMBOLS: Character.UnicodeBlock","insertText":"KHMER_SYMBOLS"},{"label":"LAO","kind":"property","documentation":"LAO: Character.UnicodeBlock","insertText":"LAO"},{"label":"LATIN_1_SUPPLEMENT","kind":"property","documentation":"LATIN_1_SUPPLEMENT: Character.UnicodeBlock","insertText":"LATIN_1_SUPPLEMENT"},{"label":"LATIN_EXTENDED_A","kind":"property","documentation":"LATIN_EXTENDED_A: Character.UnicodeBlock","insertText":"LATIN_EXTENDED_A"},{"label":"LATIN_EXTENDED_ADDITIONAL","kind":"property","documentation":"LATIN_EXTENDED_ADDITIONAL: Character.UnicodeBlock","insertText":"LATIN_EXTENDED_ADDITIONAL"},{"label":"LATIN_EXTENDED_B","kind":"property","documentation":"LATIN_EXTENDED_B: Character.UnicodeBlock","insertText":"LATIN_EXTENDED_B"},{"label":"LATIN_EXTENDED_C","kind":"property","documentation":"LATIN_EXTENDED_C: Character.UnicodeBlock","insertText":"LATIN_EXTENDED_C"},{"label":"LATIN_EXTENDED_D","kind":"property","documentation":"LATIN_EXTENDED_D: Character.UnicodeBlock","insertText":"LATIN_EXTENDED_D"},{"label":"LEPCHA","kind":"property","documentation":"LEPCHA: Character.UnicodeBlock","insertText":"LEPCHA"},{"label":"LETTERLIKE_SYMBOLS","kind":"property","documentation":"LETTERLIKE_SYMBOLS: Character.UnicodeBlock","insertText":"LETTERLIKE_SYMBOLS"},{"label":"LIMBU","kind":"property","documentation":"LIMBU: Character.UnicodeBlock","insertText":"LIMBU"},{"label":"LINEAR_B_IDEOGRAMS","kind":"property","documentation":"LINEAR_B_IDEOGRAMS: Character.UnicodeBlock","insertText":"LINEAR_B_IDEOGRAMS"},{"label":"LINEAR_B_SYLLABARY","kind":"property","documentation":"LINEAR_B_SYLLABARY: Character.UnicodeBlock","insertText":"LINEAR_B_SYLLABARY"},{"label":"LISU","kind":"property","documentation":"LISU: Character.UnicodeBlock","insertText":"LISU"},{"label":"LOW_SURROGATES","kind":"property","documentation":"LOW_SURROGATES: Character.UnicodeBlock","insertText":"LOW_SURROGATES"},{"label":"LYCIAN","kind":"property","documentation":"LYCIAN: Character.UnicodeBlock","insertText":"LYCIAN"},{"label":"LYDIAN","kind":"property","documentation":"LYDIAN: Character.UnicodeBlock","insertText":"LYDIAN"},{"label":"MAHJONG_TILES","kind":"property","documentation":"MAHJONG_TILES: Character.UnicodeBlock","insertText":"MAHJONG_TILES"},{"label":"MALAYALAM","kind":"property","documentation":"MALAYALAM: Character.UnicodeBlock","insertText":"MALAYALAM"},{"label":"MANDAIC","kind":"property","documentation":"MANDAIC: Character.UnicodeBlock","insertText":"MANDAIC"},{"label":"MATHEMATICAL_ALPHANUMERIC_SYMBOLS","kind":"property","documentation":"MATHEMATICAL_ALPHANUMERIC_SYMBOLS: Character.UnicodeBlock","insertText":"MATHEMATICAL_ALPHANUMERIC_SYMBOLS"},{"label":"MATHEMATICAL_OPERATORS","kind":"property","documentation":"MATHEMATICAL_OPERATORS: Character.UnicodeBlock","insertText":"MATHEMATICAL_OPERATORS"},{"label":"MEETEI_MAYEK","kind":"property","documentation":"MEETEI_MAYEK: Character.UnicodeBlock","insertText":"MEETEI_MAYEK"},{"label":"MEETEI_MAYEK_EXTENSIONS","kind":"property","documentation":"MEETEI_MAYEK_EXTENSIONS: Character.UnicodeBlock","insertText":"MEETEI_MAYEK_EXTENSIONS"},{"label":"MEROITIC_CURSIVE","kind":"property","documentation":"MEROITIC_CURSIVE: Character.UnicodeBlock","insertText":"MEROITIC_CURSIVE"},{"label":"MEROITIC_HIEROGLYPHS","kind":"property","documentation":"MEROITIC_HIEROGLYPHS: Character.UnicodeBlock","insertText":"MEROITIC_HIEROGLYPHS"},{"label":"MIAO","kind":"property","documentation":"MIAO: Character.UnicodeBlock","insertText":"MIAO"},{"label":"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A","kind":"property","documentation":"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A: Character.UnicodeBlock","insertText":"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A"},{"label":"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B","kind":"property","documentation":"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B: Character.UnicodeBlock","insertText":"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B"},{"label":"MISCELLANEOUS_SYMBOLS","kind":"property","documentation":"MISCELLANEOUS_SYMBOLS: Character.UnicodeBlock","insertText":"MISCELLANEOUS_SYMBOLS"},{"label":"MISCELLANEOUS_SYMBOLS_AND_ARROWS","kind":"property","documentation":"MISCELLANEOUS_SYMBOLS_AND_ARROWS: Character.UnicodeBlock","insertText":"MISCELLANEOUS_SYMBOLS_AND_ARROWS"},{"label":"MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS","kind":"property","documentation":"MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS: Character.UnicodeBlock","insertText":"MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS"},{"label":"MISCELLANEOUS_TECHNICAL","kind":"property","documentation":"MISCELLANEOUS_TECHNICAL: Character.UnicodeBlock","insertText":"MISCELLANEOUS_TECHNICAL"},{"label":"MODIFIER_TONE_LETTERS","kind":"property","documentation":"MODIFIER_TONE_LETTERS: Character.UnicodeBlock","insertText":"MODIFIER_TONE_LETTERS"},{"label":"MONGOLIAN","kind":"property","documentation":"MONGOLIAN: Character.UnicodeBlock","insertText":"MONGOLIAN"},{"label":"MUSICAL_SYMBOLS","kind":"property","documentation":"MUSICAL_SYMBOLS: Character.UnicodeBlock","insertText":"MUSICAL_SYMBOLS"},{"label":"MYANMAR","kind":"property","documentation":"MYANMAR: Character.UnicodeBlock","insertText":"MYANMAR"},{"label":"MYANMAR_EXTENDED_A","kind":"property","documentation":"MYANMAR_EXTENDED_A: Character.UnicodeBlock","insertText":"MYANMAR_EXTENDED_A"},{"label":"NEW_TAI_LUE","kind":"property","documentation":"NEW_TAI_LUE: Character.UnicodeBlock","insertText":"NEW_TAI_LUE"},{"label":"NKO","kind":"property","documentation":"NKO: Character.UnicodeBlock","insertText":"NKO"},{"label":"NUMBER_FORMS","kind":"property","documentation":"NUMBER_FORMS: Character.UnicodeBlock","insertText":"NUMBER_FORMS"},{"label":"OGHAM","kind":"property","documentation":"OGHAM: Character.UnicodeBlock","insertText":"OGHAM"},{"label":"OLD_ITALIC","kind":"property","documentation":"OLD_ITALIC: Character.UnicodeBlock","insertText":"OLD_ITALIC"},{"label":"OLD_PERSIAN","kind":"property","documentation":"OLD_PERSIAN: Character.UnicodeBlock","insertText":"OLD_PERSIAN"},{"label":"OLD_SOUTH_ARABIAN","kind":"property","documentation":"OLD_SOUTH_ARABIAN: Character.UnicodeBlock","insertText":"OLD_SOUTH_ARABIAN"},{"label":"OLD_TURKIC","kind":"property","documentation":"OLD_TURKIC: Character.UnicodeBlock","insertText":"OLD_TURKIC"},{"label":"OL_CHIKI","kind":"property","documentation":"OL_CHIKI: Character.UnicodeBlock","insertText":"OL_CHIKI"},{"label":"OPTICAL_CHARACTER_RECOGNITION","kind":"property","documentation":"OPTICAL_CHARACTER_RECOGNITION: Character.UnicodeBlock","insertText":"OPTICAL_CHARACTER_RECOGNITION"},{"label":"ORIYA","kind":"property","documentation":"ORIYA: Character.UnicodeBlock","insertText":"ORIYA"},{"label":"OSMANYA","kind":"property","documentation":"OSMANYA: Character.UnicodeBlock","insertText":"OSMANYA"},{"label":"PHAGS_PA","kind":"property","documentation":"PHAGS_PA: Character.UnicodeBlock","insertText":"PHAGS_PA"},{"label":"PHAISTOS_DISC","kind":"property","documentation":"PHAISTOS_DISC: Character.UnicodeBlock","insertText":"PHAISTOS_DISC"},{"label":"PHOENICIAN","kind":"property","documentation":"PHOENICIAN: Character.UnicodeBlock","insertText":"PHOENICIAN"},{"label":"PHONETIC_EXTENSIONS","kind":"property","documentation":"PHONETIC_EXTENSIONS: Character.UnicodeBlock","insertText":"PHONETIC_EXTENSIONS"},{"label":"PHONETIC_EXTENSIONS_SUPPLEMENT","kind":"property","documentation":"PHONETIC_EXTENSIONS_SUPPLEMENT: Character.UnicodeBlock","insertText":"PHONETIC_EXTENSIONS_SUPPLEMENT"},{"label":"PLAYING_CARDS","kind":"property","documentation":"PLAYING_CARDS: Character.UnicodeBlock","insertText":"PLAYING_CARDS"},{"label":"PRIVATE_USE_AREA","kind":"property","documentation":"PRIVATE_USE_AREA: Character.UnicodeBlock","insertText":"PRIVATE_USE_AREA"},{"label":"REJANG","kind":"property","documentation":"REJANG: Character.UnicodeBlock","insertText":"REJANG"},{"label":"RUMI_NUMERAL_SYMBOLS","kind":"property","documentation":"RUMI_NUMERAL_SYMBOLS: Character.UnicodeBlock","insertText":"RUMI_NUMERAL_SYMBOLS"},{"label":"RUNIC","kind":"property","documentation":"RUNIC: Character.UnicodeBlock","insertText":"RUNIC"},{"label":"SAMARITAN","kind":"property","documentation":"SAMARITAN: Character.UnicodeBlock","insertText":"SAMARITAN"},{"label":"SAURASHTRA","kind":"property","documentation":"SAURASHTRA: Character.UnicodeBlock","insertText":"SAURASHTRA"},{"label":"SHARADA","kind":"property","documentation":"SHARADA: Character.UnicodeBlock","insertText":"SHARADA"},{"label":"SHAVIAN","kind":"property","documentation":"SHAVIAN: Character.UnicodeBlock","insertText":"SHAVIAN"},{"label":"SINHALA","kind":"property","documentation":"SINHALA: Character.UnicodeBlock","insertText":"SINHALA"},{"label":"SMALL_FORM_VARIANTS","kind":"property","documentation":"SMALL_FORM_VARIANTS: Character.UnicodeBlock","insertText":"SMALL_FORM_VARIANTS"},{"label":"SORA_SOMPENG","kind":"property","documentation":"SORA_SOMPENG: Character.UnicodeBlock","insertText":"SORA_SOMPENG"},{"label":"SPACING_MODIFIER_LETTERS","kind":"property","documentation":"SPACING_MODIFIER_LETTERS: Character.UnicodeBlock","insertText":"SPACING_MODIFIER_LETTERS"},{"label":"SPECIALS","kind":"property","documentation":"SPECIALS: Character.UnicodeBlock","insertText":"SPECIALS"},{"label":"SUNDANESE","kind":"property","documentation":"SUNDANESE: Character.UnicodeBlock","insertText":"SUNDANESE"},{"label":"SUNDANESE_SUPPLEMENT","kind":"property","documentation":"SUNDANESE_SUPPLEMENT: Character.UnicodeBlock","insertText":"SUNDANESE_SUPPLEMENT"},{"label":"SUPERSCRIPTS_AND_SUBSCRIPTS","kind":"property","documentation":"SUPERSCRIPTS_AND_SUBSCRIPTS: Character.UnicodeBlock","insertText":"SUPERSCRIPTS_AND_SUBSCRIPTS"},{"label":"SUPPLEMENTAL_ARROWS_A","kind":"property","documentation":"SUPPLEMENTAL_ARROWS_A: Character.UnicodeBlock","insertText":"SUPPLEMENTAL_ARROWS_A"},{"label":"SUPPLEMENTAL_ARROWS_B","kind":"property","documentation":"SUPPLEMENTAL_ARROWS_B: Character.UnicodeBlock","insertText":"SUPPLEMENTAL_ARROWS_B"},{"label":"SUPPLEMENTAL_MATHEMATICAL_OPERATORS","kind":"property","documentation":"SUPPLEMENTAL_MATHEMATICAL_OPERATORS: Character.UnicodeBlock","insertText":"SUPPLEMENTAL_MATHEMATICAL_OPERATORS"},{"label":"SUPPLEMENTAL_PUNCTUATION","kind":"property","documentation":"SUPPLEMENTAL_PUNCTUATION: Character.UnicodeBlock","insertText":"SUPPLEMENTAL_PUNCTUATION"},{"label":"SUPPLEMENTARY_PRIVATE_USE_AREA_A","kind":"property","documentation":"SUPPLEMENTARY_PRIVATE_USE_AREA_A: Character.UnicodeBlock","insertText":"SUPPLEMENTARY_PRIVATE_USE_AREA_A"},{"label":"SUPPLEMENTARY_PRIVATE_USE_AREA_B","kind":"property","documentation":"SUPPLEMENTARY_PRIVATE_USE_AREA_B: Character.UnicodeBlock","insertText":"SUPPLEMENTARY_PRIVATE_USE_AREA_B"},{"label":"SYLOTI_NAGRI","kind":"property","documentation":"SYLOTI_NAGRI: Character.UnicodeBlock","insertText":"SYLOTI_NAGRI"},{"label":"SYRIAC","kind":"property","documentation":"SYRIAC: Character.UnicodeBlock","insertText":"SYRIAC"},{"label":"TAGALOG","kind":"property","documentation":"TAGALOG: Character.UnicodeBlock","insertText":"TAGALOG"},{"label":"TAGBANWA","kind":"property","documentation":"TAGBANWA: Character.UnicodeBlock","insertText":"TAGBANWA"},{"label":"TAGS","kind":"property","documentation":"TAGS: Character.UnicodeBlock","insertText":"TAGS"},{"label":"TAI_LE","kind":"property","documentation":"TAI_LE: Character.UnicodeBlock","insertText":"TAI_LE"},{"label":"TAI_THAM","kind":"property","documentation":"TAI_THAM: Character.UnicodeBlock","insertText":"TAI_THAM"},{"label":"TAI_VIET","kind":"property","documentation":"TAI_VIET: Character.UnicodeBlock","insertText":"TAI_VIET"},{"label":"TAI_XUAN_JING_SYMBOLS","kind":"property","documentation":"TAI_XUAN_JING_SYMBOLS: Character.UnicodeBlock","insertText":"TAI_XUAN_JING_SYMBOLS"},{"label":"TAKRI","kind":"property","documentation":"TAKRI: Character.UnicodeBlock","insertText":"TAKRI"},{"label":"TAMIL","kind":"property","documentation":"TAMIL: Character.UnicodeBlock","insertText":"TAMIL"},{"label":"TELUGU","kind":"property","documentation":"TELUGU: Character.UnicodeBlock","insertText":"TELUGU"},{"label":"THAANA","kind":"property","documentation":"THAANA: Character.UnicodeBlock","insertText":"THAANA"},{"label":"THAI","kind":"property","documentation":"THAI: Character.UnicodeBlock","insertText":"THAI"},{"label":"TIBETAN","kind":"property","documentation":"TIBETAN: Character.UnicodeBlock","insertText":"TIBETAN"},{"label":"TIFINAGH","kind":"property","documentation":"TIFINAGH: Character.UnicodeBlock","insertText":"TIFINAGH"},{"label":"TRANSPORT_AND_MAP_SYMBOLS","kind":"property","documentation":"TRANSPORT_AND_MAP_SYMBOLS: Character.UnicodeBlock","insertText":"TRANSPORT_AND_MAP_SYMBOLS"},{"label":"UGARITIC","kind":"property","documentation":"UGARITIC: Character.UnicodeBlock","insertText":"UGARITIC"},{"label":"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS","kind":"property","documentation":"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS: Character.UnicodeBlock","insertText":"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS"},{"label":"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED","kind":"property","documentation":"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED: Character.UnicodeBlock","insertText":"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED"},{"label":"VAI","kind":"property","documentation":"VAI: Character.UnicodeBlock","insertText":"VAI"},{"label":"VARIATION_SELECTORS","kind":"property","documentation":"VARIATION_SELECTORS: Character.UnicodeBlock","insertText":"VARIATION_SELECTORS"},{"label":"VARIATION_SELECTORS_SUPPLEMENT","kind":"property","documentation":"VARIATION_SELECTORS_SUPPLEMENT: Character.UnicodeBlock","insertText":"VARIATION_SELECTORS_SUPPLEMENT"},{"label":"VEDIC_EXTENSIONS","kind":"property","documentation":"VEDIC_EXTENSIONS: Character.UnicodeBlock","insertText":"VEDIC_EXTENSIONS"},{"label":"VERTICAL_FORMS","kind":"property","documentation":"VERTICAL_FORMS: Character.UnicodeBlock","insertText":"VERTICAL_FORMS"},{"label":"YIJING_HEXAGRAM_SYMBOLS","kind":"property","documentation":"YIJING_HEXAGRAM_SYMBOLS: Character.UnicodeBlock","insertText":"YIJING_HEXAGRAM_SYMBOLS"},{"label":"YI_RADICALS","kind":"property","documentation":"YI_RADICALS: Character.UnicodeBlock","insertText":"YI_RADICALS"},{"label":"YI_SYLLABLES","kind":"property","documentation":"YI_SYLLABLES: Character.UnicodeBlock","insertText":"YI_SYLLABLES"},{"label":"forName","kind":"method","documentation":"forName(String a): Character.UnicodeBlock","insertText":"forName"},{"label":"of","kind":"method","documentation":"of(int a): Character.UnicodeBlock","insertText":"of"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"UnicodeScript","kind":"class","documentation":"Class: UnicodeScript","insertText":"UnicodeScript","properties":[{"label":"ARABIC","kind":"property","documentation":"ARABIC: Character.UnicodeScript","insertText":"ARABIC"},{"label":"ARMENIAN","kind":"property","documentation":"ARMENIAN: Character.UnicodeScript","insertText":"ARMENIAN"},{"label":"AVESTAN","kind":"property","documentation":"AVESTAN: Character.UnicodeScript","insertText":"AVESTAN"},{"label":"BALINESE","kind":"property","documentation":"BALINESE: Character.UnicodeScript","insertText":"BALINESE"},{"label":"BAMUM","kind":"property","documentation":"BAMUM: Character.UnicodeScript","insertText":"BAMUM"},{"label":"BATAK","kind":"property","documentation":"BATAK: Character.UnicodeScript","insertText":"BATAK"},{"label":"BENGALI","kind":"property","documentation":"BENGALI: Character.UnicodeScript","insertText":"BENGALI"},{"label":"BOPOMOFO","kind":"property","documentation":"BOPOMOFO: Character.UnicodeScript","insertText":"BOPOMOFO"},{"label":"BRAHMI","kind":"property","documentation":"BRAHMI: Character.UnicodeScript","insertText":"BRAHMI"},{"label":"BRAILLE","kind":"property","documentation":"BRAILLE: Character.UnicodeScript","insertText":"BRAILLE"},{"label":"BUGINESE","kind":"property","documentation":"BUGINESE: Character.UnicodeScript","insertText":"BUGINESE"},{"label":"BUHID","kind":"property","documentation":"BUHID: Character.UnicodeScript","insertText":"BUHID"},{"label":"CANADIAN_ABORIGINAL","kind":"property","documentation":"CANADIAN_ABORIGINAL: Character.UnicodeScript","insertText":"CANADIAN_ABORIGINAL"},{"label":"CARIAN","kind":"property","documentation":"CARIAN: Character.UnicodeScript","insertText":"CARIAN"},{"label":"CHAKMA","kind":"property","documentation":"CHAKMA: Character.UnicodeScript","insertText":"CHAKMA"},{"label":"CHAM","kind":"property","documentation":"CHAM: Character.UnicodeScript","insertText":"CHAM"},{"label":"CHEROKEE","kind":"property","documentation":"CHEROKEE: Character.UnicodeScript","insertText":"CHEROKEE"},{"label":"COMMON","kind":"property","documentation":"COMMON: Character.UnicodeScript","insertText":"COMMON"},{"label":"COPTIC","kind":"property","documentation":"COPTIC: Character.UnicodeScript","insertText":"COPTIC"},{"label":"CUNEIFORM","kind":"property","documentation":"CUNEIFORM: Character.UnicodeScript","insertText":"CUNEIFORM"},{"label":"CYPRIOT","kind":"property","documentation":"CYPRIOT: Character.UnicodeScript","insertText":"CYPRIOT"},{"label":"CYRILLIC","kind":"property","documentation":"CYRILLIC: Character.UnicodeScript","insertText":"CYRILLIC"},{"label":"DESERET","kind":"property","documentation":"DESERET: Character.UnicodeScript","insertText":"DESERET"},{"label":"DEVANAGARI","kind":"property","documentation":"DEVANAGARI: Character.UnicodeScript","insertText":"DEVANAGARI"},{"label":"EGYPTIAN_HIEROGLYPHS","kind":"property","documentation":"EGYPTIAN_HIEROGLYPHS: Character.UnicodeScript","insertText":"EGYPTIAN_HIEROGLYPHS"},{"label":"ETHIOPIC","kind":"property","documentation":"ETHIOPIC: Character.UnicodeScript","insertText":"ETHIOPIC"},{"label":"GEORGIAN","kind":"property","documentation":"GEORGIAN: Character.UnicodeScript","insertText":"GEORGIAN"},{"label":"GLAGOLITIC","kind":"property","documentation":"GLAGOLITIC: Character.UnicodeScript","insertText":"GLAGOLITIC"},{"label":"GOTHIC","kind":"property","documentation":"GOTHIC: Character.UnicodeScript","insertText":"GOTHIC"},{"label":"GREEK","kind":"property","documentation":"GREEK: Character.UnicodeScript","insertText":"GREEK"},{"label":"GUJARATI","kind":"property","documentation":"GUJARATI: Character.UnicodeScript","insertText":"GUJARATI"},{"label":"GURMUKHI","kind":"property","documentation":"GURMUKHI: Character.UnicodeScript","insertText":"GURMUKHI"},{"label":"HAN","kind":"property","documentation":"HAN: Character.UnicodeScript","insertText":"HAN"},{"label":"HANGUL","kind":"property","documentation":"HANGUL: Character.UnicodeScript","insertText":"HANGUL"},{"label":"HANUNOO","kind":"property","documentation":"HANUNOO: Character.UnicodeScript","insertText":"HANUNOO"},{"label":"HEBREW","kind":"property","documentation":"HEBREW: Character.UnicodeScript","insertText":"HEBREW"},{"label":"HIRAGANA","kind":"property","documentation":"HIRAGANA: Character.UnicodeScript","insertText":"HIRAGANA"},{"label":"IMPERIAL_ARAMAIC","kind":"property","documentation":"IMPERIAL_ARAMAIC: Character.UnicodeScript","insertText":"IMPERIAL_ARAMAIC"},{"label":"INHERITED","kind":"property","documentation":"INHERITED: Character.UnicodeScript","insertText":"INHERITED"},{"label":"INSCRIPTIONAL_PAHLAVI","kind":"property","documentation":"INSCRIPTIONAL_PAHLAVI: Character.UnicodeScript","insertText":"INSCRIPTIONAL_PAHLAVI"},{"label":"INSCRIPTIONAL_PARTHIAN","kind":"property","documentation":"INSCRIPTIONAL_PARTHIAN: Character.UnicodeScript","insertText":"INSCRIPTIONAL_PARTHIAN"},{"label":"JAVANESE","kind":"property","documentation":"JAVANESE: Character.UnicodeScript","insertText":"JAVANESE"},{"label":"KAITHI","kind":"property","documentation":"KAITHI: Character.UnicodeScript","insertText":"KAITHI"},{"label":"KANNADA","kind":"property","documentation":"KANNADA: Character.UnicodeScript","insertText":"KANNADA"},{"label":"KATAKANA","kind":"property","documentation":"KATAKANA: Character.UnicodeScript","insertText":"KATAKANA"},{"label":"KAYAH_LI","kind":"property","documentation":"KAYAH_LI: Character.UnicodeScript","insertText":"KAYAH_LI"},{"label":"KHAROSHTHI","kind":"property","documentation":"KHAROSHTHI: Character.UnicodeScript","insertText":"KHAROSHTHI"},{"label":"KHMER","kind":"property","documentation":"KHMER: Character.UnicodeScript","insertText":"KHMER"},{"label":"LAO","kind":"property","documentation":"LAO: Character.UnicodeScript","insertText":"LAO"},{"label":"LATIN","kind":"property","documentation":"LATIN: Character.UnicodeScript","insertText":"LATIN"},{"label":"LEPCHA","kind":"property","documentation":"LEPCHA: Character.UnicodeScript","insertText":"LEPCHA"},{"label":"LIMBU","kind":"property","documentation":"LIMBU: Character.UnicodeScript","insertText":"LIMBU"},{"label":"LINEAR_B","kind":"property","documentation":"LINEAR_B: Character.UnicodeScript","insertText":"LINEAR_B"},{"label":"LISU","kind":"property","documentation":"LISU: Character.UnicodeScript","insertText":"LISU"},{"label":"LYCIAN","kind":"property","documentation":"LYCIAN: Character.UnicodeScript","insertText":"LYCIAN"},{"label":"LYDIAN","kind":"property","documentation":"LYDIAN: Character.UnicodeScript","insertText":"LYDIAN"},{"label":"MALAYALAM","kind":"property","documentation":"MALAYALAM: Character.UnicodeScript","insertText":"MALAYALAM"},{"label":"MANDAIC","kind":"property","documentation":"MANDAIC: Character.UnicodeScript","insertText":"MANDAIC"},{"label":"MEETEI_MAYEK","kind":"property","documentation":"MEETEI_MAYEK: Character.UnicodeScript","insertText":"MEETEI_MAYEK"},{"label":"MEROITIC_CURSIVE","kind":"property","documentation":"MEROITIC_CURSIVE: Character.UnicodeScript","insertText":"MEROITIC_CURSIVE"},{"label":"MEROITIC_HIEROGLYPHS","kind":"property","documentation":"MEROITIC_HIEROGLYPHS: Character.UnicodeScript","insertText":"MEROITIC_HIEROGLYPHS"},{"label":"MIAO","kind":"property","documentation":"MIAO: Character.UnicodeScript","insertText":"MIAO"},{"label":"MONGOLIAN","kind":"property","documentation":"MONGOLIAN: Character.UnicodeScript","insertText":"MONGOLIAN"},{"label":"MYANMAR","kind":"property","documentation":"MYANMAR: Character.UnicodeScript","insertText":"MYANMAR"},{"label":"NEW_TAI_LUE","kind":"property","documentation":"NEW_TAI_LUE: Character.UnicodeScript","insertText":"NEW_TAI_LUE"},{"label":"NKO","kind":"property","documentation":"NKO: Character.UnicodeScript","insertText":"NKO"},{"label":"OGHAM","kind":"property","documentation":"OGHAM: Character.UnicodeScript","insertText":"OGHAM"},{"label":"OLD_ITALIC","kind":"property","documentation":"OLD_ITALIC: Character.UnicodeScript","insertText":"OLD_ITALIC"},{"label":"OLD_PERSIAN","kind":"property","documentation":"OLD_PERSIAN: Character.UnicodeScript","insertText":"OLD_PERSIAN"},{"label":"OLD_SOUTH_ARABIAN","kind":"property","documentation":"OLD_SOUTH_ARABIAN: Character.UnicodeScript","insertText":"OLD_SOUTH_ARABIAN"},{"label":"OLD_TURKIC","kind":"property","documentation":"OLD_TURKIC: Character.UnicodeScript","insertText":"OLD_TURKIC"},{"label":"OL_CHIKI","kind":"property","documentation":"OL_CHIKI: Character.UnicodeScript","insertText":"OL_CHIKI"},{"label":"ORIYA","kind":"property","documentation":"ORIYA: Character.UnicodeScript","insertText":"ORIYA"},{"label":"OSMANYA","kind":"property","documentation":"OSMANYA: Character.UnicodeScript","insertText":"OSMANYA"},{"label":"PHAGS_PA","kind":"property","documentation":"PHAGS_PA: Character.UnicodeScript","insertText":"PHAGS_PA"},{"label":"PHOENICIAN","kind":"property","documentation":"PHOENICIAN: Character.UnicodeScript","insertText":"PHOENICIAN"},{"label":"REJANG","kind":"property","documentation":"REJANG: Character.UnicodeScript","insertText":"REJANG"},{"label":"RUNIC","kind":"property","documentation":"RUNIC: Character.UnicodeScript","insertText":"RUNIC"},{"label":"SAMARITAN","kind":"property","documentation":"SAMARITAN: Character.UnicodeScript","insertText":"SAMARITAN"},{"label":"SAURASHTRA","kind":"property","documentation":"SAURASHTRA: Character.UnicodeScript","insertText":"SAURASHTRA"},{"label":"SHARADA","kind":"property","documentation":"SHARADA: Character.UnicodeScript","insertText":"SHARADA"},{"label":"SHAVIAN","kind":"property","documentation":"SHAVIAN: Character.UnicodeScript","insertText":"SHAVIAN"},{"label":"SINHALA","kind":"property","documentation":"SINHALA: Character.UnicodeScript","insertText":"SINHALA"},{"label":"SORA_SOMPENG","kind":"property","documentation":"SORA_SOMPENG: Character.UnicodeScript","insertText":"SORA_SOMPENG"},{"label":"SUNDANESE","kind":"property","documentation":"SUNDANESE: Character.UnicodeScript","insertText":"SUNDANESE"},{"label":"SYLOTI_NAGRI","kind":"property","documentation":"SYLOTI_NAGRI: Character.UnicodeScript","insertText":"SYLOTI_NAGRI"},{"label":"SYRIAC","kind":"property","documentation":"SYRIAC: Character.UnicodeScript","insertText":"SYRIAC"},{"label":"TAGALOG","kind":"property","documentation":"TAGALOG: Character.UnicodeScript","insertText":"TAGALOG"},{"label":"TAGBANWA","kind":"property","documentation":"TAGBANWA: Character.UnicodeScript","insertText":"TAGBANWA"},{"label":"TAI_LE","kind":"property","documentation":"TAI_LE: Character.UnicodeScript","insertText":"TAI_LE"},{"label":"TAI_THAM","kind":"property","documentation":"TAI_THAM: Character.UnicodeScript","insertText":"TAI_THAM"},{"label":"TAI_VIET","kind":"property","documentation":"TAI_VIET: Character.UnicodeScript","insertText":"TAI_VIET"},{"label":"TAKRI","kind":"property","documentation":"TAKRI: Character.UnicodeScript","insertText":"TAKRI"},{"label":"TAMIL","kind":"property","documentation":"TAMIL: Character.UnicodeScript","insertText":"TAMIL"},{"label":"TELUGU","kind":"property","documentation":"TELUGU: Character.UnicodeScript","insertText":"TELUGU"},{"label":"THAANA","kind":"property","documentation":"THAANA: Character.UnicodeScript","insertText":"THAANA"},{"label":"THAI","kind":"property","documentation":"THAI: Character.UnicodeScript","insertText":"THAI"},{"label":"TIBETAN","kind":"property","documentation":"TIBETAN: Character.UnicodeScript","insertText":"TIBETAN"},{"label":"TIFINAGH","kind":"property","documentation":"TIFINAGH: Character.UnicodeScript","insertText":"TIFINAGH"},{"label":"UGARITIC","kind":"property","documentation":"UGARITIC: Character.UnicodeScript","insertText":"UGARITIC"},{"label":"UNKNOWN","kind":"property","documentation":"UNKNOWN: Character.UnicodeScript","insertText":"UNKNOWN"},{"label":"VAI","kind":"property","documentation":"VAI: Character.UnicodeScript","insertText":"VAI"},{"label":"YI","kind":"property","documentation":"YI: Character.UnicodeScript","insertText":"YI"},{"label":"forName","kind":"method","documentation":"forName(String a): Character.UnicodeScript","insertText":"forName"},{"label":"of","kind":"method","documentation":"of(int a): Character.UnicodeScript","insertText":"of"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): Character.UnicodeScript","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): Character.UnicodeScript[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ClassCastException","kind":"class","documentation":"Class: ClassCastException","insertText":"ClassCastException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ClassCastException","kind":"constructor","documentation":"Constructor: ClassCastException","insertText":"ClassCastException"}},{"label":"ClassNotFoundException","kind":"class","documentation":"Class: ClassNotFoundException","insertText":"ClassNotFoundException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ClassNotFoundException","kind":"constructor","documentation":"Constructor: ClassNotFoundException","insertText":"ClassNotFoundException"}},{"label":"CloneNotSupportedException","kind":"class","documentation":"Class: CloneNotSupportedException","insertText":"CloneNotSupportedException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"CloneNotSupportedException","kind":"constructor","documentation":"Constructor: CloneNotSupportedException","insertText":"CloneNotSupportedException"}},{"label":"Comparable","kind":"class","documentation":"Class: Comparable","insertText":"Comparable","properties":[{"label":"compareTo","kind":"method","documentation":"compareTo(def a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Double","kind":"class","documentation":"Class: Double","insertText":"Double","properties":[{"label":"BYTES","kind":"property","documentation":"BYTES: int","insertText":"BYTES"},{"label":"MAX_EXPONENT","kind":"property","documentation":"MAX_EXPONENT: int","insertText":"MAX_EXPONENT"},{"label":"MAX_VALUE","kind":"property","documentation":"MAX_VALUE: double","insertText":"MAX_VALUE"},{"label":"MIN_EXPONENT","kind":"property","documentation":"MIN_EXPONENT: int","insertText":"MIN_EXPONENT"},{"label":"MIN_NORMAL","kind":"property","documentation":"MIN_NORMAL: double","insertText":"MIN_NORMAL"},{"label":"MIN_VALUE","kind":"property","documentation":"MIN_VALUE: double","insertText":"MIN_VALUE"},{"label":"NEGATIVE_INFINITY","kind":"property","documentation":"NEGATIVE_INFINITY: double","insertText":"NEGATIVE_INFINITY"},{"label":"NaN","kind":"property","documentation":"NaN: double","insertText":"NaN"},{"label":"POSITIVE_INFINITY","kind":"property","documentation":"POSITIVE_INFINITY: double","insertText":"POSITIVE_INFINITY"},{"label":"SIZE","kind":"property","documentation":"SIZE: int","insertText":"SIZE"},{"label":"compare","kind":"method","documentation":"compare(double a, double b): int","insertText":"compare"},{"label":"doubleToLongBits","kind":"method","documentation":"doubleToLongBits(double a): long","insertText":"doubleToLongBits"},{"label":"doubleToRawLongBits","kind":"method","documentation":"doubleToRawLongBits(double a): long","insertText":"doubleToRawLongBits"},{"label":"hashCode","kind":"method","documentation":"hashCode(double a): int","insertText":"hashCode"},{"label":"isFinite","kind":"method","documentation":"isFinite(double a): boolean","insertText":"isFinite"},{"label":"isInfinite","kind":"method","documentation":"isInfinite(double a): boolean","insertText":"isInfinite"},{"label":"isNaN","kind":"method","documentation":"isNaN(double a): boolean","insertText":"isNaN"},{"label":"longBitsToDouble","kind":"method","documentation":"longBitsToDouble(long a): double","insertText":"longBitsToDouble"},{"label":"max","kind":"method","documentation":"max(double a, double b): double","insertText":"max"},{"label":"min","kind":"method","documentation":"min(double a, double b): double","insertText":"min"},{"label":"parseDouble","kind":"method","documentation":"parseDouble(String a): double","insertText":"parseDouble"},{"label":"sum","kind":"method","documentation":"sum(double a, double b): double","insertText":"sum"},{"label":"toHexString","kind":"method","documentation":"toHexString(double a): String","insertText":"toHexString"},{"label":"toString","kind":"method","documentation":"toString(double a): String","insertText":"toString"},{"label":"valueOf","kind":"method","documentation":"valueOf(double a): Double","insertText":"valueOf"},{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Double a): int","insertText":"compareTo"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"isInfinite","kind":"method","documentation":"isInfinite(): boolean","insertText":"isInfinite"},{"label":"isNaN","kind":"method","documentation":"isNaN(): boolean","insertText":"isNaN"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Enum","kind":"class","documentation":"Class: Enum","insertText":"Enum","properties":[{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"EnumConstantNotPresentException","kind":"class","documentation":"Class: EnumConstantNotPresentException","insertText":"EnumConstantNotPresentException","properties":[{"label":"constantName","kind":"method","documentation":"constantName(): String","insertText":"constantName"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Exception","kind":"class","documentation":"Class: Exception","insertText":"Exception","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Exception","kind":"constructor","documentation":"Constructor: Exception","insertText":"Exception"}},{"label":"Float","kind":"class","documentation":"Class: Float","insertText":"Float","properties":[{"label":"BYTES","kind":"property","documentation":"BYTES: int","insertText":"BYTES"},{"label":"MAX_EXPONENT","kind":"property","documentation":"MAX_EXPONENT: int","insertText":"MAX_EXPONENT"},{"label":"MAX_VALUE","kind":"property","documentation":"MAX_VALUE: float","insertText":"MAX_VALUE"},{"label":"MIN_EXPONENT","kind":"property","documentation":"MIN_EXPONENT: int","insertText":"MIN_EXPONENT"},{"label":"MIN_NORMAL","kind":"property","documentation":"MIN_NORMAL: float","insertText":"MIN_NORMAL"},{"label":"MIN_VALUE","kind":"property","documentation":"MIN_VALUE: float","insertText":"MIN_VALUE"},{"label":"NEGATIVE_INFINITY","kind":"property","documentation":"NEGATIVE_INFINITY: float","insertText":"NEGATIVE_INFINITY"},{"label":"NaN","kind":"property","documentation":"NaN: float","insertText":"NaN"},{"label":"POSITIVE_INFINITY","kind":"property","documentation":"POSITIVE_INFINITY: float","insertText":"POSITIVE_INFINITY"},{"label":"SIZE","kind":"property","documentation":"SIZE: int","insertText":"SIZE"},{"label":"compare","kind":"method","documentation":"compare(float a, float b): int","insertText":"compare"},{"label":"floatToIntBits","kind":"method","documentation":"floatToIntBits(float a): int","insertText":"floatToIntBits"},{"label":"floatToRawIntBits","kind":"method","documentation":"floatToRawIntBits(float a): int","insertText":"floatToRawIntBits"},{"label":"hashCode","kind":"method","documentation":"hashCode(float a): int","insertText":"hashCode"},{"label":"intBitsToFloat","kind":"method","documentation":"intBitsToFloat(int a): float","insertText":"intBitsToFloat"},{"label":"isFinite","kind":"method","documentation":"isFinite(float a): boolean","insertText":"isFinite"},{"label":"isInfinite","kind":"method","documentation":"isInfinite(float a): boolean","insertText":"isInfinite"},{"label":"isNaN","kind":"method","documentation":"isNaN(float a): boolean","insertText":"isNaN"},{"label":"max","kind":"method","documentation":"max(float a, float b): float","insertText":"max"},{"label":"min","kind":"method","documentation":"min(float a, float b): float","insertText":"min"},{"label":"parseFloat","kind":"method","documentation":"parseFloat(String a): float","insertText":"parseFloat"},{"label":"sum","kind":"method","documentation":"sum(float a, float b): float","insertText":"sum"},{"label":"toHexString","kind":"method","documentation":"toHexString(float a): String","insertText":"toHexString"},{"label":"toString","kind":"method","documentation":"toString(float a): String","insertText":"toString"},{"label":"valueOf","kind":"method","documentation":"valueOf(float a): Float","insertText":"valueOf"},{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Float a): int","insertText":"compareTo"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"isInfinite","kind":"method","documentation":"isInfinite(): boolean","insertText":"isInfinite"},{"label":"isNaN","kind":"method","documentation":"isNaN(): boolean","insertText":"isNaN"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IllegalAccessException","kind":"class","documentation":"Class: IllegalAccessException","insertText":"IllegalAccessException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalAccessException","kind":"constructor","documentation":"Constructor: IllegalAccessException","insertText":"IllegalAccessException"}},{"label":"IllegalArgumentException","kind":"class","documentation":"Class: IllegalArgumentException","insertText":"IllegalArgumentException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalArgumentException","kind":"constructor","documentation":"Constructor: IllegalArgumentException","insertText":"IllegalArgumentException"}},{"label":"IllegalMonitorStateException","kind":"class","documentation":"Class: IllegalMonitorStateException","insertText":"IllegalMonitorStateException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalMonitorStateException","kind":"constructor","documentation":"Constructor: IllegalMonitorStateException","insertText":"IllegalMonitorStateException"}},{"label":"IllegalStateException","kind":"class","documentation":"Class: IllegalStateException","insertText":"IllegalStateException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalStateException","kind":"constructor","documentation":"Constructor: IllegalStateException","insertText":"IllegalStateException"}},{"label":"IllegalThreadStateException","kind":"class","documentation":"Class: IllegalThreadStateException","insertText":"IllegalThreadStateException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalThreadStateException","kind":"constructor","documentation":"Constructor: IllegalThreadStateException","insertText":"IllegalThreadStateException"}},{"label":"IndexOutOfBoundsException","kind":"class","documentation":"Class: IndexOutOfBoundsException","insertText":"IndexOutOfBoundsException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IndexOutOfBoundsException","kind":"constructor","documentation":"Constructor: IndexOutOfBoundsException","insertText":"IndexOutOfBoundsException"}},{"label":"InstantiationException","kind":"class","documentation":"Class: InstantiationException","insertText":"InstantiationException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"InstantiationException","kind":"constructor","documentation":"Constructor: InstantiationException","insertText":"InstantiationException"}},{"label":"Integer","kind":"class","documentation":"Class: Integer","insertText":"Integer","properties":[{"label":"BYTES","kind":"property","documentation":"BYTES: int","insertText":"BYTES"},{"label":"MAX_VALUE","kind":"property","documentation":"MAX_VALUE: int","insertText":"MAX_VALUE"},{"label":"MIN_VALUE","kind":"property","documentation":"MIN_VALUE: int","insertText":"MIN_VALUE"},{"label":"SIZE","kind":"property","documentation":"SIZE: int","insertText":"SIZE"},{"label":"bitCount","kind":"method","documentation":"bitCount(int a): int","insertText":"bitCount"},{"label":"compare","kind":"method","documentation":"compare(int a, int b): int","insertText":"compare"},{"label":"compareUnsigned","kind":"method","documentation":"compareUnsigned(int a, int b): int","insertText":"compareUnsigned"},{"label":"decode","kind":"method","documentation":"decode(String a): Integer","insertText":"decode"},{"label":"divideUnsigned","kind":"method","documentation":"divideUnsigned(int a, int b): int","insertText":"divideUnsigned"},{"label":"hashCode","kind":"method","documentation":"hashCode(int a): int","insertText":"hashCode"},{"label":"highestOneBit","kind":"method","documentation":"highestOneBit(int a): int","insertText":"highestOneBit"},{"label":"lowestOneBit","kind":"method","documentation":"lowestOneBit(int a): int","insertText":"lowestOneBit"},{"label":"max","kind":"method","documentation":"max(int a, int b): int","insertText":"max"},{"label":"min","kind":"method","documentation":"min(int a, int b): int","insertText":"min"},{"label":"numberOfLeadingZeros","kind":"method","documentation":"numberOfLeadingZeros(int a): int","insertText":"numberOfLeadingZeros"},{"label":"numberOfTrailingZeros","kind":"method","documentation":"numberOfTrailingZeros(int a): int","insertText":"numberOfTrailingZeros"},{"label":"parseInt","kind":"method","documentation":"parseInt(String a, int b | String a): int","insertText":"parseInt"},{"label":"parseUnsignedInt","kind":"method","documentation":"parseUnsignedInt(String a, int b | String a): int","insertText":"parseUnsignedInt"},{"label":"remainderUnsigned","kind":"method","documentation":"remainderUnsigned(int a, int b): int","insertText":"remainderUnsigned"},{"label":"reverse","kind":"method","documentation":"reverse(int a): int","insertText":"reverse"},{"label":"reverseBytes","kind":"method","documentation":"reverseBytes(int a): int","insertText":"reverseBytes"},{"label":"rotateLeft","kind":"method","documentation":"rotateLeft(int a, int b): int","insertText":"rotateLeft"},{"label":"rotateRight","kind":"method","documentation":"rotateRight(int a, int b): int","insertText":"rotateRight"},{"label":"signum","kind":"method","documentation":"signum(int a): int","insertText":"signum"},{"label":"toBinaryString","kind":"method","documentation":"toBinaryString(int a): String","insertText":"toBinaryString"},{"label":"toHexString","kind":"method","documentation":"toHexString(int a): String","insertText":"toHexString"},{"label":"toOctalString","kind":"method","documentation":"toOctalString(int a): String","insertText":"toOctalString"},{"label":"toString","kind":"method","documentation":"toString(int a, int b | int a): String","insertText":"toString"},{"label":"toUnsignedLong","kind":"method","documentation":"toUnsignedLong(int a): long","insertText":"toUnsignedLong"},{"label":"toUnsignedString","kind":"method","documentation":"toUnsignedString(int a, int b | int a): String","insertText":"toUnsignedString"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a, int b | int a): Integer","insertText":"valueOf"},{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Integer a): int","insertText":"compareTo"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"InterruptedException","kind":"class","documentation":"Class: InterruptedException","insertText":"InterruptedException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"InterruptedException","kind":"constructor","documentation":"Constructor: InterruptedException","insertText":"InterruptedException"}},{"label":"Iterable","kind":"class","documentation":"Class: Iterable","insertText":"Iterable","properties":[{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Long","kind":"class","documentation":"Class: Long","insertText":"Long","properties":[{"label":"BYTES","kind":"property","documentation":"BYTES: int","insertText":"BYTES"},{"label":"MAX_VALUE","kind":"property","documentation":"MAX_VALUE: long","insertText":"MAX_VALUE"},{"label":"MIN_VALUE","kind":"property","documentation":"MIN_VALUE: long","insertText":"MIN_VALUE"},{"label":"SIZE","kind":"property","documentation":"SIZE: int","insertText":"SIZE"},{"label":"bitCount","kind":"method","documentation":"bitCount(long a): int","insertText":"bitCount"},{"label":"compare","kind":"method","documentation":"compare(long a, long b): int","insertText":"compare"},{"label":"compareUnsigned","kind":"method","documentation":"compareUnsigned(long a, long b): int","insertText":"compareUnsigned"},{"label":"decode","kind":"method","documentation":"decode(String a): Long","insertText":"decode"},{"label":"divideUnsigned","kind":"method","documentation":"divideUnsigned(long a, long b): long","insertText":"divideUnsigned"},{"label":"hashCode","kind":"method","documentation":"hashCode(long a): int","insertText":"hashCode"},{"label":"highestOneBit","kind":"method","documentation":"highestOneBit(long a): long","insertText":"highestOneBit"},{"label":"lowestOneBit","kind":"method","documentation":"lowestOneBit(long a): long","insertText":"lowestOneBit"},{"label":"max","kind":"method","documentation":"max(long a, long b): long","insertText":"max"},{"label":"min","kind":"method","documentation":"min(long a, long b): long","insertText":"min"},{"label":"numberOfLeadingZeros","kind":"method","documentation":"numberOfLeadingZeros(long a): int","insertText":"numberOfLeadingZeros"},{"label":"numberOfTrailingZeros","kind":"method","documentation":"numberOfTrailingZeros(long a): int","insertText":"numberOfTrailingZeros"},{"label":"parseLong","kind":"method","documentation":"parseLong(String a, int b | String a): long","insertText":"parseLong"},{"label":"parseUnsignedLong","kind":"method","documentation":"parseUnsignedLong(String a, int b | String a): long","insertText":"parseUnsignedLong"},{"label":"remainderUnsigned","kind":"method","documentation":"remainderUnsigned(long a, long b): long","insertText":"remainderUnsigned"},{"label":"reverse","kind":"method","documentation":"reverse(long a): long","insertText":"reverse"},{"label":"reverseBytes","kind":"method","documentation":"reverseBytes(long a): long","insertText":"reverseBytes"},{"label":"rotateLeft","kind":"method","documentation":"rotateLeft(long a, int b): long","insertText":"rotateLeft"},{"label":"rotateRight","kind":"method","documentation":"rotateRight(long a, int b): long","insertText":"rotateRight"},{"label":"signum","kind":"method","documentation":"signum(long a): int","insertText":"signum"},{"label":"sum","kind":"method","documentation":"sum(long a, long b): long","insertText":"sum"},{"label":"toBinaryString","kind":"method","documentation":"toBinaryString(long a): String","insertText":"toBinaryString"},{"label":"toHexString","kind":"method","documentation":"toHexString(long a): String","insertText":"toHexString"},{"label":"toOctalString","kind":"method","documentation":"toOctalString(long a): String","insertText":"toOctalString"},{"label":"toString","kind":"method","documentation":"toString(long a, int b | long a): String","insertText":"toString"},{"label":"toUnsignedString","kind":"method","documentation":"toUnsignedString(long a, int b | long a): String","insertText":"toUnsignedString"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a, int b | long a): Long","insertText":"valueOf"},{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Long a): int","insertText":"compareTo"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Math","kind":"class","documentation":"Class: Math","insertText":"Math","properties":[{"label":"E","kind":"property","documentation":"E: double","insertText":"E"},{"label":"PI","kind":"property","documentation":"PI: double","insertText":"PI"},{"label":"IEEEremainder","kind":"method","documentation":"IEEEremainder(double a, double b): double","insertText":"IEEEremainder"},{"label":"abs","kind":"method","documentation":"abs(double a): double","insertText":"abs"},{"label":"acos","kind":"method","documentation":"acos(double a): double","insertText":"acos"},{"label":"asin","kind":"method","documentation":"asin(double a): double","insertText":"asin"},{"label":"atan","kind":"method","documentation":"atan(double a): double","insertText":"atan"},{"label":"atan2","kind":"method","documentation":"atan2(double a, double b): double","insertText":"atan2"},{"label":"cbrt","kind":"method","documentation":"cbrt(double a): double","insertText":"cbrt"},{"label":"ceil","kind":"method","documentation":"ceil(double a): double","insertText":"ceil"},{"label":"copySign","kind":"method","documentation":"copySign(double a, double b): double","insertText":"copySign"},{"label":"cos","kind":"method","documentation":"cos(double a): double","insertText":"cos"},{"label":"cosh","kind":"method","documentation":"cosh(double a): double","insertText":"cosh"},{"label":"exp","kind":"method","documentation":"exp(double a): double","insertText":"exp"},{"label":"expm1","kind":"method","documentation":"expm1(double a): double","insertText":"expm1"},{"label":"floor","kind":"method","documentation":"floor(double a): double","insertText":"floor"},{"label":"hypot","kind":"method","documentation":"hypot(double a, double b): double","insertText":"hypot"},{"label":"log","kind":"method","documentation":"log(double a): double","insertText":"log"},{"label":"log10","kind":"method","documentation":"log10(double a): double","insertText":"log10"},{"label":"log1p","kind":"method","documentation":"log1p(double a): double","insertText":"log1p"},{"label":"max","kind":"method","documentation":"max(double a, double b): double","insertText":"max"},{"label":"min","kind":"method","documentation":"min(double a, double b): double","insertText":"min"},{"label":"nextAfter","kind":"method","documentation":"nextAfter(double a, double b): double","insertText":"nextAfter"},{"label":"nextDown","kind":"method","documentation":"nextDown(double a): double","insertText":"nextDown"},{"label":"nextUp","kind":"method","documentation":"nextUp(double a): double","insertText":"nextUp"},{"label":"pow","kind":"method","documentation":"pow(double a, double b): double","insertText":"pow"},{"label":"random","kind":"method","documentation":"random(): double","insertText":"random"},{"label":"rint","kind":"method","documentation":"rint(double a): double","insertText":"rint"},{"label":"round","kind":"method","documentation":"round(double a): long","insertText":"round"},{"label":"scalb","kind":"method","documentation":"scalb(double a, int b): double","insertText":"scalb"},{"label":"signum","kind":"method","documentation":"signum(double a): double","insertText":"signum"},{"label":"sin","kind":"method","documentation":"sin(double a): double","insertText":"sin"},{"label":"sinh","kind":"method","documentation":"sinh(double a): double","insertText":"sinh"},{"label":"sqrt","kind":"method","documentation":"sqrt(double a): double","insertText":"sqrt"},{"label":"tan","kind":"method","documentation":"tan(double a): double","insertText":"tan"},{"label":"tanh","kind":"method","documentation":"tanh(double a): double","insertText":"tanh"},{"label":"toDegrees","kind":"method","documentation":"toDegrees(double a): double","insertText":"toDegrees"},{"label":"toRadians","kind":"method","documentation":"toRadians(double a): double","insertText":"toRadians"},{"label":"ulp","kind":"method","documentation":"ulp(double a): double","insertText":"ulp"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"NegativeArraySizeException","kind":"class","documentation":"Class: NegativeArraySizeException","insertText":"NegativeArraySizeException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"NegativeArraySizeException","kind":"constructor","documentation":"Constructor: NegativeArraySizeException","insertText":"NegativeArraySizeException"}},{"label":"NoSuchFieldException","kind":"class","documentation":"Class: NoSuchFieldException","insertText":"NoSuchFieldException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"NoSuchFieldException","kind":"constructor","documentation":"Constructor: NoSuchFieldException","insertText":"NoSuchFieldException"}},{"label":"NoSuchMethodException","kind":"class","documentation":"Class: NoSuchMethodException","insertText":"NoSuchMethodException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"NoSuchMethodException","kind":"constructor","documentation":"Constructor: NoSuchMethodException","insertText":"NoSuchMethodException"}},{"label":"NullPointerException","kind":"class","documentation":"Class: NullPointerException","insertText":"NullPointerException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"NullPointerException","kind":"constructor","documentation":"Constructor: NullPointerException","insertText":"NullPointerException"}},{"label":"Number","kind":"class","documentation":"Class: Number","insertText":"Number","properties":[{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"NumberFormatException","kind":"class","documentation":"Class: NumberFormatException","insertText":"NumberFormatException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"NumberFormatException","kind":"constructor","documentation":"Constructor: NumberFormatException","insertText":"NumberFormatException"}},{"label":"Object","kind":"class","documentation":"Class: Object","insertText":"Object","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ReflectiveOperationException","kind":"class","documentation":"Class: ReflectiveOperationException","insertText":"ReflectiveOperationException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ReflectiveOperationException","kind":"constructor","documentation":"Constructor: ReflectiveOperationException","insertText":"ReflectiveOperationException"}},{"label":"RuntimeException","kind":"class","documentation":"Class: RuntimeException","insertText":"RuntimeException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"RuntimeException","kind":"constructor","documentation":"Constructor: RuntimeException","insertText":"RuntimeException"}},{"label":"SecurityException","kind":"class","documentation":"Class: SecurityException","insertText":"SecurityException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"SecurityException","kind":"constructor","documentation":"Constructor: SecurityException","insertText":"SecurityException"}},{"label":"Short","kind":"class","documentation":"Class: Short","insertText":"Short","properties":[{"label":"BYTES","kind":"property","documentation":"BYTES: int","insertText":"BYTES"},{"label":"MAX_VALUE","kind":"property","documentation":"MAX_VALUE: short","insertText":"MAX_VALUE"},{"label":"MIN_VALUE","kind":"property","documentation":"MIN_VALUE: short","insertText":"MIN_VALUE"},{"label":"SIZE","kind":"property","documentation":"SIZE: int","insertText":"SIZE"},{"label":"compare","kind":"method","documentation":"compare(short a, short b): int","insertText":"compare"},{"label":"decode","kind":"method","documentation":"decode(String a): Short","insertText":"decode"},{"label":"hashCode","kind":"method","documentation":"hashCode(short a): int","insertText":"hashCode"},{"label":"parseShort","kind":"method","documentation":"parseShort(String a, int b | String a): short","insertText":"parseShort"},{"label":"reverseBytes","kind":"method","documentation":"reverseBytes(short a): short","insertText":"reverseBytes"},{"label":"toString","kind":"method","documentation":"toString(short a): String","insertText":"toString"},{"label":"toUnsignedInt","kind":"method","documentation":"toUnsignedInt(short a): int","insertText":"toUnsignedInt"},{"label":"toUnsignedLong","kind":"method","documentation":"toUnsignedLong(short a): long","insertText":"toUnsignedLong"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a, int b | short a): Short","insertText":"valueOf"},{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Short a): int","insertText":"compareTo"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"StackTraceElement","kind":"class","documentation":"Class: StackTraceElement","insertText":"StackTraceElement","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getClassName","kind":"method","documentation":"getClassName(): String","insertText":"getClassName"},{"label":"getFileName","kind":"method","documentation":"getFileName(): String","insertText":"getFileName"},{"label":"getLineNumber","kind":"method","documentation":"getLineNumber(): int","insertText":"getLineNumber"},{"label":"getMethodName","kind":"method","documentation":"getMethodName(): String","insertText":"getMethodName"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isNativeMethod","kind":"method","documentation":"isNativeMethod(): boolean","insertText":"isNativeMethod"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"StackTraceElement","kind":"constructor","documentation":"Constructor: StackTraceElement","insertText":"StackTraceElement"}},{"label":"StrictMath","kind":"class","documentation":"Class: StrictMath","insertText":"StrictMath","properties":[{"label":"E","kind":"property","documentation":"E: double","insertText":"E"},{"label":"PI","kind":"property","documentation":"PI: double","insertText":"PI"},{"label":"IEEEremainder","kind":"method","documentation":"IEEEremainder(double a, double b): double","insertText":"IEEEremainder"},{"label":"abs","kind":"method","documentation":"abs(double a): double","insertText":"abs"},{"label":"acos","kind":"method","documentation":"acos(double a): double","insertText":"acos"},{"label":"asin","kind":"method","documentation":"asin(double a): double","insertText":"asin"},{"label":"atan","kind":"method","documentation":"atan(double a): double","insertText":"atan"},{"label":"atan2","kind":"method","documentation":"atan2(double a, double b): double","insertText":"atan2"},{"label":"cbrt","kind":"method","documentation":"cbrt(double a): double","insertText":"cbrt"},{"label":"ceil","kind":"method","documentation":"ceil(double a): double","insertText":"ceil"},{"label":"copySign","kind":"method","documentation":"copySign(double a, double b): double","insertText":"copySign"},{"label":"cos","kind":"method","documentation":"cos(double a): double","insertText":"cos"},{"label":"cosh","kind":"method","documentation":"cosh(double a): double","insertText":"cosh"},{"label":"exp","kind":"method","documentation":"exp(double a): double","insertText":"exp"},{"label":"expm1","kind":"method","documentation":"expm1(double a): double","insertText":"expm1"},{"label":"floor","kind":"method","documentation":"floor(double a): double","insertText":"floor"},{"label":"hypot","kind":"method","documentation":"hypot(double a, double b): double","insertText":"hypot"},{"label":"log","kind":"method","documentation":"log(double a): double","insertText":"log"},{"label":"log10","kind":"method","documentation":"log10(double a): double","insertText":"log10"},{"label":"log1p","kind":"method","documentation":"log1p(double a): double","insertText":"log1p"},{"label":"max","kind":"method","documentation":"max(double a, double b): double","insertText":"max"},{"label":"min","kind":"method","documentation":"min(double a, double b): double","insertText":"min"},{"label":"nextAfter","kind":"method","documentation":"nextAfter(double a, double b): double","insertText":"nextAfter"},{"label":"nextDown","kind":"method","documentation":"nextDown(double a): double","insertText":"nextDown"},{"label":"nextUp","kind":"method","documentation":"nextUp(double a): double","insertText":"nextUp"},{"label":"pow","kind":"method","documentation":"pow(double a, double b): double","insertText":"pow"},{"label":"random","kind":"method","documentation":"random(): double","insertText":"random"},{"label":"rint","kind":"method","documentation":"rint(double a): double","insertText":"rint"},{"label":"round","kind":"method","documentation":"round(double a): long","insertText":"round"},{"label":"scalb","kind":"method","documentation":"scalb(double a, int b): double","insertText":"scalb"},{"label":"signum","kind":"method","documentation":"signum(double a): double","insertText":"signum"},{"label":"sin","kind":"method","documentation":"sin(double a): double","insertText":"sin"},{"label":"sinh","kind":"method","documentation":"sinh(double a): double","insertText":"sinh"},{"label":"sqrt","kind":"method","documentation":"sqrt(double a): double","insertText":"sqrt"},{"label":"tan","kind":"method","documentation":"tan(double a): double","insertText":"tan"},{"label":"tanh","kind":"method","documentation":"tanh(double a): double","insertText":"tanh"},{"label":"toDegrees","kind":"method","documentation":"toDegrees(double a): double","insertText":"toDegrees"},{"label":"toRadians","kind":"method","documentation":"toRadians(double a): double","insertText":"toRadians"},{"label":"ulp","kind":"method","documentation":"ulp(double a): double","insertText":"ulp"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"StringBuffer","kind":"class","documentation":"Class: StringBuffer","insertText":"StringBuffer","properties":[{"label":"append","kind":"method","documentation":"append(CharSequence a, int b, int c | def a): StringBuffer","insertText":"append"},{"label":"appendCodePoint","kind":"method","documentation":"appendCodePoint(int a): StringBuffer","insertText":"appendCodePoint"},{"label":"capacity","kind":"method","documentation":"capacity(): int","insertText":"capacity"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(def a): int","insertText":"compareTo"},{"label":"delete","kind":"method","documentation":"delete(int a, int b): StringBuffer","insertText":"delete"},{"label":"deleteCharAt","kind":"method","documentation":"deleteCharAt(int a): StringBuffer","insertText":"deleteCharAt"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"insert","kind":"method","documentation":"insert(int a, def b): StringBuffer","insertText":"insert"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"replace","kind":"method","documentation":"replace(int a, int b, String c): StringBuffer","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"reverse","kind":"method","documentation":"reverse(): StringBuffer","insertText":"reverse"},{"label":"setCharAt","kind":"method","documentation":"setCharAt(int a, char b): void","insertText":"setCharAt"},{"label":"setLength","kind":"method","documentation":"setLength(int a): void","insertText":"setLength"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"StringBuffer","kind":"constructor","documentation":"Constructor: StringBuffer","insertText":"StringBuffer"}},{"label":"StringBuilder","kind":"class","documentation":"Class: StringBuilder","insertText":"StringBuilder","properties":[{"label":"append","kind":"method","documentation":"append(CharSequence a, int b, int c | def a): StringBuilder","insertText":"append"},{"label":"appendCodePoint","kind":"method","documentation":"appendCodePoint(int a): StringBuilder","insertText":"appendCodePoint"},{"label":"capacity","kind":"method","documentation":"capacity(): int","insertText":"capacity"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(def a): int","insertText":"compareTo"},{"label":"delete","kind":"method","documentation":"delete(int a, int b): StringBuilder","insertText":"delete"},{"label":"deleteCharAt","kind":"method","documentation":"deleteCharAt(int a): StringBuilder","insertText":"deleteCharAt"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"insert","kind":"method","documentation":"insert(int a, def b): StringBuilder","insertText":"insert"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"replace","kind":"method","documentation":"replace(int a, int b, String c): StringBuilder","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"reverse","kind":"method","documentation":"reverse(): StringBuilder","insertText":"reverse"},{"label":"setCharAt","kind":"method","documentation":"setCharAt(int a, char b): void","insertText":"setCharAt"},{"label":"setLength","kind":"method","documentation":"setLength(int a): void","insertText":"setLength"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"StringBuilder","kind":"constructor","documentation":"Constructor: StringBuilder","insertText":"StringBuilder"}},{"label":"StringIndexOutOfBoundsException","kind":"class","documentation":"Class: StringIndexOutOfBoundsException","insertText":"StringIndexOutOfBoundsException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"StringIndexOutOfBoundsException","kind":"constructor","documentation":"Constructor: StringIndexOutOfBoundsException","insertText":"StringIndexOutOfBoundsException"}},{"label":"System","kind":"class","documentation":"Class: System","insertText":"System","properties":[{"label":"arraycopy","kind":"method","documentation":"arraycopy(Object a, int b, Object c, int d, int e): void","insertText":"arraycopy"},{"label":"currentTimeMillis","kind":"method","documentation":"currentTimeMillis(): long","insertText":"currentTimeMillis"},{"label":"nanoTime","kind":"method","documentation":"nanoTime(): long","insertText":"nanoTime"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TypeNotPresentException","kind":"class","documentation":"Class: TypeNotPresentException","insertText":"TypeNotPresentException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"typeName","kind":"method","documentation":"typeName(): String","insertText":"typeName"}]},{"label":"UnsupportedOperationException","kind":"class","documentation":"Class: UnsupportedOperationException","insertText":"UnsupportedOperationException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"UnsupportedOperationException","kind":"constructor","documentation":"Constructor: UnsupportedOperationException","insertText":"UnsupportedOperationException"}},{"label":"Void","kind":"class","documentation":"Class: Void","insertText":"Void","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"BigDecimal","kind":"class","documentation":"Class: BigDecimal","insertText":"BigDecimal","properties":[{"label":"ONE","kind":"property","documentation":"ONE: BigDecimal","insertText":"ONE"},{"label":"TEN","kind":"property","documentation":"TEN: BigDecimal","insertText":"TEN"},{"label":"ZERO","kind":"property","documentation":"ZERO: BigDecimal","insertText":"ZERO"},{"label":"valueOf","kind":"method","documentation":"valueOf(double a): BigDecimal","insertText":"valueOf"},{"label":"abs","kind":"method","documentation":"abs(MathContext a): BigDecimal","insertText":"abs"},{"label":"add","kind":"method","documentation":"add(BigDecimal a, MathContext b | BigDecimal a): BigDecimal","insertText":"add"},{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"byteValueExact","kind":"method","documentation":"byteValueExact(): byte","insertText":"byteValueExact"},{"label":"compareTo","kind":"method","documentation":"compareTo(BigDecimal a): int","insertText":"compareTo"},{"label":"divide","kind":"method","documentation":"divide(BigDecimal a, MathContext b | BigDecimal a): BigDecimal","insertText":"divide"},{"label":"divideAndRemainder","kind":"method","documentation":"divideAndRemainder(BigDecimal a, MathContext b | BigDecimal a): BigDecimal[]","insertText":"divideAndRemainder"},{"label":"divideToIntegralValue","kind":"method","documentation":"divideToIntegralValue(BigDecimal a, MathContext b | BigDecimal a): BigDecimal","insertText":"divideToIntegralValue"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"intValueExact","kind":"method","documentation":"intValueExact(): int","insertText":"intValueExact"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"longValueExact","kind":"method","documentation":"longValueExact(): long","insertText":"longValueExact"},{"label":"max","kind":"method","documentation":"max(BigDecimal a): BigDecimal","insertText":"max"},{"label":"min","kind":"method","documentation":"min(BigDecimal a): BigDecimal","insertText":"min"},{"label":"movePointLeft","kind":"method","documentation":"movePointLeft(int a): BigDecimal","insertText":"movePointLeft"},{"label":"movePointRight","kind":"method","documentation":"movePointRight(int a): BigDecimal","insertText":"movePointRight"},{"label":"multiply","kind":"method","documentation":"multiply(BigDecimal a, MathContext b | BigDecimal a): BigDecimal","insertText":"multiply"},{"label":"negate","kind":"method","documentation":"negate(MathContext a): BigDecimal","insertText":"negate"},{"label":"plus","kind":"method","documentation":"plus(MathContext a): BigDecimal","insertText":"plus"},{"label":"pow","kind":"method","documentation":"pow(int a, MathContext b | int a): BigDecimal","insertText":"pow"},{"label":"precision","kind":"method","documentation":"precision(): int","insertText":"precision"},{"label":"remainder","kind":"method","documentation":"remainder(BigDecimal a, MathContext b | BigDecimal a): BigDecimal","insertText":"remainder"},{"label":"round","kind":"method","documentation":"round(MathContext a): BigDecimal","insertText":"round"},{"label":"scale","kind":"method","documentation":"scale(): int","insertText":"scale"},{"label":"scaleByPowerOfTen","kind":"method","documentation":"scaleByPowerOfTen(int a): BigDecimal","insertText":"scaleByPowerOfTen"},{"label":"setScale","kind":"method","documentation":"setScale(int a, RoundingMode b | int a): BigDecimal","insertText":"setScale"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"shortValueExact","kind":"method","documentation":"shortValueExact(): short","insertText":"shortValueExact"},{"label":"signum","kind":"method","documentation":"signum(): int","insertText":"signum"},{"label":"stripTrailingZeros","kind":"method","documentation":"stripTrailingZeros(): BigDecimal","insertText":"stripTrailingZeros"},{"label":"subtract","kind":"method","documentation":"subtract(BigDecimal a, MathContext b | BigDecimal a): BigDecimal","insertText":"subtract"},{"label":"toBigInteger","kind":"method","documentation":"toBigInteger(): BigInteger","insertText":"toBigInteger"},{"label":"toBigIntegerExact","kind":"method","documentation":"toBigIntegerExact(): BigInteger","insertText":"toBigIntegerExact"},{"label":"toEngineeringString","kind":"method","documentation":"toEngineeringString(): String","insertText":"toEngineeringString"},{"label":"toPlainString","kind":"method","documentation":"toPlainString(): String","insertText":"toPlainString"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"ulp","kind":"method","documentation":"ulp(): BigDecimal","insertText":"ulp"}],"constructorDefinition":{"label":"BigDecimal","kind":"constructor","documentation":"Constructor: BigDecimal","insertText":"BigDecimal"}},{"label":"BigInteger","kind":"class","documentation":"Class: BigInteger","insertText":"BigInteger","properties":[{"label":"ONE","kind":"property","documentation":"ONE: BigInteger","insertText":"ONE"},{"label":"TEN","kind":"property","documentation":"TEN: BigInteger","insertText":"TEN"},{"label":"ZERO","kind":"property","documentation":"ZERO: BigInteger","insertText":"ZERO"},{"label":"valueOf","kind":"method","documentation":"valueOf(long a): BigInteger","insertText":"valueOf"},{"label":"abs","kind":"method","documentation":"abs(): BigInteger","insertText":"abs"},{"label":"add","kind":"method","documentation":"add(BigInteger a): BigInteger","insertText":"add"},{"label":"and","kind":"method","documentation":"and(BigInteger a): BigInteger","insertText":"and"},{"label":"andNot","kind":"method","documentation":"andNot(BigInteger a): BigInteger","insertText":"andNot"},{"label":"bitCount","kind":"method","documentation":"bitCount(): int","insertText":"bitCount"},{"label":"bitLength","kind":"method","documentation":"bitLength(): int","insertText":"bitLength"},{"label":"byteValue","kind":"method","documentation":"byteValue(): byte","insertText":"byteValue"},{"label":"byteValueExact","kind":"method","documentation":"byteValueExact(): byte","insertText":"byteValueExact"},{"label":"clearBit","kind":"method","documentation":"clearBit(int a): BigInteger","insertText":"clearBit"},{"label":"compareTo","kind":"method","documentation":"compareTo(BigInteger a): int","insertText":"compareTo"},{"label":"divide","kind":"method","documentation":"divide(BigInteger a): BigInteger","insertText":"divide"},{"label":"divideAndRemainder","kind":"method","documentation":"divideAndRemainder(BigInteger a): BigInteger[]","insertText":"divideAndRemainder"},{"label":"doubleValue","kind":"method","documentation":"doubleValue(): double","insertText":"doubleValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"flipBit","kind":"method","documentation":"flipBit(int a): BigInteger","insertText":"flipBit"},{"label":"floatValue","kind":"method","documentation":"floatValue(): float","insertText":"floatValue"},{"label":"gcd","kind":"method","documentation":"gcd(BigInteger a): BigInteger","insertText":"gcd"},{"label":"getLowestSetBit","kind":"method","documentation":"getLowestSetBit(): int","insertText":"getLowestSetBit"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intValue","kind":"method","documentation":"intValue(): int","insertText":"intValue"},{"label":"intValueExact","kind":"method","documentation":"intValueExact(): int","insertText":"intValueExact"},{"label":"longValue","kind":"method","documentation":"longValue(): long","insertText":"longValue"},{"label":"longValueExact","kind":"method","documentation":"longValueExact(): long","insertText":"longValueExact"},{"label":"max","kind":"method","documentation":"max(BigInteger a): BigInteger","insertText":"max"},{"label":"min","kind":"method","documentation":"min(BigInteger a): BigInteger","insertText":"min"},{"label":"mod","kind":"method","documentation":"mod(BigInteger a): BigInteger","insertText":"mod"},{"label":"modInverse","kind":"method","documentation":"modInverse(BigInteger a): BigInteger","insertText":"modInverse"},{"label":"modPow","kind":"method","documentation":"modPow(BigInteger a, BigInteger b): BigInteger","insertText":"modPow"},{"label":"multiply","kind":"method","documentation":"multiply(BigInteger a): BigInteger","insertText":"multiply"},{"label":"negate","kind":"method","documentation":"negate(): BigInteger","insertText":"negate"},{"label":"not","kind":"method","documentation":"not(): BigInteger","insertText":"not"},{"label":"or","kind":"method","documentation":"or(BigInteger a): BigInteger","insertText":"or"},{"label":"pow","kind":"method","documentation":"pow(int a): BigInteger","insertText":"pow"},{"label":"remainder","kind":"method","documentation":"remainder(BigInteger a): BigInteger","insertText":"remainder"},{"label":"setBit","kind":"method","documentation":"setBit(int a): BigInteger","insertText":"setBit"},{"label":"shiftLeft","kind":"method","documentation":"shiftLeft(int a): BigInteger","insertText":"shiftLeft"},{"label":"shiftRight","kind":"method","documentation":"shiftRight(int a): BigInteger","insertText":"shiftRight"},{"label":"shortValue","kind":"method","documentation":"shortValue(): short","insertText":"shortValue"},{"label":"shortValueExact","kind":"method","documentation":"shortValueExact(): short","insertText":"shortValueExact"},{"label":"signum","kind":"method","documentation":"signum(): int","insertText":"signum"},{"label":"subtract","kind":"method","documentation":"subtract(BigInteger a): BigInteger","insertText":"subtract"},{"label":"testBit","kind":"method","documentation":"testBit(int a): boolean","insertText":"testBit"},{"label":"toByteArray","kind":"method","documentation":"toByteArray(): byte[]","insertText":"toByteArray"},{"label":"toString","kind":"method","documentation":"toString(int a): String","insertText":"toString"},{"label":"xor","kind":"method","documentation":"xor(BigInteger a): BigInteger","insertText":"xor"}],"constructorDefinition":{"label":"BigInteger","kind":"constructor","documentation":"Constructor: BigInteger","insertText":"BigInteger"}},{"label":"MathContext","kind":"class","documentation":"Class: MathContext","insertText":"MathContext","properties":[{"label":"DECIMAL128","kind":"property","documentation":"DECIMAL128: MathContext","insertText":"DECIMAL128"},{"label":"DECIMAL32","kind":"property","documentation":"DECIMAL32: MathContext","insertText":"DECIMAL32"},{"label":"DECIMAL64","kind":"property","documentation":"DECIMAL64: MathContext","insertText":"DECIMAL64"},{"label":"UNLIMITED","kind":"property","documentation":"UNLIMITED: MathContext","insertText":"UNLIMITED"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getPrecision","kind":"method","documentation":"getPrecision(): int","insertText":"getPrecision"},{"label":"getRoundingMode","kind":"method","documentation":"getRoundingMode(): RoundingMode","insertText":"getRoundingMode"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"MathContext","kind":"constructor","documentation":"Constructor: MathContext","insertText":"MathContext"}},{"label":"RoundingMode","kind":"class","documentation":"Class: RoundingMode","insertText":"RoundingMode","properties":[{"label":"CEILING","kind":"property","documentation":"CEILING: RoundingMode","insertText":"CEILING"},{"label":"DOWN","kind":"property","documentation":"DOWN: RoundingMode","insertText":"DOWN"},{"label":"FLOOR","kind":"property","documentation":"FLOOR: RoundingMode","insertText":"FLOOR"},{"label":"HALF_DOWN","kind":"property","documentation":"HALF_DOWN: RoundingMode","insertText":"HALF_DOWN"},{"label":"HALF_EVEN","kind":"property","documentation":"HALF_EVEN: RoundingMode","insertText":"HALF_EVEN"},{"label":"HALF_UP","kind":"property","documentation":"HALF_UP: RoundingMode","insertText":"HALF_UP"},{"label":"UNNECESSARY","kind":"property","documentation":"UNNECESSARY: RoundingMode","insertText":"UNNECESSARY"},{"label":"UP","kind":"property","documentation":"UP: RoundingMode","insertText":"UP"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): RoundingMode","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): RoundingMode[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Annotation","kind":"class","documentation":"Class: Annotation","insertText":"Annotation","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getValue","kind":"method","documentation":"getValue(): def","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Annotation","kind":"constructor","documentation":"Constructor: Annotation","insertText":"Annotation"}},{"label":"AttributedCharacterIterator","kind":"class","documentation":"Class: AttributedCharacterIterator","insertText":"AttributedCharacterIterator","properties":[{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"current","kind":"method","documentation":"current(): char","insertText":"current"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"first","kind":"method","documentation":"first(): char","insertText":"first"},{"label":"getAllAttributeKeys","kind":"method","documentation":"getAllAttributeKeys(): Set","insertText":"getAllAttributeKeys"},{"label":"getAttribute","kind":"method","documentation":"getAttribute(AttributedCharacterIterator.Attribute a): def","insertText":"getAttribute"},{"label":"getAttributes","kind":"method","documentation":"getAttributes(): Map","insertText":"getAttributes"},{"label":"getBeginIndex","kind":"method","documentation":"getBeginIndex(): int","insertText":"getBeginIndex"},{"label":"getEndIndex","kind":"method","documentation":"getEndIndex(): int","insertText":"getEndIndex"},{"label":"getIndex","kind":"method","documentation":"getIndex(): int","insertText":"getIndex"},{"label":"getRunLimit","kind":"method","documentation":"getRunLimit(Set a): int","insertText":"getRunLimit"},{"label":"getRunStart","kind":"method","documentation":"getRunStart(Set a): int","insertText":"getRunStart"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"last","kind":"method","documentation":"last(): char","insertText":"last"},{"label":"next","kind":"method","documentation":"next(): char","insertText":"next"},{"label":"previous","kind":"method","documentation":"previous(): char","insertText":"previous"},{"label":"setIndex","kind":"method","documentation":"setIndex(int a): char","insertText":"setIndex"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Attribute","kind":"class","documentation":"Class: Attribute","insertText":"Attribute","properties":[{"label":"INPUT_METHOD_SEGMENT","kind":"property","documentation":"INPUT_METHOD_SEGMENT: AttributedCharacterIterator.Attribute","insertText":"INPUT_METHOD_SEGMENT"},{"label":"LANGUAGE","kind":"property","documentation":"LANGUAGE: AttributedCharacterIterator.Attribute","insertText":"LANGUAGE"},{"label":"READING","kind":"property","documentation":"READING: AttributedCharacterIterator.Attribute","insertText":"READING"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"AttributedString","kind":"class","documentation":"Class: AttributedString","insertText":"AttributedString","properties":[{"label":"addAttribute","kind":"method","documentation":"addAttribute(AttributedCharacterIterator.Attribute a, Object b, int c, int d | AttributedCharacterIterator.Attribute a, Object b): void","insertText":"addAttribute"},{"label":"addAttributes","kind":"method","documentation":"addAttributes(Map a, int b, int c): void","insertText":"addAttributes"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getIterator","kind":"method","documentation":"getIterator(AttributedCharacterIterator.Attribute[] a, int b, int c | AttributedCharacterIterator.Attribute[] a): AttributedCharacterIterator","insertText":"getIterator"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"AttributedString","kind":"constructor","documentation":"Constructor: AttributedString","insertText":"AttributedString"}},{"label":"Bidi","kind":"class","documentation":"Class: Bidi","insertText":"Bidi","properties":[{"label":"DIRECTION_DEFAULT_LEFT_TO_RIGHT","kind":"property","documentation":"DIRECTION_DEFAULT_LEFT_TO_RIGHT: int","insertText":"DIRECTION_DEFAULT_LEFT_TO_RIGHT"},{"label":"DIRECTION_DEFAULT_RIGHT_TO_LEFT","kind":"property","documentation":"DIRECTION_DEFAULT_RIGHT_TO_LEFT: int","insertText":"DIRECTION_DEFAULT_RIGHT_TO_LEFT"},{"label":"DIRECTION_LEFT_TO_RIGHT","kind":"property","documentation":"DIRECTION_LEFT_TO_RIGHT: int","insertText":"DIRECTION_LEFT_TO_RIGHT"},{"label":"DIRECTION_RIGHT_TO_LEFT","kind":"property","documentation":"DIRECTION_RIGHT_TO_LEFT: int","insertText":"DIRECTION_RIGHT_TO_LEFT"},{"label":"reorderVisually","kind":"method","documentation":"reorderVisually(byte[] a, int b, Object[] c, int d, int e): void","insertText":"reorderVisually"},{"label":"requiresBidi","kind":"method","documentation":"requiresBidi(char[] a, int b, int c): boolean","insertText":"requiresBidi"},{"label":"baseIsLeftToRight","kind":"method","documentation":"baseIsLeftToRight(): boolean","insertText":"baseIsLeftToRight"},{"label":"createLineBidi","kind":"method","documentation":"createLineBidi(int a, int b): Bidi","insertText":"createLineBidi"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getBaseLevel","kind":"method","documentation":"getBaseLevel(): int","insertText":"getBaseLevel"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getLevelAt","kind":"method","documentation":"getLevelAt(int a): int","insertText":"getLevelAt"},{"label":"getRunCount","kind":"method","documentation":"getRunCount(): int","insertText":"getRunCount"},{"label":"getRunLevel","kind":"method","documentation":"getRunLevel(int a): int","insertText":"getRunLevel"},{"label":"getRunLimit","kind":"method","documentation":"getRunLimit(int a): int","insertText":"getRunLimit"},{"label":"getRunStart","kind":"method","documentation":"getRunStart(int a): int","insertText":"getRunStart"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeftToRight","kind":"method","documentation":"isLeftToRight(): boolean","insertText":"isLeftToRight"},{"label":"isMixed","kind":"method","documentation":"isMixed(): boolean","insertText":"isMixed"},{"label":"isRightToLeft","kind":"method","documentation":"isRightToLeft(): boolean","insertText":"isRightToLeft"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Bidi","kind":"constructor","documentation":"Constructor: Bidi","insertText":"Bidi"}},{"label":"BreakIterator","kind":"class","documentation":"Class: BreakIterator","insertText":"BreakIterator","properties":[{"label":"DONE","kind":"property","documentation":"DONE: int","insertText":"DONE"},{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Locale[]","insertText":"getAvailableLocales"},{"label":"getCharacterInstance","kind":"method","documentation":"getCharacterInstance(Locale a): BreakIterator","insertText":"getCharacterInstance"},{"label":"getLineInstance","kind":"method","documentation":"getLineInstance(Locale a): BreakIterator","insertText":"getLineInstance"},{"label":"getSentenceInstance","kind":"method","documentation":"getSentenceInstance(Locale a): BreakIterator","insertText":"getSentenceInstance"},{"label":"getWordInstance","kind":"method","documentation":"getWordInstance(Locale a): BreakIterator","insertText":"getWordInstance"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"current","kind":"method","documentation":"current(): int","insertText":"current"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"first","kind":"method","documentation":"first(): int","insertText":"first"},{"label":"following","kind":"method","documentation":"following(int a): int","insertText":"following"},{"label":"getText","kind":"method","documentation":"getText(): CharacterIterator","insertText":"getText"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isBoundary","kind":"method","documentation":"isBoundary(int a): boolean","insertText":"isBoundary"},{"label":"last","kind":"method","documentation":"last(): int","insertText":"last"},{"label":"next","kind":"method","documentation":"next(int a): int","insertText":"next"},{"label":"preceding","kind":"method","documentation":"preceding(int a): int","insertText":"preceding"},{"label":"previous","kind":"method","documentation":"previous(): int","insertText":"previous"},{"label":"setText","kind":"method","documentation":"setText(String a): void","insertText":"setText"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"CharacterIterator","kind":"class","documentation":"Class: CharacterIterator","insertText":"CharacterIterator","properties":[{"label":"DONE","kind":"property","documentation":"DONE: char","insertText":"DONE"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"current","kind":"method","documentation":"current(): char","insertText":"current"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"first","kind":"method","documentation":"first(): char","insertText":"first"},{"label":"getBeginIndex","kind":"method","documentation":"getBeginIndex(): int","insertText":"getBeginIndex"},{"label":"getEndIndex","kind":"method","documentation":"getEndIndex(): int","insertText":"getEndIndex"},{"label":"getIndex","kind":"method","documentation":"getIndex(): int","insertText":"getIndex"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"last","kind":"method","documentation":"last(): char","insertText":"last"},{"label":"next","kind":"method","documentation":"next(): char","insertText":"next"},{"label":"previous","kind":"method","documentation":"previous(): char","insertText":"previous"},{"label":"setIndex","kind":"method","documentation":"setIndex(int a): char","insertText":"setIndex"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ChoiceFormat","kind":"class","documentation":"Class: ChoiceFormat","insertText":"ChoiceFormat","properties":[{"label":"nextDouble","kind":"method","documentation":"nextDouble(double a, boolean b | double a): double","insertText":"nextDouble"},{"label":"previousDouble","kind":"method","documentation":"previousDouble(double a): double","insertText":"previousDouble"},{"label":"applyPattern","kind":"method","documentation":"applyPattern(String a): void","insertText":"applyPattern"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String","insertText":"format"},{"label":"formatToCharacterIterator","kind":"method","documentation":"formatToCharacterIterator(Object a): AttributedCharacterIterator","insertText":"formatToCharacterIterator"},{"label":"getCurrency","kind":"method","documentation":"getCurrency(): Currency","insertText":"getCurrency"},{"label":"getFormats","kind":"method","documentation":"getFormats(): def[]","insertText":"getFormats"},{"label":"getLimits","kind":"method","documentation":"getLimits(): double[]","insertText":"getLimits"},{"label":"getMaximumFractionDigits","kind":"method","documentation":"getMaximumFractionDigits(): int","insertText":"getMaximumFractionDigits"},{"label":"getMaximumIntegerDigits","kind":"method","documentation":"getMaximumIntegerDigits(): int","insertText":"getMaximumIntegerDigits"},{"label":"getMinimumFractionDigits","kind":"method","documentation":"getMinimumFractionDigits(): int","insertText":"getMinimumFractionDigits"},{"label":"getMinimumIntegerDigits","kind":"method","documentation":"getMinimumIntegerDigits(): int","insertText":"getMinimumIntegerDigits"},{"label":"getRoundingMode","kind":"method","documentation":"getRoundingMode(): RoundingMode","insertText":"getRoundingMode"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isGroupingUsed","kind":"method","documentation":"isGroupingUsed(): boolean","insertText":"isGroupingUsed"},{"label":"isParseIntegerOnly","kind":"method","documentation":"isParseIntegerOnly(): boolean","insertText":"isParseIntegerOnly"},{"label":"parse","kind":"method","documentation":"parse(String a, ParsePosition b | String a): Number","insertText":"parse"},{"label":"parseObject","kind":"method","documentation":"parseObject(String a, ParsePosition b | String a): Object","insertText":"parseObject"},{"label":"setChoices","kind":"method","documentation":"setChoices(double[] a, String[] b): void","insertText":"setChoices"},{"label":"setCurrency","kind":"method","documentation":"setCurrency(Currency a): void","insertText":"setCurrency"},{"label":"setGroupingUsed","kind":"method","documentation":"setGroupingUsed(boolean a): void","insertText":"setGroupingUsed"},{"label":"setMaximumFractionDigits","kind":"method","documentation":"setMaximumFractionDigits(int a): void","insertText":"setMaximumFractionDigits"},{"label":"setMaximumIntegerDigits","kind":"method","documentation":"setMaximumIntegerDigits(int a): void","insertText":"setMaximumIntegerDigits"},{"label":"setMinimumFractionDigits","kind":"method","documentation":"setMinimumFractionDigits(int a): void","insertText":"setMinimumFractionDigits"},{"label":"setMinimumIntegerDigits","kind":"method","documentation":"setMinimumIntegerDigits(int a): void","insertText":"setMinimumIntegerDigits"},{"label":"setParseIntegerOnly","kind":"method","documentation":"setParseIntegerOnly(boolean a): void","insertText":"setParseIntegerOnly"},{"label":"setRoundingMode","kind":"method","documentation":"setRoundingMode(RoundingMode a): void","insertText":"setRoundingMode"},{"label":"toPattern","kind":"method","documentation":"toPattern(): String","insertText":"toPattern"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ChoiceFormat","kind":"constructor","documentation":"Constructor: ChoiceFormat","insertText":"ChoiceFormat"}},{"label":"CollationElementIterator","kind":"class","documentation":"Class: CollationElementIterator","insertText":"CollationElementIterator","properties":[{"label":"NULLORDER","kind":"property","documentation":"NULLORDER: int","insertText":"NULLORDER"},{"label":"primaryOrder","kind":"method","documentation":"primaryOrder(int a): int","insertText":"primaryOrder"},{"label":"secondaryOrder","kind":"method","documentation":"secondaryOrder(int a): short","insertText":"secondaryOrder"},{"label":"tertiaryOrder","kind":"method","documentation":"tertiaryOrder(int a): short","insertText":"tertiaryOrder"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getMaxExpansion","kind":"method","documentation":"getMaxExpansion(int a): int","insertText":"getMaxExpansion"},{"label":"getOffset","kind":"method","documentation":"getOffset(): int","insertText":"getOffset"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"next","kind":"method","documentation":"next(): int","insertText":"next"},{"label":"previous","kind":"method","documentation":"previous(): int","insertText":"previous"},{"label":"reset","kind":"method","documentation":"reset(): void","insertText":"reset"},{"label":"setOffset","kind":"method","documentation":"setOffset(int a): void","insertText":"setOffset"},{"label":"setText","kind":"method","documentation":"setText(String a): void","insertText":"setText"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"CollationKey","kind":"class","documentation":"Class: CollationKey","insertText":"CollationKey","properties":[{"label":"compareTo","kind":"method","documentation":"compareTo(CollationKey a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getSourceString","kind":"method","documentation":"getSourceString(): String","insertText":"getSourceString"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toByteArray","kind":"method","documentation":"toByteArray(): byte[]","insertText":"toByteArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Collator","kind":"class","documentation":"Class: Collator","insertText":"Collator","properties":[{"label":"CANONICAL_DECOMPOSITION","kind":"property","documentation":"CANONICAL_DECOMPOSITION: int","insertText":"CANONICAL_DECOMPOSITION"},{"label":"FULL_DECOMPOSITION","kind":"property","documentation":"FULL_DECOMPOSITION: int","insertText":"FULL_DECOMPOSITION"},{"label":"IDENTICAL","kind":"property","documentation":"IDENTICAL: int","insertText":"IDENTICAL"},{"label":"NO_DECOMPOSITION","kind":"property","documentation":"NO_DECOMPOSITION: int","insertText":"NO_DECOMPOSITION"},{"label":"PRIMARY","kind":"property","documentation":"PRIMARY: int","insertText":"PRIMARY"},{"label":"SECONDARY","kind":"property","documentation":"SECONDARY: int","insertText":"SECONDARY"},{"label":"TERTIARY","kind":"property","documentation":"TERTIARY: int","insertText":"TERTIARY"},{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Locale[]","insertText":"getAvailableLocales"},{"label":"getInstance","kind":"method","documentation":"getInstance(Locale a): Collator","insertText":"getInstance"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"compare","kind":"method","documentation":"compare(def a, def b): int","insertText":"compare"},{"label":"equals","kind":"method","documentation":"equals(String a, String b | Object a): boolean","insertText":"equals"},{"label":"getCollationKey","kind":"method","documentation":"getCollationKey(String a): CollationKey","insertText":"getCollationKey"},{"label":"getDecomposition","kind":"method","documentation":"getDecomposition(): int","insertText":"getDecomposition"},{"label":"getStrength","kind":"method","documentation":"getStrength(): int","insertText":"getStrength"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"reversed","kind":"method","documentation":"reversed(): Comparator","insertText":"reversed"},{"label":"setDecomposition","kind":"method","documentation":"setDecomposition(int a): void","insertText":"setDecomposition"},{"label":"setStrength","kind":"method","documentation":"setStrength(int a): void","insertText":"setStrength"},{"label":"thenComparing","kind":"method","documentation":"thenComparing(Function a, Comparator b | Comparator a): Comparator","insertText":"thenComparing"},{"label":"thenComparingDouble","kind":"method","documentation":"thenComparingDouble(ToDoubleFunction a): Comparator","insertText":"thenComparingDouble"},{"label":"thenComparingInt","kind":"method","documentation":"thenComparingInt(ToIntFunction a): Comparator","insertText":"thenComparingInt"},{"label":"thenComparingLong","kind":"method","documentation":"thenComparingLong(ToLongFunction a): Comparator","insertText":"thenComparingLong"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DateFormat","kind":"class","documentation":"Class: DateFormat","insertText":"DateFormat","properties":[{"label":"AM_PM_FIELD","kind":"property","documentation":"AM_PM_FIELD: int","insertText":"AM_PM_FIELD"},{"label":"DATE_FIELD","kind":"property","documentation":"DATE_FIELD: int","insertText":"DATE_FIELD"},{"label":"DAY_OF_WEEK_FIELD","kind":"property","documentation":"DAY_OF_WEEK_FIELD: int","insertText":"DAY_OF_WEEK_FIELD"},{"label":"DAY_OF_WEEK_IN_MONTH_FIELD","kind":"property","documentation":"DAY_OF_WEEK_IN_MONTH_FIELD: int","insertText":"DAY_OF_WEEK_IN_MONTH_FIELD"},{"label":"DAY_OF_YEAR_FIELD","kind":"property","documentation":"DAY_OF_YEAR_FIELD: int","insertText":"DAY_OF_YEAR_FIELD"},{"label":"DEFAULT","kind":"property","documentation":"DEFAULT: int","insertText":"DEFAULT"},{"label":"ERA_FIELD","kind":"property","documentation":"ERA_FIELD: int","insertText":"ERA_FIELD"},{"label":"FULL","kind":"property","documentation":"FULL: int","insertText":"FULL"},{"label":"HOUR0_FIELD","kind":"property","documentation":"HOUR0_FIELD: int","insertText":"HOUR0_FIELD"},{"label":"HOUR1_FIELD","kind":"property","documentation":"HOUR1_FIELD: int","insertText":"HOUR1_FIELD"},{"label":"HOUR_OF_DAY0_FIELD","kind":"property","documentation":"HOUR_OF_DAY0_FIELD: int","insertText":"HOUR_OF_DAY0_FIELD"},{"label":"HOUR_OF_DAY1_FIELD","kind":"property","documentation":"HOUR_OF_DAY1_FIELD: int","insertText":"HOUR_OF_DAY1_FIELD"},{"label":"LONG","kind":"property","documentation":"LONG: int","insertText":"LONG"},{"label":"MEDIUM","kind":"property","documentation":"MEDIUM: int","insertText":"MEDIUM"},{"label":"MILLISECOND_FIELD","kind":"property","documentation":"MILLISECOND_FIELD: int","insertText":"MILLISECOND_FIELD"},{"label":"MINUTE_FIELD","kind":"property","documentation":"MINUTE_FIELD: int","insertText":"MINUTE_FIELD"},{"label":"MONTH_FIELD","kind":"property","documentation":"MONTH_FIELD: int","insertText":"MONTH_FIELD"},{"label":"SECOND_FIELD","kind":"property","documentation":"SECOND_FIELD: int","insertText":"SECOND_FIELD"},{"label":"SHORT","kind":"property","documentation":"SHORT: int","insertText":"SHORT"},{"label":"TIMEZONE_FIELD","kind":"property","documentation":"TIMEZONE_FIELD: int","insertText":"TIMEZONE_FIELD"},{"label":"WEEK_OF_MONTH_FIELD","kind":"property","documentation":"WEEK_OF_MONTH_FIELD: int","insertText":"WEEK_OF_MONTH_FIELD"},{"label":"WEEK_OF_YEAR_FIELD","kind":"property","documentation":"WEEK_OF_YEAR_FIELD: int","insertText":"WEEK_OF_YEAR_FIELD"},{"label":"YEAR_FIELD","kind":"property","documentation":"YEAR_FIELD: int","insertText":"YEAR_FIELD"},{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Locale[]","insertText":"getAvailableLocales"},{"label":"getDateInstance","kind":"method","documentation":"getDateInstance(int a, Locale b | int a): DateFormat","insertText":"getDateInstance"},{"label":"getDateTimeInstance","kind":"method","documentation":"getDateTimeInstance(int a, int b, Locale c | int a, int b): DateFormat","insertText":"getDateTimeInstance"},{"label":"getInstance","kind":"method","documentation":"getInstance(): DateFormat","insertText":"getInstance"},{"label":"getTimeInstance","kind":"method","documentation":"getTimeInstance(int a, Locale b | int a): DateFormat","insertText":"getTimeInstance"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String","insertText":"format"},{"label":"formatToCharacterIterator","kind":"method","documentation":"formatToCharacterIterator(Object a): AttributedCharacterIterator","insertText":"formatToCharacterIterator"},{"label":"getCalendar","kind":"method","documentation":"getCalendar(): Calendar","insertText":"getCalendar"},{"label":"getNumberFormat","kind":"method","documentation":"getNumberFormat(): NumberFormat","insertText":"getNumberFormat"},{"label":"getTimeZone","kind":"method","documentation":"getTimeZone(): TimeZone","insertText":"getTimeZone"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLenient","kind":"method","documentation":"isLenient(): boolean","insertText":"isLenient"},{"label":"parse","kind":"method","documentation":"parse(String a, ParsePosition b | String a): Date","insertText":"parse"},{"label":"parseObject","kind":"method","documentation":"parseObject(String a, ParsePosition b | String a): Object","insertText":"parseObject"},{"label":"setCalendar","kind":"method","documentation":"setCalendar(Calendar a): void","insertText":"setCalendar"},{"label":"setLenient","kind":"method","documentation":"setLenient(boolean a): void","insertText":"setLenient"},{"label":"setNumberFormat","kind":"method","documentation":"setNumberFormat(NumberFormat a): void","insertText":"setNumberFormat"},{"label":"setTimeZone","kind":"method","documentation":"setTimeZone(TimeZone a): void","insertText":"setTimeZone"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Field","kind":"class","documentation":"Class: Field","insertText":"Field","properties":[{"label":"AM_PM","kind":"property","documentation":"AM_PM: DateFormat.Field","insertText":"AM_PM"},{"label":"DAY_OF_MONTH","kind":"property","documentation":"DAY_OF_MONTH: DateFormat.Field","insertText":"DAY_OF_MONTH"},{"label":"DAY_OF_WEEK","kind":"property","documentation":"DAY_OF_WEEK: DateFormat.Field","insertText":"DAY_OF_WEEK"},{"label":"DAY_OF_WEEK_IN_MONTH","kind":"property","documentation":"DAY_OF_WEEK_IN_MONTH: DateFormat.Field","insertText":"DAY_OF_WEEK_IN_MONTH"},{"label":"DAY_OF_YEAR","kind":"property","documentation":"DAY_OF_YEAR: DateFormat.Field","insertText":"DAY_OF_YEAR"},{"label":"ERA","kind":"property","documentation":"ERA: DateFormat.Field","insertText":"ERA"},{"label":"HOUR0","kind":"property","documentation":"HOUR0: DateFormat.Field","insertText":"HOUR0"},{"label":"HOUR1","kind":"property","documentation":"HOUR1: DateFormat.Field","insertText":"HOUR1"},{"label":"HOUR_OF_DAY0","kind":"property","documentation":"HOUR_OF_DAY0: DateFormat.Field","insertText":"HOUR_OF_DAY0"},{"label":"HOUR_OF_DAY1","kind":"property","documentation":"HOUR_OF_DAY1: DateFormat.Field","insertText":"HOUR_OF_DAY1"},{"label":"MILLISECOND","kind":"property","documentation":"MILLISECOND: DateFormat.Field","insertText":"MILLISECOND"},{"label":"MINUTE","kind":"property","documentation":"MINUTE: DateFormat.Field","insertText":"MINUTE"},{"label":"MONTH","kind":"property","documentation":"MONTH: DateFormat.Field","insertText":"MONTH"},{"label":"SECOND","kind":"property","documentation":"SECOND: DateFormat.Field","insertText":"SECOND"},{"label":"TIME_ZONE","kind":"property","documentation":"TIME_ZONE: DateFormat.Field","insertText":"TIME_ZONE"},{"label":"WEEK_OF_MONTH","kind":"property","documentation":"WEEK_OF_MONTH: DateFormat.Field","insertText":"WEEK_OF_MONTH"},{"label":"WEEK_OF_YEAR","kind":"property","documentation":"WEEK_OF_YEAR: DateFormat.Field","insertText":"WEEK_OF_YEAR"},{"label":"YEAR","kind":"property","documentation":"YEAR: DateFormat.Field","insertText":"YEAR"},{"label":"ofCalendarField","kind":"method","documentation":"ofCalendarField(int a): DateFormat.Field","insertText":"ofCalendarField"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getCalendarField","kind":"method","documentation":"getCalendarField(): int","insertText":"getCalendarField"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DateFormatSymbols","kind":"class","documentation":"Class: DateFormatSymbols","insertText":"DateFormatSymbols","properties":[{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Locale[]","insertText":"getAvailableLocales"},{"label":"getInstance","kind":"method","documentation":"getInstance(Locale a): DateFormatSymbols","insertText":"getInstance"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAmPmStrings","kind":"method","documentation":"getAmPmStrings(): String[]","insertText":"getAmPmStrings"},{"label":"getEras","kind":"method","documentation":"getEras(): String[]","insertText":"getEras"},{"label":"getLocalPatternChars","kind":"method","documentation":"getLocalPatternChars(): String","insertText":"getLocalPatternChars"},{"label":"getMonths","kind":"method","documentation":"getMonths(): String[]","insertText":"getMonths"},{"label":"getShortMonths","kind":"method","documentation":"getShortMonths(): String[]","insertText":"getShortMonths"},{"label":"getShortWeekdays","kind":"method","documentation":"getShortWeekdays(): String[]","insertText":"getShortWeekdays"},{"label":"getWeekdays","kind":"method","documentation":"getWeekdays(): String[]","insertText":"getWeekdays"},{"label":"getZoneStrings","kind":"method","documentation":"getZoneStrings(): String[][]","insertText":"getZoneStrings"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"setAmPmStrings","kind":"method","documentation":"setAmPmStrings(String[] a): void","insertText":"setAmPmStrings"},{"label":"setEras","kind":"method","documentation":"setEras(String[] a): void","insertText":"setEras"},{"label":"setLocalPatternChars","kind":"method","documentation":"setLocalPatternChars(String a): void","insertText":"setLocalPatternChars"},{"label":"setMonths","kind":"method","documentation":"setMonths(String[] a): void","insertText":"setMonths"},{"label":"setShortMonths","kind":"method","documentation":"setShortMonths(String[] a): void","insertText":"setShortMonths"},{"label":"setShortWeekdays","kind":"method","documentation":"setShortWeekdays(String[] a): void","insertText":"setShortWeekdays"},{"label":"setWeekdays","kind":"method","documentation":"setWeekdays(String[] a): void","insertText":"setWeekdays"},{"label":"setZoneStrings","kind":"method","documentation":"setZoneStrings(String[][] a): void","insertText":"setZoneStrings"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"DateFormatSymbols","kind":"constructor","documentation":"Constructor: DateFormatSymbols","insertText":"DateFormatSymbols"}},{"label":"DecimalFormat","kind":"class","documentation":"Class: DecimalFormat","insertText":"DecimalFormat","properties":[{"label":"applyLocalizedPattern","kind":"method","documentation":"applyLocalizedPattern(String a): void","insertText":"applyLocalizedPattern"},{"label":"applyPattern","kind":"method","documentation":"applyPattern(String a): void","insertText":"applyPattern"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String","insertText":"format"},{"label":"formatToCharacterIterator","kind":"method","documentation":"formatToCharacterIterator(Object a): AttributedCharacterIterator","insertText":"formatToCharacterIterator"},{"label":"getCurrency","kind":"method","documentation":"getCurrency(): Currency","insertText":"getCurrency"},{"label":"getDecimalFormatSymbols","kind":"method","documentation":"getDecimalFormatSymbols(): DecimalFormatSymbols","insertText":"getDecimalFormatSymbols"},{"label":"getGroupingSize","kind":"method","documentation":"getGroupingSize(): int","insertText":"getGroupingSize"},{"label":"getMaximumFractionDigits","kind":"method","documentation":"getMaximumFractionDigits(): int","insertText":"getMaximumFractionDigits"},{"label":"getMaximumIntegerDigits","kind":"method","documentation":"getMaximumIntegerDigits(): int","insertText":"getMaximumIntegerDigits"},{"label":"getMinimumFractionDigits","kind":"method","documentation":"getMinimumFractionDigits(): int","insertText":"getMinimumFractionDigits"},{"label":"getMinimumIntegerDigits","kind":"method","documentation":"getMinimumIntegerDigits(): int","insertText":"getMinimumIntegerDigits"},{"label":"getMultiplier","kind":"method","documentation":"getMultiplier(): int","insertText":"getMultiplier"},{"label":"getNegativePrefix","kind":"method","documentation":"getNegativePrefix(): String","insertText":"getNegativePrefix"},{"label":"getNegativeSuffix","kind":"method","documentation":"getNegativeSuffix(): String","insertText":"getNegativeSuffix"},{"label":"getPositivePrefix","kind":"method","documentation":"getPositivePrefix(): String","insertText":"getPositivePrefix"},{"label":"getPositiveSuffix","kind":"method","documentation":"getPositiveSuffix(): String","insertText":"getPositiveSuffix"},{"label":"getRoundingMode","kind":"method","documentation":"getRoundingMode(): RoundingMode","insertText":"getRoundingMode"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isDecimalSeparatorAlwaysShown","kind":"method","documentation":"isDecimalSeparatorAlwaysShown(): boolean","insertText":"isDecimalSeparatorAlwaysShown"},{"label":"isGroupingUsed","kind":"method","documentation":"isGroupingUsed(): boolean","insertText":"isGroupingUsed"},{"label":"isParseBigDecimal","kind":"method","documentation":"isParseBigDecimal(): boolean","insertText":"isParseBigDecimal"},{"label":"isParseIntegerOnly","kind":"method","documentation":"isParseIntegerOnly(): boolean","insertText":"isParseIntegerOnly"},{"label":"parse","kind":"method","documentation":"parse(String a, ParsePosition b | String a): Number","insertText":"parse"},{"label":"parseObject","kind":"method","documentation":"parseObject(String a, ParsePosition b | String a): Object","insertText":"parseObject"},{"label":"setCurrency","kind":"method","documentation":"setCurrency(Currency a): void","insertText":"setCurrency"},{"label":"setDecimalFormatSymbols","kind":"method","documentation":"setDecimalFormatSymbols(DecimalFormatSymbols a): void","insertText":"setDecimalFormatSymbols"},{"label":"setDecimalSeparatorAlwaysShown","kind":"method","documentation":"setDecimalSeparatorAlwaysShown(boolean a): void","insertText":"setDecimalSeparatorAlwaysShown"},{"label":"setGroupingSize","kind":"method","documentation":"setGroupingSize(int a): void","insertText":"setGroupingSize"},{"label":"setGroupingUsed","kind":"method","documentation":"setGroupingUsed(boolean a): void","insertText":"setGroupingUsed"},{"label":"setMaximumFractionDigits","kind":"method","documentation":"setMaximumFractionDigits(int a): void","insertText":"setMaximumFractionDigits"},{"label":"setMaximumIntegerDigits","kind":"method","documentation":"setMaximumIntegerDigits(int a): void","insertText":"setMaximumIntegerDigits"},{"label":"setMinimumFractionDigits","kind":"method","documentation":"setMinimumFractionDigits(int a): void","insertText":"setMinimumFractionDigits"},{"label":"setMinimumIntegerDigits","kind":"method","documentation":"setMinimumIntegerDigits(int a): void","insertText":"setMinimumIntegerDigits"},{"label":"setMultiplier","kind":"method","documentation":"setMultiplier(int a): void","insertText":"setMultiplier"},{"label":"setNegativePrefix","kind":"method","documentation":"setNegativePrefix(String a): void","insertText":"setNegativePrefix"},{"label":"setNegativeSuffix","kind":"method","documentation":"setNegativeSuffix(String a): void","insertText":"setNegativeSuffix"},{"label":"setParseBigDecimal","kind":"method","documentation":"setParseBigDecimal(boolean a): void","insertText":"setParseBigDecimal"},{"label":"setParseIntegerOnly","kind":"method","documentation":"setParseIntegerOnly(boolean a): void","insertText":"setParseIntegerOnly"},{"label":"setPositivePrefix","kind":"method","documentation":"setPositivePrefix(String a): void","insertText":"setPositivePrefix"},{"label":"setPositiveSuffix","kind":"method","documentation":"setPositiveSuffix(String a): void","insertText":"setPositiveSuffix"},{"label":"setRoundingMode","kind":"method","documentation":"setRoundingMode(RoundingMode a): void","insertText":"setRoundingMode"},{"label":"toLocalizedPattern","kind":"method","documentation":"toLocalizedPattern(): String","insertText":"toLocalizedPattern"},{"label":"toPattern","kind":"method","documentation":"toPattern(): String","insertText":"toPattern"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"DecimalFormat","kind":"constructor","documentation":"Constructor: DecimalFormat","insertText":"DecimalFormat"}},{"label":"DecimalFormatSymbols","kind":"class","documentation":"Class: DecimalFormatSymbols","insertText":"DecimalFormatSymbols","properties":[{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Locale[]","insertText":"getAvailableLocales"},{"label":"getInstance","kind":"method","documentation":"getInstance(Locale a): DecimalFormatSymbols","insertText":"getInstance"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getCurrency","kind":"method","documentation":"getCurrency(): Currency","insertText":"getCurrency"},{"label":"getCurrencySymbol","kind":"method","documentation":"getCurrencySymbol(): String","insertText":"getCurrencySymbol"},{"label":"getDecimalSeparator","kind":"method","documentation":"getDecimalSeparator(): char","insertText":"getDecimalSeparator"},{"label":"getDigit","kind":"method","documentation":"getDigit(): char","insertText":"getDigit"},{"label":"getExponentSeparator","kind":"method","documentation":"getExponentSeparator(): String","insertText":"getExponentSeparator"},{"label":"getGroupingSeparator","kind":"method","documentation":"getGroupingSeparator(): char","insertText":"getGroupingSeparator"},{"label":"getInfinity","kind":"method","documentation":"getInfinity(): String","insertText":"getInfinity"},{"label":"getInternationalCurrencySymbol","kind":"method","documentation":"getInternationalCurrencySymbol(): String","insertText":"getInternationalCurrencySymbol"},{"label":"getMinusSign","kind":"method","documentation":"getMinusSign(): char","insertText":"getMinusSign"},{"label":"getMonetaryDecimalSeparator","kind":"method","documentation":"getMonetaryDecimalSeparator(): char","insertText":"getMonetaryDecimalSeparator"},{"label":"getNaN","kind":"method","documentation":"getNaN(): String","insertText":"getNaN"},{"label":"getPatternSeparator","kind":"method","documentation":"getPatternSeparator(): char","insertText":"getPatternSeparator"},{"label":"getPerMill","kind":"method","documentation":"getPerMill(): char","insertText":"getPerMill"},{"label":"getPercent","kind":"method","documentation":"getPercent(): char","insertText":"getPercent"},{"label":"getZeroDigit","kind":"method","documentation":"getZeroDigit(): char","insertText":"getZeroDigit"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"setCurrency","kind":"method","documentation":"setCurrency(Currency a): void","insertText":"setCurrency"},{"label":"setCurrencySymbol","kind":"method","documentation":"setCurrencySymbol(String a): void","insertText":"setCurrencySymbol"},{"label":"setDecimalSeparator","kind":"method","documentation":"setDecimalSeparator(char a): void","insertText":"setDecimalSeparator"},{"label":"setDigit","kind":"method","documentation":"setDigit(char a): void","insertText":"setDigit"},{"label":"setExponentSeparator","kind":"method","documentation":"setExponentSeparator(String a): void","insertText":"setExponentSeparator"},{"label":"setGroupingSeparator","kind":"method","documentation":"setGroupingSeparator(char a): void","insertText":"setGroupingSeparator"},{"label":"setInfinity","kind":"method","documentation":"setInfinity(String a): void","insertText":"setInfinity"},{"label":"setInternationalCurrencySymbol","kind":"method","documentation":"setInternationalCurrencySymbol(String a): void","insertText":"setInternationalCurrencySymbol"},{"label":"setMinusSign","kind":"method","documentation":"setMinusSign(char a): void","insertText":"setMinusSign"},{"label":"setMonetaryDecimalSeparator","kind":"method","documentation":"setMonetaryDecimalSeparator(char a): void","insertText":"setMonetaryDecimalSeparator"},{"label":"setNaN","kind":"method","documentation":"setNaN(String a): void","insertText":"setNaN"},{"label":"setPatternSeparator","kind":"method","documentation":"setPatternSeparator(char a): void","insertText":"setPatternSeparator"},{"label":"setPerMill","kind":"method","documentation":"setPerMill(char a): void","insertText":"setPerMill"},{"label":"setPercent","kind":"method","documentation":"setPercent(char a): void","insertText":"setPercent"},{"label":"setZeroDigit","kind":"method","documentation":"setZeroDigit(char a): void","insertText":"setZeroDigit"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"DecimalFormatSymbols","kind":"constructor","documentation":"Constructor: DecimalFormatSymbols","insertText":"DecimalFormatSymbols"}},{"label":"FieldPosition","kind":"class","documentation":"Class: FieldPosition","insertText":"FieldPosition","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getBeginIndex","kind":"method","documentation":"getBeginIndex(): int","insertText":"getBeginIndex"},{"label":"getEndIndex","kind":"method","documentation":"getEndIndex(): int","insertText":"getEndIndex"},{"label":"getField","kind":"method","documentation":"getField(): int","insertText":"getField"},{"label":"getFieldAttribute","kind":"method","documentation":"getFieldAttribute(): Format.Field","insertText":"getFieldAttribute"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"setBeginIndex","kind":"method","documentation":"setBeginIndex(int a): void","insertText":"setBeginIndex"},{"label":"setEndIndex","kind":"method","documentation":"setEndIndex(int a): void","insertText":"setEndIndex"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"FieldPosition","kind":"constructor","documentation":"Constructor: FieldPosition","insertText":"FieldPosition"}},{"label":"Format","kind":"class","documentation":"Class: Format","insertText":"Format","properties":[{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String","insertText":"format"},{"label":"formatToCharacterIterator","kind":"method","documentation":"formatToCharacterIterator(Object a): AttributedCharacterIterator","insertText":"formatToCharacterIterator"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"parseObject","kind":"method","documentation":"parseObject(String a, ParsePosition b | String a): Object","insertText":"parseObject"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Field","kind":"class","documentation":"Class: Field","insertText":"Field","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"MessageFormat","kind":"class","documentation":"Class: MessageFormat","insertText":"MessageFormat","properties":[{"label":"format","kind":"method","documentation":"format(String a, Object[] b): String","insertText":"format"},{"label":"applyPattern","kind":"method","documentation":"applyPattern(String a): void","insertText":"applyPattern"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String","insertText":"format"},{"label":"formatToCharacterIterator","kind":"method","documentation":"formatToCharacterIterator(Object a): AttributedCharacterIterator","insertText":"formatToCharacterIterator"},{"label":"getFormats","kind":"method","documentation":"getFormats(): Format[]","insertText":"getFormats"},{"label":"getFormatsByArgumentIndex","kind":"method","documentation":"getFormatsByArgumentIndex(): Format[]","insertText":"getFormatsByArgumentIndex"},{"label":"getLocale","kind":"method","documentation":"getLocale(): Locale","insertText":"getLocale"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"parse","kind":"method","documentation":"parse(String a, ParsePosition b | String a): Object[]","insertText":"parse"},{"label":"parseObject","kind":"method","documentation":"parseObject(String a, ParsePosition b | String a): Object","insertText":"parseObject"},{"label":"setFormat","kind":"method","documentation":"setFormat(int a, Format b): void","insertText":"setFormat"},{"label":"setFormatByArgumentIndex","kind":"method","documentation":"setFormatByArgumentIndex(int a, Format b): void","insertText":"setFormatByArgumentIndex"},{"label":"setFormats","kind":"method","documentation":"setFormats(Format[] a): void","insertText":"setFormats"},{"label":"setFormatsByArgumentIndex","kind":"method","documentation":"setFormatsByArgumentIndex(Format[] a): void","insertText":"setFormatsByArgumentIndex"},{"label":"setLocale","kind":"method","documentation":"setLocale(Locale a): void","insertText":"setLocale"},{"label":"toPattern","kind":"method","documentation":"toPattern(): String","insertText":"toPattern"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Field","kind":"class","documentation":"Class: Field","insertText":"Field","properties":[{"label":"ARGUMENT","kind":"property","documentation":"ARGUMENT: MessageFormat.Field","insertText":"ARGUMENT"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Normalizer","kind":"class","documentation":"Class: Normalizer","insertText":"Normalizer","properties":[{"label":"isNormalized","kind":"method","documentation":"isNormalized(CharSequence a, Normalizer.Form b): boolean","insertText":"isNormalized"},{"label":"normalize","kind":"method","documentation":"normalize(CharSequence a, Normalizer.Form b): String","insertText":"normalize"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Form","kind":"class","documentation":"Class: Form","insertText":"Form","properties":[{"label":"NFC","kind":"property","documentation":"NFC: Normalizer.Form","insertText":"NFC"},{"label":"NFD","kind":"property","documentation":"NFD: Normalizer.Form","insertText":"NFD"},{"label":"NFKC","kind":"property","documentation":"NFKC: Normalizer.Form","insertText":"NFKC"},{"label":"NFKD","kind":"property","documentation":"NFKD: Normalizer.Form","insertText":"NFKD"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): Normalizer.Form","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): Normalizer.Form[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"NumberFormat","kind":"class","documentation":"Class: NumberFormat","insertText":"NumberFormat","properties":[{"label":"FRACTION_FIELD","kind":"property","documentation":"FRACTION_FIELD: int","insertText":"FRACTION_FIELD"},{"label":"INTEGER_FIELD","kind":"property","documentation":"INTEGER_FIELD: int","insertText":"INTEGER_FIELD"},{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Locale[]","insertText":"getAvailableLocales"},{"label":"getCurrencyInstance","kind":"method","documentation":"getCurrencyInstance(Locale a): NumberFormat","insertText":"getCurrencyInstance"},{"label":"getInstance","kind":"method","documentation":"getInstance(Locale a): NumberFormat","insertText":"getInstance"},{"label":"getIntegerInstance","kind":"method","documentation":"getIntegerInstance(Locale a): NumberFormat","insertText":"getIntegerInstance"},{"label":"getNumberInstance","kind":"method","documentation":"getNumberInstance(Locale a): NumberFormat","insertText":"getNumberInstance"},{"label":"getPercentInstance","kind":"method","documentation":"getPercentInstance(Locale a): NumberFormat","insertText":"getPercentInstance"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String","insertText":"format"},{"label":"formatToCharacterIterator","kind":"method","documentation":"formatToCharacterIterator(Object a): AttributedCharacterIterator","insertText":"formatToCharacterIterator"},{"label":"getCurrency","kind":"method","documentation":"getCurrency(): Currency","insertText":"getCurrency"},{"label":"getMaximumFractionDigits","kind":"method","documentation":"getMaximumFractionDigits(): int","insertText":"getMaximumFractionDigits"},{"label":"getMaximumIntegerDigits","kind":"method","documentation":"getMaximumIntegerDigits(): int","insertText":"getMaximumIntegerDigits"},{"label":"getMinimumFractionDigits","kind":"method","documentation":"getMinimumFractionDigits(): int","insertText":"getMinimumFractionDigits"},{"label":"getMinimumIntegerDigits","kind":"method","documentation":"getMinimumIntegerDigits(): int","insertText":"getMinimumIntegerDigits"},{"label":"getRoundingMode","kind":"method","documentation":"getRoundingMode(): RoundingMode","insertText":"getRoundingMode"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isGroupingUsed","kind":"method","documentation":"isGroupingUsed(): boolean","insertText":"isGroupingUsed"},{"label":"isParseIntegerOnly","kind":"method","documentation":"isParseIntegerOnly(): boolean","insertText":"isParseIntegerOnly"},{"label":"parse","kind":"method","documentation":"parse(String a, ParsePosition b | String a): Number","insertText":"parse"},{"label":"parseObject","kind":"method","documentation":"parseObject(String a, ParsePosition b | String a): Object","insertText":"parseObject"},{"label":"setCurrency","kind":"method","documentation":"setCurrency(Currency a): void","insertText":"setCurrency"},{"label":"setGroupingUsed","kind":"method","documentation":"setGroupingUsed(boolean a): void","insertText":"setGroupingUsed"},{"label":"setMaximumFractionDigits","kind":"method","documentation":"setMaximumFractionDigits(int a): void","insertText":"setMaximumFractionDigits"},{"label":"setMaximumIntegerDigits","kind":"method","documentation":"setMaximumIntegerDigits(int a): void","insertText":"setMaximumIntegerDigits"},{"label":"setMinimumFractionDigits","kind":"method","documentation":"setMinimumFractionDigits(int a): void","insertText":"setMinimumFractionDigits"},{"label":"setMinimumIntegerDigits","kind":"method","documentation":"setMinimumIntegerDigits(int a): void","insertText":"setMinimumIntegerDigits"},{"label":"setParseIntegerOnly","kind":"method","documentation":"setParseIntegerOnly(boolean a): void","insertText":"setParseIntegerOnly"},{"label":"setRoundingMode","kind":"method","documentation":"setRoundingMode(RoundingMode a): void","insertText":"setRoundingMode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Field","kind":"class","documentation":"Class: Field","insertText":"Field","properties":[{"label":"CURRENCY","kind":"property","documentation":"CURRENCY: NumberFormat.Field","insertText":"CURRENCY"},{"label":"DECIMAL_SEPARATOR","kind":"property","documentation":"DECIMAL_SEPARATOR: NumberFormat.Field","insertText":"DECIMAL_SEPARATOR"},{"label":"EXPONENT","kind":"property","documentation":"EXPONENT: NumberFormat.Field","insertText":"EXPONENT"},{"label":"EXPONENT_SIGN","kind":"property","documentation":"EXPONENT_SIGN: NumberFormat.Field","insertText":"EXPONENT_SIGN"},{"label":"EXPONENT_SYMBOL","kind":"property","documentation":"EXPONENT_SYMBOL: NumberFormat.Field","insertText":"EXPONENT_SYMBOL"},{"label":"FRACTION","kind":"property","documentation":"FRACTION: NumberFormat.Field","insertText":"FRACTION"},{"label":"GROUPING_SEPARATOR","kind":"property","documentation":"GROUPING_SEPARATOR: NumberFormat.Field","insertText":"GROUPING_SEPARATOR"},{"label":"INTEGER","kind":"property","documentation":"INTEGER: NumberFormat.Field","insertText":"INTEGER"},{"label":"PERCENT","kind":"property","documentation":"PERCENT: NumberFormat.Field","insertText":"PERCENT"},{"label":"PERMILLE","kind":"property","documentation":"PERMILLE: NumberFormat.Field","insertText":"PERMILLE"},{"label":"SIGN","kind":"property","documentation":"SIGN: NumberFormat.Field","insertText":"SIGN"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ParseException","kind":"class","documentation":"Class: ParseException","insertText":"ParseException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getErrorOffset","kind":"method","documentation":"getErrorOffset(): int","insertText":"getErrorOffset"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ParseException","kind":"constructor","documentation":"Constructor: ParseException","insertText":"ParseException"}},{"label":"ParsePosition","kind":"class","documentation":"Class: ParsePosition","insertText":"ParsePosition","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getErrorIndex","kind":"method","documentation":"getErrorIndex(): int","insertText":"getErrorIndex"},{"label":"getIndex","kind":"method","documentation":"getIndex(): int","insertText":"getIndex"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"setErrorIndex","kind":"method","documentation":"setErrorIndex(int a): void","insertText":"setErrorIndex"},{"label":"setIndex","kind":"method","documentation":"setIndex(int a): void","insertText":"setIndex"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ParsePosition","kind":"constructor","documentation":"Constructor: ParsePosition","insertText":"ParsePosition"}},{"label":"RuleBasedCollator","kind":"class","documentation":"Class: RuleBasedCollator","insertText":"RuleBasedCollator","properties":[{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"compare","kind":"method","documentation":"compare(def a, def b): int","insertText":"compare"},{"label":"equals","kind":"method","documentation":"equals(String a, String b | Object a): boolean","insertText":"equals"},{"label":"getCollationElementIterator","kind":"method","documentation":"getCollationElementIterator(String a): CollationElementIterator","insertText":"getCollationElementIterator"},{"label":"getCollationKey","kind":"method","documentation":"getCollationKey(String a): CollationKey","insertText":"getCollationKey"},{"label":"getDecomposition","kind":"method","documentation":"getDecomposition(): int","insertText":"getDecomposition"},{"label":"getRules","kind":"method","documentation":"getRules(): String","insertText":"getRules"},{"label":"getStrength","kind":"method","documentation":"getStrength(): int","insertText":"getStrength"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"reversed","kind":"method","documentation":"reversed(): Comparator","insertText":"reversed"},{"label":"setDecomposition","kind":"method","documentation":"setDecomposition(int a): void","insertText":"setDecomposition"},{"label":"setStrength","kind":"method","documentation":"setStrength(int a): void","insertText":"setStrength"},{"label":"thenComparing","kind":"method","documentation":"thenComparing(Function a, Comparator b | Comparator a): Comparator","insertText":"thenComparing"},{"label":"thenComparingDouble","kind":"method","documentation":"thenComparingDouble(ToDoubleFunction a): Comparator","insertText":"thenComparingDouble"},{"label":"thenComparingInt","kind":"method","documentation":"thenComparingInt(ToIntFunction a): Comparator","insertText":"thenComparingInt"},{"label":"thenComparingLong","kind":"method","documentation":"thenComparingLong(ToLongFunction a): Comparator","insertText":"thenComparingLong"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"RuleBasedCollator","kind":"constructor","documentation":"Constructor: RuleBasedCollator","insertText":"RuleBasedCollator"}},{"label":"SimpleDateFormat","kind":"class","documentation":"Class: SimpleDateFormat","insertText":"SimpleDateFormat","properties":[{"label":"applyLocalizedPattern","kind":"method","documentation":"applyLocalizedPattern(String a): void","insertText":"applyLocalizedPattern"},{"label":"applyPattern","kind":"method","documentation":"applyPattern(String a): void","insertText":"applyPattern"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(Object a, StringBuffer b, FieldPosition c | Object a): StringBuffer | String","insertText":"format"},{"label":"formatToCharacterIterator","kind":"method","documentation":"formatToCharacterIterator(Object a): AttributedCharacterIterator","insertText":"formatToCharacterIterator"},{"label":"get2DigitYearStart","kind":"method","documentation":"get2DigitYearStart(): Date","insertText":"get2DigitYearStart"},{"label":"getCalendar","kind":"method","documentation":"getCalendar(): Calendar","insertText":"getCalendar"},{"label":"getDateFormatSymbols","kind":"method","documentation":"getDateFormatSymbols(): DateFormatSymbols","insertText":"getDateFormatSymbols"},{"label":"getNumberFormat","kind":"method","documentation":"getNumberFormat(): NumberFormat","insertText":"getNumberFormat"},{"label":"getTimeZone","kind":"method","documentation":"getTimeZone(): TimeZone","insertText":"getTimeZone"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLenient","kind":"method","documentation":"isLenient(): boolean","insertText":"isLenient"},{"label":"parse","kind":"method","documentation":"parse(String a, ParsePosition b | String a): Date","insertText":"parse"},{"label":"parseObject","kind":"method","documentation":"parseObject(String a, ParsePosition b | String a): Object","insertText":"parseObject"},{"label":"set2DigitYearStart","kind":"method","documentation":"set2DigitYearStart(Date a): void","insertText":"set2DigitYearStart"},{"label":"setCalendar","kind":"method","documentation":"setCalendar(Calendar a): void","insertText":"setCalendar"},{"label":"setDateFormatSymbols","kind":"method","documentation":"setDateFormatSymbols(DateFormatSymbols a): void","insertText":"setDateFormatSymbols"},{"label":"setLenient","kind":"method","documentation":"setLenient(boolean a): void","insertText":"setLenient"},{"label":"setNumberFormat","kind":"method","documentation":"setNumberFormat(NumberFormat a): void","insertText":"setNumberFormat"},{"label":"setTimeZone","kind":"method","documentation":"setTimeZone(TimeZone a): void","insertText":"setTimeZone"},{"label":"toLocalizedPattern","kind":"method","documentation":"toLocalizedPattern(): String","insertText":"toLocalizedPattern"},{"label":"toPattern","kind":"method","documentation":"toPattern(): String","insertText":"toPattern"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"SimpleDateFormat","kind":"constructor","documentation":"Constructor: SimpleDateFormat","insertText":"SimpleDateFormat"}},{"label":"StringCharacterIterator","kind":"class","documentation":"Class: StringCharacterIterator","insertText":"StringCharacterIterator","properties":[{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"current","kind":"method","documentation":"current(): char","insertText":"current"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"first","kind":"method","documentation":"first(): char","insertText":"first"},{"label":"getBeginIndex","kind":"method","documentation":"getBeginIndex(): int","insertText":"getBeginIndex"},{"label":"getEndIndex","kind":"method","documentation":"getEndIndex(): int","insertText":"getEndIndex"},{"label":"getIndex","kind":"method","documentation":"getIndex(): int","insertText":"getIndex"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"last","kind":"method","documentation":"last(): char","insertText":"last"},{"label":"next","kind":"method","documentation":"next(): char","insertText":"next"},{"label":"previous","kind":"method","documentation":"previous(): char","insertText":"previous"},{"label":"setIndex","kind":"method","documentation":"setIndex(int a): char","insertText":"setIndex"},{"label":"setText","kind":"method","documentation":"setText(String a): void","insertText":"setText"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"StringCharacterIterator","kind":"constructor","documentation":"Constructor: StringCharacterIterator","insertText":"StringCharacterIterator"}},{"label":"Clock","kind":"class","documentation":"Class: Clock","insertText":"Clock","properties":[{"label":"fixed","kind":"method","documentation":"fixed(Instant a, ZoneId b): Clock","insertText":"fixed"},{"label":"offset","kind":"method","documentation":"offset(Clock a, Duration b): Clock","insertText":"offset"},{"label":"tick","kind":"method","documentation":"tick(Clock a, Duration b): Clock","insertText":"tick"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getZone","kind":"method","documentation":"getZone(): ZoneId","insertText":"getZone"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"instant","kind":"method","documentation":"instant(): Instant","insertText":"instant"},{"label":"millis","kind":"method","documentation":"millis(): long","insertText":"millis"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DateTimeException","kind":"class","documentation":"Class: DateTimeException","insertText":"DateTimeException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"DateTimeException","kind":"constructor","documentation":"Constructor: DateTimeException","insertText":"DateTimeException"}},{"label":"DayOfWeek","kind":"class","documentation":"Class: DayOfWeek","insertText":"DayOfWeek","properties":[{"label":"FRIDAY","kind":"property","documentation":"FRIDAY: DayOfWeek","insertText":"FRIDAY"},{"label":"MONDAY","kind":"property","documentation":"MONDAY: DayOfWeek","insertText":"MONDAY"},{"label":"SATURDAY","kind":"property","documentation":"SATURDAY: DayOfWeek","insertText":"SATURDAY"},{"label":"SUNDAY","kind":"property","documentation":"SUNDAY: DayOfWeek","insertText":"SUNDAY"},{"label":"THURSDAY","kind":"property","documentation":"THURSDAY: DayOfWeek","insertText":"THURSDAY"},{"label":"TUESDAY","kind":"property","documentation":"TUESDAY: DayOfWeek","insertText":"TUESDAY"},{"label":"WEDNESDAY","kind":"property","documentation":"WEDNESDAY: DayOfWeek","insertText":"WEDNESDAY"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): DayOfWeek","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a): DayOfWeek","insertText":"of"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): DayOfWeek","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): DayOfWeek[]","insertText":"values"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a): DayOfWeek","insertText":"minus"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"plus","kind":"method","documentation":"plus(long a): DayOfWeek","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Duration","kind":"class","documentation":"Class: Duration","insertText":"Duration","properties":[{"label":"ZERO","kind":"property","documentation":"ZERO: Duration","insertText":"ZERO"},{"label":"between","kind":"method","documentation":"between(Temporal a, Temporal b): Duration","insertText":"between"},{"label":"from","kind":"method","documentation":"from(TemporalAmount a): Duration","insertText":"from"},{"label":"of","kind":"method","documentation":"of(long a, TemporalUnit b): Duration","insertText":"of"},{"label":"ofDays","kind":"method","documentation":"ofDays(long a): Duration","insertText":"ofDays"},{"label":"ofHours","kind":"method","documentation":"ofHours(long a): Duration","insertText":"ofHours"},{"label":"ofMillis","kind":"method","documentation":"ofMillis(long a): Duration","insertText":"ofMillis"},{"label":"ofMinutes","kind":"method","documentation":"ofMinutes(long a): Duration","insertText":"ofMinutes"},{"label":"ofNanos","kind":"method","documentation":"ofNanos(long a): Duration","insertText":"ofNanos"},{"label":"ofSeconds","kind":"method","documentation":"ofSeconds(long a, long b | long a): Duration","insertText":"ofSeconds"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a): Duration","insertText":"parse"},{"label":"abs","kind":"method","documentation":"abs(): Duration","insertText":"abs"},{"label":"addTo","kind":"method","documentation":"addTo(Temporal a): Temporal","insertText":"addTo"},{"label":"compareTo","kind":"method","documentation":"compareTo(Duration a): int","insertText":"compareTo"},{"label":"dividedBy","kind":"method","documentation":"dividedBy(long a): Duration","insertText":"dividedBy"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalUnit a): long","insertText":"get"},{"label":"getNano","kind":"method","documentation":"getNano(): int","insertText":"getNano"},{"label":"getSeconds","kind":"method","documentation":"getSeconds(): long","insertText":"getSeconds"},{"label":"getUnits","kind":"method","documentation":"getUnits(): List","insertText":"getUnits"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isNegative","kind":"method","documentation":"isNegative(): boolean","insertText":"isNegative"},{"label":"isZero","kind":"method","documentation":"isZero(): boolean","insertText":"isZero"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | Duration a): Duration","insertText":"minus"},{"label":"minusDays","kind":"method","documentation":"minusDays(long a): Duration","insertText":"minusDays"},{"label":"minusHours","kind":"method","documentation":"minusHours(long a): Duration","insertText":"minusHours"},{"label":"minusMillis","kind":"method","documentation":"minusMillis(long a): Duration","insertText":"minusMillis"},{"label":"minusMinutes","kind":"method","documentation":"minusMinutes(long a): Duration","insertText":"minusMinutes"},{"label":"minusNanos","kind":"method","documentation":"minusNanos(long a): Duration","insertText":"minusNanos"},{"label":"minusSeconds","kind":"method","documentation":"minusSeconds(long a): Duration","insertText":"minusSeconds"},{"label":"multipliedBy","kind":"method","documentation":"multipliedBy(long a): Duration","insertText":"multipliedBy"},{"label":"negated","kind":"method","documentation":"negated(): Duration","insertText":"negated"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | Duration a): Duration","insertText":"plus"},{"label":"plusDays","kind":"method","documentation":"plusDays(long a): Duration","insertText":"plusDays"},{"label":"plusHours","kind":"method","documentation":"plusHours(long a): Duration","insertText":"plusHours"},{"label":"plusMillis","kind":"method","documentation":"plusMillis(long a): Duration","insertText":"plusMillis"},{"label":"plusMinutes","kind":"method","documentation":"plusMinutes(long a): Duration","insertText":"plusMinutes"},{"label":"plusNanos","kind":"method","documentation":"plusNanos(long a): Duration","insertText":"plusNanos"},{"label":"plusSeconds","kind":"method","documentation":"plusSeconds(long a): Duration","insertText":"plusSeconds"},{"label":"subtractFrom","kind":"method","documentation":"subtractFrom(Temporal a): Temporal","insertText":"subtractFrom"},{"label":"toDays","kind":"method","documentation":"toDays(): long","insertText":"toDays"},{"label":"toHours","kind":"method","documentation":"toHours(): long","insertText":"toHours"},{"label":"toMillis","kind":"method","documentation":"toMillis(): long","insertText":"toMillis"},{"label":"toMinutes","kind":"method","documentation":"toMinutes(): long","insertText":"toMinutes"},{"label":"toNanos","kind":"method","documentation":"toNanos(): long","insertText":"toNanos"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"withNanos","kind":"method","documentation":"withNanos(int a): Duration","insertText":"withNanos"},{"label":"withSeconds","kind":"method","documentation":"withSeconds(long a): Duration","insertText":"withSeconds"}]},{"label":"Instant","kind":"class","documentation":"Class: Instant","insertText":"Instant","properties":[{"label":"EPOCH","kind":"property","documentation":"EPOCH: Instant","insertText":"EPOCH"},{"label":"MAX","kind":"property","documentation":"MAX: Instant","insertText":"MAX"},{"label":"MIN","kind":"property","documentation":"MIN: Instant","insertText":"MIN"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): Instant","insertText":"from"},{"label":"ofEpochMilli","kind":"method","documentation":"ofEpochMilli(long a): Instant","insertText":"ofEpochMilli"},{"label":"ofEpochSecond","kind":"method","documentation":"ofEpochSecond(long a, long b | long a): Instant","insertText":"ofEpochSecond"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a): Instant","insertText":"parse"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atOffset","kind":"method","documentation":"atOffset(ZoneOffset a): OffsetDateTime","insertText":"atOffset"},{"label":"atZone","kind":"method","documentation":"atZone(ZoneId a): ZonedDateTime","insertText":"atZone"},{"label":"compareTo","kind":"method","documentation":"compareTo(Instant a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getEpochSecond","kind":"method","documentation":"getEpochSecond(): long","insertText":"getEpochSecond"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getNano","kind":"method","documentation":"getNano(): int","insertText":"getNano"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(Instant a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(Instant a): boolean","insertText":"isBefore"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): Instant","insertText":"minus"},{"label":"minusMillis","kind":"method","documentation":"minusMillis(long a): Instant","insertText":"minusMillis"},{"label":"minusNanos","kind":"method","documentation":"minusNanos(long a): Instant","insertText":"minusNanos"},{"label":"minusSeconds","kind":"method","documentation":"minusSeconds(long a): Instant","insertText":"minusSeconds"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): Instant","insertText":"plus"},{"label":"plusMillis","kind":"method","documentation":"plusMillis(long a): Instant","insertText":"plusMillis"},{"label":"plusNanos","kind":"method","documentation":"plusNanos(long a): Instant","insertText":"plusNanos"},{"label":"plusSeconds","kind":"method","documentation":"plusSeconds(long a): Instant","insertText":"plusSeconds"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"truncatedTo","kind":"method","documentation":"truncatedTo(TemporalUnit a): Instant","insertText":"truncatedTo"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): Instant","insertText":"with"}]},{"label":"LocalDate","kind":"class","documentation":"Class: LocalDate","insertText":"LocalDate","properties":[{"label":"MAX","kind":"property","documentation":"MAX: LocalDate","insertText":"MAX"},{"label":"MIN","kind":"property","documentation":"MIN: LocalDate","insertText":"MIN"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): LocalDate","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c): LocalDate","insertText":"of"},{"label":"ofEpochDay","kind":"method","documentation":"ofEpochDay(long a): LocalDate","insertText":"ofEpochDay"},{"label":"ofYearDay","kind":"method","documentation":"ofYearDay(int a, int b): LocalDate","insertText":"ofYearDay"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): LocalDate","insertText":"parse"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atStartOfDay","kind":"method","documentation":"atStartOfDay(ZoneId a): ZonedDateTime | LocalDateTime","insertText":"atStartOfDay"},{"label":"atTime","kind":"method","documentation":"atTime(int a, int b, int c, int d | int a, int b, int c | int a, int b | LocalTime a): LocalDateTime","insertText":"atTime"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoLocalDate a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): IsoChronology","insertText":"getChronology"},{"label":"getDayOfMonth","kind":"method","documentation":"getDayOfMonth(): int","insertText":"getDayOfMonth"},{"label":"getDayOfWeek","kind":"method","documentation":"getDayOfWeek(): DayOfWeek","insertText":"getDayOfWeek"},{"label":"getDayOfYear","kind":"method","documentation":"getDayOfYear(): int","insertText":"getDayOfYear"},{"label":"getEra","kind":"method","documentation":"getEra(): Era","insertText":"getEra"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMonth","kind":"method","documentation":"getMonth(): Month","insertText":"getMonth"},{"label":"getMonthValue","kind":"method","documentation":"getMonthValue(): int","insertText":"getMonthValue"},{"label":"getYear","kind":"method","documentation":"getYear(): int","insertText":"getYear"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoLocalDate a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoLocalDate a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoLocalDate a): boolean","insertText":"isEqual"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(): boolean","insertText":"isLeapYear"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"lengthOfMonth","kind":"method","documentation":"lengthOfMonth(): int","insertText":"lengthOfMonth"},{"label":"lengthOfYear","kind":"method","documentation":"lengthOfYear(): int","insertText":"lengthOfYear"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): LocalDate","insertText":"minus"},{"label":"minusDays","kind":"method","documentation":"minusDays(long a): LocalDate","insertText":"minusDays"},{"label":"minusMonths","kind":"method","documentation":"minusMonths(long a): LocalDate","insertText":"minusMonths"},{"label":"minusWeeks","kind":"method","documentation":"minusWeeks(long a): LocalDate","insertText":"minusWeeks"},{"label":"minusYears","kind":"method","documentation":"minusYears(long a): LocalDate","insertText":"minusYears"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): LocalDate","insertText":"plus"},{"label":"plusDays","kind":"method","documentation":"plusDays(long a): LocalDate","insertText":"plusDays"},{"label":"plusMonths","kind":"method","documentation":"plusMonths(long a): LocalDate","insertText":"plusMonths"},{"label":"plusWeeks","kind":"method","documentation":"plusWeeks(long a): LocalDate","insertText":"plusWeeks"},{"label":"plusYears","kind":"method","documentation":"plusYears(long a): LocalDate","insertText":"plusYears"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochDay","kind":"method","documentation":"toEpochDay(): long","insertText":"toEpochDay"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b | ChronoLocalDate a): long | Period","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): LocalDate","insertText":"with"},{"label":"withDayOfMonth","kind":"method","documentation":"withDayOfMonth(int a): LocalDate","insertText":"withDayOfMonth"},{"label":"withDayOfYear","kind":"method","documentation":"withDayOfYear(int a): LocalDate","insertText":"withDayOfYear"},{"label":"withMonth","kind":"method","documentation":"withMonth(int a): LocalDate","insertText":"withMonth"},{"label":"withYear","kind":"method","documentation":"withYear(int a): LocalDate","insertText":"withYear"}]},{"label":"LocalDateTime","kind":"class","documentation":"Class: LocalDateTime","insertText":"LocalDateTime","properties":[{"label":"MAX","kind":"property","documentation":"MAX: LocalDateTime","insertText":"MAX"},{"label":"MIN","kind":"property","documentation":"MIN: LocalDateTime","insertText":"MIN"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): LocalDateTime","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c, int d, int e, int f, int undefined | int a, int b, int c, int d, int e, int f | int a, int b, int c, int d, int e | LocalDate a, LocalTime b): LocalDateTime","insertText":"of"},{"label":"ofEpochSecond","kind":"method","documentation":"ofEpochSecond(long a, int b, ZoneOffset c): LocalDateTime","insertText":"ofEpochSecond"},{"label":"ofInstant","kind":"method","documentation":"ofInstant(Instant a, ZoneId b): LocalDateTime","insertText":"ofInstant"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): LocalDateTime","insertText":"parse"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atOffset","kind":"method","documentation":"atOffset(ZoneOffset a): OffsetDateTime","insertText":"atOffset"},{"label":"atZone","kind":"method","documentation":"atZone(ZoneId a): ZonedDateTime","insertText":"atZone"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoLocalDateTime a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): Chronology","insertText":"getChronology"},{"label":"getDayOfMonth","kind":"method","documentation":"getDayOfMonth(): int","insertText":"getDayOfMonth"},{"label":"getDayOfWeek","kind":"method","documentation":"getDayOfWeek(): DayOfWeek","insertText":"getDayOfWeek"},{"label":"getDayOfYear","kind":"method","documentation":"getDayOfYear(): int","insertText":"getDayOfYear"},{"label":"getHour","kind":"method","documentation":"getHour(): int","insertText":"getHour"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMinute","kind":"method","documentation":"getMinute(): int","insertText":"getMinute"},{"label":"getMonth","kind":"method","documentation":"getMonth(): Month","insertText":"getMonth"},{"label":"getMonthValue","kind":"method","documentation":"getMonthValue(): int","insertText":"getMonthValue"},{"label":"getNano","kind":"method","documentation":"getNano(): int","insertText":"getNano"},{"label":"getSecond","kind":"method","documentation":"getSecond(): int","insertText":"getSecond"},{"label":"getYear","kind":"method","documentation":"getYear(): int","insertText":"getYear"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoLocalDateTime a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoLocalDateTime a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoLocalDateTime a): boolean","insertText":"isEqual"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): LocalDateTime","insertText":"minus"},{"label":"minusDays","kind":"method","documentation":"minusDays(long a): LocalDateTime","insertText":"minusDays"},{"label":"minusHours","kind":"method","documentation":"minusHours(long a): LocalDateTime","insertText":"minusHours"},{"label":"minusMinutes","kind":"method","documentation":"minusMinutes(long a): LocalDateTime","insertText":"minusMinutes"},{"label":"minusMonths","kind":"method","documentation":"minusMonths(long a): LocalDateTime","insertText":"minusMonths"},{"label":"minusNanos","kind":"method","documentation":"minusNanos(long a): LocalDateTime","insertText":"minusNanos"},{"label":"minusSeconds","kind":"method","documentation":"minusSeconds(long a): LocalDateTime","insertText":"minusSeconds"},{"label":"minusWeeks","kind":"method","documentation":"minusWeeks(long a): LocalDateTime","insertText":"minusWeeks"},{"label":"minusYears","kind":"method","documentation":"minusYears(long a): LocalDateTime","insertText":"minusYears"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): LocalDateTime","insertText":"plus"},{"label":"plusDays","kind":"method","documentation":"plusDays(long a): LocalDateTime","insertText":"plusDays"},{"label":"plusHours","kind":"method","documentation":"plusHours(long a): LocalDateTime","insertText":"plusHours"},{"label":"plusMinutes","kind":"method","documentation":"plusMinutes(long a): LocalDateTime","insertText":"plusMinutes"},{"label":"plusMonths","kind":"method","documentation":"plusMonths(long a): LocalDateTime","insertText":"plusMonths"},{"label":"plusNanos","kind":"method","documentation":"plusNanos(long a): LocalDateTime","insertText":"plusNanos"},{"label":"plusSeconds","kind":"method","documentation":"plusSeconds(long a): LocalDateTime","insertText":"plusSeconds"},{"label":"plusWeeks","kind":"method","documentation":"plusWeeks(long a): LocalDateTime","insertText":"plusWeeks"},{"label":"plusYears","kind":"method","documentation":"plusYears(long a): LocalDateTime","insertText":"plusYears"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toEpochSecond","kind":"method","documentation":"toEpochSecond(ZoneOffset a): long","insertText":"toEpochSecond"},{"label":"toInstant","kind":"method","documentation":"toInstant(ZoneOffset a): Instant","insertText":"toInstant"},{"label":"toLocalDate","kind":"method","documentation":"toLocalDate(): LocalDate","insertText":"toLocalDate"},{"label":"toLocalTime","kind":"method","documentation":"toLocalTime(): LocalTime","insertText":"toLocalTime"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"truncatedTo","kind":"method","documentation":"truncatedTo(TemporalUnit a): LocalDateTime","insertText":"truncatedTo"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): LocalDateTime","insertText":"with"},{"label":"withDayOfMonth","kind":"method","documentation":"withDayOfMonth(int a): LocalDateTime","insertText":"withDayOfMonth"},{"label":"withDayOfYear","kind":"method","documentation":"withDayOfYear(int a): LocalDateTime","insertText":"withDayOfYear"},{"label":"withHour","kind":"method","documentation":"withHour(int a): LocalDateTime","insertText":"withHour"},{"label":"withMinute","kind":"method","documentation":"withMinute(int a): LocalDateTime","insertText":"withMinute"},{"label":"withMonth","kind":"method","documentation":"withMonth(int a): LocalDateTime","insertText":"withMonth"},{"label":"withSecond","kind":"method","documentation":"withSecond(int a): LocalDateTime","insertText":"withSecond"},{"label":"withYear","kind":"method","documentation":"withYear(int a): LocalDateTime","insertText":"withYear"}]},{"label":"LocalTime","kind":"class","documentation":"Class: LocalTime","insertText":"LocalTime","properties":[{"label":"MAX","kind":"property","documentation":"MAX: LocalTime","insertText":"MAX"},{"label":"MIDNIGHT","kind":"property","documentation":"MIDNIGHT: LocalTime","insertText":"MIDNIGHT"},{"label":"MIN","kind":"property","documentation":"MIN: LocalTime","insertText":"MIN"},{"label":"NOON","kind":"property","documentation":"NOON: LocalTime","insertText":"NOON"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): LocalTime","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c, int d | int a, int b, int c | int a, int b): LocalTime","insertText":"of"},{"label":"ofNanoOfDay","kind":"method","documentation":"ofNanoOfDay(long a): LocalTime","insertText":"ofNanoOfDay"},{"label":"ofSecondOfDay","kind":"method","documentation":"ofSecondOfDay(long a): LocalTime","insertText":"ofSecondOfDay"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): LocalTime","insertText":"parse"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atDate","kind":"method","documentation":"atDate(LocalDate a): LocalDateTime","insertText":"atDate"},{"label":"atOffset","kind":"method","documentation":"atOffset(ZoneOffset a): OffsetTime","insertText":"atOffset"},{"label":"compareTo","kind":"method","documentation":"compareTo(LocalTime a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getHour","kind":"method","documentation":"getHour(): int","insertText":"getHour"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMinute","kind":"method","documentation":"getMinute(): int","insertText":"getMinute"},{"label":"getNano","kind":"method","documentation":"getNano(): int","insertText":"getNano"},{"label":"getSecond","kind":"method","documentation":"getSecond(): int","insertText":"getSecond"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(LocalTime a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(LocalTime a): boolean","insertText":"isBefore"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): LocalTime","insertText":"minus"},{"label":"minusHours","kind":"method","documentation":"minusHours(long a): LocalTime","insertText":"minusHours"},{"label":"minusMinutes","kind":"method","documentation":"minusMinutes(long a): LocalTime","insertText":"minusMinutes"},{"label":"minusNanos","kind":"method","documentation":"minusNanos(long a): LocalTime","insertText":"minusNanos"},{"label":"minusSeconds","kind":"method","documentation":"minusSeconds(long a): LocalTime","insertText":"minusSeconds"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): LocalTime","insertText":"plus"},{"label":"plusHours","kind":"method","documentation":"plusHours(long a): LocalTime","insertText":"plusHours"},{"label":"plusMinutes","kind":"method","documentation":"plusMinutes(long a): LocalTime","insertText":"plusMinutes"},{"label":"plusNanos","kind":"method","documentation":"plusNanos(long a): LocalTime","insertText":"plusNanos"},{"label":"plusSeconds","kind":"method","documentation":"plusSeconds(long a): LocalTime","insertText":"plusSeconds"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toNanoOfDay","kind":"method","documentation":"toNanoOfDay(): long","insertText":"toNanoOfDay"},{"label":"toSecondOfDay","kind":"method","documentation":"toSecondOfDay(): int","insertText":"toSecondOfDay"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"truncatedTo","kind":"method","documentation":"truncatedTo(TemporalUnit a): LocalTime","insertText":"truncatedTo"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): LocalTime","insertText":"with"},{"label":"withHour","kind":"method","documentation":"withHour(int a): LocalTime","insertText":"withHour"},{"label":"withMinute","kind":"method","documentation":"withMinute(int a): LocalTime","insertText":"withMinute"},{"label":"withNano","kind":"method","documentation":"withNano(int a): LocalTime","insertText":"withNano"},{"label":"withSecond","kind":"method","documentation":"withSecond(int a): LocalTime","insertText":"withSecond"}]},{"label":"Month","kind":"class","documentation":"Class: Month","insertText":"Month","properties":[{"label":"APRIL","kind":"property","documentation":"APRIL: Month","insertText":"APRIL"},{"label":"AUGUST","kind":"property","documentation":"AUGUST: Month","insertText":"AUGUST"},{"label":"DECEMBER","kind":"property","documentation":"DECEMBER: Month","insertText":"DECEMBER"},{"label":"FEBRUARY","kind":"property","documentation":"FEBRUARY: Month","insertText":"FEBRUARY"},{"label":"JANUARY","kind":"property","documentation":"JANUARY: Month","insertText":"JANUARY"},{"label":"JULY","kind":"property","documentation":"JULY: Month","insertText":"JULY"},{"label":"JUNE","kind":"property","documentation":"JUNE: Month","insertText":"JUNE"},{"label":"MARCH","kind":"property","documentation":"MARCH: Month","insertText":"MARCH"},{"label":"MAY","kind":"property","documentation":"MAY: Month","insertText":"MAY"},{"label":"NOVEMBER","kind":"property","documentation":"NOVEMBER: Month","insertText":"NOVEMBER"},{"label":"OCTOBER","kind":"property","documentation":"OCTOBER: Month","insertText":"OCTOBER"},{"label":"SEPTEMBER","kind":"property","documentation":"SEPTEMBER: Month","insertText":"SEPTEMBER"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): Month","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a): Month","insertText":"of"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): Month","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): Month[]","insertText":"values"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"firstDayOfYear","kind":"method","documentation":"firstDayOfYear(boolean a): int","insertText":"firstDayOfYear"},{"label":"firstMonthOfQuarter","kind":"method","documentation":"firstMonthOfQuarter(): Month","insertText":"firstMonthOfQuarter"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"length","kind":"method","documentation":"length(boolean a): int","insertText":"length"},{"label":"maxLength","kind":"method","documentation":"maxLength(): int","insertText":"maxLength"},{"label":"minLength","kind":"method","documentation":"minLength(): int","insertText":"minLength"},{"label":"minus","kind":"method","documentation":"minus(long a): Month","insertText":"minus"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"plus","kind":"method","documentation":"plus(long a): Month","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"MonthDay","kind":"class","documentation":"Class: MonthDay","insertText":"MonthDay","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): MonthDay","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b): MonthDay","insertText":"of"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): MonthDay","insertText":"parse"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atYear","kind":"method","documentation":"atYear(int a): LocalDate","insertText":"atYear"},{"label":"compareTo","kind":"method","documentation":"compareTo(MonthDay a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDayOfMonth","kind":"method","documentation":"getDayOfMonth(): int","insertText":"getDayOfMonth"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMonth","kind":"method","documentation":"getMonth(): Month","insertText":"getMonth"},{"label":"getMonthValue","kind":"method","documentation":"getMonthValue(): int","insertText":"getMonthValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(MonthDay a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(MonthDay a): boolean","insertText":"isBefore"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"isValidYear","kind":"method","documentation":"isValidYear(int a): boolean","insertText":"isValidYear"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"with","kind":"method","documentation":"with(Month a): MonthDay","insertText":"with"},{"label":"withDayOfMonth","kind":"method","documentation":"withDayOfMonth(int a): MonthDay","insertText":"withDayOfMonth"},{"label":"withMonth","kind":"method","documentation":"withMonth(int a): MonthDay","insertText":"withMonth"}]},{"label":"OffsetDateTime","kind":"class","documentation":"Class: OffsetDateTime","insertText":"OffsetDateTime","properties":[{"label":"MAX","kind":"property","documentation":"MAX: OffsetDateTime","insertText":"MAX"},{"label":"MIN","kind":"property","documentation":"MIN: OffsetDateTime","insertText":"MIN"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): OffsetDateTime","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c, int d, int e, int f, int undefined, ZoneOffset undefined | LocalDate a, LocalTime b, ZoneOffset c | LocalDateTime a, ZoneOffset b): OffsetDateTime","insertText":"of"},{"label":"ofInstant","kind":"method","documentation":"ofInstant(Instant a, ZoneId b): OffsetDateTime","insertText":"ofInstant"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): OffsetDateTime","insertText":"parse"},{"label":"timeLineOrder","kind":"method","documentation":"timeLineOrder(): Comparator","insertText":"timeLineOrder"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atZoneSameInstant","kind":"method","documentation":"atZoneSameInstant(ZoneId a): ZonedDateTime","insertText":"atZoneSameInstant"},{"label":"atZoneSimilarLocal","kind":"method","documentation":"atZoneSimilarLocal(ZoneId a): ZonedDateTime","insertText":"atZoneSimilarLocal"},{"label":"compareTo","kind":"method","documentation":"compareTo(OffsetDateTime a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDayOfMonth","kind":"method","documentation":"getDayOfMonth(): int","insertText":"getDayOfMonth"},{"label":"getDayOfWeek","kind":"method","documentation":"getDayOfWeek(): DayOfWeek","insertText":"getDayOfWeek"},{"label":"getDayOfYear","kind":"method","documentation":"getDayOfYear(): int","insertText":"getDayOfYear"},{"label":"getHour","kind":"method","documentation":"getHour(): int","insertText":"getHour"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMinute","kind":"method","documentation":"getMinute(): int","insertText":"getMinute"},{"label":"getMonth","kind":"method","documentation":"getMonth(): Month","insertText":"getMonth"},{"label":"getMonthValue","kind":"method","documentation":"getMonthValue(): int","insertText":"getMonthValue"},{"label":"getNano","kind":"method","documentation":"getNano(): int","insertText":"getNano"},{"label":"getOffset","kind":"method","documentation":"getOffset(): ZoneOffset","insertText":"getOffset"},{"label":"getSecond","kind":"method","documentation":"getSecond(): int","insertText":"getSecond"},{"label":"getYear","kind":"method","documentation":"getYear(): int","insertText":"getYear"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(OffsetDateTime a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(OffsetDateTime a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(OffsetDateTime a): boolean","insertText":"isEqual"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): OffsetDateTime","insertText":"minus"},{"label":"minusDays","kind":"method","documentation":"minusDays(long a): OffsetDateTime","insertText":"minusDays"},{"label":"minusHours","kind":"method","documentation":"minusHours(long a): OffsetDateTime","insertText":"minusHours"},{"label":"minusMinutes","kind":"method","documentation":"minusMinutes(long a): OffsetDateTime","insertText":"minusMinutes"},{"label":"minusMonths","kind":"method","documentation":"minusMonths(long a): OffsetDateTime","insertText":"minusMonths"},{"label":"minusNanos","kind":"method","documentation":"minusNanos(long a): OffsetDateTime","insertText":"minusNanos"},{"label":"minusSeconds","kind":"method","documentation":"minusSeconds(long a): OffsetDateTime","insertText":"minusSeconds"},{"label":"minusWeeks","kind":"method","documentation":"minusWeeks(long a): OffsetDateTime","insertText":"minusWeeks"},{"label":"minusYears","kind":"method","documentation":"minusYears(long a): OffsetDateTime","insertText":"minusYears"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): OffsetDateTime","insertText":"plus"},{"label":"plusDays","kind":"method","documentation":"plusDays(long a): OffsetDateTime","insertText":"plusDays"},{"label":"plusHours","kind":"method","documentation":"plusHours(long a): OffsetDateTime","insertText":"plusHours"},{"label":"plusMinutes","kind":"method","documentation":"plusMinutes(long a): OffsetDateTime","insertText":"plusMinutes"},{"label":"plusMonths","kind":"method","documentation":"plusMonths(long a): OffsetDateTime","insertText":"plusMonths"},{"label":"plusNanos","kind":"method","documentation":"plusNanos(long a): OffsetDateTime","insertText":"plusNanos"},{"label":"plusSeconds","kind":"method","documentation":"plusSeconds(long a): OffsetDateTime","insertText":"plusSeconds"},{"label":"plusWeeks","kind":"method","documentation":"plusWeeks(long a): OffsetDateTime","insertText":"plusWeeks"},{"label":"plusYears","kind":"method","documentation":"plusYears(long a): OffsetDateTime","insertText":"plusYears"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toEpochSecond","kind":"method","documentation":"toEpochSecond(): long","insertText":"toEpochSecond"},{"label":"toInstant","kind":"method","documentation":"toInstant(): Instant","insertText":"toInstant"},{"label":"toLocalDate","kind":"method","documentation":"toLocalDate(): LocalDate","insertText":"toLocalDate"},{"label":"toLocalDateTime","kind":"method","documentation":"toLocalDateTime(): LocalDateTime","insertText":"toLocalDateTime"},{"label":"toLocalTime","kind":"method","documentation":"toLocalTime(): LocalTime","insertText":"toLocalTime"},{"label":"toOffsetTime","kind":"method","documentation":"toOffsetTime(): OffsetTime","insertText":"toOffsetTime"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toZonedDateTime","kind":"method","documentation":"toZonedDateTime(): ZonedDateTime","insertText":"toZonedDateTime"},{"label":"truncatedTo","kind":"method","documentation":"truncatedTo(TemporalUnit a): OffsetDateTime","insertText":"truncatedTo"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): OffsetDateTime","insertText":"with"},{"label":"withDayOfMonth","kind":"method","documentation":"withDayOfMonth(int a): OffsetDateTime","insertText":"withDayOfMonth"},{"label":"withDayOfYear","kind":"method","documentation":"withDayOfYear(int a): OffsetDateTime","insertText":"withDayOfYear"},{"label":"withHour","kind":"method","documentation":"withHour(int a): OffsetDateTime","insertText":"withHour"},{"label":"withMinute","kind":"method","documentation":"withMinute(int a): OffsetDateTime","insertText":"withMinute"},{"label":"withMonth","kind":"method","documentation":"withMonth(int a): OffsetDateTime","insertText":"withMonth"},{"label":"withNano","kind":"method","documentation":"withNano(int a): OffsetDateTime","insertText":"withNano"},{"label":"withOffsetSameInstant","kind":"method","documentation":"withOffsetSameInstant(ZoneOffset a): OffsetDateTime","insertText":"withOffsetSameInstant"},{"label":"withOffsetSameLocal","kind":"method","documentation":"withOffsetSameLocal(ZoneOffset a): OffsetDateTime","insertText":"withOffsetSameLocal"},{"label":"withSecond","kind":"method","documentation":"withSecond(int a): OffsetDateTime","insertText":"withSecond"},{"label":"withYear","kind":"method","documentation":"withYear(int a): OffsetDateTime","insertText":"withYear"}]},{"label":"OffsetTime","kind":"class","documentation":"Class: OffsetTime","insertText":"OffsetTime","properties":[{"label":"MAX","kind":"property","documentation":"MAX: OffsetTime","insertText":"MAX"},{"label":"MIN","kind":"property","documentation":"MIN: OffsetTime","insertText":"MIN"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): OffsetTime","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c, int d, ZoneOffset e | LocalTime a, ZoneOffset b): OffsetTime","insertText":"of"},{"label":"ofInstant","kind":"method","documentation":"ofInstant(Instant a, ZoneId b): OffsetTime","insertText":"ofInstant"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): OffsetTime","insertText":"parse"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"compareTo","kind":"method","documentation":"compareTo(OffsetTime a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getHour","kind":"method","documentation":"getHour(): int","insertText":"getHour"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMinute","kind":"method","documentation":"getMinute(): int","insertText":"getMinute"},{"label":"getNano","kind":"method","documentation":"getNano(): int","insertText":"getNano"},{"label":"getOffset","kind":"method","documentation":"getOffset(): ZoneOffset","insertText":"getOffset"},{"label":"getSecond","kind":"method","documentation":"getSecond(): int","insertText":"getSecond"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(OffsetTime a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(OffsetTime a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(OffsetTime a): boolean","insertText":"isEqual"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): OffsetTime","insertText":"minus"},{"label":"minusHours","kind":"method","documentation":"minusHours(long a): OffsetTime","insertText":"minusHours"},{"label":"minusMinutes","kind":"method","documentation":"minusMinutes(long a): OffsetTime","insertText":"minusMinutes"},{"label":"minusNanos","kind":"method","documentation":"minusNanos(long a): OffsetTime","insertText":"minusNanos"},{"label":"minusSeconds","kind":"method","documentation":"minusSeconds(long a): OffsetTime","insertText":"minusSeconds"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): OffsetTime","insertText":"plus"},{"label":"plusHours","kind":"method","documentation":"plusHours(long a): OffsetTime","insertText":"plusHours"},{"label":"plusMinutes","kind":"method","documentation":"plusMinutes(long a): OffsetTime","insertText":"plusMinutes"},{"label":"plusNanos","kind":"method","documentation":"plusNanos(long a): OffsetTime","insertText":"plusNanos"},{"label":"plusSeconds","kind":"method","documentation":"plusSeconds(long a): OffsetTime","insertText":"plusSeconds"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toLocalTime","kind":"method","documentation":"toLocalTime(): LocalTime","insertText":"toLocalTime"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"truncatedTo","kind":"method","documentation":"truncatedTo(TemporalUnit a): OffsetTime","insertText":"truncatedTo"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): OffsetTime","insertText":"with"},{"label":"withHour","kind":"method","documentation":"withHour(int a): OffsetTime","insertText":"withHour"},{"label":"withMinute","kind":"method","documentation":"withMinute(int a): OffsetTime","insertText":"withMinute"},{"label":"withNano","kind":"method","documentation":"withNano(int a): OffsetTime","insertText":"withNano"},{"label":"withOffsetSameInstant","kind":"method","documentation":"withOffsetSameInstant(ZoneOffset a): OffsetTime","insertText":"withOffsetSameInstant"},{"label":"withOffsetSameLocal","kind":"method","documentation":"withOffsetSameLocal(ZoneOffset a): OffsetTime","insertText":"withOffsetSameLocal"},{"label":"withSecond","kind":"method","documentation":"withSecond(int a): OffsetTime","insertText":"withSecond"}]},{"label":"Period","kind":"class","documentation":"Class: Period","insertText":"Period","properties":[{"label":"ZERO","kind":"property","documentation":"ZERO: Period","insertText":"ZERO"},{"label":"between","kind":"method","documentation":"between(LocalDate a, LocalDate b): Period","insertText":"between"},{"label":"from","kind":"method","documentation":"from(TemporalAmount a): Period","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c): Period","insertText":"of"},{"label":"ofDays","kind":"method","documentation":"ofDays(int a): Period","insertText":"ofDays"},{"label":"ofMonths","kind":"method","documentation":"ofMonths(int a): Period","insertText":"ofMonths"},{"label":"ofWeeks","kind":"method","documentation":"ofWeeks(int a): Period","insertText":"ofWeeks"},{"label":"ofYears","kind":"method","documentation":"ofYears(int a): Period","insertText":"ofYears"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a): Period","insertText":"parse"},{"label":"addTo","kind":"method","documentation":"addTo(Temporal a): Temporal","insertText":"addTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalUnit a): long","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): IsoChronology","insertText":"getChronology"},{"label":"getDays","kind":"method","documentation":"getDays(): int","insertText":"getDays"},{"label":"getMonths","kind":"method","documentation":"getMonths(): int","insertText":"getMonths"},{"label":"getUnits","kind":"method","documentation":"getUnits(): List","insertText":"getUnits"},{"label":"getYears","kind":"method","documentation":"getYears(): int","insertText":"getYears"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isNegative","kind":"method","documentation":"isNegative(): boolean","insertText":"isNegative"},{"label":"isZero","kind":"method","documentation":"isZero(): boolean","insertText":"isZero"},{"label":"minus","kind":"method","documentation":"minus(TemporalAmount a): Period","insertText":"minus"},{"label":"minusDays","kind":"method","documentation":"minusDays(long a): Period","insertText":"minusDays"},{"label":"minusMonths","kind":"method","documentation":"minusMonths(long a): Period","insertText":"minusMonths"},{"label":"minusYears","kind":"method","documentation":"minusYears(long a): Period","insertText":"minusYears"},{"label":"multipliedBy","kind":"method","documentation":"multipliedBy(int a): Period","insertText":"multipliedBy"},{"label":"negated","kind":"method","documentation":"negated(): Period","insertText":"negated"},{"label":"normalized","kind":"method","documentation":"normalized(): Period","insertText":"normalized"},{"label":"plus","kind":"method","documentation":"plus(TemporalAmount a): Period","insertText":"plus"},{"label":"plusDays","kind":"method","documentation":"plusDays(long a): Period","insertText":"plusDays"},{"label":"plusMonths","kind":"method","documentation":"plusMonths(long a): Period","insertText":"plusMonths"},{"label":"plusYears","kind":"method","documentation":"plusYears(long a): Period","insertText":"plusYears"},{"label":"subtractFrom","kind":"method","documentation":"subtractFrom(Temporal a): Temporal","insertText":"subtractFrom"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toTotalMonths","kind":"method","documentation":"toTotalMonths(): long","insertText":"toTotalMonths"},{"label":"withDays","kind":"method","documentation":"withDays(int a): Period","insertText":"withDays"},{"label":"withMonths","kind":"method","documentation":"withMonths(int a): Period","insertText":"withMonths"},{"label":"withYears","kind":"method","documentation":"withYears(int a): Period","insertText":"withYears"}]},{"label":"Year","kind":"class","documentation":"Class: Year","insertText":"Year","properties":[{"label":"MAX_VALUE","kind":"property","documentation":"MAX_VALUE: int","insertText":"MAX_VALUE"},{"label":"MIN_VALUE","kind":"property","documentation":"MIN_VALUE: int","insertText":"MIN_VALUE"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): Year","insertText":"from"},{"label":"isLeap","kind":"method","documentation":"isLeap(long a): boolean","insertText":"isLeap"},{"label":"of","kind":"method","documentation":"of(int a): Year","insertText":"of"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): Year","insertText":"parse"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atDay","kind":"method","documentation":"atDay(int a): LocalDate","insertText":"atDay"},{"label":"atMonth","kind":"method","documentation":"atMonth(int a): YearMonth","insertText":"atMonth"},{"label":"atMonthDay","kind":"method","documentation":"atMonthDay(MonthDay a): LocalDate","insertText":"atMonthDay"},{"label":"compareTo","kind":"method","documentation":"compareTo(Year a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(Year a): boolean","insertText":"isAfter"},{"label":"isLeap","kind":"method","documentation":"isLeap(): boolean","insertText":"isLeap"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"isValidMonthDay","kind":"method","documentation":"isValidMonthDay(MonthDay a): boolean","insertText":"isValidMonthDay"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): Year","insertText":"minus"},{"label":"minusYears","kind":"method","documentation":"minusYears(long a): Year","insertText":"minusYears"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): Year","insertText":"plus"},{"label":"plusYears","kind":"method","documentation":"plusYears(long a): Year","insertText":"plusYears"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): Year","insertText":"with"}]},{"label":"YearMonth","kind":"class","documentation":"Class: YearMonth","insertText":"YearMonth","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): YearMonth","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b): YearMonth","insertText":"of"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): YearMonth","insertText":"parse"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atDay","kind":"method","documentation":"atDay(int a): LocalDate","insertText":"atDay"},{"label":"atEndOfMonth","kind":"method","documentation":"atEndOfMonth(): LocalDate","insertText":"atEndOfMonth"},{"label":"compareTo","kind":"method","documentation":"compareTo(YearMonth a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMonth","kind":"method","documentation":"getMonth(): Month","insertText":"getMonth"},{"label":"getMonthValue","kind":"method","documentation":"getMonthValue(): int","insertText":"getMonthValue"},{"label":"getYear","kind":"method","documentation":"getYear(): int","insertText":"getYear"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(YearMonth a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(YearMonth a): boolean","insertText":"isBefore"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(): boolean","insertText":"isLeapYear"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"isValidDay","kind":"method","documentation":"isValidDay(int a): boolean","insertText":"isValidDay"},{"label":"lengthOfMonth","kind":"method","documentation":"lengthOfMonth(): int","insertText":"lengthOfMonth"},{"label":"lengthOfYear","kind":"method","documentation":"lengthOfYear(): int","insertText":"lengthOfYear"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): YearMonth","insertText":"minus"},{"label":"minusMonths","kind":"method","documentation":"minusMonths(long a): YearMonth","insertText":"minusMonths"},{"label":"minusYears","kind":"method","documentation":"minusYears(long a): YearMonth","insertText":"minusYears"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): YearMonth","insertText":"plus"},{"label":"plusMonths","kind":"method","documentation":"plusMonths(long a): YearMonth","insertText":"plusMonths"},{"label":"plusYears","kind":"method","documentation":"plusYears(long a): YearMonth","insertText":"plusYears"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): YearMonth","insertText":"with"},{"label":"withMonth","kind":"method","documentation":"withMonth(int a): YearMonth","insertText":"withMonth"},{"label":"withYear","kind":"method","documentation":"withYear(int a): YearMonth","insertText":"withYear"}]},{"label":"ZoneId","kind":"class","documentation":"Class: ZoneId","insertText":"ZoneId","properties":[{"label":"SHORT_IDS","kind":"property","documentation":"SHORT_IDS: Map","insertText":"SHORT_IDS"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): ZoneId","insertText":"from"},{"label":"getAvailableZoneIds","kind":"method","documentation":"getAvailableZoneIds(): Set","insertText":"getAvailableZoneIds"},{"label":"of","kind":"method","documentation":"of(String a, Map b | String a): ZoneId","insertText":"of"},{"label":"ofOffset","kind":"method","documentation":"ofOffset(String a, ZoneOffset b): ZoneId","insertText":"ofOffset"},{"label":"systemDefault","kind":"method","documentation":"systemDefault(): ZoneId","insertText":"systemDefault"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"getRules","kind":"method","documentation":"getRules(): ZoneRules","insertText":"getRules"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"normalized","kind":"method","documentation":"normalized(): ZoneId","insertText":"normalized"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ZoneOffset","kind":"class","documentation":"Class: ZoneOffset","insertText":"ZoneOffset","properties":[{"label":"MAX","kind":"property","documentation":"MAX: ZoneOffset","insertText":"MAX"},{"label":"MIN","kind":"property","documentation":"MIN: ZoneOffset","insertText":"MIN"},{"label":"UTC","kind":"property","documentation":"UTC: ZoneOffset","insertText":"UTC"},{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): ZoneOffset","insertText":"from"},{"label":"of","kind":"method","documentation":"of(String a): ZoneOffset","insertText":"of"},{"label":"ofHours","kind":"method","documentation":"ofHours(int a): ZoneOffset","insertText":"ofHours"},{"label":"ofHoursMinutes","kind":"method","documentation":"ofHoursMinutes(int a, int b): ZoneOffset","insertText":"ofHoursMinutes"},{"label":"ofHoursMinutesSeconds","kind":"method","documentation":"ofHoursMinutesSeconds(int a, int b, int c): ZoneOffset","insertText":"ofHoursMinutesSeconds"},{"label":"ofTotalSeconds","kind":"method","documentation":"ofTotalSeconds(int a): ZoneOffset","insertText":"ofTotalSeconds"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"compareTo","kind":"method","documentation":"compareTo(def a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getRules","kind":"method","documentation":"getRules(): ZoneRules","insertText":"getRules"},{"label":"getTotalSeconds","kind":"method","documentation":"getTotalSeconds(): int","insertText":"getTotalSeconds"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"normalized","kind":"method","documentation":"normalized(): ZoneId","insertText":"normalized"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ZonedDateTime","kind":"class","documentation":"Class: ZonedDateTime","insertText":"ZonedDateTime","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): ZonedDateTime","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c, int d, int e, int f, int undefined, ZoneId undefined | LocalDate a, LocalTime b, ZoneId c | LocalDateTime a, ZoneId b): ZonedDateTime","insertText":"of"},{"label":"ofInstant","kind":"method","documentation":"ofInstant(LocalDateTime a, ZoneOffset b, ZoneId c | Instant a, ZoneId b): ZonedDateTime","insertText":"ofInstant"},{"label":"ofLocal","kind":"method","documentation":"ofLocal(LocalDateTime a, ZoneId b, ZoneOffset c): ZonedDateTime","insertText":"ofLocal"},{"label":"ofStrict","kind":"method","documentation":"ofStrict(LocalDateTime a, ZoneOffset b, ZoneId c): ZonedDateTime","insertText":"ofStrict"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, DateTimeFormatter b | CharSequence a): ZonedDateTime","insertText":"parse"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoZonedDateTime a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): Chronology","insertText":"getChronology"},{"label":"getDayOfMonth","kind":"method","documentation":"getDayOfMonth(): int","insertText":"getDayOfMonth"},{"label":"getDayOfWeek","kind":"method","documentation":"getDayOfWeek(): DayOfWeek","insertText":"getDayOfWeek"},{"label":"getDayOfYear","kind":"method","documentation":"getDayOfYear(): int","insertText":"getDayOfYear"},{"label":"getHour","kind":"method","documentation":"getHour(): int","insertText":"getHour"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMinute","kind":"method","documentation":"getMinute(): int","insertText":"getMinute"},{"label":"getMonth","kind":"method","documentation":"getMonth(): Month","insertText":"getMonth"},{"label":"getMonthValue","kind":"method","documentation":"getMonthValue(): int","insertText":"getMonthValue"},{"label":"getNano","kind":"method","documentation":"getNano(): int","insertText":"getNano"},{"label":"getOffset","kind":"method","documentation":"getOffset(): ZoneOffset","insertText":"getOffset"},{"label":"getSecond","kind":"method","documentation":"getSecond(): int","insertText":"getSecond"},{"label":"getYear","kind":"method","documentation":"getYear(): int","insertText":"getYear"},{"label":"getZone","kind":"method","documentation":"getZone(): ZoneId","insertText":"getZone"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoZonedDateTime a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoZonedDateTime a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoZonedDateTime a): boolean","insertText":"isEqual"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): ZonedDateTime","insertText":"minus"},{"label":"minusDays","kind":"method","documentation":"minusDays(long a): ZonedDateTime","insertText":"minusDays"},{"label":"minusHours","kind":"method","documentation":"minusHours(long a): ZonedDateTime","insertText":"minusHours"},{"label":"minusMinutes","kind":"method","documentation":"minusMinutes(long a): ZonedDateTime","insertText":"minusMinutes"},{"label":"minusMonths","kind":"method","documentation":"minusMonths(long a): ZonedDateTime","insertText":"minusMonths"},{"label":"minusNanos","kind":"method","documentation":"minusNanos(long a): ZonedDateTime","insertText":"minusNanos"},{"label":"minusSeconds","kind":"method","documentation":"minusSeconds(long a): ZonedDateTime","insertText":"minusSeconds"},{"label":"minusWeeks","kind":"method","documentation":"minusWeeks(long a): ZonedDateTime","insertText":"minusWeeks"},{"label":"minusYears","kind":"method","documentation":"minusYears(long a): ZonedDateTime","insertText":"minusYears"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): ZonedDateTime","insertText":"plus"},{"label":"plusDays","kind":"method","documentation":"plusDays(long a): ZonedDateTime","insertText":"plusDays"},{"label":"plusHours","kind":"method","documentation":"plusHours(long a): ZonedDateTime","insertText":"plusHours"},{"label":"plusMinutes","kind":"method","documentation":"plusMinutes(long a): ZonedDateTime","insertText":"plusMinutes"},{"label":"plusMonths","kind":"method","documentation":"plusMonths(long a): ZonedDateTime","insertText":"plusMonths"},{"label":"plusNanos","kind":"method","documentation":"plusNanos(long a): ZonedDateTime","insertText":"plusNanos"},{"label":"plusSeconds","kind":"method","documentation":"plusSeconds(long a): ZonedDateTime","insertText":"plusSeconds"},{"label":"plusWeeks","kind":"method","documentation":"plusWeeks(long a): ZonedDateTime","insertText":"plusWeeks"},{"label":"plusYears","kind":"method","documentation":"plusYears(long a): ZonedDateTime","insertText":"plusYears"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toEpochSecond","kind":"method","documentation":"toEpochSecond(): long","insertText":"toEpochSecond"},{"label":"toInstant","kind":"method","documentation":"toInstant(): Instant","insertText":"toInstant"},{"label":"toLocalDate","kind":"method","documentation":"toLocalDate(): LocalDate","insertText":"toLocalDate"},{"label":"toLocalDateTime","kind":"method","documentation":"toLocalDateTime(): LocalDateTime","insertText":"toLocalDateTime"},{"label":"toLocalTime","kind":"method","documentation":"toLocalTime(): LocalTime","insertText":"toLocalTime"},{"label":"toOffsetDateTime","kind":"method","documentation":"toOffsetDateTime(): OffsetDateTime","insertText":"toOffsetDateTime"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"truncatedTo","kind":"method","documentation":"truncatedTo(TemporalUnit a): ZonedDateTime","insertText":"truncatedTo"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): ZonedDateTime","insertText":"with"},{"label":"withDayOfMonth","kind":"method","documentation":"withDayOfMonth(int a): ZonedDateTime","insertText":"withDayOfMonth"},{"label":"withDayOfYear","kind":"method","documentation":"withDayOfYear(int a): ZonedDateTime","insertText":"withDayOfYear"},{"label":"withEarlierOffsetAtOverlap","kind":"method","documentation":"withEarlierOffsetAtOverlap(): ZonedDateTime","insertText":"withEarlierOffsetAtOverlap"},{"label":"withFixedOffsetZone","kind":"method","documentation":"withFixedOffsetZone(): ZonedDateTime","insertText":"withFixedOffsetZone"},{"label":"withHour","kind":"method","documentation":"withHour(int a): ZonedDateTime","insertText":"withHour"},{"label":"withLaterOffsetAtOverlap","kind":"method","documentation":"withLaterOffsetAtOverlap(): ZonedDateTime","insertText":"withLaterOffsetAtOverlap"},{"label":"withMinute","kind":"method","documentation":"withMinute(int a): ZonedDateTime","insertText":"withMinute"},{"label":"withMonth","kind":"method","documentation":"withMonth(int a): ZonedDateTime","insertText":"withMonth"},{"label":"withNano","kind":"method","documentation":"withNano(int a): ZonedDateTime","insertText":"withNano"},{"label":"withSecond","kind":"method","documentation":"withSecond(int a): ZonedDateTime","insertText":"withSecond"},{"label":"withYear","kind":"method","documentation":"withYear(int a): ZonedDateTime","insertText":"withYear"},{"label":"withZoneSameInstant","kind":"method","documentation":"withZoneSameInstant(ZoneId a): ZonedDateTime","insertText":"withZoneSameInstant"},{"label":"withZoneSameLocal","kind":"method","documentation":"withZoneSameLocal(ZoneId a): ZonedDateTime","insertText":"withZoneSameLocal"}]},{"label":"AbstractChronology","kind":"class","documentation":"Class: AbstractChronology","insertText":"AbstractChronology","properties":[{"label":"compareTo","kind":"method","documentation":"compareTo(Chronology a): int","insertText":"compareTo"},{"label":"date","kind":"method","documentation":"date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): ChronoLocalDate","insertText":"date"},{"label":"dateEpochDay","kind":"method","documentation":"dateEpochDay(long a): ChronoLocalDate","insertText":"dateEpochDay"},{"label":"dateYearDay","kind":"method","documentation":"dateYearDay(Era a, int b, int c | int a, int b): ChronoLocalDate","insertText":"dateYearDay"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"eraOf","kind":"method","documentation":"eraOf(int a): Era","insertText":"eraOf"},{"label":"eras","kind":"method","documentation":"eras(): List","insertText":"eras"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(long a): boolean","insertText":"isLeapYear"},{"label":"localDateTime","kind":"method","documentation":"localDateTime(TemporalAccessor a): ChronoLocalDateTime","insertText":"localDateTime"},{"label":"period","kind":"method","documentation":"period(int a, int b, int c): ChronoPeriod","insertText":"period"},{"label":"prolepticYear","kind":"method","documentation":"prolepticYear(Era a, int b): int","insertText":"prolepticYear"},{"label":"range","kind":"method","documentation":"range(ChronoField a): ValueRange","insertText":"range"},{"label":"resolveDate","kind":"method","documentation":"resolveDate(Map a, ResolverStyle b): ChronoLocalDate","insertText":"resolveDate"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"zonedDateTime","kind":"method","documentation":"zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ChronoZonedDateTime","insertText":"zonedDateTime"}]},{"label":"ChronoLocalDate","kind":"class","documentation":"Class: ChronoLocalDate","insertText":"ChronoLocalDate","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): ChronoLocalDate","insertText":"from"},{"label":"timeLineOrder","kind":"method","documentation":"timeLineOrder(): Comparator","insertText":"timeLineOrder"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atTime","kind":"method","documentation":"atTime(LocalTime a): ChronoLocalDateTime","insertText":"atTime"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoLocalDate a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): Chronology","insertText":"getChronology"},{"label":"getEra","kind":"method","documentation":"getEra(): Era","insertText":"getEra"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoLocalDate a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoLocalDate a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoLocalDate a): boolean","insertText":"isEqual"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(): boolean","insertText":"isLeapYear"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"lengthOfMonth","kind":"method","documentation":"lengthOfMonth(): int","insertText":"lengthOfMonth"},{"label":"lengthOfYear","kind":"method","documentation":"lengthOfYear(): int","insertText":"lengthOfYear"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): ChronoLocalDate","insertText":"minus"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): ChronoLocalDate","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochDay","kind":"method","documentation":"toEpochDay(): long","insertText":"toEpochDay"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b | ChronoLocalDate a): long | ChronoPeriod","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): ChronoLocalDate","insertText":"with"}]},{"label":"ChronoLocalDateTime","kind":"class","documentation":"Class: ChronoLocalDateTime","insertText":"ChronoLocalDateTime","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): ChronoLocalDateTime","insertText":"from"},{"label":"timeLineOrder","kind":"method","documentation":"timeLineOrder(): Comparator","insertText":"timeLineOrder"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atZone","kind":"method","documentation":"atZone(ZoneId a): ChronoZonedDateTime","insertText":"atZone"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoLocalDateTime a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): Chronology","insertText":"getChronology"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoLocalDateTime a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoLocalDateTime a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoLocalDateTime a): boolean","insertText":"isEqual"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): ChronoLocalDateTime","insertText":"minus"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): ChronoLocalDateTime","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toEpochSecond","kind":"method","documentation":"toEpochSecond(ZoneOffset a): long","insertText":"toEpochSecond"},{"label":"toInstant","kind":"method","documentation":"toInstant(ZoneOffset a): Instant","insertText":"toInstant"},{"label":"toLocalDate","kind":"method","documentation":"toLocalDate(): ChronoLocalDate","insertText":"toLocalDate"},{"label":"toLocalTime","kind":"method","documentation":"toLocalTime(): LocalTime","insertText":"toLocalTime"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): ChronoLocalDateTime","insertText":"with"}]},{"label":"ChronoPeriod","kind":"class","documentation":"Class: ChronoPeriod","insertText":"ChronoPeriod","properties":[{"label":"between","kind":"method","documentation":"between(ChronoLocalDate a, ChronoLocalDate b): ChronoPeriod","insertText":"between"},{"label":"addTo","kind":"method","documentation":"addTo(Temporal a): Temporal","insertText":"addTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalUnit a): long","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): Chronology","insertText":"getChronology"},{"label":"getUnits","kind":"method","documentation":"getUnits(): List","insertText":"getUnits"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isNegative","kind":"method","documentation":"isNegative(): boolean","insertText":"isNegative"},{"label":"isZero","kind":"method","documentation":"isZero(): boolean","insertText":"isZero"},{"label":"minus","kind":"method","documentation":"minus(TemporalAmount a): ChronoPeriod","insertText":"minus"},{"label":"multipliedBy","kind":"method","documentation":"multipliedBy(int a): ChronoPeriod","insertText":"multipliedBy"},{"label":"negated","kind":"method","documentation":"negated(): ChronoPeriod","insertText":"negated"},{"label":"normalized","kind":"method","documentation":"normalized(): ChronoPeriod","insertText":"normalized"},{"label":"plus","kind":"method","documentation":"plus(TemporalAmount a): ChronoPeriod","insertText":"plus"},{"label":"subtractFrom","kind":"method","documentation":"subtractFrom(Temporal a): Temporal","insertText":"subtractFrom"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ChronoZonedDateTime","kind":"class","documentation":"Class: ChronoZonedDateTime","insertText":"ChronoZonedDateTime","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): ChronoZonedDateTime","insertText":"from"},{"label":"timeLineOrder","kind":"method","documentation":"timeLineOrder(): Comparator","insertText":"timeLineOrder"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoZonedDateTime a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): Chronology","insertText":"getChronology"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getOffset","kind":"method","documentation":"getOffset(): ZoneOffset","insertText":"getOffset"},{"label":"getZone","kind":"method","documentation":"getZone(): ZoneId","insertText":"getZone"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoZonedDateTime a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoZonedDateTime a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoZonedDateTime a): boolean","insertText":"isEqual"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): ChronoZonedDateTime","insertText":"minus"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): ChronoZonedDateTime","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toEpochSecond","kind":"method","documentation":"toEpochSecond(): long","insertText":"toEpochSecond"},{"label":"toInstant","kind":"method","documentation":"toInstant(): Instant","insertText":"toInstant"},{"label":"toLocalDate","kind":"method","documentation":"toLocalDate(): ChronoLocalDate","insertText":"toLocalDate"},{"label":"toLocalDateTime","kind":"method","documentation":"toLocalDateTime(): ChronoLocalDateTime","insertText":"toLocalDateTime"},{"label":"toLocalTime","kind":"method","documentation":"toLocalTime(): LocalTime","insertText":"toLocalTime"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): ChronoZonedDateTime","insertText":"with"},{"label":"withEarlierOffsetAtOverlap","kind":"method","documentation":"withEarlierOffsetAtOverlap(): ChronoZonedDateTime","insertText":"withEarlierOffsetAtOverlap"},{"label":"withLaterOffsetAtOverlap","kind":"method","documentation":"withLaterOffsetAtOverlap(): ChronoZonedDateTime","insertText":"withLaterOffsetAtOverlap"},{"label":"withZoneSameInstant","kind":"method","documentation":"withZoneSameInstant(ZoneId a): ChronoZonedDateTime","insertText":"withZoneSameInstant"},{"label":"withZoneSameLocal","kind":"method","documentation":"withZoneSameLocal(ZoneId a): ChronoZonedDateTime","insertText":"withZoneSameLocal"}]},{"label":"Chronology","kind":"class","documentation":"Class: Chronology","insertText":"Chronology","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): Chronology","insertText":"from"},{"label":"getAvailableChronologies","kind":"method","documentation":"getAvailableChronologies(): Set","insertText":"getAvailableChronologies"},{"label":"of","kind":"method","documentation":"of(String a): Chronology","insertText":"of"},{"label":"ofLocale","kind":"method","documentation":"ofLocale(Locale a): Chronology","insertText":"ofLocale"},{"label":"compareTo","kind":"method","documentation":"compareTo(Chronology a): int","insertText":"compareTo"},{"label":"date","kind":"method","documentation":"date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): ChronoLocalDate","insertText":"date"},{"label":"dateEpochDay","kind":"method","documentation":"dateEpochDay(long a): ChronoLocalDate","insertText":"dateEpochDay"},{"label":"dateYearDay","kind":"method","documentation":"dateYearDay(Era a, int b, int c | int a, int b): ChronoLocalDate","insertText":"dateYearDay"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"eraOf","kind":"method","documentation":"eraOf(int a): Era","insertText":"eraOf"},{"label":"eras","kind":"method","documentation":"eras(): List","insertText":"eras"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(long a): boolean","insertText":"isLeapYear"},{"label":"localDateTime","kind":"method","documentation":"localDateTime(TemporalAccessor a): ChronoLocalDateTime","insertText":"localDateTime"},{"label":"period","kind":"method","documentation":"period(int a, int b, int c): ChronoPeriod","insertText":"period"},{"label":"prolepticYear","kind":"method","documentation":"prolepticYear(Era a, int b): int","insertText":"prolepticYear"},{"label":"range","kind":"method","documentation":"range(ChronoField a): ValueRange","insertText":"range"},{"label":"resolveDate","kind":"method","documentation":"resolveDate(Map a, ResolverStyle b): ChronoLocalDate","insertText":"resolveDate"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"zonedDateTime","kind":"method","documentation":"zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ChronoZonedDateTime","insertText":"zonedDateTime"}]},{"label":"Era","kind":"class","documentation":"Class: Era","insertText":"Era","properties":[{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"HijrahChronology","kind":"class","documentation":"Class: HijrahChronology","insertText":"HijrahChronology","properties":[{"label":"INSTANCE","kind":"property","documentation":"INSTANCE: HijrahChronology","insertText":"INSTANCE"},{"label":"compareTo","kind":"method","documentation":"compareTo(Chronology a): int","insertText":"compareTo"},{"label":"date","kind":"method","documentation":"date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): HijrahDate","insertText":"date"},{"label":"dateEpochDay","kind":"method","documentation":"dateEpochDay(long a): HijrahDate","insertText":"dateEpochDay"},{"label":"dateYearDay","kind":"method","documentation":"dateYearDay(Era a, int b, int c | int a, int b): HijrahDate","insertText":"dateYearDay"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"eraOf","kind":"method","documentation":"eraOf(int a): HijrahEra","insertText":"eraOf"},{"label":"eras","kind":"method","documentation":"eras(): List","insertText":"eras"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(long a): boolean","insertText":"isLeapYear"},{"label":"localDateTime","kind":"method","documentation":"localDateTime(TemporalAccessor a): ChronoLocalDateTime","insertText":"localDateTime"},{"label":"period","kind":"method","documentation":"period(int a, int b, int c): ChronoPeriod","insertText":"period"},{"label":"prolepticYear","kind":"method","documentation":"prolepticYear(Era a, int b): int","insertText":"prolepticYear"},{"label":"range","kind":"method","documentation":"range(ChronoField a): ValueRange","insertText":"range"},{"label":"resolveDate","kind":"method","documentation":"resolveDate(Map a, ResolverStyle b): HijrahDate","insertText":"resolveDate"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"zonedDateTime","kind":"method","documentation":"zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ChronoZonedDateTime","insertText":"zonedDateTime"}]},{"label":"HijrahDate","kind":"class","documentation":"Class: HijrahDate","insertText":"HijrahDate","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): HijrahDate","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c): HijrahDate","insertText":"of"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atTime","kind":"method","documentation":"atTime(LocalTime a): ChronoLocalDateTime","insertText":"atTime"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoLocalDate a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): HijrahChronology","insertText":"getChronology"},{"label":"getEra","kind":"method","documentation":"getEra(): HijrahEra","insertText":"getEra"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoLocalDate a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoLocalDate a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoLocalDate a): boolean","insertText":"isEqual"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(): boolean","insertText":"isLeapYear"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"lengthOfMonth","kind":"method","documentation":"lengthOfMonth(): int","insertText":"lengthOfMonth"},{"label":"lengthOfYear","kind":"method","documentation":"lengthOfYear(): int","insertText":"lengthOfYear"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): HijrahDate","insertText":"minus"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): HijrahDate","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochDay","kind":"method","documentation":"toEpochDay(): long","insertText":"toEpochDay"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b | ChronoLocalDate a): long | ChronoPeriod","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): HijrahDate","insertText":"with"},{"label":"withVariant","kind":"method","documentation":"withVariant(HijrahChronology a): HijrahDate","insertText":"withVariant"}]},{"label":"HijrahEra","kind":"class","documentation":"Class: HijrahEra","insertText":"HijrahEra","properties":[{"label":"AH","kind":"property","documentation":"AH: HijrahEra","insertText":"AH"},{"label":"of","kind":"method","documentation":"of(int a): HijrahEra","insertText":"of"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): HijrahEra","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): HijrahEra[]","insertText":"values"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IsoChronology","kind":"class","documentation":"Class: IsoChronology","insertText":"IsoChronology","properties":[{"label":"INSTANCE","kind":"property","documentation":"INSTANCE: IsoChronology","insertText":"INSTANCE"},{"label":"compareTo","kind":"method","documentation":"compareTo(Chronology a): int","insertText":"compareTo"},{"label":"date","kind":"method","documentation":"date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): LocalDate","insertText":"date"},{"label":"dateEpochDay","kind":"method","documentation":"dateEpochDay(long a): LocalDate","insertText":"dateEpochDay"},{"label":"dateYearDay","kind":"method","documentation":"dateYearDay(Era a, int b, int c | int a, int b): LocalDate","insertText":"dateYearDay"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"eraOf","kind":"method","documentation":"eraOf(int a): IsoEra","insertText":"eraOf"},{"label":"eras","kind":"method","documentation":"eras(): List","insertText":"eras"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(long a): boolean","insertText":"isLeapYear"},{"label":"localDateTime","kind":"method","documentation":"localDateTime(TemporalAccessor a): LocalDateTime","insertText":"localDateTime"},{"label":"period","kind":"method","documentation":"period(int a, int b, int c): Period","insertText":"period"},{"label":"prolepticYear","kind":"method","documentation":"prolepticYear(Era a, int b): int","insertText":"prolepticYear"},{"label":"range","kind":"method","documentation":"range(ChronoField a): ValueRange","insertText":"range"},{"label":"resolveDate","kind":"method","documentation":"resolveDate(Map a, ResolverStyle b): LocalDate","insertText":"resolveDate"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"zonedDateTime","kind":"method","documentation":"zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ZonedDateTime","insertText":"zonedDateTime"}]},{"label":"IsoEra","kind":"class","documentation":"Class: IsoEra","insertText":"IsoEra","properties":[{"label":"BCE","kind":"property","documentation":"BCE: IsoEra","insertText":"BCE"},{"label":"CE","kind":"property","documentation":"CE: IsoEra","insertText":"CE"},{"label":"of","kind":"method","documentation":"of(int a): IsoEra","insertText":"of"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): IsoEra","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): IsoEra[]","insertText":"values"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"JapaneseChronology","kind":"class","documentation":"Class: JapaneseChronology","insertText":"JapaneseChronology","properties":[{"label":"INSTANCE","kind":"property","documentation":"INSTANCE: JapaneseChronology","insertText":"INSTANCE"},{"label":"compareTo","kind":"method","documentation":"compareTo(Chronology a): int","insertText":"compareTo"},{"label":"date","kind":"method","documentation":"date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): JapaneseDate","insertText":"date"},{"label":"dateEpochDay","kind":"method","documentation":"dateEpochDay(long a): JapaneseDate","insertText":"dateEpochDay"},{"label":"dateYearDay","kind":"method","documentation":"dateYearDay(Era a, int b, int c | int a, int b): JapaneseDate","insertText":"dateYearDay"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"eraOf","kind":"method","documentation":"eraOf(int a): JapaneseEra","insertText":"eraOf"},{"label":"eras","kind":"method","documentation":"eras(): List","insertText":"eras"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(long a): boolean","insertText":"isLeapYear"},{"label":"localDateTime","kind":"method","documentation":"localDateTime(TemporalAccessor a): ChronoLocalDateTime","insertText":"localDateTime"},{"label":"period","kind":"method","documentation":"period(int a, int b, int c): ChronoPeriod","insertText":"period"},{"label":"prolepticYear","kind":"method","documentation":"prolepticYear(Era a, int b): int","insertText":"prolepticYear"},{"label":"range","kind":"method","documentation":"range(ChronoField a): ValueRange","insertText":"range"},{"label":"resolveDate","kind":"method","documentation":"resolveDate(Map a, ResolverStyle b): JapaneseDate","insertText":"resolveDate"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"zonedDateTime","kind":"method","documentation":"zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ChronoZonedDateTime","insertText":"zonedDateTime"}]},{"label":"JapaneseDate","kind":"class","documentation":"Class: JapaneseDate","insertText":"JapaneseDate","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): JapaneseDate","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c): JapaneseDate","insertText":"of"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atTime","kind":"method","documentation":"atTime(LocalTime a): ChronoLocalDateTime","insertText":"atTime"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoLocalDate a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): JapaneseChronology","insertText":"getChronology"},{"label":"getEra","kind":"method","documentation":"getEra(): JapaneseEra","insertText":"getEra"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoLocalDate a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoLocalDate a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoLocalDate a): boolean","insertText":"isEqual"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(): boolean","insertText":"isLeapYear"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"lengthOfMonth","kind":"method","documentation":"lengthOfMonth(): int","insertText":"lengthOfMonth"},{"label":"lengthOfYear","kind":"method","documentation":"lengthOfYear(): int","insertText":"lengthOfYear"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): JapaneseDate","insertText":"minus"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): JapaneseDate","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochDay","kind":"method","documentation":"toEpochDay(): long","insertText":"toEpochDay"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b | ChronoLocalDate a): long | ChronoPeriod","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): JapaneseDate","insertText":"with"}]},{"label":"JapaneseEra","kind":"class","documentation":"Class: JapaneseEra","insertText":"JapaneseEra","properties":[{"label":"HEISEI","kind":"property","documentation":"HEISEI: JapaneseEra","insertText":"HEISEI"},{"label":"MEIJI","kind":"property","documentation":"MEIJI: JapaneseEra","insertText":"MEIJI"},{"label":"SHOWA","kind":"property","documentation":"SHOWA: JapaneseEra","insertText":"SHOWA"},{"label":"TAISHO","kind":"property","documentation":"TAISHO: JapaneseEra","insertText":"TAISHO"},{"label":"of","kind":"method","documentation":"of(int a): JapaneseEra","insertText":"of"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): JapaneseEra","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): JapaneseEra[]","insertText":"values"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"MinguoChronology","kind":"class","documentation":"Class: MinguoChronology","insertText":"MinguoChronology","properties":[{"label":"INSTANCE","kind":"property","documentation":"INSTANCE: MinguoChronology","insertText":"INSTANCE"},{"label":"compareTo","kind":"method","documentation":"compareTo(Chronology a): int","insertText":"compareTo"},{"label":"date","kind":"method","documentation":"date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): MinguoDate","insertText":"date"},{"label":"dateEpochDay","kind":"method","documentation":"dateEpochDay(long a): MinguoDate","insertText":"dateEpochDay"},{"label":"dateYearDay","kind":"method","documentation":"dateYearDay(Era a, int b, int c | int a, int b): MinguoDate","insertText":"dateYearDay"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"eraOf","kind":"method","documentation":"eraOf(int a): MinguoEra","insertText":"eraOf"},{"label":"eras","kind":"method","documentation":"eras(): List","insertText":"eras"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(long a): boolean","insertText":"isLeapYear"},{"label":"localDateTime","kind":"method","documentation":"localDateTime(TemporalAccessor a): ChronoLocalDateTime","insertText":"localDateTime"},{"label":"period","kind":"method","documentation":"period(int a, int b, int c): ChronoPeriod","insertText":"period"},{"label":"prolepticYear","kind":"method","documentation":"prolepticYear(Era a, int b): int","insertText":"prolepticYear"},{"label":"range","kind":"method","documentation":"range(ChronoField a): ValueRange","insertText":"range"},{"label":"resolveDate","kind":"method","documentation":"resolveDate(Map a, ResolverStyle b): MinguoDate","insertText":"resolveDate"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"zonedDateTime","kind":"method","documentation":"zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ChronoZonedDateTime","insertText":"zonedDateTime"}]},{"label":"MinguoDate","kind":"class","documentation":"Class: MinguoDate","insertText":"MinguoDate","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): MinguoDate","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c): MinguoDate","insertText":"of"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atTime","kind":"method","documentation":"atTime(LocalTime a): ChronoLocalDateTime","insertText":"atTime"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoLocalDate a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): MinguoChronology","insertText":"getChronology"},{"label":"getEra","kind":"method","documentation":"getEra(): MinguoEra","insertText":"getEra"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoLocalDate a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoLocalDate a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoLocalDate a): boolean","insertText":"isEqual"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(): boolean","insertText":"isLeapYear"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"lengthOfMonth","kind":"method","documentation":"lengthOfMonth(): int","insertText":"lengthOfMonth"},{"label":"lengthOfYear","kind":"method","documentation":"lengthOfYear(): int","insertText":"lengthOfYear"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): MinguoDate","insertText":"minus"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): MinguoDate","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochDay","kind":"method","documentation":"toEpochDay(): long","insertText":"toEpochDay"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b | ChronoLocalDate a): long | ChronoPeriod","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): MinguoDate","insertText":"with"}]},{"label":"MinguoEra","kind":"class","documentation":"Class: MinguoEra","insertText":"MinguoEra","properties":[{"label":"BEFORE_ROC","kind":"property","documentation":"BEFORE_ROC: MinguoEra","insertText":"BEFORE_ROC"},{"label":"ROC","kind":"property","documentation":"ROC: MinguoEra","insertText":"ROC"},{"label":"of","kind":"method","documentation":"of(int a): MinguoEra","insertText":"of"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): MinguoEra","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): MinguoEra[]","insertText":"values"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ThaiBuddhistChronology","kind":"class","documentation":"Class: ThaiBuddhistChronology","insertText":"ThaiBuddhistChronology","properties":[{"label":"INSTANCE","kind":"property","documentation":"INSTANCE: ThaiBuddhistChronology","insertText":"INSTANCE"},{"label":"compareTo","kind":"method","documentation":"compareTo(Chronology a): int","insertText":"compareTo"},{"label":"date","kind":"method","documentation":"date(Era a, int b, int c, int d | int a, int b, int c | TemporalAccessor a): ThaiBuddhistDate","insertText":"date"},{"label":"dateEpochDay","kind":"method","documentation":"dateEpochDay(long a): ThaiBuddhistDate","insertText":"dateEpochDay"},{"label":"dateYearDay","kind":"method","documentation":"dateYearDay(Era a, int b, int c | int a, int b): ThaiBuddhistDate","insertText":"dateYearDay"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"eraOf","kind":"method","documentation":"eraOf(int a): ThaiBuddhistEra","insertText":"eraOf"},{"label":"eras","kind":"method","documentation":"eras(): List","insertText":"eras"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getId","kind":"method","documentation":"getId(): String","insertText":"getId"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(long a): boolean","insertText":"isLeapYear"},{"label":"localDateTime","kind":"method","documentation":"localDateTime(TemporalAccessor a): ChronoLocalDateTime","insertText":"localDateTime"},{"label":"period","kind":"method","documentation":"period(int a, int b, int c): ChronoPeriod","insertText":"period"},{"label":"prolepticYear","kind":"method","documentation":"prolepticYear(Era a, int b): int","insertText":"prolepticYear"},{"label":"range","kind":"method","documentation":"range(ChronoField a): ValueRange","insertText":"range"},{"label":"resolveDate","kind":"method","documentation":"resolveDate(Map a, ResolverStyle b): ThaiBuddhistDate","insertText":"resolveDate"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"zonedDateTime","kind":"method","documentation":"zonedDateTime(Instant a, ZoneId b | TemporalAccessor a): ChronoZonedDateTime","insertText":"zonedDateTime"}]},{"label":"ThaiBuddhistDate","kind":"class","documentation":"Class: ThaiBuddhistDate","insertText":"ThaiBuddhistDate","properties":[{"label":"from","kind":"method","documentation":"from(TemporalAccessor a): ThaiBuddhistDate","insertText":"from"},{"label":"of","kind":"method","documentation":"of(int a, int b, int c): ThaiBuddhistDate","insertText":"of"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"atTime","kind":"method","documentation":"atTime(LocalTime a): ChronoLocalDateTime","insertText":"atTime"},{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoLocalDate a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getChronology","kind":"method","documentation":"getChronology(): ThaiBuddhistChronology","insertText":"getChronology"},{"label":"getEra","kind":"method","documentation":"getEra(): ThaiBuddhistEra","insertText":"getEra"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoLocalDate a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoLocalDate a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoLocalDate a): boolean","insertText":"isEqual"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(): boolean","insertText":"isLeapYear"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"lengthOfMonth","kind":"method","documentation":"lengthOfMonth(): int","insertText":"lengthOfMonth"},{"label":"lengthOfYear","kind":"method","documentation":"lengthOfYear(): int","insertText":"lengthOfYear"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): ThaiBuddhistDate","insertText":"minus"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): ThaiBuddhistDate","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochDay","kind":"method","documentation":"toEpochDay(): long","insertText":"toEpochDay"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b | ChronoLocalDate a): long | ChronoPeriod","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): ThaiBuddhistDate","insertText":"with"}]},{"label":"ThaiBuddhistEra","kind":"class","documentation":"Class: ThaiBuddhistEra","insertText":"ThaiBuddhistEra","properties":[{"label":"BE","kind":"property","documentation":"BE: ThaiBuddhistEra","insertText":"BE"},{"label":"BEFORE_BE","kind":"property","documentation":"BEFORE_BE: ThaiBuddhistEra","insertText":"BEFORE_BE"},{"label":"of","kind":"method","documentation":"of(int a): ThaiBuddhistEra","insertText":"of"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): ThaiBuddhistEra","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): ThaiBuddhistEra[]","insertText":"values"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(TextStyle a, Locale b): String","insertText":"getDisplayName"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getValue","kind":"method","documentation":"getValue(): int","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DateTimeFormatter","kind":"class","documentation":"Class: DateTimeFormatter","insertText":"DateTimeFormatter","properties":[{"label":"BASIC_ISO_DATE","kind":"property","documentation":"BASIC_ISO_DATE: DateTimeFormatter","insertText":"BASIC_ISO_DATE"},{"label":"ISO_DATE","kind":"property","documentation":"ISO_DATE: DateTimeFormatter","insertText":"ISO_DATE"},{"label":"ISO_DATE_TIME","kind":"property","documentation":"ISO_DATE_TIME: DateTimeFormatter","insertText":"ISO_DATE_TIME"},{"label":"ISO_INSTANT","kind":"property","documentation":"ISO_INSTANT: DateTimeFormatter","insertText":"ISO_INSTANT"},{"label":"ISO_LOCAL_DATE","kind":"property","documentation":"ISO_LOCAL_DATE: DateTimeFormatter","insertText":"ISO_LOCAL_DATE"},{"label":"ISO_LOCAL_DATE_TIME","kind":"property","documentation":"ISO_LOCAL_DATE_TIME: DateTimeFormatter","insertText":"ISO_LOCAL_DATE_TIME"},{"label":"ISO_LOCAL_TIME","kind":"property","documentation":"ISO_LOCAL_TIME: DateTimeFormatter","insertText":"ISO_LOCAL_TIME"},{"label":"ISO_OFFSET_DATE","kind":"property","documentation":"ISO_OFFSET_DATE: DateTimeFormatter","insertText":"ISO_OFFSET_DATE"},{"label":"ISO_OFFSET_DATE_TIME","kind":"property","documentation":"ISO_OFFSET_DATE_TIME: DateTimeFormatter","insertText":"ISO_OFFSET_DATE_TIME"},{"label":"ISO_OFFSET_TIME","kind":"property","documentation":"ISO_OFFSET_TIME: DateTimeFormatter","insertText":"ISO_OFFSET_TIME"},{"label":"ISO_ORDINAL_DATE","kind":"property","documentation":"ISO_ORDINAL_DATE: DateTimeFormatter","insertText":"ISO_ORDINAL_DATE"},{"label":"ISO_TIME","kind":"property","documentation":"ISO_TIME: DateTimeFormatter","insertText":"ISO_TIME"},{"label":"ISO_WEEK_DATE","kind":"property","documentation":"ISO_WEEK_DATE: DateTimeFormatter","insertText":"ISO_WEEK_DATE"},{"label":"ISO_ZONED_DATE_TIME","kind":"property","documentation":"ISO_ZONED_DATE_TIME: DateTimeFormatter","insertText":"ISO_ZONED_DATE_TIME"},{"label":"RFC_1123_DATE_TIME","kind":"property","documentation":"RFC_1123_DATE_TIME: DateTimeFormatter","insertText":"RFC_1123_DATE_TIME"},{"label":"ofLocalizedDate","kind":"method","documentation":"ofLocalizedDate(FormatStyle a): DateTimeFormatter","insertText":"ofLocalizedDate"},{"label":"ofLocalizedDateTime","kind":"method","documentation":"ofLocalizedDateTime(FormatStyle a, FormatStyle b | FormatStyle a): DateTimeFormatter","insertText":"ofLocalizedDateTime"},{"label":"ofLocalizedTime","kind":"method","documentation":"ofLocalizedTime(FormatStyle a): DateTimeFormatter","insertText":"ofLocalizedTime"},{"label":"ofPattern","kind":"method","documentation":"ofPattern(String a, Locale b | String a): DateTimeFormatter","insertText":"ofPattern"},{"label":"parsedExcessDays","kind":"method","documentation":"parsedExcessDays(): TemporalQuery","insertText":"parsedExcessDays"},{"label":"parsedLeapSecond","kind":"method","documentation":"parsedLeapSecond(): TemporalQuery","insertText":"parsedLeapSecond"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(TemporalAccessor a): String","insertText":"format"},{"label":"formatTo","kind":"method","documentation":"formatTo(TemporalAccessor a, Appendable b): void","insertText":"formatTo"},{"label":"getChronology","kind":"method","documentation":"getChronology(): Chronology","insertText":"getChronology"},{"label":"getDecimalStyle","kind":"method","documentation":"getDecimalStyle(): DecimalStyle","insertText":"getDecimalStyle"},{"label":"getLocale","kind":"method","documentation":"getLocale(): Locale","insertText":"getLocale"},{"label":"getResolverFields","kind":"method","documentation":"getResolverFields(): Set","insertText":"getResolverFields"},{"label":"getResolverStyle","kind":"method","documentation":"getResolverStyle(): ResolverStyle","insertText":"getResolverStyle"},{"label":"getZone","kind":"method","documentation":"getZone(): ZoneId","insertText":"getZone"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"parse","kind":"method","documentation":"parse(CharSequence a, TemporalQuery b | CharSequence a): def | TemporalAccessor","insertText":"parse"},{"label":"parseBest","kind":"method","documentation":"parseBest(CharSequence a, TemporalQuery[] b): TemporalAccessor","insertText":"parseBest"},{"label":"parseUnresolved","kind":"method","documentation":"parseUnresolved(CharSequence a, ParsePosition b): TemporalAccessor","insertText":"parseUnresolved"},{"label":"toFormat","kind":"method","documentation":"toFormat(TemporalQuery a): Format","insertText":"toFormat"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"withChronology","kind":"method","documentation":"withChronology(Chronology a): DateTimeFormatter","insertText":"withChronology"},{"label":"withDecimalStyle","kind":"method","documentation":"withDecimalStyle(DecimalStyle a): DateTimeFormatter","insertText":"withDecimalStyle"},{"label":"withLocale","kind":"method","documentation":"withLocale(Locale a): DateTimeFormatter","insertText":"withLocale"},{"label":"withResolverFields","kind":"method","documentation":"withResolverFields(Set a): DateTimeFormatter","insertText":"withResolverFields"},{"label":"withResolverStyle","kind":"method","documentation":"withResolverStyle(ResolverStyle a): DateTimeFormatter","insertText":"withResolverStyle"},{"label":"withZone","kind":"method","documentation":"withZone(ZoneId a): DateTimeFormatter","insertText":"withZone"}]},{"label":"DateTimeFormatterBuilder","kind":"class","documentation":"Class: DateTimeFormatterBuilder","insertText":"DateTimeFormatterBuilder","properties":[{"label":"getLocalizedDateTimePattern","kind":"method","documentation":"getLocalizedDateTimePattern(FormatStyle a, FormatStyle b, Chronology c, Locale d): String","insertText":"getLocalizedDateTimePattern"},{"label":"append","kind":"method","documentation":"append(DateTimeFormatter a): DateTimeFormatterBuilder","insertText":"append"},{"label":"appendChronologyId","kind":"method","documentation":"appendChronologyId(): DateTimeFormatterBuilder","insertText":"appendChronologyId"},{"label":"appendChronologyText","kind":"method","documentation":"appendChronologyText(TextStyle a): DateTimeFormatterBuilder","insertText":"appendChronologyText"},{"label":"appendFraction","kind":"method","documentation":"appendFraction(TemporalField a, int b, int c, boolean d): DateTimeFormatterBuilder","insertText":"appendFraction"},{"label":"appendInstant","kind":"method","documentation":"appendInstant(int a): DateTimeFormatterBuilder","insertText":"appendInstant"},{"label":"appendLiteral","kind":"method","documentation":"appendLiteral(String a): DateTimeFormatterBuilder","insertText":"appendLiteral"},{"label":"appendLocalized","kind":"method","documentation":"appendLocalized(FormatStyle a, FormatStyle b): DateTimeFormatterBuilder","insertText":"appendLocalized"},{"label":"appendLocalizedOffset","kind":"method","documentation":"appendLocalizedOffset(TextStyle a): DateTimeFormatterBuilder","insertText":"appendLocalizedOffset"},{"label":"appendOffset","kind":"method","documentation":"appendOffset(String a, String b): DateTimeFormatterBuilder","insertText":"appendOffset"},{"label":"appendOffsetId","kind":"method","documentation":"appendOffsetId(): DateTimeFormatterBuilder","insertText":"appendOffsetId"},{"label":"appendOptional","kind":"method","documentation":"appendOptional(DateTimeFormatter a): DateTimeFormatterBuilder","insertText":"appendOptional"},{"label":"appendPattern","kind":"method","documentation":"appendPattern(String a): DateTimeFormatterBuilder","insertText":"appendPattern"},{"label":"appendText","kind":"method","documentation":"appendText(TemporalField a, TextStyle b | TemporalField a): DateTimeFormatterBuilder","insertText":"appendText"},{"label":"appendValue","kind":"method","documentation":"appendValue(TemporalField a, int b, int c, SignStyle d | TemporalField a, int b | TemporalField a): DateTimeFormatterBuilder","insertText":"appendValue"},{"label":"appendValueReduced","kind":"method","documentation":"appendValueReduced(TemporalField a, int b, int c, int d): DateTimeFormatterBuilder","insertText":"appendValueReduced"},{"label":"appendZoneId","kind":"method","documentation":"appendZoneId(): DateTimeFormatterBuilder","insertText":"appendZoneId"},{"label":"appendZoneOrOffsetId","kind":"method","documentation":"appendZoneOrOffsetId(): DateTimeFormatterBuilder","insertText":"appendZoneOrOffsetId"},{"label":"appendZoneRegionId","kind":"method","documentation":"appendZoneRegionId(): DateTimeFormatterBuilder","insertText":"appendZoneRegionId"},{"label":"appendZoneText","kind":"method","documentation":"appendZoneText(TextStyle a, Set b | TextStyle a): DateTimeFormatterBuilder","insertText":"appendZoneText"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"optionalEnd","kind":"method","documentation":"optionalEnd(): DateTimeFormatterBuilder","insertText":"optionalEnd"},{"label":"optionalStart","kind":"method","documentation":"optionalStart(): DateTimeFormatterBuilder","insertText":"optionalStart"},{"label":"padNext","kind":"method","documentation":"padNext(int a, char b | int a): DateTimeFormatterBuilder","insertText":"padNext"},{"label":"parseCaseInsensitive","kind":"method","documentation":"parseCaseInsensitive(): DateTimeFormatterBuilder","insertText":"parseCaseInsensitive"},{"label":"parseCaseSensitive","kind":"method","documentation":"parseCaseSensitive(): DateTimeFormatterBuilder","insertText":"parseCaseSensitive"},{"label":"parseDefaulting","kind":"method","documentation":"parseDefaulting(TemporalField a, long b): DateTimeFormatterBuilder","insertText":"parseDefaulting"},{"label":"parseLenient","kind":"method","documentation":"parseLenient(): DateTimeFormatterBuilder","insertText":"parseLenient"},{"label":"parseStrict","kind":"method","documentation":"parseStrict(): DateTimeFormatterBuilder","insertText":"parseStrict"},{"label":"toFormatter","kind":"method","documentation":"toFormatter(Locale a): DateTimeFormatter","insertText":"toFormatter"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"DateTimeFormatterBuilder","kind":"constructor","documentation":"Constructor: DateTimeFormatterBuilder","insertText":"DateTimeFormatterBuilder"}},{"label":"DateTimeParseException","kind":"class","documentation":"Class: DateTimeParseException","insertText":"DateTimeParseException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getErrorIndex","kind":"method","documentation":"getErrorIndex(): int","insertText":"getErrorIndex"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getParsedString","kind":"method","documentation":"getParsedString(): String","insertText":"getParsedString"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"DateTimeParseException","kind":"constructor","documentation":"Constructor: DateTimeParseException","insertText":"DateTimeParseException"}},{"label":"DecimalStyle","kind":"class","documentation":"Class: DecimalStyle","insertText":"DecimalStyle","properties":[{"label":"STANDARD","kind":"property","documentation":"STANDARD: DecimalStyle","insertText":"STANDARD"},{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Set","insertText":"getAvailableLocales"},{"label":"of","kind":"method","documentation":"of(Locale a): DecimalStyle","insertText":"of"},{"label":"ofDefaultLocale","kind":"method","documentation":"ofDefaultLocale(): DecimalStyle","insertText":"ofDefaultLocale"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDecimalSeparator","kind":"method","documentation":"getDecimalSeparator(): char","insertText":"getDecimalSeparator"},{"label":"getNegativeSign","kind":"method","documentation":"getNegativeSign(): char","insertText":"getNegativeSign"},{"label":"getPositiveSign","kind":"method","documentation":"getPositiveSign(): char","insertText":"getPositiveSign"},{"label":"getZeroDigit","kind":"method","documentation":"getZeroDigit(): char","insertText":"getZeroDigit"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"withDecimalSeparator","kind":"method","documentation":"withDecimalSeparator(char a): DecimalStyle","insertText":"withDecimalSeparator"},{"label":"withNegativeSign","kind":"method","documentation":"withNegativeSign(char a): DecimalStyle","insertText":"withNegativeSign"},{"label":"withPositiveSign","kind":"method","documentation":"withPositiveSign(char a): DecimalStyle","insertText":"withPositiveSign"},{"label":"withZeroDigit","kind":"method","documentation":"withZeroDigit(char a): DecimalStyle","insertText":"withZeroDigit"}]},{"label":"FormatStyle","kind":"class","documentation":"Class: FormatStyle","insertText":"FormatStyle","properties":[{"label":"FULL","kind":"property","documentation":"FULL: FormatStyle","insertText":"FULL"},{"label":"LONG","kind":"property","documentation":"LONG: FormatStyle","insertText":"LONG"},{"label":"MEDIUM","kind":"property","documentation":"MEDIUM: FormatStyle","insertText":"MEDIUM"},{"label":"SHORT","kind":"property","documentation":"SHORT: FormatStyle","insertText":"SHORT"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): FormatStyle","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): FormatStyle[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ResolverStyle","kind":"class","documentation":"Class: ResolverStyle","insertText":"ResolverStyle","properties":[{"label":"LENIENT","kind":"property","documentation":"LENIENT: ResolverStyle","insertText":"LENIENT"},{"label":"SMART","kind":"property","documentation":"SMART: ResolverStyle","insertText":"SMART"},{"label":"STRICT","kind":"property","documentation":"STRICT: ResolverStyle","insertText":"STRICT"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): ResolverStyle","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): ResolverStyle[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"SignStyle","kind":"class","documentation":"Class: SignStyle","insertText":"SignStyle","properties":[{"label":"ALWAYS","kind":"property","documentation":"ALWAYS: SignStyle","insertText":"ALWAYS"},{"label":"EXCEEDS_PAD","kind":"property","documentation":"EXCEEDS_PAD: SignStyle","insertText":"EXCEEDS_PAD"},{"label":"NEVER","kind":"property","documentation":"NEVER: SignStyle","insertText":"NEVER"},{"label":"NORMAL","kind":"property","documentation":"NORMAL: SignStyle","insertText":"NORMAL"},{"label":"NOT_NEGATIVE","kind":"property","documentation":"NOT_NEGATIVE: SignStyle","insertText":"NOT_NEGATIVE"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): SignStyle","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): SignStyle[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TextStyle","kind":"class","documentation":"Class: TextStyle","insertText":"TextStyle","properties":[{"label":"FULL","kind":"property","documentation":"FULL: TextStyle","insertText":"FULL"},{"label":"FULL_STANDALONE","kind":"property","documentation":"FULL_STANDALONE: TextStyle","insertText":"FULL_STANDALONE"},{"label":"NARROW","kind":"property","documentation":"NARROW: TextStyle","insertText":"NARROW"},{"label":"NARROW_STANDALONE","kind":"property","documentation":"NARROW_STANDALONE: TextStyle","insertText":"NARROW_STANDALONE"},{"label":"SHORT","kind":"property","documentation":"SHORT: TextStyle","insertText":"SHORT"},{"label":"SHORT_STANDALONE","kind":"property","documentation":"SHORT_STANDALONE: TextStyle","insertText":"SHORT_STANDALONE"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): TextStyle","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): TextStyle[]","insertText":"values"},{"label":"asNormal","kind":"method","documentation":"asNormal(): TextStyle","insertText":"asNormal"},{"label":"asStandalone","kind":"method","documentation":"asStandalone(): TextStyle","insertText":"asStandalone"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isStandalone","kind":"method","documentation":"isStandalone(): boolean","insertText":"isStandalone"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ChronoField","kind":"class","documentation":"Class: ChronoField","insertText":"ChronoField","properties":[{"label":"ALIGNED_DAY_OF_WEEK_IN_MONTH","kind":"property","documentation":"ALIGNED_DAY_OF_WEEK_IN_MONTH: ChronoField","insertText":"ALIGNED_DAY_OF_WEEK_IN_MONTH"},{"label":"ALIGNED_DAY_OF_WEEK_IN_YEAR","kind":"property","documentation":"ALIGNED_DAY_OF_WEEK_IN_YEAR: ChronoField","insertText":"ALIGNED_DAY_OF_WEEK_IN_YEAR"},{"label":"ALIGNED_WEEK_OF_MONTH","kind":"property","documentation":"ALIGNED_WEEK_OF_MONTH: ChronoField","insertText":"ALIGNED_WEEK_OF_MONTH"},{"label":"ALIGNED_WEEK_OF_YEAR","kind":"property","documentation":"ALIGNED_WEEK_OF_YEAR: ChronoField","insertText":"ALIGNED_WEEK_OF_YEAR"},{"label":"AMPM_OF_DAY","kind":"property","documentation":"AMPM_OF_DAY: ChronoField","insertText":"AMPM_OF_DAY"},{"label":"CLOCK_HOUR_OF_AMPM","kind":"property","documentation":"CLOCK_HOUR_OF_AMPM: ChronoField","insertText":"CLOCK_HOUR_OF_AMPM"},{"label":"CLOCK_HOUR_OF_DAY","kind":"property","documentation":"CLOCK_HOUR_OF_DAY: ChronoField","insertText":"CLOCK_HOUR_OF_DAY"},{"label":"DAY_OF_MONTH","kind":"property","documentation":"DAY_OF_MONTH: ChronoField","insertText":"DAY_OF_MONTH"},{"label":"DAY_OF_WEEK","kind":"property","documentation":"DAY_OF_WEEK: ChronoField","insertText":"DAY_OF_WEEK"},{"label":"DAY_OF_YEAR","kind":"property","documentation":"DAY_OF_YEAR: ChronoField","insertText":"DAY_OF_YEAR"},{"label":"EPOCH_DAY","kind":"property","documentation":"EPOCH_DAY: ChronoField","insertText":"EPOCH_DAY"},{"label":"ERA","kind":"property","documentation":"ERA: ChronoField","insertText":"ERA"},{"label":"HOUR_OF_AMPM","kind":"property","documentation":"HOUR_OF_AMPM: ChronoField","insertText":"HOUR_OF_AMPM"},{"label":"HOUR_OF_DAY","kind":"property","documentation":"HOUR_OF_DAY: ChronoField","insertText":"HOUR_OF_DAY"},{"label":"INSTANT_SECONDS","kind":"property","documentation":"INSTANT_SECONDS: ChronoField","insertText":"INSTANT_SECONDS"},{"label":"MICRO_OF_DAY","kind":"property","documentation":"MICRO_OF_DAY: ChronoField","insertText":"MICRO_OF_DAY"},{"label":"MICRO_OF_SECOND","kind":"property","documentation":"MICRO_OF_SECOND: ChronoField","insertText":"MICRO_OF_SECOND"},{"label":"MILLI_OF_DAY","kind":"property","documentation":"MILLI_OF_DAY: ChronoField","insertText":"MILLI_OF_DAY"},{"label":"MILLI_OF_SECOND","kind":"property","documentation":"MILLI_OF_SECOND: ChronoField","insertText":"MILLI_OF_SECOND"},{"label":"MINUTE_OF_DAY","kind":"property","documentation":"MINUTE_OF_DAY: ChronoField","insertText":"MINUTE_OF_DAY"},{"label":"MINUTE_OF_HOUR","kind":"property","documentation":"MINUTE_OF_HOUR: ChronoField","insertText":"MINUTE_OF_HOUR"},{"label":"MONTH_OF_YEAR","kind":"property","documentation":"MONTH_OF_YEAR: ChronoField","insertText":"MONTH_OF_YEAR"},{"label":"NANO_OF_DAY","kind":"property","documentation":"NANO_OF_DAY: ChronoField","insertText":"NANO_OF_DAY"},{"label":"NANO_OF_SECOND","kind":"property","documentation":"NANO_OF_SECOND: ChronoField","insertText":"NANO_OF_SECOND"},{"label":"OFFSET_SECONDS","kind":"property","documentation":"OFFSET_SECONDS: ChronoField","insertText":"OFFSET_SECONDS"},{"label":"PROLEPTIC_MONTH","kind":"property","documentation":"PROLEPTIC_MONTH: ChronoField","insertText":"PROLEPTIC_MONTH"},{"label":"SECOND_OF_DAY","kind":"property","documentation":"SECOND_OF_DAY: ChronoField","insertText":"SECOND_OF_DAY"},{"label":"SECOND_OF_MINUTE","kind":"property","documentation":"SECOND_OF_MINUTE: ChronoField","insertText":"SECOND_OF_MINUTE"},{"label":"YEAR","kind":"property","documentation":"YEAR: ChronoField","insertText":"YEAR"},{"label":"YEAR_OF_ERA","kind":"property","documentation":"YEAR_OF_ERA: ChronoField","insertText":"YEAR_OF_ERA"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): ChronoField","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): ChronoField[]","insertText":"values"},{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a, long b): Temporal","insertText":"adjustInto"},{"label":"checkValidIntValue","kind":"method","documentation":"checkValidIntValue(long a): int","insertText":"checkValidIntValue"},{"label":"checkValidValue","kind":"method","documentation":"checkValidValue(long a): long","insertText":"checkValidValue"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getBaseUnit","kind":"method","documentation":"getBaseUnit(): TemporalUnit","insertText":"getBaseUnit"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(Locale a): String","insertText":"getDisplayName"},{"label":"getFrom","kind":"method","documentation":"getFrom(TemporalAccessor a): long","insertText":"getFrom"},{"label":"getRangeUnit","kind":"method","documentation":"getRangeUnit(): TemporalUnit","insertText":"getRangeUnit"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isDateBased","kind":"method","documentation":"isDateBased(): boolean","insertText":"isDateBased"},{"label":"isSupportedBy","kind":"method","documentation":"isSupportedBy(TemporalAccessor a): boolean","insertText":"isSupportedBy"},{"label":"isTimeBased","kind":"method","documentation":"isTimeBased(): boolean","insertText":"isTimeBased"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"range","kind":"method","documentation":"range(): ValueRange","insertText":"range"},{"label":"rangeRefinedBy","kind":"method","documentation":"rangeRefinedBy(TemporalAccessor a): ValueRange","insertText":"rangeRefinedBy"},{"label":"resolve","kind":"method","documentation":"resolve(Map a, TemporalAccessor b, ResolverStyle c): TemporalAccessor","insertText":"resolve"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ChronoUnit","kind":"class","documentation":"Class: ChronoUnit","insertText":"ChronoUnit","properties":[{"label":"CENTURIES","kind":"property","documentation":"CENTURIES: ChronoUnit","insertText":"CENTURIES"},{"label":"DAYS","kind":"property","documentation":"DAYS: ChronoUnit","insertText":"DAYS"},{"label":"DECADES","kind":"property","documentation":"DECADES: ChronoUnit","insertText":"DECADES"},{"label":"ERAS","kind":"property","documentation":"ERAS: ChronoUnit","insertText":"ERAS"},{"label":"FOREVER","kind":"property","documentation":"FOREVER: ChronoUnit","insertText":"FOREVER"},{"label":"HALF_DAYS","kind":"property","documentation":"HALF_DAYS: ChronoUnit","insertText":"HALF_DAYS"},{"label":"HOURS","kind":"property","documentation":"HOURS: ChronoUnit","insertText":"HOURS"},{"label":"MICROS","kind":"property","documentation":"MICROS: ChronoUnit","insertText":"MICROS"},{"label":"MILLENNIA","kind":"property","documentation":"MILLENNIA: ChronoUnit","insertText":"MILLENNIA"},{"label":"MILLIS","kind":"property","documentation":"MILLIS: ChronoUnit","insertText":"MILLIS"},{"label":"MINUTES","kind":"property","documentation":"MINUTES: ChronoUnit","insertText":"MINUTES"},{"label":"MONTHS","kind":"property","documentation":"MONTHS: ChronoUnit","insertText":"MONTHS"},{"label":"NANOS","kind":"property","documentation":"NANOS: ChronoUnit","insertText":"NANOS"},{"label":"SECONDS","kind":"property","documentation":"SECONDS: ChronoUnit","insertText":"SECONDS"},{"label":"WEEKS","kind":"property","documentation":"WEEKS: ChronoUnit","insertText":"WEEKS"},{"label":"YEARS","kind":"property","documentation":"YEARS: ChronoUnit","insertText":"YEARS"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): ChronoUnit","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): ChronoUnit[]","insertText":"values"},{"label":"addTo","kind":"method","documentation":"addTo(Temporal a, long b): Temporal","insertText":"addTo"},{"label":"between","kind":"method","documentation":"between(Temporal a, Temporal b): long","insertText":"between"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDuration","kind":"method","documentation":"getDuration(): Duration","insertText":"getDuration"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isDateBased","kind":"method","documentation":"isDateBased(): boolean","insertText":"isDateBased"},{"label":"isDurationEstimated","kind":"method","documentation":"isDurationEstimated(): boolean","insertText":"isDurationEstimated"},{"label":"isSupportedBy","kind":"method","documentation":"isSupportedBy(Temporal a): boolean","insertText":"isSupportedBy"},{"label":"isTimeBased","kind":"method","documentation":"isTimeBased(): boolean","insertText":"isTimeBased"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IsoFields","kind":"class","documentation":"Class: IsoFields","insertText":"IsoFields","properties":[{"label":"DAY_OF_QUARTER","kind":"property","documentation":"DAY_OF_QUARTER: TemporalField","insertText":"DAY_OF_QUARTER"},{"label":"QUARTER_OF_YEAR","kind":"property","documentation":"QUARTER_OF_YEAR: TemporalField","insertText":"QUARTER_OF_YEAR"},{"label":"QUARTER_YEARS","kind":"property","documentation":"QUARTER_YEARS: TemporalUnit","insertText":"QUARTER_YEARS"},{"label":"WEEK_BASED_YEAR","kind":"property","documentation":"WEEK_BASED_YEAR: TemporalField","insertText":"WEEK_BASED_YEAR"},{"label":"WEEK_BASED_YEARS","kind":"property","documentation":"WEEK_BASED_YEARS: TemporalUnit","insertText":"WEEK_BASED_YEARS"},{"label":"WEEK_OF_WEEK_BASED_YEAR","kind":"property","documentation":"WEEK_OF_WEEK_BASED_YEAR: TemporalField","insertText":"WEEK_OF_WEEK_BASED_YEAR"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"JulianFields","kind":"class","documentation":"Class: JulianFields","insertText":"JulianFields","properties":[{"label":"JULIAN_DAY","kind":"property","documentation":"JULIAN_DAY: TemporalField","insertText":"JULIAN_DAY"},{"label":"MODIFIED_JULIAN_DAY","kind":"property","documentation":"MODIFIED_JULIAN_DAY: TemporalField","insertText":"MODIFIED_JULIAN_DAY"},{"label":"RATA_DIE","kind":"property","documentation":"RATA_DIE: TemporalField","insertText":"RATA_DIE"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Temporal","kind":"class","documentation":"Class: Temporal","insertText":"Temporal","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): Temporal","insertText":"minus"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): Temporal","insertText":"plus"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): Temporal","insertText":"with"}]},{"label":"TemporalAccessor","kind":"class","documentation":"Class: TemporalAccessor","insertText":"TemporalAccessor","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TemporalAdjuster","kind":"class","documentation":"Class: TemporalAdjuster","insertText":"TemporalAdjuster","properties":[{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a): Temporal","insertText":"adjustInto"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TemporalAdjusters","kind":"class","documentation":"Class: TemporalAdjusters","insertText":"TemporalAdjusters","properties":[{"label":"dayOfWeekInMonth","kind":"method","documentation":"dayOfWeekInMonth(int a, DayOfWeek b): TemporalAdjuster","insertText":"dayOfWeekInMonth"},{"label":"firstDayOfMonth","kind":"method","documentation":"firstDayOfMonth(): TemporalAdjuster","insertText":"firstDayOfMonth"},{"label":"firstDayOfNextMonth","kind":"method","documentation":"firstDayOfNextMonth(): TemporalAdjuster","insertText":"firstDayOfNextMonth"},{"label":"firstDayOfNextYear","kind":"method","documentation":"firstDayOfNextYear(): TemporalAdjuster","insertText":"firstDayOfNextYear"},{"label":"firstDayOfYear","kind":"method","documentation":"firstDayOfYear(): TemporalAdjuster","insertText":"firstDayOfYear"},{"label":"firstInMonth","kind":"method","documentation":"firstInMonth(DayOfWeek a): TemporalAdjuster","insertText":"firstInMonth"},{"label":"lastDayOfMonth","kind":"method","documentation":"lastDayOfMonth(): TemporalAdjuster","insertText":"lastDayOfMonth"},{"label":"lastDayOfYear","kind":"method","documentation":"lastDayOfYear(): TemporalAdjuster","insertText":"lastDayOfYear"},{"label":"lastInMonth","kind":"method","documentation":"lastInMonth(DayOfWeek a): TemporalAdjuster","insertText":"lastInMonth"},{"label":"next","kind":"method","documentation":"next(DayOfWeek a): TemporalAdjuster","insertText":"next"},{"label":"nextOrSame","kind":"method","documentation":"nextOrSame(DayOfWeek a): TemporalAdjuster","insertText":"nextOrSame"},{"label":"ofDateAdjuster","kind":"method","documentation":"ofDateAdjuster(UnaryOperator a): TemporalAdjuster","insertText":"ofDateAdjuster"},{"label":"previous","kind":"method","documentation":"previous(DayOfWeek a): TemporalAdjuster","insertText":"previous"},{"label":"previousOrSame","kind":"method","documentation":"previousOrSame(DayOfWeek a): TemporalAdjuster","insertText":"previousOrSame"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TemporalAmount","kind":"class","documentation":"Class: TemporalAmount","insertText":"TemporalAmount","properties":[{"label":"addTo","kind":"method","documentation":"addTo(Temporal a): Temporal","insertText":"addTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(TemporalUnit a): long","insertText":"get"},{"label":"getUnits","kind":"method","documentation":"getUnits(): List","insertText":"getUnits"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"subtractFrom","kind":"method","documentation":"subtractFrom(Temporal a): Temporal","insertText":"subtractFrom"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TemporalField","kind":"class","documentation":"Class: TemporalField","insertText":"TemporalField","properties":[{"label":"adjustInto","kind":"method","documentation":"adjustInto(Temporal a, long b): Temporal","insertText":"adjustInto"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getBaseUnit","kind":"method","documentation":"getBaseUnit(): TemporalUnit","insertText":"getBaseUnit"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(Locale a): String","insertText":"getDisplayName"},{"label":"getFrom","kind":"method","documentation":"getFrom(TemporalAccessor a): long","insertText":"getFrom"},{"label":"getRangeUnit","kind":"method","documentation":"getRangeUnit(): TemporalUnit","insertText":"getRangeUnit"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isDateBased","kind":"method","documentation":"isDateBased(): boolean","insertText":"isDateBased"},{"label":"isSupportedBy","kind":"method","documentation":"isSupportedBy(TemporalAccessor a): boolean","insertText":"isSupportedBy"},{"label":"isTimeBased","kind":"method","documentation":"isTimeBased(): boolean","insertText":"isTimeBased"},{"label":"range","kind":"method","documentation":"range(): ValueRange","insertText":"range"},{"label":"rangeRefinedBy","kind":"method","documentation":"rangeRefinedBy(TemporalAccessor a): ValueRange","insertText":"rangeRefinedBy"},{"label":"resolve","kind":"method","documentation":"resolve(Map a, TemporalAccessor b, ResolverStyle c): TemporalAccessor","insertText":"resolve"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TemporalQueries","kind":"class","documentation":"Class: TemporalQueries","insertText":"TemporalQueries","properties":[{"label":"chronology","kind":"method","documentation":"chronology(): TemporalQuery","insertText":"chronology"},{"label":"localDate","kind":"method","documentation":"localDate(): TemporalQuery","insertText":"localDate"},{"label":"localTime","kind":"method","documentation":"localTime(): TemporalQuery","insertText":"localTime"},{"label":"offset","kind":"method","documentation":"offset(): TemporalQuery","insertText":"offset"},{"label":"precision","kind":"method","documentation":"precision(): TemporalQuery","insertText":"precision"},{"label":"zone","kind":"method","documentation":"zone(): TemporalQuery","insertText":"zone"},{"label":"zoneId","kind":"method","documentation":"zoneId(): TemporalQuery","insertText":"zoneId"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TemporalQuery","kind":"class","documentation":"Class: TemporalQuery","insertText":"TemporalQuery","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"queryFrom","kind":"method","documentation":"queryFrom(TemporalAccessor a): def","insertText":"queryFrom"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TemporalUnit","kind":"class","documentation":"Class: TemporalUnit","insertText":"TemporalUnit","properties":[{"label":"addTo","kind":"method","documentation":"addTo(Temporal a, long b): Temporal","insertText":"addTo"},{"label":"between","kind":"method","documentation":"between(Temporal a, Temporal b): long","insertText":"between"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDuration","kind":"method","documentation":"getDuration(): Duration","insertText":"getDuration"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isDateBased","kind":"method","documentation":"isDateBased(): boolean","insertText":"isDateBased"},{"label":"isDurationEstimated","kind":"method","documentation":"isDurationEstimated(): boolean","insertText":"isDurationEstimated"},{"label":"isSupportedBy","kind":"method","documentation":"isSupportedBy(Temporal a): boolean","insertText":"isSupportedBy"},{"label":"isTimeBased","kind":"method","documentation":"isTimeBased(): boolean","insertText":"isTimeBased"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"UnsupportedTemporalTypeException","kind":"class","documentation":"Class: UnsupportedTemporalTypeException","insertText":"UnsupportedTemporalTypeException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"UnsupportedTemporalTypeException","kind":"constructor","documentation":"Constructor: UnsupportedTemporalTypeException","insertText":"UnsupportedTemporalTypeException"}},{"label":"ValueRange","kind":"class","documentation":"Class: ValueRange","insertText":"ValueRange","properties":[{"label":"of","kind":"method","documentation":"of(long a, long b, long c, long d | long a, long b, long c | long a, long b): ValueRange","insertText":"of"},{"label":"checkValidIntValue","kind":"method","documentation":"checkValidIntValue(long a, TemporalField b): int","insertText":"checkValidIntValue"},{"label":"checkValidValue","kind":"method","documentation":"checkValidValue(long a, TemporalField b): long","insertText":"checkValidValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLargestMinimum","kind":"method","documentation":"getLargestMinimum(): long","insertText":"getLargestMinimum"},{"label":"getMaximum","kind":"method","documentation":"getMaximum(): long","insertText":"getMaximum"},{"label":"getMinimum","kind":"method","documentation":"getMinimum(): long","insertText":"getMinimum"},{"label":"getSmallestMaximum","kind":"method","documentation":"getSmallestMaximum(): long","insertText":"getSmallestMaximum"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isFixed","kind":"method","documentation":"isFixed(): boolean","insertText":"isFixed"},{"label":"isIntValue","kind":"method","documentation":"isIntValue(): boolean","insertText":"isIntValue"},{"label":"isValidIntValue","kind":"method","documentation":"isValidIntValue(long a): boolean","insertText":"isValidIntValue"},{"label":"isValidValue","kind":"method","documentation":"isValidValue(long a): boolean","insertText":"isValidValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"WeekFields","kind":"class","documentation":"Class: WeekFields","insertText":"WeekFields","properties":[{"label":"ISO","kind":"property","documentation":"ISO: WeekFields","insertText":"ISO"},{"label":"SUNDAY_START","kind":"property","documentation":"SUNDAY_START: WeekFields","insertText":"SUNDAY_START"},{"label":"WEEK_BASED_YEARS","kind":"property","documentation":"WEEK_BASED_YEARS: TemporalUnit","insertText":"WEEK_BASED_YEARS"},{"label":"of","kind":"method","documentation":"of(DayOfWeek a, int b | Locale a): WeekFields","insertText":"of"},{"label":"dayOfWeek","kind":"method","documentation":"dayOfWeek(): TemporalField","insertText":"dayOfWeek"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getFirstDayOfWeek","kind":"method","documentation":"getFirstDayOfWeek(): DayOfWeek","insertText":"getFirstDayOfWeek"},{"label":"getMinimalDaysInFirstWeek","kind":"method","documentation":"getMinimalDaysInFirstWeek(): int","insertText":"getMinimalDaysInFirstWeek"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"weekBasedYear","kind":"method","documentation":"weekBasedYear(): TemporalField","insertText":"weekBasedYear"},{"label":"weekOfMonth","kind":"method","documentation":"weekOfMonth(): TemporalField","insertText":"weekOfMonth"},{"label":"weekOfWeekBasedYear","kind":"method","documentation":"weekOfWeekBasedYear(): TemporalField","insertText":"weekOfWeekBasedYear"},{"label":"weekOfYear","kind":"method","documentation":"weekOfYear(): TemporalField","insertText":"weekOfYear"}]},{"label":"ZoneOffsetTransition","kind":"class","documentation":"Class: ZoneOffsetTransition","insertText":"ZoneOffsetTransition","properties":[{"label":"of","kind":"method","documentation":"of(LocalDateTime a, ZoneOffset b, ZoneOffset c): ZoneOffsetTransition","insertText":"of"},{"label":"compareTo","kind":"method","documentation":"compareTo(ZoneOffsetTransition a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDateTimeAfter","kind":"method","documentation":"getDateTimeAfter(): LocalDateTime","insertText":"getDateTimeAfter"},{"label":"getDateTimeBefore","kind":"method","documentation":"getDateTimeBefore(): LocalDateTime","insertText":"getDateTimeBefore"},{"label":"getDuration","kind":"method","documentation":"getDuration(): Duration","insertText":"getDuration"},{"label":"getInstant","kind":"method","documentation":"getInstant(): Instant","insertText":"getInstant"},{"label":"getOffsetAfter","kind":"method","documentation":"getOffsetAfter(): ZoneOffset","insertText":"getOffsetAfter"},{"label":"getOffsetBefore","kind":"method","documentation":"getOffsetBefore(): ZoneOffset","insertText":"getOffsetBefore"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isGap","kind":"method","documentation":"isGap(): boolean","insertText":"isGap"},{"label":"isOverlap","kind":"method","documentation":"isOverlap(): boolean","insertText":"isOverlap"},{"label":"isValidOffset","kind":"method","documentation":"isValidOffset(ZoneOffset a): boolean","insertText":"isValidOffset"},{"label":"toEpochSecond","kind":"method","documentation":"toEpochSecond(): long","insertText":"toEpochSecond"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ZoneOffsetTransitionRule","kind":"class","documentation":"Class: ZoneOffsetTransitionRule","insertText":"ZoneOffsetTransitionRule","properties":[{"label":"of","kind":"method","documentation":"of(Month a, int b, DayOfWeek c, LocalTime d, boolean e, ZoneOffsetTransitionRule.TimeDefinition f, ZoneOffset undefined, ZoneOffset undefined, ZoneOffset undefined): ZoneOffsetTransitionRule","insertText":"of"},{"label":"createTransition","kind":"method","documentation":"createTransition(int a): ZoneOffsetTransition","insertText":"createTransition"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDayOfMonthIndicator","kind":"method","documentation":"getDayOfMonthIndicator(): int","insertText":"getDayOfMonthIndicator"},{"label":"getDayOfWeek","kind":"method","documentation":"getDayOfWeek(): DayOfWeek","insertText":"getDayOfWeek"},{"label":"getLocalTime","kind":"method","documentation":"getLocalTime(): LocalTime","insertText":"getLocalTime"},{"label":"getMonth","kind":"method","documentation":"getMonth(): Month","insertText":"getMonth"},{"label":"getOffsetAfter","kind":"method","documentation":"getOffsetAfter(): ZoneOffset","insertText":"getOffsetAfter"},{"label":"getOffsetBefore","kind":"method","documentation":"getOffsetBefore(): ZoneOffset","insertText":"getOffsetBefore"},{"label":"getStandardOffset","kind":"method","documentation":"getStandardOffset(): ZoneOffset","insertText":"getStandardOffset"},{"label":"getTimeDefinition","kind":"method","documentation":"getTimeDefinition(): ZoneOffsetTransitionRule.TimeDefinition","insertText":"getTimeDefinition"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isMidnightEndOfDay","kind":"method","documentation":"isMidnightEndOfDay(): boolean","insertText":"isMidnightEndOfDay"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"TimeDefinition","kind":"class","documentation":"Class: TimeDefinition","insertText":"TimeDefinition","properties":[{"label":"STANDARD","kind":"property","documentation":"STANDARD: ZoneOffsetTransitionRule.TimeDefinition","insertText":"STANDARD"},{"label":"UTC","kind":"property","documentation":"UTC: ZoneOffsetTransitionRule.TimeDefinition","insertText":"UTC"},{"label":"WALL","kind":"property","documentation":"WALL: ZoneOffsetTransitionRule.TimeDefinition","insertText":"WALL"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): ZoneOffsetTransitionRule.TimeDefinition","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): ZoneOffsetTransitionRule.TimeDefinition[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"createDateTime","kind":"method","documentation":"createDateTime(LocalDateTime a, ZoneOffset b, ZoneOffset c): LocalDateTime","insertText":"createDateTime"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ZoneRules","kind":"class","documentation":"Class: ZoneRules","insertText":"ZoneRules","properties":[{"label":"of","kind":"method","documentation":"of(ZoneOffset a, ZoneOffset b, List c, List d, List e | ZoneOffset a): ZoneRules","insertText":"of"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDaylightSavings","kind":"method","documentation":"getDaylightSavings(Instant a): Duration","insertText":"getDaylightSavings"},{"label":"getOffset","kind":"method","documentation":"getOffset(Instant a): ZoneOffset","insertText":"getOffset"},{"label":"getStandardOffset","kind":"method","documentation":"getStandardOffset(Instant a): ZoneOffset","insertText":"getStandardOffset"},{"label":"getTransition","kind":"method","documentation":"getTransition(LocalDateTime a): ZoneOffsetTransition","insertText":"getTransition"},{"label":"getTransitionRules","kind":"method","documentation":"getTransitionRules(): List","insertText":"getTransitionRules"},{"label":"getTransitions","kind":"method","documentation":"getTransitions(): List","insertText":"getTransitions"},{"label":"getValidOffsets","kind":"method","documentation":"getValidOffsets(LocalDateTime a): List","insertText":"getValidOffsets"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isDaylightSavings","kind":"method","documentation":"isDaylightSavings(Instant a): boolean","insertText":"isDaylightSavings"},{"label":"isFixedOffset","kind":"method","documentation":"isFixedOffset(): boolean","insertText":"isFixedOffset"},{"label":"isValidOffset","kind":"method","documentation":"isValidOffset(LocalDateTime a, ZoneOffset b): boolean","insertText":"isValidOffset"},{"label":"nextTransition","kind":"method","documentation":"nextTransition(Instant a): ZoneOffsetTransition","insertText":"nextTransition"},{"label":"previousTransition","kind":"method","documentation":"previousTransition(Instant a): ZoneOffsetTransition","insertText":"previousTransition"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ZoneRulesException","kind":"class","documentation":"Class: ZoneRulesException","insertText":"ZoneRulesException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ZoneRulesException","kind":"constructor","documentation":"Constructor: ZoneRulesException","insertText":"ZoneRulesException"}},{"label":"ZoneRulesProvider","kind":"class","documentation":"Class: ZoneRulesProvider","insertText":"ZoneRulesProvider","properties":[{"label":"getAvailableZoneIds","kind":"method","documentation":"getAvailableZoneIds(): Set","insertText":"getAvailableZoneIds"},{"label":"getRules","kind":"method","documentation":"getRules(String a, boolean b): ZoneRules","insertText":"getRules"},{"label":"getVersions","kind":"method","documentation":"getVersions(String a): NavigableMap","insertText":"getVersions"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"AbstractCollection","kind":"class","documentation":"Class: AbstractCollection","insertText":"AbstractCollection","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"AbstractList","kind":"class","documentation":"Class: AbstractList","insertText":"AbstractList","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"AbstractMap","kind":"class","documentation":"Class: AbstractMap","insertText":"AbstractMap","properties":[{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}]},{"label":"SimpleEntry","kind":"class","documentation":"Class: SimpleEntry","insertText":"SimpleEntry","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getKey","kind":"method","documentation":"getKey(): def","insertText":"getKey"},{"label":"getValue","kind":"method","documentation":"getValue(): def","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"setValue","kind":"method","documentation":"setValue(def a): def","insertText":"setValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"SimpleEntry","kind":"constructor","documentation":"Constructor: SimpleEntry","insertText":"SimpleEntry"}},{"label":"SimpleImmutableEntry","kind":"class","documentation":"Class: SimpleImmutableEntry","insertText":"SimpleImmutableEntry","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getKey","kind":"method","documentation":"getKey(): def","insertText":"getKey"},{"label":"getValue","kind":"method","documentation":"getValue(): def","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"setValue","kind":"method","documentation":"setValue(def a): def","insertText":"setValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"SimpleImmutableEntry","kind":"constructor","documentation":"Constructor: SimpleImmutableEntry","insertText":"SimpleImmutableEntry"}},{"label":"AbstractQueue","kind":"class","documentation":"Class: AbstractQueue","insertText":"AbstractQueue","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"element","kind":"method","documentation":"element(): def","insertText":"element"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"offer","kind":"method","documentation":"offer(def a): boolean","insertText":"offer"},{"label":"peek","kind":"method","documentation":"peek(): def","insertText":"peek"},{"label":"poll","kind":"method","documentation":"poll(): def","insertText":"poll"},{"label":"remove","kind":"method","documentation":"remove(): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"AbstractSequentialList","kind":"class","documentation":"Class: AbstractSequentialList","insertText":"AbstractSequentialList","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"AbstractSet","kind":"class","documentation":"Class: AbstractSet","insertText":"AbstractSet","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ArrayDeque","kind":"class","documentation":"Class: ArrayDeque","insertText":"ArrayDeque","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"addFirst","kind":"method","documentation":"addFirst(def a): void","insertText":"addFirst"},{"label":"addLast","kind":"method","documentation":"addLast(def a): void","insertText":"addLast"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): ArrayDeque","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"descendingIterator","kind":"method","documentation":"descendingIterator(): Iterator","insertText":"descendingIterator"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"element","kind":"method","documentation":"element(): def","insertText":"element"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"getFirst","kind":"method","documentation":"getFirst(): def","insertText":"getFirst"},{"label":"getLast","kind":"method","documentation":"getLast(): def","insertText":"getLast"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"offer","kind":"method","documentation":"offer(def a): boolean","insertText":"offer"},{"label":"offerFirst","kind":"method","documentation":"offerFirst(def a): boolean","insertText":"offerFirst"},{"label":"offerLast","kind":"method","documentation":"offerLast(def a): boolean","insertText":"offerLast"},{"label":"peek","kind":"method","documentation":"peek(): def","insertText":"peek"},{"label":"peekFirst","kind":"method","documentation":"peekFirst(): def","insertText":"peekFirst"},{"label":"peekLast","kind":"method","documentation":"peekLast(): def","insertText":"peekLast"},{"label":"poll","kind":"method","documentation":"poll(): def","insertText":"poll"},{"label":"pollFirst","kind":"method","documentation":"pollFirst(): def","insertText":"pollFirst"},{"label":"pollLast","kind":"method","documentation":"pollLast(): def","insertText":"pollLast"},{"label":"pop","kind":"method","documentation":"pop(): def","insertText":"pop"},{"label":"push","kind":"method","documentation":"push(def a): void","insertText":"push"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean | def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeFirst","kind":"method","documentation":"removeFirst(): def","insertText":"removeFirst"},{"label":"removeFirstOccurrence","kind":"method","documentation":"removeFirstOccurrence(def a): boolean","insertText":"removeFirstOccurrence"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"removeLast","kind":"method","documentation":"removeLast(): def","insertText":"removeLast"},{"label":"removeLastOccurrence","kind":"method","documentation":"removeLastOccurrence(def a): boolean","insertText":"removeLastOccurrence"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ArrayDeque","kind":"constructor","documentation":"Constructor: ArrayDeque","insertText":"ArrayDeque"}},{"label":"ArrayList","kind":"class","documentation":"Class: ArrayList","insertText":"ArrayList","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"trimToSize","kind":"method","documentation":"trimToSize(): void","insertText":"trimToSize"}],"constructorDefinition":{"label":"ArrayList","kind":"constructor","documentation":"Constructor: ArrayList","insertText":"ArrayList"}},{"label":"Arrays","kind":"class","documentation":"Class: Arrays","insertText":"Arrays","properties":[{"label":"asList","kind":"method","documentation":"asList(Object[] a): List","insertText":"asList"},{"label":"deepEquals","kind":"method","documentation":"deepEquals(Object[] a, Object[] b): boolean","insertText":"deepEquals"},{"label":"deepHashCode","kind":"method","documentation":"deepHashCode(Object[] a): int","insertText":"deepHashCode"},{"label":"deepToString","kind":"method","documentation":"deepToString(Object[] a): String","insertText":"deepToString"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Base64","kind":"class","documentation":"Class: Base64","insertText":"Base64","properties":[{"label":"getDecoder","kind":"method","documentation":"getDecoder(): Base64.Decoder","insertText":"getDecoder"},{"label":"getEncoder","kind":"method","documentation":"getEncoder(): Base64.Encoder","insertText":"getEncoder"},{"label":"getMimeDecoder","kind":"method","documentation":"getMimeDecoder(): Base64.Decoder","insertText":"getMimeDecoder"},{"label":"getMimeEncoder","kind":"method","documentation":"getMimeEncoder(int a, byte[] b): Base64.Encoder","insertText":"getMimeEncoder"},{"label":"getUrlDecoder","kind":"method","documentation":"getUrlDecoder(): Base64.Decoder","insertText":"getUrlDecoder"},{"label":"getUrlEncoder","kind":"method","documentation":"getUrlEncoder(): Base64.Encoder","insertText":"getUrlEncoder"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Decoder","kind":"class","documentation":"Class: Decoder","insertText":"Decoder","properties":[{"label":"decode","kind":"method","documentation":"decode(byte[] a, byte[] b | String a): int | byte[]","insertText":"decode"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Encoder","kind":"class","documentation":"Class: Encoder","insertText":"Encoder","properties":[{"label":"encode","kind":"method","documentation":"encode(byte[] a, byte[] b): int","insertText":"encode"},{"label":"encodeToString","kind":"method","documentation":"encodeToString(byte[] a): String","insertText":"encodeToString"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"withoutPadding","kind":"method","documentation":"withoutPadding(): Base64.Encoder","insertText":"withoutPadding"}]},{"label":"BitSet","kind":"class","documentation":"Class: BitSet","insertText":"BitSet","properties":[{"label":"valueOf","kind":"method","documentation":"valueOf(long[] a): BitSet","insertText":"valueOf"},{"label":"and","kind":"method","documentation":"and(BitSet a): void","insertText":"and"},{"label":"andNot","kind":"method","documentation":"andNot(BitSet a): void","insertText":"andNot"},{"label":"cardinality","kind":"method","documentation":"cardinality(): int","insertText":"cardinality"},{"label":"clear","kind":"method","documentation":"clear(int a, int b | int a): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"flip","kind":"method","documentation":"flip(int a, int b | int a): void","insertText":"flip"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"intersects","kind":"method","documentation":"intersects(BitSet a): boolean","insertText":"intersects"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"nextClearBit","kind":"method","documentation":"nextClearBit(int a): int","insertText":"nextClearBit"},{"label":"nextSetBit","kind":"method","documentation":"nextSetBit(int a): int","insertText":"nextSetBit"},{"label":"or","kind":"method","documentation":"or(BitSet a): void","insertText":"or"},{"label":"previousClearBit","kind":"method","documentation":"previousClearBit(int a): int","insertText":"previousClearBit"},{"label":"previousSetBit","kind":"method","documentation":"previousSetBit(int a): int","insertText":"previousSetBit"},{"label":"set","kind":"method","documentation":"set(int a, int b, boolean c | int a, int b | int a): void","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"toByteArray","kind":"method","documentation":"toByteArray(): byte[]","insertText":"toByteArray"},{"label":"toLongArray","kind":"method","documentation":"toLongArray(): long[]","insertText":"toLongArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"xor","kind":"method","documentation":"xor(BitSet a): void","insertText":"xor"}],"constructorDefinition":{"label":"BitSet","kind":"constructor","documentation":"Constructor: BitSet","insertText":"BitSet"}},{"label":"Calendar","kind":"class","documentation":"Class: Calendar","insertText":"Calendar","properties":[{"label":"ALL_STYLES","kind":"property","documentation":"ALL_STYLES: int","insertText":"ALL_STYLES"},{"label":"AM","kind":"property","documentation":"AM: int","insertText":"AM"},{"label":"AM_PM","kind":"property","documentation":"AM_PM: int","insertText":"AM_PM"},{"label":"APRIL","kind":"property","documentation":"APRIL: int","insertText":"APRIL"},{"label":"AUGUST","kind":"property","documentation":"AUGUST: int","insertText":"AUGUST"},{"label":"DATE","kind":"property","documentation":"DATE: int","insertText":"DATE"},{"label":"DAY_OF_MONTH","kind":"property","documentation":"DAY_OF_MONTH: int","insertText":"DAY_OF_MONTH"},{"label":"DAY_OF_WEEK","kind":"property","documentation":"DAY_OF_WEEK: int","insertText":"DAY_OF_WEEK"},{"label":"DAY_OF_WEEK_IN_MONTH","kind":"property","documentation":"DAY_OF_WEEK_IN_MONTH: int","insertText":"DAY_OF_WEEK_IN_MONTH"},{"label":"DAY_OF_YEAR","kind":"property","documentation":"DAY_OF_YEAR: int","insertText":"DAY_OF_YEAR"},{"label":"DECEMBER","kind":"property","documentation":"DECEMBER: int","insertText":"DECEMBER"},{"label":"DST_OFFSET","kind":"property","documentation":"DST_OFFSET: int","insertText":"DST_OFFSET"},{"label":"ERA","kind":"property","documentation":"ERA: int","insertText":"ERA"},{"label":"FEBRUARY","kind":"property","documentation":"FEBRUARY: int","insertText":"FEBRUARY"},{"label":"FIELD_COUNT","kind":"property","documentation":"FIELD_COUNT: int","insertText":"FIELD_COUNT"},{"label":"FRIDAY","kind":"property","documentation":"FRIDAY: int","insertText":"FRIDAY"},{"label":"HOUR","kind":"property","documentation":"HOUR: int","insertText":"HOUR"},{"label":"HOUR_OF_DAY","kind":"property","documentation":"HOUR_OF_DAY: int","insertText":"HOUR_OF_DAY"},{"label":"JANUARY","kind":"property","documentation":"JANUARY: int","insertText":"JANUARY"},{"label":"JULY","kind":"property","documentation":"JULY: int","insertText":"JULY"},{"label":"JUNE","kind":"property","documentation":"JUNE: int","insertText":"JUNE"},{"label":"LONG","kind":"property","documentation":"LONG: int","insertText":"LONG"},{"label":"LONG_FORMAT","kind":"property","documentation":"LONG_FORMAT: int","insertText":"LONG_FORMAT"},{"label":"LONG_STANDALONE","kind":"property","documentation":"LONG_STANDALONE: int","insertText":"LONG_STANDALONE"},{"label":"MARCH","kind":"property","documentation":"MARCH: int","insertText":"MARCH"},{"label":"MAY","kind":"property","documentation":"MAY: int","insertText":"MAY"},{"label":"MILLISECOND","kind":"property","documentation":"MILLISECOND: int","insertText":"MILLISECOND"},{"label":"MINUTE","kind":"property","documentation":"MINUTE: int","insertText":"MINUTE"},{"label":"MONDAY","kind":"property","documentation":"MONDAY: int","insertText":"MONDAY"},{"label":"MONTH","kind":"property","documentation":"MONTH: int","insertText":"MONTH"},{"label":"NARROW_FORMAT","kind":"property","documentation":"NARROW_FORMAT: int","insertText":"NARROW_FORMAT"},{"label":"NARROW_STANDALONE","kind":"property","documentation":"NARROW_STANDALONE: int","insertText":"NARROW_STANDALONE"},{"label":"NOVEMBER","kind":"property","documentation":"NOVEMBER: int","insertText":"NOVEMBER"},{"label":"OCTOBER","kind":"property","documentation":"OCTOBER: int","insertText":"OCTOBER"},{"label":"PM","kind":"property","documentation":"PM: int","insertText":"PM"},{"label":"SATURDAY","kind":"property","documentation":"SATURDAY: int","insertText":"SATURDAY"},{"label":"SECOND","kind":"property","documentation":"SECOND: int","insertText":"SECOND"},{"label":"SEPTEMBER","kind":"property","documentation":"SEPTEMBER: int","insertText":"SEPTEMBER"},{"label":"SHORT","kind":"property","documentation":"SHORT: int","insertText":"SHORT"},{"label":"SHORT_FORMAT","kind":"property","documentation":"SHORT_FORMAT: int","insertText":"SHORT_FORMAT"},{"label":"SHORT_STANDALONE","kind":"property","documentation":"SHORT_STANDALONE: int","insertText":"SHORT_STANDALONE"},{"label":"SUNDAY","kind":"property","documentation":"SUNDAY: int","insertText":"SUNDAY"},{"label":"THURSDAY","kind":"property","documentation":"THURSDAY: int","insertText":"THURSDAY"},{"label":"TUESDAY","kind":"property","documentation":"TUESDAY: int","insertText":"TUESDAY"},{"label":"UNDECIMBER","kind":"property","documentation":"UNDECIMBER: int","insertText":"UNDECIMBER"},{"label":"WEDNESDAY","kind":"property","documentation":"WEDNESDAY: int","insertText":"WEDNESDAY"},{"label":"WEEK_OF_MONTH","kind":"property","documentation":"WEEK_OF_MONTH: int","insertText":"WEEK_OF_MONTH"},{"label":"WEEK_OF_YEAR","kind":"property","documentation":"WEEK_OF_YEAR: int","insertText":"WEEK_OF_YEAR"},{"label":"YEAR","kind":"property","documentation":"YEAR: int","insertText":"YEAR"},{"label":"ZONE_OFFSET","kind":"property","documentation":"ZONE_OFFSET: int","insertText":"ZONE_OFFSET"},{"label":"getAvailableCalendarTypes","kind":"method","documentation":"getAvailableCalendarTypes(): Set","insertText":"getAvailableCalendarTypes"},{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Locale[]","insertText":"getAvailableLocales"},{"label":"getInstance","kind":"method","documentation":"getInstance(TimeZone a, Locale b | TimeZone a): Calendar","insertText":"getInstance"},{"label":"add","kind":"method","documentation":"add(int a, int b): void","insertText":"add"},{"label":"after","kind":"method","documentation":"after(Object a): boolean","insertText":"after"},{"label":"before","kind":"method","documentation":"before(Object a): boolean","insertText":"before"},{"label":"clear","kind":"method","documentation":"clear(int a): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"compareTo","kind":"method","documentation":"compareTo(Calendar a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(int a): int","insertText":"get"},{"label":"getActualMaximum","kind":"method","documentation":"getActualMaximum(int a): int","insertText":"getActualMaximum"},{"label":"getActualMinimum","kind":"method","documentation":"getActualMinimum(int a): int","insertText":"getActualMinimum"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(int a, int b, Locale c): String","insertText":"getDisplayName"},{"label":"getDisplayNames","kind":"method","documentation":"getDisplayNames(int a, int b, Locale c): Map","insertText":"getDisplayNames"},{"label":"getFirstDayOfWeek","kind":"method","documentation":"getFirstDayOfWeek(): int","insertText":"getFirstDayOfWeek"},{"label":"getGreatestMinimum","kind":"method","documentation":"getGreatestMinimum(int a): int","insertText":"getGreatestMinimum"},{"label":"getLeastMaximum","kind":"method","documentation":"getLeastMaximum(int a): int","insertText":"getLeastMaximum"},{"label":"getMaximum","kind":"method","documentation":"getMaximum(int a): int","insertText":"getMaximum"},{"label":"getMinimalDaysInFirstWeek","kind":"method","documentation":"getMinimalDaysInFirstWeek(): int","insertText":"getMinimalDaysInFirstWeek"},{"label":"getMinimum","kind":"method","documentation":"getMinimum(int a): int","insertText":"getMinimum"},{"label":"getTime","kind":"method","documentation":"getTime(): Date","insertText":"getTime"},{"label":"getTimeInMillis","kind":"method","documentation":"getTimeInMillis(): long","insertText":"getTimeInMillis"},{"label":"getTimeZone","kind":"method","documentation":"getTimeZone(): TimeZone","insertText":"getTimeZone"},{"label":"getWeekYear","kind":"method","documentation":"getWeekYear(): int","insertText":"getWeekYear"},{"label":"getWeeksInWeekYear","kind":"method","documentation":"getWeeksInWeekYear(): int","insertText":"getWeeksInWeekYear"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLenient","kind":"method","documentation":"isLenient(): boolean","insertText":"isLenient"},{"label":"isSet","kind":"method","documentation":"isSet(int a): boolean","insertText":"isSet"},{"label":"isWeekDateSupported","kind":"method","documentation":"isWeekDateSupported(): boolean","insertText":"isWeekDateSupported"},{"label":"roll","kind":"method","documentation":"roll(int a, int b): void","insertText":"roll"},{"label":"set","kind":"method","documentation":"set(int a, int b, int c, int d, int e, int f | int a, int b, int c, int d, int e | int a, int b, int c | int a, int b): void","insertText":"set"},{"label":"setFirstDayOfWeek","kind":"method","documentation":"setFirstDayOfWeek(int a): void","insertText":"setFirstDayOfWeek"},{"label":"setLenient","kind":"method","documentation":"setLenient(boolean a): void","insertText":"setLenient"},{"label":"setMinimalDaysInFirstWeek","kind":"method","documentation":"setMinimalDaysInFirstWeek(int a): void","insertText":"setMinimalDaysInFirstWeek"},{"label":"setTime","kind":"method","documentation":"setTime(Date a): void","insertText":"setTime"},{"label":"setTimeInMillis","kind":"method","documentation":"setTimeInMillis(long a): void","insertText":"setTimeInMillis"},{"label":"setTimeZone","kind":"method","documentation":"setTimeZone(TimeZone a): void","insertText":"setTimeZone"},{"label":"setWeekDate","kind":"method","documentation":"setWeekDate(int a, int b, int c): void","insertText":"setWeekDate"},{"label":"toInstant","kind":"method","documentation":"toInstant(): Instant","insertText":"toInstant"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Builder","kind":"class","documentation":"Class: Builder","insertText":"Builder","properties":[{"label":"build","kind":"method","documentation":"build(): Calendar","insertText":"build"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"set","kind":"method","documentation":"set(int a, int b): Calendar.Builder","insertText":"set"},{"label":"setCalendarType","kind":"method","documentation":"setCalendarType(String a): Calendar.Builder","insertText":"setCalendarType"},{"label":"setDate","kind":"method","documentation":"setDate(int a, int b, int c): Calendar.Builder","insertText":"setDate"},{"label":"setFields","kind":"method","documentation":"setFields(int[] a): Calendar.Builder","insertText":"setFields"},{"label":"setInstant","kind":"method","documentation":"setInstant(long a): Calendar.Builder","insertText":"setInstant"},{"label":"setLenient","kind":"method","documentation":"setLenient(boolean a): Calendar.Builder","insertText":"setLenient"},{"label":"setLocale","kind":"method","documentation":"setLocale(Locale a): Calendar.Builder","insertText":"setLocale"},{"label":"setTimeOfDay","kind":"method","documentation":"setTimeOfDay(int a, int b, int c, int d | int a, int b, int c): Calendar.Builder","insertText":"setTimeOfDay"},{"label":"setTimeZone","kind":"method","documentation":"setTimeZone(TimeZone a): Calendar.Builder","insertText":"setTimeZone"},{"label":"setWeekDate","kind":"method","documentation":"setWeekDate(int a, int b, int c): Calendar.Builder","insertText":"setWeekDate"},{"label":"setWeekDefinition","kind":"method","documentation":"setWeekDefinition(int a, int b): Calendar.Builder","insertText":"setWeekDefinition"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Builder","kind":"constructor","documentation":"Constructor: Builder","insertText":"Builder"}},{"label":"Collection","kind":"class","documentation":"Class: Collection","insertText":"Collection","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Collections","kind":"class","documentation":"Class: Collections","insertText":"Collections","properties":[{"label":"EMPTY_LIST","kind":"property","documentation":"EMPTY_LIST: List","insertText":"EMPTY_LIST"},{"label":"EMPTY_MAP","kind":"property","documentation":"EMPTY_MAP: Map","insertText":"EMPTY_MAP"},{"label":"EMPTY_SET","kind":"property","documentation":"EMPTY_SET: Set","insertText":"EMPTY_SET"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a, def[] b): boolean","insertText":"addAll"},{"label":"asLifoQueue","kind":"method","documentation":"asLifoQueue(Deque a): Queue","insertText":"asLifoQueue"},{"label":"binarySearch","kind":"method","documentation":"binarySearch(List a, def b, Comparator c | List a, def b): int","insertText":"binarySearch"},{"label":"copy","kind":"method","documentation":"copy(List a, List b): void","insertText":"copy"},{"label":"disjoint","kind":"method","documentation":"disjoint(Collection a, Collection b): boolean","insertText":"disjoint"},{"label":"emptyEnumeration","kind":"method","documentation":"emptyEnumeration(): Enumeration","insertText":"emptyEnumeration"},{"label":"emptyIterator","kind":"method","documentation":"emptyIterator(): Iterator","insertText":"emptyIterator"},{"label":"emptyList","kind":"method","documentation":"emptyList(): List","insertText":"emptyList"},{"label":"emptyListIterator","kind":"method","documentation":"emptyListIterator(): ListIterator","insertText":"emptyListIterator"},{"label":"emptyMap","kind":"method","documentation":"emptyMap(): Map","insertText":"emptyMap"},{"label":"emptyNavigableMap","kind":"method","documentation":"emptyNavigableMap(): NavigableMap","insertText":"emptyNavigableMap"},{"label":"emptyNavigableSet","kind":"method","documentation":"emptyNavigableSet(): NavigableSet","insertText":"emptyNavigableSet"},{"label":"emptySet","kind":"method","documentation":"emptySet(): Set","insertText":"emptySet"},{"label":"emptySortedMap","kind":"method","documentation":"emptySortedMap(): SortedMap","insertText":"emptySortedMap"},{"label":"emptySortedSet","kind":"method","documentation":"emptySortedSet(): SortedSet","insertText":"emptySortedSet"},{"label":"enumeration","kind":"method","documentation":"enumeration(Collection a): Enumeration","insertText":"enumeration"},{"label":"fill","kind":"method","documentation":"fill(List a, def b): void","insertText":"fill"},{"label":"frequency","kind":"method","documentation":"frequency(Collection a, def b): int","insertText":"frequency"},{"label":"indexOfSubList","kind":"method","documentation":"indexOfSubList(List a, List b): int","insertText":"indexOfSubList"},{"label":"lastIndexOfSubList","kind":"method","documentation":"lastIndexOfSubList(List a, List b): int","insertText":"lastIndexOfSubList"},{"label":"list","kind":"method","documentation":"list(Enumeration a): ArrayList","insertText":"list"},{"label":"max","kind":"method","documentation":"max(Collection a, Comparator b | Collection a): def","insertText":"max"},{"label":"min","kind":"method","documentation":"min(Collection a, Comparator b | Collection a): def","insertText":"min"},{"label":"nCopies","kind":"method","documentation":"nCopies(int a, def b): List","insertText":"nCopies"},{"label":"newSetFromMap","kind":"method","documentation":"newSetFromMap(Map a): Set","insertText":"newSetFromMap"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(List a, def b, def c): boolean","insertText":"replaceAll"},{"label":"reverse","kind":"method","documentation":"reverse(List a): void","insertText":"reverse"},{"label":"reverseOrder","kind":"method","documentation":"reverseOrder(Comparator a): Comparator","insertText":"reverseOrder"},{"label":"rotate","kind":"method","documentation":"rotate(List a, int b): void","insertText":"rotate"},{"label":"shuffle","kind":"method","documentation":"shuffle(List a, Random b | List a): void","insertText":"shuffle"},{"label":"singleton","kind":"method","documentation":"singleton(def a): Set","insertText":"singleton"},{"label":"singletonList","kind":"method","documentation":"singletonList(def a): List","insertText":"singletonList"},{"label":"singletonMap","kind":"method","documentation":"singletonMap(def a, def b): Map","insertText":"singletonMap"},{"label":"sort","kind":"method","documentation":"sort(List a, Comparator b | List a): void","insertText":"sort"},{"label":"swap","kind":"method","documentation":"swap(List a, int b, int c): void","insertText":"swap"},{"label":"unmodifiableCollection","kind":"method","documentation":"unmodifiableCollection(Collection a): Collection","insertText":"unmodifiableCollection"},{"label":"unmodifiableList","kind":"method","documentation":"unmodifiableList(List a): List","insertText":"unmodifiableList"},{"label":"unmodifiableMap","kind":"method","documentation":"unmodifiableMap(Map a): Map","insertText":"unmodifiableMap"},{"label":"unmodifiableNavigableMap","kind":"method","documentation":"unmodifiableNavigableMap(NavigableMap a): NavigableMap","insertText":"unmodifiableNavigableMap"},{"label":"unmodifiableNavigableSet","kind":"method","documentation":"unmodifiableNavigableSet(NavigableSet a): NavigableSet","insertText":"unmodifiableNavigableSet"},{"label":"unmodifiableSet","kind":"method","documentation":"unmodifiableSet(Set a): Set","insertText":"unmodifiableSet"},{"label":"unmodifiableSortedMap","kind":"method","documentation":"unmodifiableSortedMap(SortedMap a): SortedMap","insertText":"unmodifiableSortedMap"},{"label":"unmodifiableSortedSet","kind":"method","documentation":"unmodifiableSortedSet(SortedSet a): SortedSet","insertText":"unmodifiableSortedSet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Comparator","kind":"class","documentation":"Class: Comparator","insertText":"Comparator","properties":[{"label":"comparing","kind":"method","documentation":"comparing(Function a, Comparator b | Function a): Comparator","insertText":"comparing"},{"label":"comparingDouble","kind":"method","documentation":"comparingDouble(ToDoubleFunction a): Comparator","insertText":"comparingDouble"},{"label":"comparingInt","kind":"method","documentation":"comparingInt(ToIntFunction a): Comparator","insertText":"comparingInt"},{"label":"comparingLong","kind":"method","documentation":"comparingLong(ToLongFunction a): Comparator","insertText":"comparingLong"},{"label":"naturalOrder","kind":"method","documentation":"naturalOrder(): Comparator","insertText":"naturalOrder"},{"label":"nullsFirst","kind":"method","documentation":"nullsFirst(Comparator a): Comparator","insertText":"nullsFirst"},{"label":"nullsLast","kind":"method","documentation":"nullsLast(Comparator a): Comparator","insertText":"nullsLast"},{"label":"reverseOrder","kind":"method","documentation":"reverseOrder(): Comparator","insertText":"reverseOrder"},{"label":"compare","kind":"method","documentation":"compare(def a, def b): int","insertText":"compare"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"reversed","kind":"method","documentation":"reversed(): Comparator","insertText":"reversed"},{"label":"thenComparing","kind":"method","documentation":"thenComparing(Function a, Comparator b | Comparator a): Comparator","insertText":"thenComparing"},{"label":"thenComparingDouble","kind":"method","documentation":"thenComparingDouble(ToDoubleFunction a): Comparator","insertText":"thenComparingDouble"},{"label":"thenComparingInt","kind":"method","documentation":"thenComparingInt(ToIntFunction a): Comparator","insertText":"thenComparingInt"},{"label":"thenComparingLong","kind":"method","documentation":"thenComparingLong(ToLongFunction a): Comparator","insertText":"thenComparingLong"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ConcurrentModificationException","kind":"class","documentation":"Class: ConcurrentModificationException","insertText":"ConcurrentModificationException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"ConcurrentModificationException","kind":"constructor","documentation":"Constructor: ConcurrentModificationException","insertText":"ConcurrentModificationException"}},{"label":"Currency","kind":"class","documentation":"Class: Currency","insertText":"Currency","properties":[{"label":"getAvailableCurrencies","kind":"method","documentation":"getAvailableCurrencies(): Set","insertText":"getAvailableCurrencies"},{"label":"getInstance","kind":"method","documentation":"getInstance(String a): Currency","insertText":"getInstance"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getCurrencyCode","kind":"method","documentation":"getCurrencyCode(): String","insertText":"getCurrencyCode"},{"label":"getDefaultFractionDigits","kind":"method","documentation":"getDefaultFractionDigits(): int","insertText":"getDefaultFractionDigits"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(Locale a): String","insertText":"getDisplayName"},{"label":"getNumericCode","kind":"method","documentation":"getNumericCode(): int","insertText":"getNumericCode"},{"label":"getSymbol","kind":"method","documentation":"getSymbol(Locale a): String","insertText":"getSymbol"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Date","kind":"class","documentation":"Class: Date","insertText":"Date","properties":[{"label":"from","kind":"method","documentation":"from(Instant a): Date","insertText":"from"},{"label":"after","kind":"method","documentation":"after(Date a): boolean","insertText":"after"},{"label":"before","kind":"method","documentation":"before(Date a): boolean","insertText":"before"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"compareTo","kind":"method","documentation":"compareTo(Date a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getTime","kind":"method","documentation":"getTime(): long","insertText":"getTime"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"setTime","kind":"method","documentation":"setTime(long a): void","insertText":"setTime"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Date","kind":"constructor","documentation":"Constructor: Date","insertText":"Date"}},{"label":"Deque","kind":"class","documentation":"Class: Deque","insertText":"Deque","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"addFirst","kind":"method","documentation":"addFirst(def a): void","insertText":"addFirst"},{"label":"addLast","kind":"method","documentation":"addLast(def a): void","insertText":"addLast"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"descendingIterator","kind":"method","documentation":"descendingIterator(): Iterator","insertText":"descendingIterator"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"element","kind":"method","documentation":"element(): def","insertText":"element"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"getFirst","kind":"method","documentation":"getFirst(): def","insertText":"getFirst"},{"label":"getLast","kind":"method","documentation":"getLast(): def","insertText":"getLast"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"offer","kind":"method","documentation":"offer(def a): boolean","insertText":"offer"},{"label":"offerFirst","kind":"method","documentation":"offerFirst(def a): boolean","insertText":"offerFirst"},{"label":"offerLast","kind":"method","documentation":"offerLast(def a): boolean","insertText":"offerLast"},{"label":"peek","kind":"method","documentation":"peek(): def","insertText":"peek"},{"label":"peekFirst","kind":"method","documentation":"peekFirst(): def","insertText":"peekFirst"},{"label":"peekLast","kind":"method","documentation":"peekLast(): def","insertText":"peekLast"},{"label":"poll","kind":"method","documentation":"poll(): def","insertText":"poll"},{"label":"pollFirst","kind":"method","documentation":"pollFirst(): def","insertText":"pollFirst"},{"label":"pollLast","kind":"method","documentation":"pollLast(): def","insertText":"pollLast"},{"label":"pop","kind":"method","documentation":"pop(): def","insertText":"pop"},{"label":"push","kind":"method","documentation":"push(def a): void","insertText":"push"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean | def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeFirst","kind":"method","documentation":"removeFirst(): def","insertText":"removeFirst"},{"label":"removeFirstOccurrence","kind":"method","documentation":"removeFirstOccurrence(def a): boolean","insertText":"removeFirstOccurrence"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"removeLast","kind":"method","documentation":"removeLast(): def","insertText":"removeLast"},{"label":"removeLastOccurrence","kind":"method","documentation":"removeLastOccurrence(def a): boolean","insertText":"removeLastOccurrence"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Dictionary","kind":"class","documentation":"Class: Dictionary","insertText":"Dictionary","properties":[{"label":"elements","kind":"method","documentation":"elements(): Enumeration","insertText":"elements"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keys","kind":"method","documentation":"keys(): Enumeration","insertText":"keys"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"remove","kind":"method","documentation":"remove(def a): def","insertText":"remove"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleSummaryStatistics","kind":"class","documentation":"Class: DoubleSummaryStatistics","insertText":"DoubleSummaryStatistics","properties":[{"label":"accept","kind":"method","documentation":"accept(double a): void","insertText":"accept"},{"label":"andThen","kind":"method","documentation":"andThen(DoubleConsumer a): DoubleConsumer","insertText":"andThen"},{"label":"combine","kind":"method","documentation":"combine(DoubleSummaryStatistics a): void","insertText":"combine"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAverage","kind":"method","documentation":"getAverage(): double","insertText":"getAverage"},{"label":"getCount","kind":"method","documentation":"getCount(): long","insertText":"getCount"},{"label":"getMax","kind":"method","documentation":"getMax(): double","insertText":"getMax"},{"label":"getMin","kind":"method","documentation":"getMin(): double","insertText":"getMin"},{"label":"getSum","kind":"method","documentation":"getSum(): double","insertText":"getSum"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"DoubleSummaryStatistics","kind":"constructor","documentation":"Constructor: DoubleSummaryStatistics","insertText":"DoubleSummaryStatistics"}},{"label":"DuplicateFormatFlagsException","kind":"class","documentation":"Class: DuplicateFormatFlagsException","insertText":"DuplicateFormatFlagsException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getFlags","kind":"method","documentation":"getFlags(): String","insertText":"getFlags"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"DuplicateFormatFlagsException","kind":"constructor","documentation":"Constructor: DuplicateFormatFlagsException","insertText":"DuplicateFormatFlagsException"}},{"label":"EmptyStackException","kind":"class","documentation":"Class: EmptyStackException","insertText":"EmptyStackException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"EmptyStackException","kind":"constructor","documentation":"Constructor: EmptyStackException","insertText":"EmptyStackException"}},{"label":"Enumeration","kind":"class","documentation":"Class: Enumeration","insertText":"Enumeration","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hasMoreElements","kind":"method","documentation":"hasMoreElements(): boolean","insertText":"hasMoreElements"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"nextElement","kind":"method","documentation":"nextElement(): def","insertText":"nextElement"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"EventListener","kind":"class","documentation":"Class: EventListener","insertText":"EventListener","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"EventListenerProxy","kind":"class","documentation":"Class: EventListenerProxy","insertText":"EventListenerProxy","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getListener","kind":"method","documentation":"getListener(): EventListener","insertText":"getListener"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"EventObject","kind":"class","documentation":"Class: EventObject","insertText":"EventObject","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getSource","kind":"method","documentation":"getSource(): Object","insertText":"getSource"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"EventObject","kind":"constructor","documentation":"Constructor: EventObject","insertText":"EventObject"}},{"label":"FormatFlagsConversionMismatchException","kind":"class","documentation":"Class: FormatFlagsConversionMismatchException","insertText":"FormatFlagsConversionMismatchException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getConversion","kind":"method","documentation":"getConversion(): char","insertText":"getConversion"},{"label":"getFlags","kind":"method","documentation":"getFlags(): String","insertText":"getFlags"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"FormatFlagsConversionMismatchException","kind":"constructor","documentation":"Constructor: FormatFlagsConversionMismatchException","insertText":"FormatFlagsConversionMismatchException"}},{"label":"Formattable","kind":"class","documentation":"Class: Formattable","insertText":"Formattable","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"formatTo","kind":"method","documentation":"formatTo(Formatter a, int b, int c, int d): void","insertText":"formatTo"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"FormattableFlags","kind":"class","documentation":"Class: FormattableFlags","insertText":"FormattableFlags","properties":[{"label":"ALTERNATE","kind":"property","documentation":"ALTERNATE: int","insertText":"ALTERNATE"},{"label":"LEFT_JUSTIFY","kind":"property","documentation":"LEFT_JUSTIFY: int","insertText":"LEFT_JUSTIFY"},{"label":"UPPERCASE","kind":"property","documentation":"UPPERCASE: int","insertText":"UPPERCASE"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Formatter","kind":"class","documentation":"Class: Formatter","insertText":"Formatter","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): Formatter","insertText":"format"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"locale","kind":"method","documentation":"locale(): Locale","insertText":"locale"},{"label":"out","kind":"method","documentation":"out(): Appendable","insertText":"out"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Formatter","kind":"constructor","documentation":"Constructor: Formatter","insertText":"Formatter"}},{"label":"BigDecimalLayoutForm","kind":"class","documentation":"Class: BigDecimalLayoutForm","insertText":"BigDecimalLayoutForm","properties":[{"label":"DECIMAL_FLOAT","kind":"property","documentation":"DECIMAL_FLOAT: Formatter.BigDecimalLayoutForm","insertText":"DECIMAL_FLOAT"},{"label":"SCIENTIFIC","kind":"property","documentation":"SCIENTIFIC: Formatter.BigDecimalLayoutForm","insertText":"SCIENTIFIC"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"FormatterClosedException","kind":"class","documentation":"Class: FormatterClosedException","insertText":"FormatterClosedException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"FormatterClosedException","kind":"constructor","documentation":"Constructor: FormatterClosedException","insertText":"FormatterClosedException"}},{"label":"GregorianCalendar","kind":"class","documentation":"Class: GregorianCalendar","insertText":"GregorianCalendar","properties":[{"label":"AD","kind":"property","documentation":"AD: int","insertText":"AD"},{"label":"BC","kind":"property","documentation":"BC: int","insertText":"BC"},{"label":"from","kind":"method","documentation":"from(ZonedDateTime a): GregorianCalendar","insertText":"from"},{"label":"add","kind":"method","documentation":"add(int a, int b): void","insertText":"add"},{"label":"after","kind":"method","documentation":"after(Object a): boolean","insertText":"after"},{"label":"before","kind":"method","documentation":"before(Object a): boolean","insertText":"before"},{"label":"clear","kind":"method","documentation":"clear(int a): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"compareTo","kind":"method","documentation":"compareTo(Calendar a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(int a): int","insertText":"get"},{"label":"getActualMaximum","kind":"method","documentation":"getActualMaximum(int a): int","insertText":"getActualMaximum"},{"label":"getActualMinimum","kind":"method","documentation":"getActualMinimum(int a): int","insertText":"getActualMinimum"},{"label":"getCalendarType","kind":"method","documentation":"getCalendarType(): String","insertText":"getCalendarType"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(int a, int b, Locale c): String","insertText":"getDisplayName"},{"label":"getDisplayNames","kind":"method","documentation":"getDisplayNames(int a, int b, Locale c): Map","insertText":"getDisplayNames"},{"label":"getFirstDayOfWeek","kind":"method","documentation":"getFirstDayOfWeek(): int","insertText":"getFirstDayOfWeek"},{"label":"getGreatestMinimum","kind":"method","documentation":"getGreatestMinimum(int a): int","insertText":"getGreatestMinimum"},{"label":"getGregorianChange","kind":"method","documentation":"getGregorianChange(): Date","insertText":"getGregorianChange"},{"label":"getLeastMaximum","kind":"method","documentation":"getLeastMaximum(int a): int","insertText":"getLeastMaximum"},{"label":"getMaximum","kind":"method","documentation":"getMaximum(int a): int","insertText":"getMaximum"},{"label":"getMinimalDaysInFirstWeek","kind":"method","documentation":"getMinimalDaysInFirstWeek(): int","insertText":"getMinimalDaysInFirstWeek"},{"label":"getMinimum","kind":"method","documentation":"getMinimum(int a): int","insertText":"getMinimum"},{"label":"getTime","kind":"method","documentation":"getTime(): Date","insertText":"getTime"},{"label":"getTimeInMillis","kind":"method","documentation":"getTimeInMillis(): long","insertText":"getTimeInMillis"},{"label":"getTimeZone","kind":"method","documentation":"getTimeZone(): TimeZone","insertText":"getTimeZone"},{"label":"getWeekYear","kind":"method","documentation":"getWeekYear(): int","insertText":"getWeekYear"},{"label":"getWeeksInWeekYear","kind":"method","documentation":"getWeeksInWeekYear(): int","insertText":"getWeeksInWeekYear"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isLeapYear","kind":"method","documentation":"isLeapYear(int a): boolean","insertText":"isLeapYear"},{"label":"isLenient","kind":"method","documentation":"isLenient(): boolean","insertText":"isLenient"},{"label":"isSet","kind":"method","documentation":"isSet(int a): boolean","insertText":"isSet"},{"label":"isWeekDateSupported","kind":"method","documentation":"isWeekDateSupported(): boolean","insertText":"isWeekDateSupported"},{"label":"roll","kind":"method","documentation":"roll(int a, int b): void","insertText":"roll"},{"label":"set","kind":"method","documentation":"set(int a, int b, int c, int d, int e, int f | int a, int b, int c, int d, int e | int a, int b, int c | int a, int b): void","insertText":"set"},{"label":"setFirstDayOfWeek","kind":"method","documentation":"setFirstDayOfWeek(int a): void","insertText":"setFirstDayOfWeek"},{"label":"setGregorianChange","kind":"method","documentation":"setGregorianChange(Date a): void","insertText":"setGregorianChange"},{"label":"setLenient","kind":"method","documentation":"setLenient(boolean a): void","insertText":"setLenient"},{"label":"setMinimalDaysInFirstWeek","kind":"method","documentation":"setMinimalDaysInFirstWeek(int a): void","insertText":"setMinimalDaysInFirstWeek"},{"label":"setTime","kind":"method","documentation":"setTime(Date a): void","insertText":"setTime"},{"label":"setTimeInMillis","kind":"method","documentation":"setTimeInMillis(long a): void","insertText":"setTimeInMillis"},{"label":"setTimeZone","kind":"method","documentation":"setTimeZone(TimeZone a): void","insertText":"setTimeZone"},{"label":"setWeekDate","kind":"method","documentation":"setWeekDate(int a, int b, int c): void","insertText":"setWeekDate"},{"label":"toInstant","kind":"method","documentation":"toInstant(): Instant","insertText":"toInstant"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toZonedDateTime","kind":"method","documentation":"toZonedDateTime(): ZonedDateTime","insertText":"toZonedDateTime"}],"constructorDefinition":{"label":"GregorianCalendar","kind":"constructor","documentation":"Constructor: GregorianCalendar","insertText":"GregorianCalendar"}},{"label":"HashMap","kind":"class","documentation":"Class: HashMap","insertText":"HashMap","properties":[{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}],"constructorDefinition":{"label":"HashMap","kind":"constructor","documentation":"Constructor: HashMap","insertText":"HashMap"}},{"label":"HashSet","kind":"class","documentation":"Class: HashSet","insertText":"HashSet","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"HashSet","kind":"constructor","documentation":"Constructor: HashSet","insertText":"HashSet"}},{"label":"Hashtable","kind":"class","documentation":"Class: Hashtable","insertText":"Hashtable","properties":[{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"elements","kind":"method","documentation":"elements(): Enumeration","insertText":"elements"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"keys","kind":"method","documentation":"keys(): Enumeration","insertText":"keys"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}],"constructorDefinition":{"label":"Hashtable","kind":"constructor","documentation":"Constructor: Hashtable","insertText":"Hashtable"}},{"label":"IdentityHashMap","kind":"class","documentation":"Class: IdentityHashMap","insertText":"IdentityHashMap","properties":[{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}],"constructorDefinition":{"label":"IdentityHashMap","kind":"constructor","documentation":"Constructor: IdentityHashMap","insertText":"IdentityHashMap"}},{"label":"IllegalFormatCodePointException","kind":"class","documentation":"Class: IllegalFormatCodePointException","insertText":"IllegalFormatCodePointException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getCodePoint","kind":"method","documentation":"getCodePoint(): int","insertText":"getCodePoint"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalFormatCodePointException","kind":"constructor","documentation":"Constructor: IllegalFormatCodePointException","insertText":"IllegalFormatCodePointException"}},{"label":"IllegalFormatConversionException","kind":"class","documentation":"Class: IllegalFormatConversionException","insertText":"IllegalFormatConversionException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getConversion","kind":"method","documentation":"getConversion(): char","insertText":"getConversion"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IllegalFormatException","kind":"class","documentation":"Class: IllegalFormatException","insertText":"IllegalFormatException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IllegalFormatFlagsException","kind":"class","documentation":"Class: IllegalFormatFlagsException","insertText":"IllegalFormatFlagsException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getFlags","kind":"method","documentation":"getFlags(): String","insertText":"getFlags"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalFormatFlagsException","kind":"constructor","documentation":"Constructor: IllegalFormatFlagsException","insertText":"IllegalFormatFlagsException"}},{"label":"IllegalFormatPrecisionException","kind":"class","documentation":"Class: IllegalFormatPrecisionException","insertText":"IllegalFormatPrecisionException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getPrecision","kind":"method","documentation":"getPrecision(): int","insertText":"getPrecision"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalFormatPrecisionException","kind":"constructor","documentation":"Constructor: IllegalFormatPrecisionException","insertText":"IllegalFormatPrecisionException"}},{"label":"IllegalFormatWidthException","kind":"class","documentation":"Class: IllegalFormatWidthException","insertText":"IllegalFormatWidthException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"getWidth","kind":"method","documentation":"getWidth(): int","insertText":"getWidth"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllegalFormatWidthException","kind":"constructor","documentation":"Constructor: IllegalFormatWidthException","insertText":"IllegalFormatWidthException"}},{"label":"IllformedLocaleException","kind":"class","documentation":"Class: IllformedLocaleException","insertText":"IllformedLocaleException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getErrorIndex","kind":"method","documentation":"getErrorIndex(): int","insertText":"getErrorIndex"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IllformedLocaleException","kind":"constructor","documentation":"Constructor: IllformedLocaleException","insertText":"IllformedLocaleException"}},{"label":"InputMismatchException","kind":"class","documentation":"Class: InputMismatchException","insertText":"InputMismatchException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"InputMismatchException","kind":"constructor","documentation":"Constructor: InputMismatchException","insertText":"InputMismatchException"}},{"label":"IntSummaryStatistics","kind":"class","documentation":"Class: IntSummaryStatistics","insertText":"IntSummaryStatistics","properties":[{"label":"accept","kind":"method","documentation":"accept(int a): void","insertText":"accept"},{"label":"andThen","kind":"method","documentation":"andThen(IntConsumer a): IntConsumer","insertText":"andThen"},{"label":"combine","kind":"method","documentation":"combine(IntSummaryStatistics a): void","insertText":"combine"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAverage","kind":"method","documentation":"getAverage(): double","insertText":"getAverage"},{"label":"getCount","kind":"method","documentation":"getCount(): long","insertText":"getCount"},{"label":"getMax","kind":"method","documentation":"getMax(): int","insertText":"getMax"},{"label":"getMin","kind":"method","documentation":"getMin(): int","insertText":"getMin"},{"label":"getSum","kind":"method","documentation":"getSum(): long","insertText":"getSum"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"IntSummaryStatistics","kind":"constructor","documentation":"Constructor: IntSummaryStatistics","insertText":"IntSummaryStatistics"}},{"label":"Iterator","kind":"class","documentation":"Class: Iterator","insertText":"Iterator","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(Consumer a): void","insertText":"forEachRemaining"},{"label":"hasNext","kind":"method","documentation":"hasNext(): boolean","insertText":"hasNext"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"next","kind":"method","documentation":"next(): def","insertText":"next"},{"label":"remove","kind":"method","documentation":"remove(): void","insertText":"remove"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LinkedHashMap","kind":"class","documentation":"Class: LinkedHashMap","insertText":"LinkedHashMap","properties":[{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}],"constructorDefinition":{"label":"LinkedHashMap","kind":"constructor","documentation":"Constructor: LinkedHashMap","insertText":"LinkedHashMap"}},{"label":"LinkedHashSet","kind":"class","documentation":"Class: LinkedHashSet","insertText":"LinkedHashSet","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"LinkedHashSet","kind":"constructor","documentation":"Constructor: LinkedHashSet","insertText":"LinkedHashSet"}},{"label":"LinkedList","kind":"class","documentation":"Class: LinkedList","insertText":"LinkedList","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"addFirst","kind":"method","documentation":"addFirst(def a): void","insertText":"addFirst"},{"label":"addLast","kind":"method","documentation":"addLast(def a): void","insertText":"addLast"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"descendingIterator","kind":"method","documentation":"descendingIterator(): Iterator","insertText":"descendingIterator"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"element","kind":"method","documentation":"element(): def","insertText":"element"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getFirst","kind":"method","documentation":"getFirst(): def","insertText":"getFirst"},{"label":"getLast","kind":"method","documentation":"getLast(): def","insertText":"getLast"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"offer","kind":"method","documentation":"offer(def a): boolean","insertText":"offer"},{"label":"offerFirst","kind":"method","documentation":"offerFirst(def a): boolean","insertText":"offerFirst"},{"label":"offerLast","kind":"method","documentation":"offerLast(def a): boolean","insertText":"offerLast"},{"label":"peek","kind":"method","documentation":"peek(): def","insertText":"peek"},{"label":"peekFirst","kind":"method","documentation":"peekFirst(): def","insertText":"peekFirst"},{"label":"peekLast","kind":"method","documentation":"peekLast(): def","insertText":"peekLast"},{"label":"poll","kind":"method","documentation":"poll(): def","insertText":"poll"},{"label":"pollFirst","kind":"method","documentation":"pollFirst(): def","insertText":"pollFirst"},{"label":"pollLast","kind":"method","documentation":"pollLast(): def","insertText":"pollLast"},{"label":"pop","kind":"method","documentation":"pop(): def","insertText":"pop"},{"label":"push","kind":"method","documentation":"push(def a): void","insertText":"push"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeFirst","kind":"method","documentation":"removeFirst(): def","insertText":"removeFirst"},{"label":"removeFirstOccurrence","kind":"method","documentation":"removeFirstOccurrence(def a): boolean","insertText":"removeFirstOccurrence"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"removeLast","kind":"method","documentation":"removeLast(): def","insertText":"removeLast"},{"label":"removeLastOccurrence","kind":"method","documentation":"removeLastOccurrence(def a): boolean","insertText":"removeLastOccurrence"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"LinkedList","kind":"constructor","documentation":"Constructor: LinkedList","insertText":"LinkedList"}},{"label":"List","kind":"class","documentation":"Class: List","insertText":"List","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ListIterator","kind":"class","documentation":"Class: ListIterator","insertText":"ListIterator","properties":[{"label":"add","kind":"method","documentation":"add(def a): void","insertText":"add"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(Consumer a): void","insertText":"forEachRemaining"},{"label":"hasNext","kind":"method","documentation":"hasNext(): boolean","insertText":"hasNext"},{"label":"hasPrevious","kind":"method","documentation":"hasPrevious(): boolean","insertText":"hasPrevious"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"next","kind":"method","documentation":"next(): def","insertText":"next"},{"label":"nextIndex","kind":"method","documentation":"nextIndex(): int","insertText":"nextIndex"},{"label":"previousIndex","kind":"method","documentation":"previousIndex(): int","insertText":"previousIndex"},{"label":"remove","kind":"method","documentation":"remove(): void","insertText":"remove"},{"label":"set","kind":"method","documentation":"set(def a): void","insertText":"set"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Locale","kind":"class","documentation":"Class: Locale","insertText":"Locale","properties":[{"label":"CANADA","kind":"property","documentation":"CANADA: Locale","insertText":"CANADA"},{"label":"CANADA_FRENCH","kind":"property","documentation":"CANADA_FRENCH: Locale","insertText":"CANADA_FRENCH"},{"label":"CHINA","kind":"property","documentation":"CHINA: Locale","insertText":"CHINA"},{"label":"CHINESE","kind":"property","documentation":"CHINESE: Locale","insertText":"CHINESE"},{"label":"ENGLISH","kind":"property","documentation":"ENGLISH: Locale","insertText":"ENGLISH"},{"label":"FRANCE","kind":"property","documentation":"FRANCE: Locale","insertText":"FRANCE"},{"label":"FRENCH","kind":"property","documentation":"FRENCH: Locale","insertText":"FRENCH"},{"label":"GERMAN","kind":"property","documentation":"GERMAN: Locale","insertText":"GERMAN"},{"label":"GERMANY","kind":"property","documentation":"GERMANY: Locale","insertText":"GERMANY"},{"label":"ITALIAN","kind":"property","documentation":"ITALIAN: Locale","insertText":"ITALIAN"},{"label":"ITALY","kind":"property","documentation":"ITALY: Locale","insertText":"ITALY"},{"label":"JAPAN","kind":"property","documentation":"JAPAN: Locale","insertText":"JAPAN"},{"label":"JAPANESE","kind":"property","documentation":"JAPANESE: Locale","insertText":"JAPANESE"},{"label":"KOREA","kind":"property","documentation":"KOREA: Locale","insertText":"KOREA"},{"label":"KOREAN","kind":"property","documentation":"KOREAN: Locale","insertText":"KOREAN"},{"label":"PRC","kind":"property","documentation":"PRC: Locale","insertText":"PRC"},{"label":"PRIVATE_USE_EXTENSION","kind":"property","documentation":"PRIVATE_USE_EXTENSION: char","insertText":"PRIVATE_USE_EXTENSION"},{"label":"ROOT","kind":"property","documentation":"ROOT: Locale","insertText":"ROOT"},{"label":"SIMPLIFIED_CHINESE","kind":"property","documentation":"SIMPLIFIED_CHINESE: Locale","insertText":"SIMPLIFIED_CHINESE"},{"label":"TAIWAN","kind":"property","documentation":"TAIWAN: Locale","insertText":"TAIWAN"},{"label":"TRADITIONAL_CHINESE","kind":"property","documentation":"TRADITIONAL_CHINESE: Locale","insertText":"TRADITIONAL_CHINESE"},{"label":"UK","kind":"property","documentation":"UK: Locale","insertText":"UK"},{"label":"UNICODE_LOCALE_EXTENSION","kind":"property","documentation":"UNICODE_LOCALE_EXTENSION: char","insertText":"UNICODE_LOCALE_EXTENSION"},{"label":"US","kind":"property","documentation":"US: Locale","insertText":"US"},{"label":"filter","kind":"method","documentation":"filter(List a, Collection b): List","insertText":"filter"},{"label":"filterTags","kind":"method","documentation":"filterTags(List a, Collection b): List","insertText":"filterTags"},{"label":"forLanguageTag","kind":"method","documentation":"forLanguageTag(String a): Locale","insertText":"forLanguageTag"},{"label":"getAvailableLocales","kind":"method","documentation":"getAvailableLocales(): Locale[]","insertText":"getAvailableLocales"},{"label":"getDefault","kind":"method","documentation":"getDefault(Locale.Category a): Locale","insertText":"getDefault"},{"label":"getISOCountries","kind":"method","documentation":"getISOCountries(): String[]","insertText":"getISOCountries"},{"label":"getISOLanguages","kind":"method","documentation":"getISOLanguages(): String[]","insertText":"getISOLanguages"},{"label":"lookup","kind":"method","documentation":"lookup(List a, Collection b): Locale","insertText":"lookup"},{"label":"lookupTag","kind":"method","documentation":"lookupTag(List a, Collection b): String","insertText":"lookupTag"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getCountry","kind":"method","documentation":"getCountry(): String","insertText":"getCountry"},{"label":"getDisplayCountry","kind":"method","documentation":"getDisplayCountry(Locale a): String","insertText":"getDisplayCountry"},{"label":"getDisplayLanguage","kind":"method","documentation":"getDisplayLanguage(Locale a): String","insertText":"getDisplayLanguage"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(Locale a): String","insertText":"getDisplayName"},{"label":"getDisplayScript","kind":"method","documentation":"getDisplayScript(Locale a): String","insertText":"getDisplayScript"},{"label":"getDisplayVariant","kind":"method","documentation":"getDisplayVariant(Locale a): String","insertText":"getDisplayVariant"},{"label":"getExtension","kind":"method","documentation":"getExtension(char a): String","insertText":"getExtension"},{"label":"getExtensionKeys","kind":"method","documentation":"getExtensionKeys(): Set","insertText":"getExtensionKeys"},{"label":"getISO3Country","kind":"method","documentation":"getISO3Country(): String","insertText":"getISO3Country"},{"label":"getISO3Language","kind":"method","documentation":"getISO3Language(): String","insertText":"getISO3Language"},{"label":"getLanguage","kind":"method","documentation":"getLanguage(): String","insertText":"getLanguage"},{"label":"getScript","kind":"method","documentation":"getScript(): String","insertText":"getScript"},{"label":"getUnicodeLocaleAttributes","kind":"method","documentation":"getUnicodeLocaleAttributes(): Set","insertText":"getUnicodeLocaleAttributes"},{"label":"getUnicodeLocaleKeys","kind":"method","documentation":"getUnicodeLocaleKeys(): Set","insertText":"getUnicodeLocaleKeys"},{"label":"getUnicodeLocaleType","kind":"method","documentation":"getUnicodeLocaleType(String a): String","insertText":"getUnicodeLocaleType"},{"label":"getVariant","kind":"method","documentation":"getVariant(): String","insertText":"getVariant"},{"label":"hasExtensions","kind":"method","documentation":"hasExtensions(): boolean","insertText":"hasExtensions"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"stripExtensions","kind":"method","documentation":"stripExtensions(): Locale","insertText":"stripExtensions"},{"label":"toLanguageTag","kind":"method","documentation":"toLanguageTag(): String","insertText":"toLanguageTag"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Locale","kind":"constructor","documentation":"Constructor: Locale","insertText":"Locale"}},{"label":"Builder","kind":"class","documentation":"Class: Builder","insertText":"Builder","properties":[{"label":"addUnicodeLocaleAttribute","kind":"method","documentation":"addUnicodeLocaleAttribute(String a): Locale.Builder","insertText":"addUnicodeLocaleAttribute"},{"label":"build","kind":"method","documentation":"build(): Locale","insertText":"build"},{"label":"clear","kind":"method","documentation":"clear(): Locale.Builder","insertText":"clear"},{"label":"clearExtensions","kind":"method","documentation":"clearExtensions(): Locale.Builder","insertText":"clearExtensions"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"removeUnicodeLocaleAttribute","kind":"method","documentation":"removeUnicodeLocaleAttribute(String a): Locale.Builder","insertText":"removeUnicodeLocaleAttribute"},{"label":"setExtension","kind":"method","documentation":"setExtension(char a, String b): Locale.Builder","insertText":"setExtension"},{"label":"setLanguage","kind":"method","documentation":"setLanguage(String a): Locale.Builder","insertText":"setLanguage"},{"label":"setLanguageTag","kind":"method","documentation":"setLanguageTag(String a): Locale.Builder","insertText":"setLanguageTag"},{"label":"setLocale","kind":"method","documentation":"setLocale(Locale a): Locale.Builder","insertText":"setLocale"},{"label":"setRegion","kind":"method","documentation":"setRegion(String a): Locale.Builder","insertText":"setRegion"},{"label":"setScript","kind":"method","documentation":"setScript(String a): Locale.Builder","insertText":"setScript"},{"label":"setUnicodeLocaleKeyword","kind":"method","documentation":"setUnicodeLocaleKeyword(String a, String b): Locale.Builder","insertText":"setUnicodeLocaleKeyword"},{"label":"setVariant","kind":"method","documentation":"setVariant(String a): Locale.Builder","insertText":"setVariant"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Builder","kind":"constructor","documentation":"Constructor: Builder","insertText":"Builder"}},{"label":"Category","kind":"class","documentation":"Class: Category","insertText":"Category","properties":[{"label":"DISPLAY","kind":"property","documentation":"DISPLAY: Locale.Category","insertText":"DISPLAY"},{"label":"FORMAT","kind":"property","documentation":"FORMAT: Locale.Category","insertText":"FORMAT"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): Locale.Category","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): Locale.Category[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"FilteringMode","kind":"class","documentation":"Class: FilteringMode","insertText":"FilteringMode","properties":[{"label":"AUTOSELECT_FILTERING","kind":"property","documentation":"AUTOSELECT_FILTERING: Locale.FilteringMode","insertText":"AUTOSELECT_FILTERING"},{"label":"EXTENDED_FILTERING","kind":"property","documentation":"EXTENDED_FILTERING: Locale.FilteringMode","insertText":"EXTENDED_FILTERING"},{"label":"IGNORE_EXTENDED_RANGES","kind":"property","documentation":"IGNORE_EXTENDED_RANGES: Locale.FilteringMode","insertText":"IGNORE_EXTENDED_RANGES"},{"label":"MAP_EXTENDED_RANGES","kind":"property","documentation":"MAP_EXTENDED_RANGES: Locale.FilteringMode","insertText":"MAP_EXTENDED_RANGES"},{"label":"REJECT_EXTENDED_RANGES","kind":"property","documentation":"REJECT_EXTENDED_RANGES: Locale.FilteringMode","insertText":"REJECT_EXTENDED_RANGES"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): Locale.FilteringMode","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): Locale.FilteringMode[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LanguageRange","kind":"class","documentation":"Class: LanguageRange","insertText":"LanguageRange","properties":[{"label":"MAX_WEIGHT","kind":"property","documentation":"MAX_WEIGHT: double","insertText":"MAX_WEIGHT"},{"label":"MIN_WEIGHT","kind":"property","documentation":"MIN_WEIGHT: double","insertText":"MIN_WEIGHT"},{"label":"mapEquivalents","kind":"method","documentation":"mapEquivalents(List a, Map b): List","insertText":"mapEquivalents"},{"label":"parse","kind":"method","documentation":"parse(String a, Map b | String a): List","insertText":"parse"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getRange","kind":"method","documentation":"getRange(): String","insertText":"getRange"},{"label":"getWeight","kind":"method","documentation":"getWeight(): double","insertText":"getWeight"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"LanguageRange","kind":"constructor","documentation":"Constructor: LanguageRange","insertText":"LanguageRange"}},{"label":"LongSummaryStatistics","kind":"class","documentation":"Class: LongSummaryStatistics","insertText":"LongSummaryStatistics","properties":[{"label":"accept","kind":"method","documentation":"accept(long a): void","insertText":"accept"},{"label":"andThen","kind":"method","documentation":"andThen(LongConsumer a): LongConsumer","insertText":"andThen"},{"label":"combine","kind":"method","documentation":"combine(LongSummaryStatistics a): void","insertText":"combine"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAverage","kind":"method","documentation":"getAverage(): double","insertText":"getAverage"},{"label":"getCount","kind":"method","documentation":"getCount(): long","insertText":"getCount"},{"label":"getMax","kind":"method","documentation":"getMax(): long","insertText":"getMax"},{"label":"getMin","kind":"method","documentation":"getMin(): long","insertText":"getMin"},{"label":"getSum","kind":"method","documentation":"getSum(): long","insertText":"getSum"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"LongSummaryStatistics","kind":"constructor","documentation":"Constructor: LongSummaryStatistics","insertText":"LongSummaryStatistics"}},{"label":"Map","kind":"class","documentation":"Class: Map","insertText":"Map","properties":[{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}]},{"label":"Entry","kind":"class","documentation":"Class: Entry","insertText":"Entry","properties":[{"label":"comparingByKey","kind":"method","documentation":"comparingByKey(Comparator a): Comparator","insertText":"comparingByKey"},{"label":"comparingByValue","kind":"method","documentation":"comparingByValue(Comparator a): Comparator","insertText":"comparingByValue"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getKey","kind":"method","documentation":"getKey(): def","insertText":"getKey"},{"label":"getValue","kind":"method","documentation":"getValue(): def","insertText":"getValue"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"setValue","kind":"method","documentation":"setValue(def a): def","insertText":"setValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"MissingFormatArgumentException","kind":"class","documentation":"Class: MissingFormatArgumentException","insertText":"MissingFormatArgumentException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getFormatSpecifier","kind":"method","documentation":"getFormatSpecifier(): String","insertText":"getFormatSpecifier"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"MissingFormatArgumentException","kind":"constructor","documentation":"Constructor: MissingFormatArgumentException","insertText":"MissingFormatArgumentException"}},{"label":"MissingFormatWidthException","kind":"class","documentation":"Class: MissingFormatWidthException","insertText":"MissingFormatWidthException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getFormatSpecifier","kind":"method","documentation":"getFormatSpecifier(): String","insertText":"getFormatSpecifier"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"MissingFormatWidthException","kind":"constructor","documentation":"Constructor: MissingFormatWidthException","insertText":"MissingFormatWidthException"}},{"label":"MissingResourceException","kind":"class","documentation":"Class: MissingResourceException","insertText":"MissingResourceException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getClassName","kind":"method","documentation":"getClassName(): String","insertText":"getClassName"},{"label":"getKey","kind":"method","documentation":"getKey(): String","insertText":"getKey"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"MissingResourceException","kind":"constructor","documentation":"Constructor: MissingResourceException","insertText":"MissingResourceException"}},{"label":"NavigableMap","kind":"class","documentation":"Class: NavigableMap","insertText":"NavigableMap","properties":[{"label":"ceilingEntry","kind":"method","documentation":"ceilingEntry(def a): Map.Entry","insertText":"ceilingEntry"},{"label":"ceilingKey","kind":"method","documentation":"ceilingKey(def a): def","insertText":"ceilingKey"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"comparator","kind":"method","documentation":"comparator(): Comparator","insertText":"comparator"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"descendingKeySet","kind":"method","documentation":"descendingKeySet(): NavigableSet","insertText":"descendingKeySet"},{"label":"descendingMap","kind":"method","documentation":"descendingMap(): NavigableMap","insertText":"descendingMap"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"firstEntry","kind":"method","documentation":"firstEntry(): Map.Entry","insertText":"firstEntry"},{"label":"firstKey","kind":"method","documentation":"firstKey(): def","insertText":"firstKey"},{"label":"floorEntry","kind":"method","documentation":"floorEntry(def a): Map.Entry","insertText":"floorEntry"},{"label":"floorKey","kind":"method","documentation":"floorKey(def a): def","insertText":"floorKey"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"headMap","kind":"method","documentation":"headMap(def a, boolean b | def a): NavigableMap | SortedMap","insertText":"headMap"},{"label":"higherEntry","kind":"method","documentation":"higherEntry(def a): Map.Entry","insertText":"higherEntry"},{"label":"higherKey","kind":"method","documentation":"higherKey(def a): def","insertText":"higherKey"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"lastEntry","kind":"method","documentation":"lastEntry(): Map.Entry","insertText":"lastEntry"},{"label":"lastKey","kind":"method","documentation":"lastKey(): def","insertText":"lastKey"},{"label":"lowerEntry","kind":"method","documentation":"lowerEntry(def a): Map.Entry","insertText":"lowerEntry"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"navigableKeySet","kind":"method","documentation":"navigableKeySet(): NavigableSet","insertText":"navigableKeySet"},{"label":"pollFirstEntry","kind":"method","documentation":"pollFirstEntry(): Map.Entry","insertText":"pollFirstEntry"},{"label":"pollLastEntry","kind":"method","documentation":"pollLastEntry(): Map.Entry","insertText":"pollLastEntry"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"subMap","kind":"method","documentation":"subMap(def a, boolean b, def c, boolean d | def a, def b): NavigableMap | SortedMap","insertText":"subMap"},{"label":"tailMap","kind":"method","documentation":"tailMap(def a, boolean b | def a): NavigableMap | SortedMap","insertText":"tailMap"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}]},{"label":"NavigableSet","kind":"class","documentation":"Class: NavigableSet","insertText":"NavigableSet","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"ceiling","kind":"method","documentation":"ceiling(def a): def","insertText":"ceiling"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"comparator","kind":"method","documentation":"comparator(): Comparator","insertText":"comparator"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"descendingIterator","kind":"method","documentation":"descendingIterator(): Iterator","insertText":"descendingIterator"},{"label":"descendingSet","kind":"method","documentation":"descendingSet(): NavigableSet","insertText":"descendingSet"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"first","kind":"method","documentation":"first(): def","insertText":"first"},{"label":"floor","kind":"method","documentation":"floor(def a): def","insertText":"floor"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"headSet","kind":"method","documentation":"headSet(def a, boolean b | def a): NavigableSet | SortedSet","insertText":"headSet"},{"label":"higher","kind":"method","documentation":"higher(def a): def","insertText":"higher"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"last","kind":"method","documentation":"last(): def","insertText":"last"},{"label":"lower","kind":"method","documentation":"lower(def a): def","insertText":"lower"},{"label":"pollFirst","kind":"method","documentation":"pollFirst(): def","insertText":"pollFirst"},{"label":"pollLast","kind":"method","documentation":"pollLast(): def","insertText":"pollLast"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subSet","kind":"method","documentation":"subSet(def a, boolean b, def c, boolean d | def a, def b): NavigableSet | SortedSet","insertText":"subSet"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"tailSet","kind":"method","documentation":"tailSet(def a, boolean b | def a): NavigableSet | SortedSet","insertText":"tailSet"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"NoSuchElementException","kind":"class","documentation":"Class: NoSuchElementException","insertText":"NoSuchElementException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"NoSuchElementException","kind":"constructor","documentation":"Constructor: NoSuchElementException","insertText":"NoSuchElementException"}},{"label":"Objects","kind":"class","documentation":"Class: Objects","insertText":"Objects","properties":[{"label":"compare","kind":"method","documentation":"compare(def a, def b, Comparator c): int","insertText":"compare"},{"label":"deepEquals","kind":"method","documentation":"deepEquals(Object a, Object b): boolean","insertText":"deepEquals"},{"label":"equals","kind":"method","documentation":"equals(Object a, Object b): boolean","insertText":"equals"},{"label":"hash","kind":"method","documentation":"hash(Object[] a): int","insertText":"hash"},{"label":"hashCode","kind":"method","documentation":"hashCode(Object a): int","insertText":"hashCode"},{"label":"isNull","kind":"method","documentation":"isNull(Object a): boolean","insertText":"isNull"},{"label":"nonNull","kind":"method","documentation":"nonNull(Object a): boolean","insertText":"nonNull"},{"label":"requireNonNull","kind":"method","documentation":"requireNonNull(def a, String b | def a): def","insertText":"requireNonNull"},{"label":"toString","kind":"method","documentation":"toString(Object a, String b | Object a): String","insertText":"toString"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Observable","kind":"class","documentation":"Class: Observable","insertText":"Observable","properties":[{"label":"addObserver","kind":"method","documentation":"addObserver(Observer a): void","insertText":"addObserver"},{"label":"countObservers","kind":"method","documentation":"countObservers(): int","insertText":"countObservers"},{"label":"deleteObserver","kind":"method","documentation":"deleteObserver(Observer a): void","insertText":"deleteObserver"},{"label":"deleteObservers","kind":"method","documentation":"deleteObservers(): void","insertText":"deleteObservers"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hasChanged","kind":"method","documentation":"hasChanged(): boolean","insertText":"hasChanged"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"notifyObservers","kind":"method","documentation":"notifyObservers(Object a): void","insertText":"notifyObservers"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Observable","kind":"constructor","documentation":"Constructor: Observable","insertText":"Observable"}},{"label":"Observer","kind":"class","documentation":"Class: Observer","insertText":"Observer","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"update","kind":"method","documentation":"update(Observable a, Object b): void","insertText":"update"}]},{"label":"Optional","kind":"class","documentation":"Class: Optional","insertText":"Optional","properties":[{"label":"empty","kind":"method","documentation":"empty(): Optional","insertText":"empty"},{"label":"of","kind":"method","documentation":"of(def a): Optional","insertText":"of"},{"label":"ofNullable","kind":"method","documentation":"ofNullable(def a): Optional","insertText":"ofNullable"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"filter","kind":"method","documentation":"filter(Predicate a): Optional","insertText":"filter"},{"label":"flatMap","kind":"method","documentation":"flatMap(Function a): Optional","insertText":"flatMap"},{"label":"get","kind":"method","documentation":"get(): def","insertText":"get"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"ifPresent","kind":"method","documentation":"ifPresent(Consumer a): void","insertText":"ifPresent"},{"label":"isPresent","kind":"method","documentation":"isPresent(): boolean","insertText":"isPresent"},{"label":"map","kind":"method","documentation":"map(Function a): Optional","insertText":"map"},{"label":"orElse","kind":"method","documentation":"orElse(def a): def","insertText":"orElse"},{"label":"orElseGet","kind":"method","documentation":"orElseGet(Supplier a): def","insertText":"orElseGet"},{"label":"orElseThrow","kind":"method","documentation":"orElseThrow(Supplier a): def","insertText":"orElseThrow"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"OptionalDouble","kind":"class","documentation":"Class: OptionalDouble","insertText":"OptionalDouble","properties":[{"label":"empty","kind":"method","documentation":"empty(): OptionalDouble","insertText":"empty"},{"label":"of","kind":"method","documentation":"of(double a): OptionalDouble","insertText":"of"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAsDouble","kind":"method","documentation":"getAsDouble(): double","insertText":"getAsDouble"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"ifPresent","kind":"method","documentation":"ifPresent(DoubleConsumer a): void","insertText":"ifPresent"},{"label":"isPresent","kind":"method","documentation":"isPresent(): boolean","insertText":"isPresent"},{"label":"orElse","kind":"method","documentation":"orElse(double a): double","insertText":"orElse"},{"label":"orElseGet","kind":"method","documentation":"orElseGet(DoubleSupplier a): double","insertText":"orElseGet"},{"label":"orElseThrow","kind":"method","documentation":"orElseThrow(Supplier a): double","insertText":"orElseThrow"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"OptionalInt","kind":"class","documentation":"Class: OptionalInt","insertText":"OptionalInt","properties":[{"label":"empty","kind":"method","documentation":"empty(): OptionalInt","insertText":"empty"},{"label":"of","kind":"method","documentation":"of(int a): OptionalInt","insertText":"of"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAsInt","kind":"method","documentation":"getAsInt(): int","insertText":"getAsInt"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"ifPresent","kind":"method","documentation":"ifPresent(IntConsumer a): void","insertText":"ifPresent"},{"label":"isPresent","kind":"method","documentation":"isPresent(): boolean","insertText":"isPresent"},{"label":"orElse","kind":"method","documentation":"orElse(int a): int","insertText":"orElse"},{"label":"orElseGet","kind":"method","documentation":"orElseGet(IntSupplier a): int","insertText":"orElseGet"},{"label":"orElseThrow","kind":"method","documentation":"orElseThrow(Supplier a): int","insertText":"orElseThrow"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"OptionalLong","kind":"class","documentation":"Class: OptionalLong","insertText":"OptionalLong","properties":[{"label":"empty","kind":"method","documentation":"empty(): OptionalLong","insertText":"empty"},{"label":"of","kind":"method","documentation":"of(long a): OptionalLong","insertText":"of"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAsLong","kind":"method","documentation":"getAsLong(): long","insertText":"getAsLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"ifPresent","kind":"method","documentation":"ifPresent(LongConsumer a): void","insertText":"ifPresent"},{"label":"isPresent","kind":"method","documentation":"isPresent(): boolean","insertText":"isPresent"},{"label":"orElse","kind":"method","documentation":"orElse(long a): long","insertText":"orElse"},{"label":"orElseGet","kind":"method","documentation":"orElseGet(LongSupplier a): long","insertText":"orElseGet"},{"label":"orElseThrow","kind":"method","documentation":"orElseThrow(Supplier a): long","insertText":"orElseThrow"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"PrimitiveIterator","kind":"class","documentation":"Class: PrimitiveIterator","insertText":"PrimitiveIterator","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(def a): void","insertText":"forEachRemaining"},{"label":"hasNext","kind":"method","documentation":"hasNext(): boolean","insertText":"hasNext"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"next","kind":"method","documentation":"next(): def","insertText":"next"},{"label":"remove","kind":"method","documentation":"remove(): void","insertText":"remove"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"OfDouble","kind":"class","documentation":"Class: OfDouble","insertText":"OfDouble","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(def a): void","insertText":"forEachRemaining"},{"label":"hasNext","kind":"method","documentation":"hasNext(): boolean","insertText":"hasNext"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"next","kind":"method","documentation":"next(): Double","insertText":"next"},{"label":"nextDouble","kind":"method","documentation":"nextDouble(): double","insertText":"nextDouble"},{"label":"remove","kind":"method","documentation":"remove(): void","insertText":"remove"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"OfInt","kind":"class","documentation":"Class: OfInt","insertText":"OfInt","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(def a): void","insertText":"forEachRemaining"},{"label":"hasNext","kind":"method","documentation":"hasNext(): boolean","insertText":"hasNext"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"next","kind":"method","documentation":"next(): Integer","insertText":"next"},{"label":"nextInt","kind":"method","documentation":"nextInt(): int","insertText":"nextInt"},{"label":"remove","kind":"method","documentation":"remove(): void","insertText":"remove"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"OfLong","kind":"class","documentation":"Class: OfLong","insertText":"OfLong","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(def a): void","insertText":"forEachRemaining"},{"label":"hasNext","kind":"method","documentation":"hasNext(): boolean","insertText":"hasNext"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"next","kind":"method","documentation":"next(): Long","insertText":"next"},{"label":"nextLong","kind":"method","documentation":"nextLong(): long","insertText":"nextLong"},{"label":"remove","kind":"method","documentation":"remove(): void","insertText":"remove"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"PriorityQueue","kind":"class","documentation":"Class: PriorityQueue","insertText":"PriorityQueue","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"element","kind":"method","documentation":"element(): def","insertText":"element"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"offer","kind":"method","documentation":"offer(def a): boolean","insertText":"offer"},{"label":"peek","kind":"method","documentation":"peek(): def","insertText":"peek"},{"label":"poll","kind":"method","documentation":"poll(): def","insertText":"poll"},{"label":"remove","kind":"method","documentation":"remove(): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"PriorityQueue","kind":"constructor","documentation":"Constructor: PriorityQueue","insertText":"PriorityQueue"}},{"label":"Queue","kind":"class","documentation":"Class: Queue","insertText":"Queue","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"element","kind":"method","documentation":"element(): def","insertText":"element"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"offer","kind":"method","documentation":"offer(def a): boolean","insertText":"offer"},{"label":"peek","kind":"method","documentation":"peek(): def","insertText":"peek"},{"label":"poll","kind":"method","documentation":"poll(): def","insertText":"poll"},{"label":"remove","kind":"method","documentation":"remove(): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Random","kind":"class","documentation":"Class: Random","insertText":"Random","properties":[{"label":"doubles","kind":"method","documentation":"doubles(long a, double b, double c | long a): DoubleStream","insertText":"doubles"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"ints","kind":"method","documentation":"ints(long a, int b, int c | long a): IntStream","insertText":"ints"},{"label":"longs","kind":"method","documentation":"longs(long a, long b, long c | long a): LongStream","insertText":"longs"},{"label":"nextBoolean","kind":"method","documentation":"nextBoolean(): boolean","insertText":"nextBoolean"},{"label":"nextBytes","kind":"method","documentation":"nextBytes(byte[] a): void","insertText":"nextBytes"},{"label":"nextDouble","kind":"method","documentation":"nextDouble(): double","insertText":"nextDouble"},{"label":"nextFloat","kind":"method","documentation":"nextFloat(): float","insertText":"nextFloat"},{"label":"nextGaussian","kind":"method","documentation":"nextGaussian(): double","insertText":"nextGaussian"},{"label":"nextInt","kind":"method","documentation":"nextInt(int a): int","insertText":"nextInt"},{"label":"nextLong","kind":"method","documentation":"nextLong(): long","insertText":"nextLong"},{"label":"setSeed","kind":"method","documentation":"setSeed(long a): void","insertText":"setSeed"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Random","kind":"constructor","documentation":"Constructor: Random","insertText":"Random"}},{"label":"RandomAccess","kind":"class","documentation":"Class: RandomAccess","insertText":"RandomAccess","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Set","kind":"class","documentation":"Class: Set","insertText":"Set","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"SimpleTimeZone","kind":"class","documentation":"Class: SimpleTimeZone","insertText":"SimpleTimeZone","properties":[{"label":"STANDARD_TIME","kind":"property","documentation":"STANDARD_TIME: int","insertText":"STANDARD_TIME"},{"label":"UTC_TIME","kind":"property","documentation":"UTC_TIME: int","insertText":"UTC_TIME"},{"label":"WALL_TIME","kind":"property","documentation":"WALL_TIME: int","insertText":"WALL_TIME"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDSTSavings","kind":"method","documentation":"getDSTSavings(): int","insertText":"getDSTSavings"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(boolean a, int b, Locale c | boolean a, int b | Locale a): String","insertText":"getDisplayName"},{"label":"getID","kind":"method","documentation":"getID(): String","insertText":"getID"},{"label":"getOffset","kind":"method","documentation":"getOffset(int a, int b, int c, int d, int e, int f | long a): int","insertText":"getOffset"},{"label":"getRawOffset","kind":"method","documentation":"getRawOffset(): int","insertText":"getRawOffset"},{"label":"hasSameRules","kind":"method","documentation":"hasSameRules(TimeZone a): boolean","insertText":"hasSameRules"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"inDaylightTime","kind":"method","documentation":"inDaylightTime(Date a): boolean","insertText":"inDaylightTime"},{"label":"observesDaylightTime","kind":"method","documentation":"observesDaylightTime(): boolean","insertText":"observesDaylightTime"},{"label":"setDSTSavings","kind":"method","documentation":"setDSTSavings(int a): void","insertText":"setDSTSavings"},{"label":"setEndRule","kind":"method","documentation":"setEndRule(int a, int b, int c, int d, boolean e | int a, int b, int c, int d | int a, int b, int c): void","insertText":"setEndRule"},{"label":"setRawOffset","kind":"method","documentation":"setRawOffset(int a): void","insertText":"setRawOffset"},{"label":"setStartRule","kind":"method","documentation":"setStartRule(int a, int b, int c, int d, boolean e | int a, int b, int c, int d | int a, int b, int c): void","insertText":"setStartRule"},{"label":"setStartYear","kind":"method","documentation":"setStartYear(int a): void","insertText":"setStartYear"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toZoneId","kind":"method","documentation":"toZoneId(): ZoneId","insertText":"toZoneId"},{"label":"useDaylightTime","kind":"method","documentation":"useDaylightTime(): boolean","insertText":"useDaylightTime"}],"constructorDefinition":{"label":"SimpleTimeZone","kind":"constructor","documentation":"Constructor: SimpleTimeZone","insertText":"SimpleTimeZone"}},{"label":"SortedMap","kind":"class","documentation":"Class: SortedMap","insertText":"SortedMap","properties":[{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"comparator","kind":"method","documentation":"comparator(): Comparator","insertText":"comparator"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"firstKey","kind":"method","documentation":"firstKey(): def","insertText":"firstKey"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"headMap","kind":"method","documentation":"headMap(def a): SortedMap","insertText":"headMap"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"lastKey","kind":"method","documentation":"lastKey(): def","insertText":"lastKey"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"subMap","kind":"method","documentation":"subMap(def a, def b): SortedMap","insertText":"subMap"},{"label":"tailMap","kind":"method","documentation":"tailMap(def a): SortedMap","insertText":"tailMap"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}]},{"label":"SortedSet","kind":"class","documentation":"Class: SortedSet","insertText":"SortedSet","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"comparator","kind":"method","documentation":"comparator(): Comparator","insertText":"comparator"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"first","kind":"method","documentation":"first(): def","insertText":"first"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"headSet","kind":"method","documentation":"headSet(def a): SortedSet","insertText":"headSet"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"last","kind":"method","documentation":"last(): def","insertText":"last"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subSet","kind":"method","documentation":"subSet(def a, def b): SortedSet","insertText":"subSet"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"tailSet","kind":"method","documentation":"tailSet(def a): SortedSet","insertText":"tailSet"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Spliterator","kind":"class","documentation":"Class: Spliterator","insertText":"Spliterator","properties":[{"label":"CONCURRENT","kind":"property","documentation":"CONCURRENT: int","insertText":"CONCURRENT"},{"label":"DISTINCT","kind":"property","documentation":"DISTINCT: int","insertText":"DISTINCT"},{"label":"IMMUTABLE","kind":"property","documentation":"IMMUTABLE: int","insertText":"IMMUTABLE"},{"label":"NONNULL","kind":"property","documentation":"NONNULL: int","insertText":"NONNULL"},{"label":"ORDERED","kind":"property","documentation":"ORDERED: int","insertText":"ORDERED"},{"label":"SIZED","kind":"property","documentation":"SIZED: int","insertText":"SIZED"},{"label":"SORTED","kind":"property","documentation":"SORTED: int","insertText":"SORTED"},{"label":"SUBSIZED","kind":"property","documentation":"SUBSIZED: int","insertText":"SUBSIZED"},{"label":"characteristics","kind":"method","documentation":"characteristics(): int","insertText":"characteristics"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"estimateSize","kind":"method","documentation":"estimateSize(): long","insertText":"estimateSize"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(Consumer a): void","insertText":"forEachRemaining"},{"label":"getComparator","kind":"method","documentation":"getComparator(): Comparator","insertText":"getComparator"},{"label":"getExactSizeIfKnown","kind":"method","documentation":"getExactSizeIfKnown(): long","insertText":"getExactSizeIfKnown"},{"label":"hasCharacteristics","kind":"method","documentation":"hasCharacteristics(int a): boolean","insertText":"hasCharacteristics"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"tryAdvance","kind":"method","documentation":"tryAdvance(Consumer a): boolean","insertText":"tryAdvance"},{"label":"trySplit","kind":"method","documentation":"trySplit(): Spliterator","insertText":"trySplit"}]},{"label":"OfDouble","kind":"class","documentation":"Class: OfDouble","insertText":"OfDouble","properties":[{"label":"characteristics","kind":"method","documentation":"characteristics(): int","insertText":"characteristics"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"estimateSize","kind":"method","documentation":"estimateSize(): long","insertText":"estimateSize"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(def a): void","insertText":"forEachRemaining"},{"label":"getComparator","kind":"method","documentation":"getComparator(): Comparator","insertText":"getComparator"},{"label":"getExactSizeIfKnown","kind":"method","documentation":"getExactSizeIfKnown(): long","insertText":"getExactSizeIfKnown"},{"label":"hasCharacteristics","kind":"method","documentation":"hasCharacteristics(int a): boolean","insertText":"hasCharacteristics"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"tryAdvance","kind":"method","documentation":"tryAdvance(def a): boolean","insertText":"tryAdvance"},{"label":"trySplit","kind":"method","documentation":"trySplit(): Spliterator.OfDouble","insertText":"trySplit"}]},{"label":"OfInt","kind":"class","documentation":"Class: OfInt","insertText":"OfInt","properties":[{"label":"characteristics","kind":"method","documentation":"characteristics(): int","insertText":"characteristics"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"estimateSize","kind":"method","documentation":"estimateSize(): long","insertText":"estimateSize"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(def a): void","insertText":"forEachRemaining"},{"label":"getComparator","kind":"method","documentation":"getComparator(): Comparator","insertText":"getComparator"},{"label":"getExactSizeIfKnown","kind":"method","documentation":"getExactSizeIfKnown(): long","insertText":"getExactSizeIfKnown"},{"label":"hasCharacteristics","kind":"method","documentation":"hasCharacteristics(int a): boolean","insertText":"hasCharacteristics"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"tryAdvance","kind":"method","documentation":"tryAdvance(def a): boolean","insertText":"tryAdvance"},{"label":"trySplit","kind":"method","documentation":"trySplit(): Spliterator.OfInt","insertText":"trySplit"}]},{"label":"OfLong","kind":"class","documentation":"Class: OfLong","insertText":"OfLong","properties":[{"label":"characteristics","kind":"method","documentation":"characteristics(): int","insertText":"characteristics"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"estimateSize","kind":"method","documentation":"estimateSize(): long","insertText":"estimateSize"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(def a): void","insertText":"forEachRemaining"},{"label":"getComparator","kind":"method","documentation":"getComparator(): Comparator","insertText":"getComparator"},{"label":"getExactSizeIfKnown","kind":"method","documentation":"getExactSizeIfKnown(): long","insertText":"getExactSizeIfKnown"},{"label":"hasCharacteristics","kind":"method","documentation":"hasCharacteristics(int a): boolean","insertText":"hasCharacteristics"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"tryAdvance","kind":"method","documentation":"tryAdvance(def a): boolean","insertText":"tryAdvance"},{"label":"trySplit","kind":"method","documentation":"trySplit(): Spliterator.OfLong","insertText":"trySplit"}]},{"label":"OfPrimitive","kind":"class","documentation":"Class: OfPrimitive","insertText":"OfPrimitive","properties":[{"label":"characteristics","kind":"method","documentation":"characteristics(): int","insertText":"characteristics"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"estimateSize","kind":"method","documentation":"estimateSize(): long","insertText":"estimateSize"},{"label":"forEachRemaining","kind":"method","documentation":"forEachRemaining(def a): void","insertText":"forEachRemaining"},{"label":"getComparator","kind":"method","documentation":"getComparator(): Comparator","insertText":"getComparator"},{"label":"getExactSizeIfKnown","kind":"method","documentation":"getExactSizeIfKnown(): long","insertText":"getExactSizeIfKnown"},{"label":"hasCharacteristics","kind":"method","documentation":"hasCharacteristics(int a): boolean","insertText":"hasCharacteristics"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"tryAdvance","kind":"method","documentation":"tryAdvance(def a): boolean","insertText":"tryAdvance"},{"label":"trySplit","kind":"method","documentation":"trySplit(): Spliterator.OfPrimitive","insertText":"trySplit"}]},{"label":"Spliterators","kind":"class","documentation":"Class: Spliterators","insertText":"Spliterators","properties":[{"label":"emptyDoubleSpliterator","kind":"method","documentation":"emptyDoubleSpliterator(): Spliterator.OfDouble","insertText":"emptyDoubleSpliterator"},{"label":"emptyIntSpliterator","kind":"method","documentation":"emptyIntSpliterator(): Spliterator.OfInt","insertText":"emptyIntSpliterator"},{"label":"emptyLongSpliterator","kind":"method","documentation":"emptyLongSpliterator(): Spliterator.OfLong","insertText":"emptyLongSpliterator"},{"label":"emptySpliterator","kind":"method","documentation":"emptySpliterator(): Spliterator","insertText":"emptySpliterator"},{"label":"iterator","kind":"method","documentation":"iterator(Spliterator a): Iterator","insertText":"iterator"},{"label":"spliterator","kind":"method","documentation":"spliterator(Iterator a, long b, int c | Collection a, int b): Spliterator","insertText":"spliterator"},{"label":"spliteratorUnknownSize","kind":"method","documentation":"spliteratorUnknownSize(Iterator a, int b): Spliterator","insertText":"spliteratorUnknownSize"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Stack","kind":"class","documentation":"Class: Stack","insertText":"Stack","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"addElement","kind":"method","documentation":"addElement(def a): void","insertText":"addElement"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"copyInto","kind":"method","documentation":"copyInto(Object[] a): void","insertText":"copyInto"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"elementAt","kind":"method","documentation":"elementAt(int a): def","insertText":"elementAt"},{"label":"elements","kind":"method","documentation":"elements(): Enumeration","insertText":"elements"},{"label":"empty","kind":"method","documentation":"empty(): boolean","insertText":"empty"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"firstElement","kind":"method","documentation":"firstElement(): def","insertText":"firstElement"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"insertElementAt","kind":"method","documentation":"insertElementAt(def a, int b): void","insertText":"insertElementAt"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastElement","kind":"method","documentation":"lastElement(): def","insertText":"lastElement"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a, int b | def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"peek","kind":"method","documentation":"peek(): def","insertText":"peek"},{"label":"pop","kind":"method","documentation":"pop(): def","insertText":"pop"},{"label":"push","kind":"method","documentation":"push(def a): def","insertText":"push"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeAllElements","kind":"method","documentation":"removeAllElements(): void","insertText":"removeAllElements"},{"label":"removeElement","kind":"method","documentation":"removeElement(def a): boolean","insertText":"removeElement"},{"label":"removeElementAt","kind":"method","documentation":"removeElementAt(int a): void","insertText":"removeElementAt"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"search","kind":"method","documentation":"search(def a): int","insertText":"search"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"setElementAt","kind":"method","documentation":"setElementAt(def a, int b): void","insertText":"setElementAt"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Stack","kind":"constructor","documentation":"Constructor: Stack","insertText":"Stack"}},{"label":"StringJoiner","kind":"class","documentation":"Class: StringJoiner","insertText":"StringJoiner","properties":[{"label":"add","kind":"method","documentation":"add(CharSequence a): StringJoiner","insertText":"add"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"merge","kind":"method","documentation":"merge(StringJoiner a): StringJoiner","insertText":"merge"},{"label":"setEmptyValue","kind":"method","documentation":"setEmptyValue(CharSequence a): StringJoiner","insertText":"setEmptyValue"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"StringJoiner","kind":"constructor","documentation":"Constructor: StringJoiner","insertText":"StringJoiner"}},{"label":"StringTokenizer","kind":"class","documentation":"Class: StringTokenizer","insertText":"StringTokenizer","properties":[{"label":"countTokens","kind":"method","documentation":"countTokens(): int","insertText":"countTokens"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hasMoreElements","kind":"method","documentation":"hasMoreElements(): boolean","insertText":"hasMoreElements"},{"label":"hasMoreTokens","kind":"method","documentation":"hasMoreTokens(): boolean","insertText":"hasMoreTokens"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"nextElement","kind":"method","documentation":"nextElement(): def","insertText":"nextElement"},{"label":"nextToken","kind":"method","documentation":"nextToken(String a): String","insertText":"nextToken"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"StringTokenizer","kind":"constructor","documentation":"Constructor: StringTokenizer","insertText":"StringTokenizer"}},{"label":"TimeZone","kind":"class","documentation":"Class: TimeZone","insertText":"TimeZone","properties":[{"label":"LONG","kind":"property","documentation":"LONG: int","insertText":"LONG"},{"label":"SHORT","kind":"property","documentation":"SHORT: int","insertText":"SHORT"},{"label":"getAvailableIDs","kind":"method","documentation":"getAvailableIDs(int a): String[]","insertText":"getAvailableIDs"},{"label":"getDefault","kind":"method","documentation":"getDefault(): TimeZone","insertText":"getDefault"},{"label":"getTimeZone","kind":"method","documentation":"getTimeZone(String a): TimeZone","insertText":"getTimeZone"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDSTSavings","kind":"method","documentation":"getDSTSavings(): int","insertText":"getDSTSavings"},{"label":"getDisplayName","kind":"method","documentation":"getDisplayName(boolean a, int b, Locale c | boolean a, int b | Locale a): String","insertText":"getDisplayName"},{"label":"getID","kind":"method","documentation":"getID(): String","insertText":"getID"},{"label":"getOffset","kind":"method","documentation":"getOffset(int a, int b, int c, int d, int e, int f | long a): int","insertText":"getOffset"},{"label":"getRawOffset","kind":"method","documentation":"getRawOffset(): int","insertText":"getRawOffset"},{"label":"hasSameRules","kind":"method","documentation":"hasSameRules(TimeZone a): boolean","insertText":"hasSameRules"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"inDaylightTime","kind":"method","documentation":"inDaylightTime(Date a): boolean","insertText":"inDaylightTime"},{"label":"observesDaylightTime","kind":"method","documentation":"observesDaylightTime(): boolean","insertText":"observesDaylightTime"},{"label":"setRawOffset","kind":"method","documentation":"setRawOffset(int a): void","insertText":"setRawOffset"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toZoneId","kind":"method","documentation":"toZoneId(): ZoneId","insertText":"toZoneId"},{"label":"useDaylightTime","kind":"method","documentation":"useDaylightTime(): boolean","insertText":"useDaylightTime"}]},{"label":"TooManyListenersException","kind":"class","documentation":"Class: TooManyListenersException","insertText":"TooManyListenersException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"TooManyListenersException","kind":"constructor","documentation":"Constructor: TooManyListenersException","insertText":"TooManyListenersException"}},{"label":"TreeMap","kind":"class","documentation":"Class: TreeMap","insertText":"TreeMap","properties":[{"label":"ceilingEntry","kind":"method","documentation":"ceilingEntry(def a): Map.Entry","insertText":"ceilingEntry"},{"label":"ceilingKey","kind":"method","documentation":"ceilingKey(def a): def","insertText":"ceilingKey"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, BiFunction b | BiFunction a): def | List","insertText":"collect"},{"label":"comparator","kind":"method","documentation":"comparator(): Comparator","insertText":"comparator"},{"label":"compute","kind":"method","documentation":"compute(def a, BiFunction b): def","insertText":"compute"},{"label":"computeIfAbsent","kind":"method","documentation":"computeIfAbsent(def a, Function b): def","insertText":"computeIfAbsent"},{"label":"computeIfPresent","kind":"method","documentation":"computeIfPresent(def a, BiFunction b): def","insertText":"computeIfPresent"},{"label":"containsKey","kind":"method","documentation":"containsKey(def a): boolean","insertText":"containsKey"},{"label":"containsValue","kind":"method","documentation":"containsValue(def a): boolean","insertText":"containsValue"},{"label":"count","kind":"method","documentation":"count(BiPredicate a): int","insertText":"count"},{"label":"descendingKeySet","kind":"method","documentation":"descendingKeySet(): NavigableSet","insertText":"descendingKeySet"},{"label":"descendingMap","kind":"method","documentation":"descendingMap(): NavigableMap","insertText":"descendingMap"},{"label":"each","kind":"method","documentation":"each(BiConsumer a): def","insertText":"each"},{"label":"entrySet","kind":"method","documentation":"entrySet(): Set","insertText":"entrySet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(BiPredicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(BiPredicate a): Map.Entry","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(BiPredicate a): Map","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, BiFunction b | BiFunction a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(BiFunction a): List","insertText":"findResults"},{"label":"firstEntry","kind":"method","documentation":"firstEntry(): Map.Entry","insertText":"firstEntry"},{"label":"firstKey","kind":"method","documentation":"firstKey(): def","insertText":"firstKey"},{"label":"floorEntry","kind":"method","documentation":"floorEntry(def a): Map.Entry","insertText":"floorEntry"},{"label":"floorKey","kind":"method","documentation":"floorKey(def a): def","insertText":"floorKey"},{"label":"forEach","kind":"method","documentation":"forEach(BiConsumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(def a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getOrDefault","kind":"method","documentation":"getOrDefault(def a, def b): def","insertText":"getOrDefault"},{"label":"groupBy","kind":"method","documentation":"groupBy(BiFunction a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"headMap","kind":"method","documentation":"headMap(def a, boolean b | def a): NavigableMap | SortedMap","insertText":"headMap"},{"label":"higherEntry","kind":"method","documentation":"higherEntry(def a): Map.Entry","insertText":"higherEntry"},{"label":"higherKey","kind":"method","documentation":"higherKey(def a): def","insertText":"higherKey"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"keySet","kind":"method","documentation":"keySet(): Set","insertText":"keySet"},{"label":"lastEntry","kind":"method","documentation":"lastEntry(): Map.Entry","insertText":"lastEntry"},{"label":"lastKey","kind":"method","documentation":"lastKey(): def","insertText":"lastKey"},{"label":"lowerEntry","kind":"method","documentation":"lowerEntry(def a): Map.Entry","insertText":"lowerEntry"},{"label":"merge","kind":"method","documentation":"merge(def a, def b, BiFunction c): def","insertText":"merge"},{"label":"navigableKeySet","kind":"method","documentation":"navigableKeySet(): NavigableSet","insertText":"navigableKeySet"},{"label":"pollFirstEntry","kind":"method","documentation":"pollFirstEntry(): Map.Entry","insertText":"pollFirstEntry"},{"label":"pollLastEntry","kind":"method","documentation":"pollLastEntry(): Map.Entry","insertText":"pollLastEntry"},{"label":"put","kind":"method","documentation":"put(def a, def b): def","insertText":"put"},{"label":"putAll","kind":"method","documentation":"putAll(Map a): void","insertText":"putAll"},{"label":"putIfAbsent","kind":"method","documentation":"putIfAbsent(def a, def b): def","insertText":"putIfAbsent"},{"label":"remove","kind":"method","documentation":"remove(def a, def b | def a): boolean | def","insertText":"remove"},{"label":"replace","kind":"method","documentation":"replace(def a, def b, def c | def a, def b): boolean | def","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(BiFunction a): void","insertText":"replaceAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"subMap","kind":"method","documentation":"subMap(def a, boolean b, def c, boolean d | def a, def b): NavigableMap | SortedMap","insertText":"subMap"},{"label":"tailMap","kind":"method","documentation":"tailMap(def a, boolean b | def a): NavigableMap | SortedMap","insertText":"tailMap"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"values","kind":"method","documentation":"values(): Collection","insertText":"values"}],"constructorDefinition":{"label":"TreeMap","kind":"constructor","documentation":"Constructor: TreeMap","insertText":"TreeMap"}},{"label":"TreeSet","kind":"class","documentation":"Class: TreeSet","insertText":"TreeSet","properties":[{"label":"add","kind":"method","documentation":"add(def a): boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"ceiling","kind":"method","documentation":"ceiling(def a): def","insertText":"ceiling"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"comparator","kind":"method","documentation":"comparator(): Comparator","insertText":"comparator"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"descendingIterator","kind":"method","documentation":"descendingIterator(): Iterator","insertText":"descendingIterator"},{"label":"descendingSet","kind":"method","documentation":"descendingSet(): NavigableSet","insertText":"descendingSet"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"first","kind":"method","documentation":"first(): def","insertText":"first"},{"label":"floor","kind":"method","documentation":"floor(def a): def","insertText":"floor"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"headSet","kind":"method","documentation":"headSet(def a, boolean b | def a): NavigableSet | SortedSet","insertText":"headSet"},{"label":"higher","kind":"method","documentation":"higher(def a): def","insertText":"higher"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"last","kind":"method","documentation":"last(): def","insertText":"last"},{"label":"lower","kind":"method","documentation":"lower(def a): def","insertText":"lower"},{"label":"pollFirst","kind":"method","documentation":"pollFirst(): def","insertText":"pollFirst"},{"label":"pollLast","kind":"method","documentation":"pollLast(): def","insertText":"pollLast"},{"label":"remove","kind":"method","documentation":"remove(def a): boolean","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subSet","kind":"method","documentation":"subSet(def a, boolean b, def c, boolean d | def a, def b): NavigableSet | SortedSet","insertText":"subSet"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"tailSet","kind":"method","documentation":"tailSet(def a, boolean b | def a): NavigableSet | SortedSet","insertText":"tailSet"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"TreeSet","kind":"constructor","documentation":"Constructor: TreeSet","insertText":"TreeSet"}},{"label":"UUID","kind":"class","documentation":"Class: UUID","insertText":"UUID","properties":[{"label":"fromString","kind":"method","documentation":"fromString(String a): UUID","insertText":"fromString"},{"label":"nameUUIDFromBytes","kind":"method","documentation":"nameUUIDFromBytes(byte[] a): UUID","insertText":"nameUUIDFromBytes"},{"label":"randomUUID","kind":"method","documentation":"randomUUID(): UUID","insertText":"randomUUID"},{"label":"clockSequence","kind":"method","documentation":"clockSequence(): int","insertText":"clockSequence"},{"label":"compareTo","kind":"method","documentation":"compareTo(UUID a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLeastSignificantBits","kind":"method","documentation":"getLeastSignificantBits(): long","insertText":"getLeastSignificantBits"},{"label":"getMostSignificantBits","kind":"method","documentation":"getMostSignificantBits(): long","insertText":"getMostSignificantBits"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"node","kind":"method","documentation":"node(): long","insertText":"node"},{"label":"timestamp","kind":"method","documentation":"timestamp(): long","insertText":"timestamp"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"variant","kind":"method","documentation":"variant(): int","insertText":"variant"},{"label":"version","kind":"method","documentation":"version(): int","insertText":"version"}],"constructorDefinition":{"label":"UUID","kind":"constructor","documentation":"Constructor: UUID","insertText":"UUID"}},{"label":"UnknownFormatConversionException","kind":"class","documentation":"Class: UnknownFormatConversionException","insertText":"UnknownFormatConversionException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getConversion","kind":"method","documentation":"getConversion(): String","insertText":"getConversion"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"UnknownFormatConversionException","kind":"constructor","documentation":"Constructor: UnknownFormatConversionException","insertText":"UnknownFormatConversionException"}},{"label":"UnknownFormatFlagsException","kind":"class","documentation":"Class: UnknownFormatFlagsException","insertText":"UnknownFormatFlagsException","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getFlags","kind":"method","documentation":"getFlags(): String","insertText":"getFlags"},{"label":"getLocalizedMessage","kind":"method","documentation":"getLocalizedMessage(): String","insertText":"getLocalizedMessage"},{"label":"getMessage","kind":"method","documentation":"getMessage(): String","insertText":"getMessage"},{"label":"getStackTrace","kind":"method","documentation":"getStackTrace(): StackTraceElement[]","insertText":"getStackTrace"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"UnknownFormatFlagsException","kind":"constructor","documentation":"Constructor: UnknownFormatFlagsException","insertText":"UnknownFormatFlagsException"}},{"label":"Vector","kind":"class","documentation":"Class: Vector","insertText":"Vector","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"addElement","kind":"method","documentation":"addElement(def a): void","insertText":"addElement"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"clone","kind":"method","documentation":"clone(): def","insertText":"clone"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"copyInto","kind":"method","documentation":"copyInto(Object[] a): void","insertText":"copyInto"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"elementAt","kind":"method","documentation":"elementAt(int a): def","insertText":"elementAt"},{"label":"elements","kind":"method","documentation":"elements(): Enumeration","insertText":"elements"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"firstElement","kind":"method","documentation":"firstElement(): def","insertText":"firstElement"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): def","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"insertElementAt","kind":"method","documentation":"insertElementAt(def a, int b): void","insertText":"insertElementAt"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastElement","kind":"method","documentation":"lastElement(): def","insertText":"lastElement"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a, int b | def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeAllElements","kind":"method","documentation":"removeAllElements(): void","insertText":"removeAllElements"},{"label":"removeElement","kind":"method","documentation":"removeElement(def a): boolean","insertText":"removeElement"},{"label":"removeElementAt","kind":"method","documentation":"removeElementAt(int a): void","insertText":"removeElementAt"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"setElementAt","kind":"method","documentation":"setElementAt(def a, int b): void","insertText":"setElementAt"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}],"constructorDefinition":{"label":"Vector","kind":"constructor","documentation":"Constructor: Vector","insertText":"Vector"}},{"label":"BiConsumer","kind":"class","documentation":"Class: BiConsumer","insertText":"BiConsumer","properties":[{"label":"accept","kind":"method","documentation":"accept(def a, def b): void","insertText":"accept"},{"label":"andThen","kind":"method","documentation":"andThen(BiConsumer a): BiConsumer","insertText":"andThen"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"BiFunction","kind":"class","documentation":"Class: BiFunction","insertText":"BiFunction","properties":[{"label":"andThen","kind":"method","documentation":"andThen(Function a): BiFunction","insertText":"andThen"},{"label":"apply","kind":"method","documentation":"apply(def a, def b): def","insertText":"apply"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"BiPredicate","kind":"class","documentation":"Class: BiPredicate","insertText":"BiPredicate","properties":[{"label":"and","kind":"method","documentation":"and(BiPredicate a): BiPredicate","insertText":"and"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"negate","kind":"method","documentation":"negate(): BiPredicate","insertText":"negate"},{"label":"or","kind":"method","documentation":"or(BiPredicate a): BiPredicate","insertText":"or"},{"label":"test","kind":"method","documentation":"test(def a, def b): boolean","insertText":"test"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"BinaryOperator","kind":"class","documentation":"Class: BinaryOperator","insertText":"BinaryOperator","properties":[{"label":"maxBy","kind":"method","documentation":"maxBy(Comparator a): BinaryOperator","insertText":"maxBy"},{"label":"minBy","kind":"method","documentation":"minBy(Comparator a): BinaryOperator","insertText":"minBy"},{"label":"andThen","kind":"method","documentation":"andThen(Function a): BiFunction","insertText":"andThen"},{"label":"apply","kind":"method","documentation":"apply(def a, def b): def","insertText":"apply"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"BooleanSupplier","kind":"class","documentation":"Class: BooleanSupplier","insertText":"BooleanSupplier","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAsBoolean","kind":"method","documentation":"getAsBoolean(): boolean","insertText":"getAsBoolean"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Consumer","kind":"class","documentation":"Class: Consumer","insertText":"Consumer","properties":[{"label":"accept","kind":"method","documentation":"accept(def a): void","insertText":"accept"},{"label":"andThen","kind":"method","documentation":"andThen(Consumer a): Consumer","insertText":"andThen"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleBinaryOperator","kind":"class","documentation":"Class: DoubleBinaryOperator","insertText":"DoubleBinaryOperator","properties":[{"label":"applyAsDouble","kind":"method","documentation":"applyAsDouble(double a, double b): double","insertText":"applyAsDouble"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleConsumer","kind":"class","documentation":"Class: DoubleConsumer","insertText":"DoubleConsumer","properties":[{"label":"accept","kind":"method","documentation":"accept(double a): void","insertText":"accept"},{"label":"andThen","kind":"method","documentation":"andThen(DoubleConsumer a): DoubleConsumer","insertText":"andThen"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleFunction","kind":"class","documentation":"Class: DoubleFunction","insertText":"DoubleFunction","properties":[{"label":"apply","kind":"method","documentation":"apply(double a): def","insertText":"apply"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoublePredicate","kind":"class","documentation":"Class: DoublePredicate","insertText":"DoublePredicate","properties":[{"label":"and","kind":"method","documentation":"and(DoublePredicate a): DoublePredicate","insertText":"and"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"negate","kind":"method","documentation":"negate(): DoublePredicate","insertText":"negate"},{"label":"or","kind":"method","documentation":"or(DoublePredicate a): DoublePredicate","insertText":"or"},{"label":"test","kind":"method","documentation":"test(double a): boolean","insertText":"test"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleSupplier","kind":"class","documentation":"Class: DoubleSupplier","insertText":"DoubleSupplier","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAsDouble","kind":"method","documentation":"getAsDouble(): double","insertText":"getAsDouble"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleToIntFunction","kind":"class","documentation":"Class: DoubleToIntFunction","insertText":"DoubleToIntFunction","properties":[{"label":"applyAsInt","kind":"method","documentation":"applyAsInt(double a): int","insertText":"applyAsInt"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleToLongFunction","kind":"class","documentation":"Class: DoubleToLongFunction","insertText":"DoubleToLongFunction","properties":[{"label":"applyAsLong","kind":"method","documentation":"applyAsLong(double a): long","insertText":"applyAsLong"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleUnaryOperator","kind":"class","documentation":"Class: DoubleUnaryOperator","insertText":"DoubleUnaryOperator","properties":[{"label":"identity","kind":"method","documentation":"identity(): DoubleUnaryOperator","insertText":"identity"},{"label":"andThen","kind":"method","documentation":"andThen(DoubleUnaryOperator a): DoubleUnaryOperator","insertText":"andThen"},{"label":"applyAsDouble","kind":"method","documentation":"applyAsDouble(double a): double","insertText":"applyAsDouble"},{"label":"compose","kind":"method","documentation":"compose(DoubleUnaryOperator a): DoubleUnaryOperator","insertText":"compose"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Function","kind":"class","documentation":"Class: Function","insertText":"Function","properties":[{"label":"identity","kind":"method","documentation":"identity(): Function","insertText":"identity"},{"label":"andThen","kind":"method","documentation":"andThen(Function a): Function","insertText":"andThen"},{"label":"apply","kind":"method","documentation":"apply(def a): def","insertText":"apply"},{"label":"compose","kind":"method","documentation":"compose(Function a): Function","insertText":"compose"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntBinaryOperator","kind":"class","documentation":"Class: IntBinaryOperator","insertText":"IntBinaryOperator","properties":[{"label":"applyAsInt","kind":"method","documentation":"applyAsInt(int a, int b): int","insertText":"applyAsInt"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntConsumer","kind":"class","documentation":"Class: IntConsumer","insertText":"IntConsumer","properties":[{"label":"accept","kind":"method","documentation":"accept(int a): void","insertText":"accept"},{"label":"andThen","kind":"method","documentation":"andThen(IntConsumer a): IntConsumer","insertText":"andThen"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntFunction","kind":"class","documentation":"Class: IntFunction","insertText":"IntFunction","properties":[{"label":"apply","kind":"method","documentation":"apply(int a): def","insertText":"apply"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntPredicate","kind":"class","documentation":"Class: IntPredicate","insertText":"IntPredicate","properties":[{"label":"and","kind":"method","documentation":"and(IntPredicate a): IntPredicate","insertText":"and"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"negate","kind":"method","documentation":"negate(): IntPredicate","insertText":"negate"},{"label":"or","kind":"method","documentation":"or(IntPredicate a): IntPredicate","insertText":"or"},{"label":"test","kind":"method","documentation":"test(int a): boolean","insertText":"test"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntSupplier","kind":"class","documentation":"Class: IntSupplier","insertText":"IntSupplier","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAsInt","kind":"method","documentation":"getAsInt(): int","insertText":"getAsInt"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntToDoubleFunction","kind":"class","documentation":"Class: IntToDoubleFunction","insertText":"IntToDoubleFunction","properties":[{"label":"applyAsDouble","kind":"method","documentation":"applyAsDouble(int a): double","insertText":"applyAsDouble"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntToLongFunction","kind":"class","documentation":"Class: IntToLongFunction","insertText":"IntToLongFunction","properties":[{"label":"applyAsLong","kind":"method","documentation":"applyAsLong(int a): long","insertText":"applyAsLong"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntUnaryOperator","kind":"class","documentation":"Class: IntUnaryOperator","insertText":"IntUnaryOperator","properties":[{"label":"identity","kind":"method","documentation":"identity(): IntUnaryOperator","insertText":"identity"},{"label":"andThen","kind":"method","documentation":"andThen(IntUnaryOperator a): IntUnaryOperator","insertText":"andThen"},{"label":"applyAsInt","kind":"method","documentation":"applyAsInt(int a): int","insertText":"applyAsInt"},{"label":"compose","kind":"method","documentation":"compose(IntUnaryOperator a): IntUnaryOperator","insertText":"compose"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongBinaryOperator","kind":"class","documentation":"Class: LongBinaryOperator","insertText":"LongBinaryOperator","properties":[{"label":"applyAsLong","kind":"method","documentation":"applyAsLong(long a, long b): long","insertText":"applyAsLong"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongConsumer","kind":"class","documentation":"Class: LongConsumer","insertText":"LongConsumer","properties":[{"label":"accept","kind":"method","documentation":"accept(long a): void","insertText":"accept"},{"label":"andThen","kind":"method","documentation":"andThen(LongConsumer a): LongConsumer","insertText":"andThen"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongFunction","kind":"class","documentation":"Class: LongFunction","insertText":"LongFunction","properties":[{"label":"apply","kind":"method","documentation":"apply(long a): def","insertText":"apply"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongPredicate","kind":"class","documentation":"Class: LongPredicate","insertText":"LongPredicate","properties":[{"label":"and","kind":"method","documentation":"and(LongPredicate a): LongPredicate","insertText":"and"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"negate","kind":"method","documentation":"negate(): LongPredicate","insertText":"negate"},{"label":"or","kind":"method","documentation":"or(LongPredicate a): LongPredicate","insertText":"or"},{"label":"test","kind":"method","documentation":"test(long a): boolean","insertText":"test"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongSupplier","kind":"class","documentation":"Class: LongSupplier","insertText":"LongSupplier","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getAsLong","kind":"method","documentation":"getAsLong(): long","insertText":"getAsLong"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongToDoubleFunction","kind":"class","documentation":"Class: LongToDoubleFunction","insertText":"LongToDoubleFunction","properties":[{"label":"applyAsDouble","kind":"method","documentation":"applyAsDouble(long a): double","insertText":"applyAsDouble"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongToIntFunction","kind":"class","documentation":"Class: LongToIntFunction","insertText":"LongToIntFunction","properties":[{"label":"applyAsInt","kind":"method","documentation":"applyAsInt(long a): int","insertText":"applyAsInt"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongUnaryOperator","kind":"class","documentation":"Class: LongUnaryOperator","insertText":"LongUnaryOperator","properties":[{"label":"identity","kind":"method","documentation":"identity(): LongUnaryOperator","insertText":"identity"},{"label":"andThen","kind":"method","documentation":"andThen(LongUnaryOperator a): LongUnaryOperator","insertText":"andThen"},{"label":"applyAsLong","kind":"method","documentation":"applyAsLong(long a): long","insertText":"applyAsLong"},{"label":"compose","kind":"method","documentation":"compose(LongUnaryOperator a): LongUnaryOperator","insertText":"compose"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ObjDoubleConsumer","kind":"class","documentation":"Class: ObjDoubleConsumer","insertText":"ObjDoubleConsumer","properties":[{"label":"accept","kind":"method","documentation":"accept(def a, double b): void","insertText":"accept"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ObjIntConsumer","kind":"class","documentation":"Class: ObjIntConsumer","insertText":"ObjIntConsumer","properties":[{"label":"accept","kind":"method","documentation":"accept(def a, int b): void","insertText":"accept"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ObjLongConsumer","kind":"class","documentation":"Class: ObjLongConsumer","insertText":"ObjLongConsumer","properties":[{"label":"accept","kind":"method","documentation":"accept(def a, long b): void","insertText":"accept"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Predicate","kind":"class","documentation":"Class: Predicate","insertText":"Predicate","properties":[{"label":"isEqual","kind":"method","documentation":"isEqual(def a): Predicate","insertText":"isEqual"},{"label":"and","kind":"method","documentation":"and(Predicate a): Predicate","insertText":"and"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"negate","kind":"method","documentation":"negate(): Predicate","insertText":"negate"},{"label":"or","kind":"method","documentation":"or(Predicate a): Predicate","insertText":"or"},{"label":"test","kind":"method","documentation":"test(def a): boolean","insertText":"test"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Supplier","kind":"class","documentation":"Class: Supplier","insertText":"Supplier","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"get","kind":"method","documentation":"get(): def","insertText":"get"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ToDoubleBiFunction","kind":"class","documentation":"Class: ToDoubleBiFunction","insertText":"ToDoubleBiFunction","properties":[{"label":"applyAsDouble","kind":"method","documentation":"applyAsDouble(def a, def b): double","insertText":"applyAsDouble"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ToDoubleFunction","kind":"class","documentation":"Class: ToDoubleFunction","insertText":"ToDoubleFunction","properties":[{"label":"applyAsDouble","kind":"method","documentation":"applyAsDouble(def a): double","insertText":"applyAsDouble"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ToIntBiFunction","kind":"class","documentation":"Class: ToIntBiFunction","insertText":"ToIntBiFunction","properties":[{"label":"applyAsInt","kind":"method","documentation":"applyAsInt(def a, def b): int","insertText":"applyAsInt"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ToIntFunction","kind":"class","documentation":"Class: ToIntFunction","insertText":"ToIntFunction","properties":[{"label":"applyAsInt","kind":"method","documentation":"applyAsInt(def a): int","insertText":"applyAsInt"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ToLongBiFunction","kind":"class","documentation":"Class: ToLongBiFunction","insertText":"ToLongBiFunction","properties":[{"label":"applyAsLong","kind":"method","documentation":"applyAsLong(def a, def b): long","insertText":"applyAsLong"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"ToLongFunction","kind":"class","documentation":"Class: ToLongFunction","insertText":"ToLongFunction","properties":[{"label":"applyAsLong","kind":"method","documentation":"applyAsLong(def a): long","insertText":"applyAsLong"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"UnaryOperator","kind":"class","documentation":"Class: UnaryOperator","insertText":"UnaryOperator","properties":[{"label":"identity","kind":"method","documentation":"identity(): UnaryOperator","insertText":"identity"},{"label":"andThen","kind":"method","documentation":"andThen(Function a): Function","insertText":"andThen"},{"label":"apply","kind":"method","documentation":"apply(def a): def","insertText":"apply"},{"label":"compose","kind":"method","documentation":"compose(Function a): Function","insertText":"compose"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Matcher","kind":"class","documentation":"Class: Matcher","insertText":"Matcher","properties":[{"label":"quoteReplacement","kind":"method","documentation":"quoteReplacement(String a): String","insertText":"quoteReplacement"},{"label":"end","kind":"method","documentation":"end(int a): int","insertText":"end"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"find","kind":"method","documentation":"find(int a): boolean","insertText":"find"},{"label":"group","kind":"method","documentation":"group(int a): String","insertText":"group"},{"label":"groupCount","kind":"method","documentation":"groupCount(): int","insertText":"groupCount"},{"label":"hasAnchoringBounds","kind":"method","documentation":"hasAnchoringBounds(): boolean","insertText":"hasAnchoringBounds"},{"label":"hasTransparentBounds","kind":"method","documentation":"hasTransparentBounds(): boolean","insertText":"hasTransparentBounds"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"hitEnd","kind":"method","documentation":"hitEnd(): boolean","insertText":"hitEnd"},{"label":"lookingAt","kind":"method","documentation":"lookingAt(): boolean","insertText":"lookingAt"},{"label":"matches","kind":"method","documentation":"matches(): boolean","insertText":"matches"},{"label":"namedGroup","kind":"method","documentation":"namedGroup(String a): String","insertText":"namedGroup"},{"label":"pattern","kind":"method","documentation":"pattern(): Pattern","insertText":"pattern"},{"label":"region","kind":"method","documentation":"region(int a, int b): Matcher","insertText":"region"},{"label":"regionEnd","kind":"method","documentation":"regionEnd(): int","insertText":"regionEnd"},{"label":"regionStart","kind":"method","documentation":"regionStart(): int","insertText":"regionStart"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(String a): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(String a): String","insertText":"replaceFirst"},{"label":"requireEnd","kind":"method","documentation":"requireEnd(): boolean","insertText":"requireEnd"},{"label":"reset","kind":"method","documentation":"reset(): Matcher","insertText":"reset"},{"label":"start","kind":"method","documentation":"start(int a): int","insertText":"start"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"useAnchoringBounds","kind":"method","documentation":"useAnchoringBounds(boolean a): Matcher","insertText":"useAnchoringBounds"},{"label":"usePattern","kind":"method","documentation":"usePattern(Pattern a): Matcher","insertText":"usePattern"},{"label":"useTransparentBounds","kind":"method","documentation":"useTransparentBounds(boolean a): Matcher","insertText":"useTransparentBounds"}]},{"label":"Pattern","kind":"class","documentation":"Class: Pattern","insertText":"Pattern","properties":[{"label":"quote","kind":"method","documentation":"quote(String a): String","insertText":"quote"},{"label":"asPredicate","kind":"method","documentation":"asPredicate(): Predicate","insertText":"asPredicate"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"flags","kind":"method","documentation":"flags(): int","insertText":"flags"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"matcher","kind":"method","documentation":"matcher(CharSequence a): Matcher","insertText":"matcher"},{"label":"pattern","kind":"method","documentation":"pattern(): String","insertText":"pattern"},{"label":"split","kind":"method","documentation":"split(CharSequence a, int b | CharSequence a): String[]","insertText":"split"},{"label":"splitAsStream","kind":"method","documentation":"splitAsStream(CharSequence a): Stream","insertText":"splitAsStream"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"BaseStream","kind":"class","documentation":"Class: BaseStream","insertText":"BaseStream","properties":[{"label":"close","kind":"method","documentation":"close(): void","insertText":"close"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isParallel","kind":"method","documentation":"isParallel(): boolean","insertText":"isParallel"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"sequential","kind":"method","documentation":"sequential(): BaseStream","insertText":"sequential"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"unordered","kind":"method","documentation":"unordered(): BaseStream","insertText":"unordered"}]},{"label":"Collector","kind":"class","documentation":"Class: Collector","insertText":"Collector","properties":[{"label":"of","kind":"method","documentation":"of(Supplier a, BiConsumer b, BinaryOperator c, Function d, Collector.Characteristics[] e | Supplier a, BiConsumer b, BinaryOperator c, Collector.Characteristics[] d): Collector","insertText":"of"},{"label":"accumulator","kind":"method","documentation":"accumulator(): BiConsumer","insertText":"accumulator"},{"label":"characteristics","kind":"method","documentation":"characteristics(): Set","insertText":"characteristics"},{"label":"combiner","kind":"method","documentation":"combiner(): BinaryOperator","insertText":"combiner"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"finisher","kind":"method","documentation":"finisher(): Function","insertText":"finisher"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"supplier","kind":"method","documentation":"supplier(): Supplier","insertText":"supplier"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Characteristics","kind":"class","documentation":"Class: Characteristics","insertText":"Characteristics","properties":[{"label":"CONCURRENT","kind":"property","documentation":"CONCURRENT: Collector.Characteristics","insertText":"CONCURRENT"},{"label":"IDENTITY_FINISH","kind":"property","documentation":"IDENTITY_FINISH: Collector.Characteristics","insertText":"IDENTITY_FINISH"},{"label":"UNORDERED","kind":"property","documentation":"UNORDERED: Collector.Characteristics","insertText":"UNORDERED"},{"label":"valueOf","kind":"method","documentation":"valueOf(String a): Collector.Characteristics","insertText":"valueOf"},{"label":"values","kind":"method","documentation":"values(): Collector.Characteristics[]","insertText":"values"},{"label":"compareTo","kind":"method","documentation":"compareTo(Enum a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"name","kind":"method","documentation":"name(): String","insertText":"name"},{"label":"ordinal","kind":"method","documentation":"ordinal(): int","insertText":"ordinal"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Collectors","kind":"class","documentation":"Class: Collectors","insertText":"Collectors","properties":[{"label":"averagingDouble","kind":"method","documentation":"averagingDouble(ToDoubleFunction a): Collector","insertText":"averagingDouble"},{"label":"averagingInt","kind":"method","documentation":"averagingInt(ToIntFunction a): Collector","insertText":"averagingInt"},{"label":"averagingLong","kind":"method","documentation":"averagingLong(ToLongFunction a): Collector","insertText":"averagingLong"},{"label":"collectingAndThen","kind":"method","documentation":"collectingAndThen(Collector a, Function b): Collector","insertText":"collectingAndThen"},{"label":"counting","kind":"method","documentation":"counting(): Collector","insertText":"counting"},{"label":"groupingBy","kind":"method","documentation":"groupingBy(Function a, Supplier b, Collector c | Function a, Collector b | Function a): Collector","insertText":"groupingBy"},{"label":"joining","kind":"method","documentation":"joining(CharSequence a, CharSequence b, CharSequence c | CharSequence a): Collector","insertText":"joining"},{"label":"mapping","kind":"method","documentation":"mapping(Function a, Collector b): Collector","insertText":"mapping"},{"label":"maxBy","kind":"method","documentation":"maxBy(Comparator a): Collector","insertText":"maxBy"},{"label":"minBy","kind":"method","documentation":"minBy(Comparator a): Collector","insertText":"minBy"},{"label":"partitioningBy","kind":"method","documentation":"partitioningBy(Predicate a, Collector b | Predicate a): Collector","insertText":"partitioningBy"},{"label":"reducing","kind":"method","documentation":"reducing(def a, Function b, BinaryOperator c | def a, BinaryOperator b | BinaryOperator a): Collector","insertText":"reducing"},{"label":"summarizingDouble","kind":"method","documentation":"summarizingDouble(ToDoubleFunction a): Collector","insertText":"summarizingDouble"},{"label":"summarizingInt","kind":"method","documentation":"summarizingInt(ToIntFunction a): Collector","insertText":"summarizingInt"},{"label":"summarizingLong","kind":"method","documentation":"summarizingLong(ToLongFunction a): Collector","insertText":"summarizingLong"},{"label":"summingDouble","kind":"method","documentation":"summingDouble(ToDoubleFunction a): Collector","insertText":"summingDouble"},{"label":"summingInt","kind":"method","documentation":"summingInt(ToIntFunction a): Collector","insertText":"summingInt"},{"label":"summingLong","kind":"method","documentation":"summingLong(ToLongFunction a): Collector","insertText":"summingLong"},{"label":"toCollection","kind":"method","documentation":"toCollection(Supplier a): Collector","insertText":"toCollection"},{"label":"toList","kind":"method","documentation":"toList(): Collector","insertText":"toList"},{"label":"toMap","kind":"method","documentation":"toMap(Function a, Function b, BinaryOperator c, Supplier d | Function a, Function b, BinaryOperator c | Function a, Function b): Collector","insertText":"toMap"},{"label":"toSet","kind":"method","documentation":"toSet(): Collector","insertText":"toSet"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"DoubleStream","kind":"class","documentation":"Class: DoubleStream","insertText":"DoubleStream","properties":[{"label":"builder","kind":"method","documentation":"builder(): DoubleStream.Builder","insertText":"builder"},{"label":"concat","kind":"method","documentation":"concat(DoubleStream a, DoubleStream b): DoubleStream","insertText":"concat"},{"label":"empty","kind":"method","documentation":"empty(): DoubleStream","insertText":"empty"},{"label":"of","kind":"method","documentation":"of(double[] a): DoubleStream","insertText":"of"},{"label":"allMatch","kind":"method","documentation":"allMatch(DoublePredicate a): boolean","insertText":"allMatch"},{"label":"anyMatch","kind":"method","documentation":"anyMatch(DoublePredicate a): boolean","insertText":"anyMatch"},{"label":"average","kind":"method","documentation":"average(): OptionalDouble","insertText":"average"},{"label":"boxed","kind":"method","documentation":"boxed(): Stream","insertText":"boxed"},{"label":"close","kind":"method","documentation":"close(): void","insertText":"close"},{"label":"collect","kind":"method","documentation":"collect(Supplier a, ObjDoubleConsumer b, BiConsumer c): def","insertText":"collect"},{"label":"count","kind":"method","documentation":"count(): long","insertText":"count"},{"label":"distinct","kind":"method","documentation":"distinct(): DoubleStream","insertText":"distinct"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"filter","kind":"method","documentation":"filter(DoublePredicate a): DoubleStream","insertText":"filter"},{"label":"findAny","kind":"method","documentation":"findAny(): OptionalDouble","insertText":"findAny"},{"label":"findFirst","kind":"method","documentation":"findFirst(): OptionalDouble","insertText":"findFirst"},{"label":"flatMap","kind":"method","documentation":"flatMap(DoubleFunction a): DoubleStream","insertText":"flatMap"},{"label":"forEach","kind":"method","documentation":"forEach(DoubleConsumer a): void","insertText":"forEach"},{"label":"forEachOrdered","kind":"method","documentation":"forEachOrdered(DoubleConsumer a): void","insertText":"forEachOrdered"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isParallel","kind":"method","documentation":"isParallel(): boolean","insertText":"isParallel"},{"label":"iterator","kind":"method","documentation":"iterator(): PrimitiveIterator.OfDouble","insertText":"iterator"},{"label":"limit","kind":"method","documentation":"limit(long a): DoubleStream","insertText":"limit"},{"label":"map","kind":"method","documentation":"map(DoubleUnaryOperator a): DoubleStream","insertText":"map"},{"label":"mapToInt","kind":"method","documentation":"mapToInt(DoubleToIntFunction a): IntStream","insertText":"mapToInt"},{"label":"mapToLong","kind":"method","documentation":"mapToLong(DoubleToLongFunction a): LongStream","insertText":"mapToLong"},{"label":"mapToObj","kind":"method","documentation":"mapToObj(DoubleFunction a): Stream","insertText":"mapToObj"},{"label":"max","kind":"method","documentation":"max(): OptionalDouble","insertText":"max"},{"label":"min","kind":"method","documentation":"min(): OptionalDouble","insertText":"min"},{"label":"noneMatch","kind":"method","documentation":"noneMatch(DoublePredicate a): boolean","insertText":"noneMatch"},{"label":"peek","kind":"method","documentation":"peek(DoubleConsumer a): DoubleStream","insertText":"peek"},{"label":"reduce","kind":"method","documentation":"reduce(double a, DoubleBinaryOperator b | DoubleBinaryOperator a): double | OptionalDouble","insertText":"reduce"},{"label":"sequential","kind":"method","documentation":"sequential(): DoubleStream","insertText":"sequential"},{"label":"skip","kind":"method","documentation":"skip(long a): DoubleStream","insertText":"skip"},{"label":"sorted","kind":"method","documentation":"sorted(): DoubleStream","insertText":"sorted"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator.OfDouble","insertText":"spliterator"},{"label":"sum","kind":"method","documentation":"sum(): double","insertText":"sum"},{"label":"summaryStatistics","kind":"method","documentation":"summaryStatistics(): DoubleSummaryStatistics","insertText":"summaryStatistics"},{"label":"toArray","kind":"method","documentation":"toArray(): double[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"unordered","kind":"method","documentation":"unordered(): BaseStream","insertText":"unordered"}]},{"label":"Builder","kind":"class","documentation":"Class: Builder","insertText":"Builder","properties":[{"label":"accept","kind":"method","documentation":"accept(double a): void","insertText":"accept"},{"label":"add","kind":"method","documentation":"add(double a): DoubleStream.Builder","insertText":"add"},{"label":"andThen","kind":"method","documentation":"andThen(DoubleConsumer a): DoubleConsumer","insertText":"andThen"},{"label":"build","kind":"method","documentation":"build(): DoubleStream","insertText":"build"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntStream","kind":"class","documentation":"Class: IntStream","insertText":"IntStream","properties":[{"label":"builder","kind":"method","documentation":"builder(): IntStream.Builder","insertText":"builder"},{"label":"concat","kind":"method","documentation":"concat(IntStream a, IntStream b): IntStream","insertText":"concat"},{"label":"empty","kind":"method","documentation":"empty(): IntStream","insertText":"empty"},{"label":"of","kind":"method","documentation":"of(int[] a): IntStream","insertText":"of"},{"label":"range","kind":"method","documentation":"range(int a, int b): IntStream","insertText":"range"},{"label":"rangeClosed","kind":"method","documentation":"rangeClosed(int a, int b): IntStream","insertText":"rangeClosed"},{"label":"allMatch","kind":"method","documentation":"allMatch(IntPredicate a): boolean","insertText":"allMatch"},{"label":"anyMatch","kind":"method","documentation":"anyMatch(IntPredicate a): boolean","insertText":"anyMatch"},{"label":"asDoubleStream","kind":"method","documentation":"asDoubleStream(): DoubleStream","insertText":"asDoubleStream"},{"label":"asLongStream","kind":"method","documentation":"asLongStream(): LongStream","insertText":"asLongStream"},{"label":"average","kind":"method","documentation":"average(): OptionalDouble","insertText":"average"},{"label":"boxed","kind":"method","documentation":"boxed(): Stream","insertText":"boxed"},{"label":"close","kind":"method","documentation":"close(): void","insertText":"close"},{"label":"collect","kind":"method","documentation":"collect(Supplier a, ObjIntConsumer b, BiConsumer c): def","insertText":"collect"},{"label":"count","kind":"method","documentation":"count(): long","insertText":"count"},{"label":"distinct","kind":"method","documentation":"distinct(): IntStream","insertText":"distinct"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"filter","kind":"method","documentation":"filter(IntPredicate a): IntStream","insertText":"filter"},{"label":"findAny","kind":"method","documentation":"findAny(): OptionalInt","insertText":"findAny"},{"label":"findFirst","kind":"method","documentation":"findFirst(): OptionalInt","insertText":"findFirst"},{"label":"flatMap","kind":"method","documentation":"flatMap(IntFunction a): IntStream","insertText":"flatMap"},{"label":"forEach","kind":"method","documentation":"forEach(IntConsumer a): void","insertText":"forEach"},{"label":"forEachOrdered","kind":"method","documentation":"forEachOrdered(IntConsumer a): void","insertText":"forEachOrdered"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isParallel","kind":"method","documentation":"isParallel(): boolean","insertText":"isParallel"},{"label":"iterator","kind":"method","documentation":"iterator(): PrimitiveIterator.OfInt","insertText":"iterator"},{"label":"limit","kind":"method","documentation":"limit(long a): IntStream","insertText":"limit"},{"label":"map","kind":"method","documentation":"map(IntUnaryOperator a): IntStream","insertText":"map"},{"label":"mapToDouble","kind":"method","documentation":"mapToDouble(IntToDoubleFunction a): DoubleStream","insertText":"mapToDouble"},{"label":"mapToLong","kind":"method","documentation":"mapToLong(IntToLongFunction a): LongStream","insertText":"mapToLong"},{"label":"mapToObj","kind":"method","documentation":"mapToObj(IntFunction a): Stream","insertText":"mapToObj"},{"label":"max","kind":"method","documentation":"max(): OptionalInt","insertText":"max"},{"label":"min","kind":"method","documentation":"min(): OptionalInt","insertText":"min"},{"label":"noneMatch","kind":"method","documentation":"noneMatch(IntPredicate a): boolean","insertText":"noneMatch"},{"label":"peek","kind":"method","documentation":"peek(IntConsumer a): IntStream","insertText":"peek"},{"label":"reduce","kind":"method","documentation":"reduce(int a, IntBinaryOperator b | IntBinaryOperator a): int | OptionalInt","insertText":"reduce"},{"label":"sequential","kind":"method","documentation":"sequential(): IntStream","insertText":"sequential"},{"label":"skip","kind":"method","documentation":"skip(long a): IntStream","insertText":"skip"},{"label":"sorted","kind":"method","documentation":"sorted(): IntStream","insertText":"sorted"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator.OfInt","insertText":"spliterator"},{"label":"sum","kind":"method","documentation":"sum(): int","insertText":"sum"},{"label":"summaryStatistics","kind":"method","documentation":"summaryStatistics(): IntSummaryStatistics","insertText":"summaryStatistics"},{"label":"toArray","kind":"method","documentation":"toArray(): int[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"unordered","kind":"method","documentation":"unordered(): BaseStream","insertText":"unordered"}]},{"label":"Builder","kind":"class","documentation":"Class: Builder","insertText":"Builder","properties":[{"label":"accept","kind":"method","documentation":"accept(int a): void","insertText":"accept"},{"label":"add","kind":"method","documentation":"add(int a): IntStream.Builder","insertText":"add"},{"label":"andThen","kind":"method","documentation":"andThen(IntConsumer a): IntConsumer","insertText":"andThen"},{"label":"build","kind":"method","documentation":"build(): IntStream","insertText":"build"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"LongStream","kind":"class","documentation":"Class: LongStream","insertText":"LongStream","properties":[{"label":"builder","kind":"method","documentation":"builder(): LongStream.Builder","insertText":"builder"},{"label":"concat","kind":"method","documentation":"concat(LongStream a, LongStream b): LongStream","insertText":"concat"},{"label":"empty","kind":"method","documentation":"empty(): LongStream","insertText":"empty"},{"label":"of","kind":"method","documentation":"of(long[] a): LongStream","insertText":"of"},{"label":"range","kind":"method","documentation":"range(long a, long b): LongStream","insertText":"range"},{"label":"rangeClosed","kind":"method","documentation":"rangeClosed(long a, long b): LongStream","insertText":"rangeClosed"},{"label":"allMatch","kind":"method","documentation":"allMatch(LongPredicate a): boolean","insertText":"allMatch"},{"label":"anyMatch","kind":"method","documentation":"anyMatch(LongPredicate a): boolean","insertText":"anyMatch"},{"label":"asDoubleStream","kind":"method","documentation":"asDoubleStream(): DoubleStream","insertText":"asDoubleStream"},{"label":"average","kind":"method","documentation":"average(): OptionalDouble","insertText":"average"},{"label":"boxed","kind":"method","documentation":"boxed(): Stream","insertText":"boxed"},{"label":"close","kind":"method","documentation":"close(): void","insertText":"close"},{"label":"collect","kind":"method","documentation":"collect(Supplier a, ObjLongConsumer b, BiConsumer c): def","insertText":"collect"},{"label":"count","kind":"method","documentation":"count(): long","insertText":"count"},{"label":"distinct","kind":"method","documentation":"distinct(): LongStream","insertText":"distinct"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"filter","kind":"method","documentation":"filter(LongPredicate a): LongStream","insertText":"filter"},{"label":"findAny","kind":"method","documentation":"findAny(): OptionalLong","insertText":"findAny"},{"label":"findFirst","kind":"method","documentation":"findFirst(): OptionalLong","insertText":"findFirst"},{"label":"flatMap","kind":"method","documentation":"flatMap(LongFunction a): LongStream","insertText":"flatMap"},{"label":"forEach","kind":"method","documentation":"forEach(LongConsumer a): void","insertText":"forEach"},{"label":"forEachOrdered","kind":"method","documentation":"forEachOrdered(LongConsumer a): void","insertText":"forEachOrdered"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isParallel","kind":"method","documentation":"isParallel(): boolean","insertText":"isParallel"},{"label":"iterator","kind":"method","documentation":"iterator(): PrimitiveIterator.OfLong","insertText":"iterator"},{"label":"limit","kind":"method","documentation":"limit(long a): LongStream","insertText":"limit"},{"label":"map","kind":"method","documentation":"map(LongUnaryOperator a): LongStream","insertText":"map"},{"label":"mapToDouble","kind":"method","documentation":"mapToDouble(LongToDoubleFunction a): DoubleStream","insertText":"mapToDouble"},{"label":"mapToInt","kind":"method","documentation":"mapToInt(LongToIntFunction a): IntStream","insertText":"mapToInt"},{"label":"mapToObj","kind":"method","documentation":"mapToObj(LongFunction a): Stream","insertText":"mapToObj"},{"label":"max","kind":"method","documentation":"max(): OptionalLong","insertText":"max"},{"label":"min","kind":"method","documentation":"min(): OptionalLong","insertText":"min"},{"label":"noneMatch","kind":"method","documentation":"noneMatch(LongPredicate a): boolean","insertText":"noneMatch"},{"label":"peek","kind":"method","documentation":"peek(LongConsumer a): LongStream","insertText":"peek"},{"label":"reduce","kind":"method","documentation":"reduce(long a, LongBinaryOperator b | LongBinaryOperator a): long | OptionalLong","insertText":"reduce"},{"label":"sequential","kind":"method","documentation":"sequential(): LongStream","insertText":"sequential"},{"label":"skip","kind":"method","documentation":"skip(long a): LongStream","insertText":"skip"},{"label":"sorted","kind":"method","documentation":"sorted(): LongStream","insertText":"sorted"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator.OfLong","insertText":"spliterator"},{"label":"sum","kind":"method","documentation":"sum(): long","insertText":"sum"},{"label":"summaryStatistics","kind":"method","documentation":"summaryStatistics(): LongSummaryStatistics","insertText":"summaryStatistics"},{"label":"toArray","kind":"method","documentation":"toArray(): long[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"unordered","kind":"method","documentation":"unordered(): BaseStream","insertText":"unordered"}]},{"label":"Builder","kind":"class","documentation":"Class: Builder","insertText":"Builder","properties":[{"label":"accept","kind":"method","documentation":"accept(long a): void","insertText":"accept"},{"label":"add","kind":"method","documentation":"add(long a): LongStream.Builder","insertText":"add"},{"label":"andThen","kind":"method","documentation":"andThen(LongConsumer a): LongConsumer","insertText":"andThen"},{"label":"build","kind":"method","documentation":"build(): LongStream","insertText":"build"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Stream","kind":"class","documentation":"Class: Stream","insertText":"Stream","properties":[{"label":"builder","kind":"method","documentation":"builder(): Stream.Builder","insertText":"builder"},{"label":"concat","kind":"method","documentation":"concat(Stream a, Stream b): Stream","insertText":"concat"},{"label":"empty","kind":"method","documentation":"empty(): Stream","insertText":"empty"},{"label":"of","kind":"method","documentation":"of(def[] a): Stream","insertText":"of"},{"label":"allMatch","kind":"method","documentation":"allMatch(Predicate a): boolean","insertText":"allMatch"},{"label":"anyMatch","kind":"method","documentation":"anyMatch(Predicate a): boolean","insertText":"anyMatch"},{"label":"close","kind":"method","documentation":"close(): void","insertText":"close"},{"label":"collect","kind":"method","documentation":"collect(Supplier a, BiConsumer b, BiConsumer c | Collector a): def","insertText":"collect"},{"label":"count","kind":"method","documentation":"count(): long","insertText":"count"},{"label":"distinct","kind":"method","documentation":"distinct(): Stream","insertText":"distinct"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"filter","kind":"method","documentation":"filter(Predicate a): Stream","insertText":"filter"},{"label":"findAny","kind":"method","documentation":"findAny(): Optional","insertText":"findAny"},{"label":"findFirst","kind":"method","documentation":"findFirst(): Optional","insertText":"findFirst"},{"label":"flatMap","kind":"method","documentation":"flatMap(Function a): Stream","insertText":"flatMap"},{"label":"flatMapToDouble","kind":"method","documentation":"flatMapToDouble(Function a): DoubleStream","insertText":"flatMapToDouble"},{"label":"flatMapToInt","kind":"method","documentation":"flatMapToInt(Function a): IntStream","insertText":"flatMapToInt"},{"label":"flatMapToLong","kind":"method","documentation":"flatMapToLong(Function a): LongStream","insertText":"flatMapToLong"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"forEachOrdered","kind":"method","documentation":"forEachOrdered(Consumer a): void","insertText":"forEachOrdered"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isParallel","kind":"method","documentation":"isParallel(): boolean","insertText":"isParallel"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"limit","kind":"method","documentation":"limit(long a): Stream","insertText":"limit"},{"label":"map","kind":"method","documentation":"map(Function a): Stream","insertText":"map"},{"label":"mapToDouble","kind":"method","documentation":"mapToDouble(ToDoubleFunction a): DoubleStream","insertText":"mapToDouble"},{"label":"mapToInt","kind":"method","documentation":"mapToInt(ToIntFunction a): IntStream","insertText":"mapToInt"},{"label":"mapToLong","kind":"method","documentation":"mapToLong(ToLongFunction a): LongStream","insertText":"mapToLong"},{"label":"max","kind":"method","documentation":"max(Comparator a): Optional","insertText":"max"},{"label":"min","kind":"method","documentation":"min(Comparator a): Optional","insertText":"min"},{"label":"noneMatch","kind":"method","documentation":"noneMatch(Predicate a): boolean","insertText":"noneMatch"},{"label":"peek","kind":"method","documentation":"peek(Consumer a): Stream","insertText":"peek"},{"label":"reduce","kind":"method","documentation":"reduce(def a, BiFunction b, BinaryOperator c | def a, BinaryOperator b | BinaryOperator a): def | Optional","insertText":"reduce"},{"label":"sequential","kind":"method","documentation":"sequential(): BaseStream","insertText":"sequential"},{"label":"skip","kind":"method","documentation":"skip(long a): Stream","insertText":"skip"},{"label":"sorted","kind":"method","documentation":"sorted(Comparator a): Stream","insertText":"sorted"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"toArray","kind":"method","documentation":"toArray(IntFunction a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"unordered","kind":"method","documentation":"unordered(): BaseStream","insertText":"unordered"}]},{"label":"Builder","kind":"class","documentation":"Class: Builder","insertText":"Builder","properties":[{"label":"accept","kind":"method","documentation":"accept(def a): void","insertText":"accept"},{"label":"add","kind":"method","documentation":"add(def a): Stream.Builder","insertText":"add"},{"label":"andThen","kind":"method","documentation":"andThen(Consumer a): Consumer","insertText":"andThen"},{"label":"build","kind":"method","documentation":"build(): Stream","insertText":"build"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"BytesRef","kind":"class","documentation":"Class: BytesRef","insertText":"BytesRef","properties":[{"label":"bytesEquals","kind":"method","documentation":"bytesEquals(BytesRef a): boolean","insertText":"bytesEquals"},{"label":"compareTo","kind":"method","documentation":"compareTo(def a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"utf8ToString","kind":"method","documentation":"utf8ToString(): String","insertText":"utf8ToString"},{"label":"bytes","kind":"property","documentation":"bytes: byte[]","insertText":"bytes"},{"label":"length","kind":"property","documentation":"length: int","insertText":"length"},{"label":"offset","kind":"property","documentation":"offset: int","insertText":"offset"}]},{"label":"GeoPoint","kind":"class","documentation":"Class: GeoPoint","insertText":"GeoPoint","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getLat","kind":"method","documentation":"getLat(): double","insertText":"getLat"},{"label":"getLon","kind":"method","documentation":"getLon(): double","insertText":"getLon"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Booleans","kind":"class","documentation":"Class: Booleans","insertText":"Booleans","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): Boolean","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): boolean","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"BytesRefs","kind":"class","documentation":"Class: BytesRefs","insertText":"BytesRefs","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): BytesRef","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): BytesRef","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Dates","kind":"class","documentation":"Class: Dates","insertText":"Dates","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): JodaCompatibleZonedDateTime","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): JodaCompatibleZonedDateTime","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Doubles","kind":"class","documentation":"Class: Doubles","insertText":"Doubles","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): Double","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): double","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"GeoPoints","kind":"class","documentation":"Class: GeoPoints","insertText":"GeoPoints","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"arcDistance","kind":"method","documentation":"arcDistance(double a, double b): double","insertText":"arcDistance"},{"label":"arcDistanceWithDefault","kind":"method","documentation":"arcDistanceWithDefault(double a, double b, double c): double","insertText":"arcDistanceWithDefault"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"geohashDistance","kind":"method","documentation":"geohashDistance(String a): double","insertText":"geohashDistance"},{"label":"geohashDistanceWithDefault","kind":"method","documentation":"geohashDistanceWithDefault(String a, double b): double","insertText":"geohashDistanceWithDefault"},{"label":"get","kind":"method","documentation":"get(int a): GeoPoint","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLat","kind":"method","documentation":"getLat(): double","insertText":"getLat"},{"label":"getLats","kind":"method","documentation":"getLats(): double[]","insertText":"getLats"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getLon","kind":"method","documentation":"getLon(): double","insertText":"getLon"},{"label":"getLons","kind":"method","documentation":"getLons(): double[]","insertText":"getLons"},{"label":"getValue","kind":"method","documentation":"getValue(): GeoPoint","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"planeDistance","kind":"method","documentation":"planeDistance(double a, double b): double","insertText":"planeDistance"},{"label":"planeDistanceWithDefault","kind":"method","documentation":"planeDistanceWithDefault(double a, double b, double c): double","insertText":"planeDistanceWithDefault"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Longs","kind":"class","documentation":"Class: Longs","insertText":"Longs","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): Long","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): long","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Strings","kind":"class","documentation":"Class: Strings","insertText":"Strings","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): String","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): String","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IpScriptDocValues","kind":"class","documentation":"Class: IpScriptDocValues","insertText":"IpScriptDocValues","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): String","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): String","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Interval","kind":"class","documentation":"Class: Interval","insertText":"Interval","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getEnd","kind":"method","documentation":"getEnd(): int","insertText":"getEnd"},{"label":"getGaps","kind":"method","documentation":"getGaps(): int","insertText":"getGaps"},{"label":"getStart","kind":"method","documentation":"getStart(): int","insertText":"getStart"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Doc","kind":"class","documentation":"Class: Doc","insertText":"Doc","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getFreq","kind":"method","documentation":"getFreq(): float","insertText":"getFreq"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Field","kind":"class","documentation":"Class: Field","insertText":"Field","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDocCount","kind":"method","documentation":"getDocCount(): long","insertText":"getDocCount"},{"label":"getSumDocFreq","kind":"method","documentation":"getSumDocFreq(): long","insertText":"getSumDocFreq"},{"label":"getSumTotalTermFreq","kind":"method","documentation":"getSumTotalTermFreq(): long","insertText":"getSumTotalTermFreq"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Query","kind":"class","documentation":"Class: Query","insertText":"Query","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getBoost","kind":"method","documentation":"getBoost(): float","insertText":"getBoost"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Term","kind":"class","documentation":"Class: Term","insertText":"Term","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getDocFreq","kind":"method","documentation":"getDocFreq(): long","insertText":"getDocFreq"},{"label":"getTotalTermFreq","kind":"method","documentation":"getTotalTermFreq(): long","insertText":"getTotalTermFreq"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"Debug","kind":"class","documentation":"Class: Debug","insertText":"Debug","properties":[{"label":"explain","kind":"method","documentation":"explain(Object a): void","insertText":"explain"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"JodaCompatibleZonedDateTime","kind":"class","documentation":"Class: JodaCompatibleZonedDateTime","insertText":"JodaCompatibleZonedDateTime","properties":[{"label":"compareTo","kind":"method","documentation":"compareTo(ChronoZonedDateTime a): int","insertText":"compareTo"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"format","kind":"method","documentation":"format(DateTimeFormatter a): String","insertText":"format"},{"label":"get","kind":"method","documentation":"get(TemporalField a): int","insertText":"get"},{"label":"getCenturyOfEra","kind":"method","documentation":"getCenturyOfEra(): int","insertText":"getCenturyOfEra"},{"label":"getChronology","kind":"method","documentation":"getChronology(): Chronology","insertText":"getChronology"},{"label":"getDayOfMonth","kind":"method","documentation":"getDayOfMonth(): int","insertText":"getDayOfMonth"},{"label":"getDayOfWeek","kind":"method","documentation":"getDayOfWeek(): int","insertText":"getDayOfWeek"},{"label":"getDayOfWeekEnum","kind":"method","documentation":"getDayOfWeekEnum(): DayOfWeek","insertText":"getDayOfWeekEnum"},{"label":"getDayOfYear","kind":"method","documentation":"getDayOfYear(): int","insertText":"getDayOfYear"},{"label":"getEra","kind":"method","documentation":"getEra(): int","insertText":"getEra"},{"label":"getHour","kind":"method","documentation":"getHour(): int","insertText":"getHour"},{"label":"getHourOfDay","kind":"method","documentation":"getHourOfDay(): int","insertText":"getHourOfDay"},{"label":"getLong","kind":"method","documentation":"getLong(TemporalField a): long","insertText":"getLong"},{"label":"getMillis","kind":"method","documentation":"getMillis(): long","insertText":"getMillis"},{"label":"getMillisOfDay","kind":"method","documentation":"getMillisOfDay(): int","insertText":"getMillisOfDay"},{"label":"getMillisOfSecond","kind":"method","documentation":"getMillisOfSecond(): int","insertText":"getMillisOfSecond"},{"label":"getMinute","kind":"method","documentation":"getMinute(): int","insertText":"getMinute"},{"label":"getMinuteOfDay","kind":"method","documentation":"getMinuteOfDay(): int","insertText":"getMinuteOfDay"},{"label":"getMinuteOfHour","kind":"method","documentation":"getMinuteOfHour(): int","insertText":"getMinuteOfHour"},{"label":"getMonth","kind":"method","documentation":"getMonth(): Month","insertText":"getMonth"},{"label":"getMonthOfYear","kind":"method","documentation":"getMonthOfYear(): int","insertText":"getMonthOfYear"},{"label":"getMonthValue","kind":"method","documentation":"getMonthValue(): int","insertText":"getMonthValue"},{"label":"getNano","kind":"method","documentation":"getNano(): int","insertText":"getNano"},{"label":"getOffset","kind":"method","documentation":"getOffset(): ZoneOffset","insertText":"getOffset"},{"label":"getSecond","kind":"method","documentation":"getSecond(): int","insertText":"getSecond"},{"label":"getSecondOfDay","kind":"method","documentation":"getSecondOfDay(): int","insertText":"getSecondOfDay"},{"label":"getSecondOfMinute","kind":"method","documentation":"getSecondOfMinute(): int","insertText":"getSecondOfMinute"},{"label":"getWeekOfWeekyear","kind":"method","documentation":"getWeekOfWeekyear(): int","insertText":"getWeekOfWeekyear"},{"label":"getWeekyear","kind":"method","documentation":"getWeekyear(): int","insertText":"getWeekyear"},{"label":"getYear","kind":"method","documentation":"getYear(): int","insertText":"getYear"},{"label":"getYearOfCentury","kind":"method","documentation":"getYearOfCentury(): int","insertText":"getYearOfCentury"},{"label":"getYearOfEra","kind":"method","documentation":"getYearOfEra(): int","insertText":"getYearOfEra"},{"label":"getZone","kind":"method","documentation":"getZone(): ZoneId","insertText":"getZone"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isAfter","kind":"method","documentation":"isAfter(ChronoZonedDateTime a): boolean","insertText":"isAfter"},{"label":"isBefore","kind":"method","documentation":"isBefore(ChronoZonedDateTime a): boolean","insertText":"isBefore"},{"label":"isEqual","kind":"method","documentation":"isEqual(ChronoZonedDateTime a): boolean","insertText":"isEqual"},{"label":"isSupported","kind":"method","documentation":"isSupported(TemporalField a): boolean","insertText":"isSupported"},{"label":"minus","kind":"method","documentation":"minus(long a, TemporalUnit b | TemporalAmount a): ZonedDateTime","insertText":"minus"},{"label":"minusDays","kind":"method","documentation":"minusDays(long a): ZonedDateTime","insertText":"minusDays"},{"label":"minusHours","kind":"method","documentation":"minusHours(long a): ZonedDateTime","insertText":"minusHours"},{"label":"minusMinutes","kind":"method","documentation":"minusMinutes(long a): ZonedDateTime","insertText":"minusMinutes"},{"label":"minusMonths","kind":"method","documentation":"minusMonths(long a): ZonedDateTime","insertText":"minusMonths"},{"label":"minusNanos","kind":"method","documentation":"minusNanos(long a): ZonedDateTime","insertText":"minusNanos"},{"label":"minusSeconds","kind":"method","documentation":"minusSeconds(long a): ZonedDateTime","insertText":"minusSeconds"},{"label":"minusWeeks","kind":"method","documentation":"minusWeeks(long a): ZonedDateTime","insertText":"minusWeeks"},{"label":"minusYears","kind":"method","documentation":"minusYears(long a): ZonedDateTime","insertText":"minusYears"},{"label":"plus","kind":"method","documentation":"plus(long a, TemporalUnit b | TemporalAmount a): ZonedDateTime","insertText":"plus"},{"label":"plusDays","kind":"method","documentation":"plusDays(long a): ZonedDateTime","insertText":"plusDays"},{"label":"plusHours","kind":"method","documentation":"plusHours(long a): ZonedDateTime","insertText":"plusHours"},{"label":"plusMinutes","kind":"method","documentation":"plusMinutes(long a): ZonedDateTime","insertText":"plusMinutes"},{"label":"plusMonths","kind":"method","documentation":"plusMonths(long a): ZonedDateTime","insertText":"plusMonths"},{"label":"plusNanos","kind":"method","documentation":"plusNanos(long a): ZonedDateTime","insertText":"plusNanos"},{"label":"plusSeconds","kind":"method","documentation":"plusSeconds(long a): ZonedDateTime","insertText":"plusSeconds"},{"label":"plusWeeks","kind":"method","documentation":"plusWeeks(long a): ZonedDateTime","insertText":"plusWeeks"},{"label":"plusYears","kind":"method","documentation":"plusYears(long a): ZonedDateTime","insertText":"plusYears"},{"label":"query","kind":"method","documentation":"query(TemporalQuery a): def","insertText":"query"},{"label":"range","kind":"method","documentation":"range(TemporalField a): ValueRange","insertText":"range"},{"label":"toEpochMilli","kind":"method","documentation":"toEpochMilli(): long","insertText":"toEpochMilli"},{"label":"toEpochSecond","kind":"method","documentation":"toEpochSecond(): long","insertText":"toEpochSecond"},{"label":"toInstant","kind":"method","documentation":"toInstant(): Instant","insertText":"toInstant"},{"label":"toLocalDate","kind":"method","documentation":"toLocalDate(): LocalDate","insertText":"toLocalDate"},{"label":"toLocalDateTime","kind":"method","documentation":"toLocalDateTime(): LocalDateTime","insertText":"toLocalDateTime"},{"label":"toLocalTime","kind":"method","documentation":"toLocalTime(): LocalTime","insertText":"toLocalTime"},{"label":"toOffsetDateTime","kind":"method","documentation":"toOffsetDateTime(): OffsetDateTime","insertText":"toOffsetDateTime"},{"label":"toString","kind":"method","documentation":"toString(String a, Locale b | String a): String","insertText":"toString"},{"label":"truncatedTo","kind":"method","documentation":"truncatedTo(TemporalUnit a): ZonedDateTime","insertText":"truncatedTo"},{"label":"until","kind":"method","documentation":"until(Temporal a, TemporalUnit b): long","insertText":"until"},{"label":"with","kind":"method","documentation":"with(TemporalField a, long b | TemporalAdjuster a): ZonedDateTime","insertText":"with"},{"label":"withDayOfMonth","kind":"method","documentation":"withDayOfMonth(int a): ZonedDateTime","insertText":"withDayOfMonth"},{"label":"withDayOfYear","kind":"method","documentation":"withDayOfYear(int a): ZonedDateTime","insertText":"withDayOfYear"},{"label":"withEarlierOffsetAtOverlap","kind":"method","documentation":"withEarlierOffsetAtOverlap(): ZonedDateTime","insertText":"withEarlierOffsetAtOverlap"},{"label":"withFixedOffsetZone","kind":"method","documentation":"withFixedOffsetZone(): ZonedDateTime","insertText":"withFixedOffsetZone"},{"label":"withHour","kind":"method","documentation":"withHour(int a): ZonedDateTime","insertText":"withHour"},{"label":"withLaterOffsetAtOverlap","kind":"method","documentation":"withLaterOffsetAtOverlap(): ZonedDateTime","insertText":"withLaterOffsetAtOverlap"},{"label":"withMinute","kind":"method","documentation":"withMinute(int a): ZonedDateTime","insertText":"withMinute"},{"label":"withMonth","kind":"method","documentation":"withMonth(int a): ZonedDateTime","insertText":"withMonth"},{"label":"withNano","kind":"method","documentation":"withNano(int a): ZonedDateTime","insertText":"withNano"},{"label":"withSecond","kind":"method","documentation":"withSecond(int a): ZonedDateTime","insertText":"withSecond"},{"label":"withYear","kind":"method","documentation":"withYear(int a): ZonedDateTime","insertText":"withYear"},{"label":"withZoneSameInstant","kind":"method","documentation":"withZoneSameInstant(ZoneId a): ZonedDateTime","insertText":"withZoneSameInstant"},{"label":"withZoneSameLocal","kind":"method","documentation":"withZoneSameLocal(ZoneId a): ZonedDateTime","insertText":"withZoneSameLocal"}]},{"label":"FieldLookup","kind":"class","documentation":"Class: FieldLookup","insertText":"FieldLookup","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"getValue","kind":"method","documentation":"getValue(): def","insertText":"getValue"},{"label":"getValues","kind":"method","documentation":"getValues(): List","insertText":"getValues"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}')},function(e){e.exports=JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}},{"label":"org.elasticsearch.xpack.runtimefields.mapper.LongFieldScript","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.LongFieldScript","insertText":"org.elasticsearch.xpack.runtimefields.mapper.LongFieldScript","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"org.elasticsearch.xpack.runtimefields.mapper.LongFieldScript.Factory","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.LongFieldScript.Factory","insertText":"org.elasticsearch.xpack.runtimefields.mapper.LongFieldScript.Factory","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}')},function(e){e.exports=JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}},{"label":"org.elasticsearch.xpack.runtimefields.mapper.IpFieldScript","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.IpFieldScript","insertText":"org.elasticsearch.xpack.runtimefields.mapper.IpFieldScript","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"org.elasticsearch.xpack.runtimefields.mapper.IpFieldScript.Factory","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.IpFieldScript.Factory","insertText":"org.elasticsearch.xpack.runtimefields.mapper.IpFieldScript.Factory","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}')},function(e){e.exports=JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}},{"label":"GeoShape","kind":"class","documentation":"Class: GeoShape","insertText":"GeoShape","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntervalDayTime","kind":"class","documentation":"Class: IntervalDayTime","insertText":"IntervalDayTime","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"IntervalYearMonth","kind":"class","documentation":"Class: IntervalYearMonth","insertText":"IntervalYearMonth","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"VersionScriptDocValues","kind":"class","documentation":"Class: VersionScriptDocValues","insertText":"VersionScriptDocValues","properties":[{"label":"add","kind":"method","documentation":"add(int a, def b | def a): void | boolean","insertText":"add"},{"label":"addAll","kind":"method","documentation":"addAll(int a, Collection b | Collection a): boolean","insertText":"addAll"},{"label":"any","kind":"method","documentation":"any(Predicate a): boolean","insertText":"any"},{"label":"asCollection","kind":"method","documentation":"asCollection(): Collection","insertText":"asCollection"},{"label":"asList","kind":"method","documentation":"asList(): List","insertText":"asList"},{"label":"clear","kind":"method","documentation":"clear(): void","insertText":"clear"},{"label":"collect","kind":"method","documentation":"collect(Collection a, Function b | Function a): def | List","insertText":"collect"},{"label":"contains","kind":"method","documentation":"contains(def a): boolean","insertText":"contains"},{"label":"containsAll","kind":"method","documentation":"containsAll(Collection a): boolean","insertText":"containsAll"},{"label":"each","kind":"method","documentation":"each(Consumer a): def","insertText":"each"},{"label":"eachWithIndex","kind":"method","documentation":"eachWithIndex(ObjIntConsumer a): def","insertText":"eachWithIndex"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"every","kind":"method","documentation":"every(Predicate a): boolean","insertText":"every"},{"label":"find","kind":"method","documentation":"find(Predicate a): def","insertText":"find"},{"label":"findAll","kind":"method","documentation":"findAll(Predicate a): List","insertText":"findAll"},{"label":"findResult","kind":"method","documentation":"findResult(def a, Function b | Function a): def","insertText":"findResult"},{"label":"findResults","kind":"method","documentation":"findResults(Function a): List","insertText":"findResults"},{"label":"forEach","kind":"method","documentation":"forEach(Consumer a): void","insertText":"forEach"},{"label":"get","kind":"method","documentation":"get(int a): String","insertText":"get"},{"label":"getByPath","kind":"method","documentation":"getByPath(String a, Object b | String a): Object","insertText":"getByPath"},{"label":"getLength","kind":"method","documentation":"getLength(): int","insertText":"getLength"},{"label":"getValue","kind":"method","documentation":"getValue(): String","insertText":"getValue"},{"label":"groupBy","kind":"method","documentation":"groupBy(Function a): Map","insertText":"groupBy"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(def a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"iterator","kind":"method","documentation":"iterator(): Iterator","insertText":"iterator"},{"label":"join","kind":"method","documentation":"join(String a): String","insertText":"join"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(def a): int","insertText":"lastIndexOf"},{"label":"listIterator","kind":"method","documentation":"listIterator(int a): ListIterator","insertText":"listIterator"},{"label":"remove","kind":"method","documentation":"remove(int a): def","insertText":"remove"},{"label":"removeAll","kind":"method","documentation":"removeAll(Collection a): boolean","insertText":"removeAll"},{"label":"removeIf","kind":"method","documentation":"removeIf(Predicate a): boolean","insertText":"removeIf"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(UnaryOperator a): void","insertText":"replaceAll"},{"label":"retainAll","kind":"method","documentation":"retainAll(Collection a): boolean","insertText":"retainAll"},{"label":"set","kind":"method","documentation":"set(int a, def b): def","insertText":"set"},{"label":"size","kind":"method","documentation":"size(): int","insertText":"size"},{"label":"sort","kind":"method","documentation":"sort(Comparator a): void","insertText":"sort"},{"label":"split","kind":"method","documentation":"split(Predicate a): List","insertText":"split"},{"label":"spliterator","kind":"method","documentation":"spliterator(): Spliterator","insertText":"spliterator"},{"label":"stream","kind":"method","documentation":"stream(): Stream","insertText":"stream"},{"label":"subList","kind":"method","documentation":"subList(int a, int b): List","insertText":"subList"},{"label":"sum","kind":"method","documentation":"sum(ToDoubleFunction a): double","insertText":"sum"},{"label":"toArray","kind":"method","documentation":"toArray(def[] a): def[]","insertText":"toArray"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}')},function(e){e.exports=JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}},{"label":"org.elasticsearch.xpack.runtimefields.mapper.DoubleFieldScript","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.DoubleFieldScript","insertText":"org.elasticsearch.xpack.runtimefields.mapper.DoubleFieldScript","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"org.elasticsearch.xpack.runtimefields.mapper.DoubleFieldScript.Factory","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.DoubleFieldScript.Factory","insertText":"org.elasticsearch.xpack.runtimefields.mapper.DoubleFieldScript.Factory","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}')},function(e){e.exports=JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}},{"label":"org.elasticsearch.xpack.runtimefields.mapper.DateFieldScript","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.DateFieldScript","insertText":"org.elasticsearch.xpack.runtimefields.mapper.DateFieldScript","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"org.elasticsearch.xpack.runtimefields.mapper.DateFieldScript.Factory","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.DateFieldScript.Factory","insertText":"org.elasticsearch.xpack.runtimefields.mapper.DateFieldScript.Factory","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}')},function(e){e.exports=JSON.parse('{"suggestions":[{"label":"String","kind":"class","documentation":"Class: String","insertText":"String","properties":[{"label":"copyValueOf","kind":"method","documentation":"copyValueOf(char[] a, int b, int c | char[] a): String","insertText":"copyValueOf"},{"label":"format","kind":"method","documentation":"format(Locale a, String b, def[] c | String a, def[] b): String","insertText":"format"},{"label":"join","kind":"method","documentation":"join(CharSequence a, Iterable b): String","insertText":"join"},{"label":"valueOf","kind":"method","documentation":"valueOf(def a): String","insertText":"valueOf"},{"label":"charAt","kind":"method","documentation":"charAt(int a): char","insertText":"charAt"},{"label":"chars","kind":"method","documentation":"chars(): IntStream","insertText":"chars"},{"label":"codePointAt","kind":"method","documentation":"codePointAt(int a): int","insertText":"codePointAt"},{"label":"codePointBefore","kind":"method","documentation":"codePointBefore(int a): int","insertText":"codePointBefore"},{"label":"codePointCount","kind":"method","documentation":"codePointCount(int a, int b): int","insertText":"codePointCount"},{"label":"codePoints","kind":"method","documentation":"codePoints(): IntStream","insertText":"codePoints"},{"label":"compareTo","kind":"method","documentation":"compareTo(String a): int","insertText":"compareTo"},{"label":"compareToIgnoreCase","kind":"method","documentation":"compareToIgnoreCase(String a): int","insertText":"compareToIgnoreCase"},{"label":"concat","kind":"method","documentation":"concat(String a): String","insertText":"concat"},{"label":"contains","kind":"method","documentation":"contains(CharSequence a): boolean","insertText":"contains"},{"label":"contentEquals","kind":"method","documentation":"contentEquals(CharSequence a): boolean","insertText":"contentEquals"},{"label":"decodeBase64","kind":"method","documentation":"decodeBase64(): String","insertText":"decodeBase64"},{"label":"encodeBase64","kind":"method","documentation":"encodeBase64(): String","insertText":"encodeBase64"},{"label":"endsWith","kind":"method","documentation":"endsWith(String a): boolean","insertText":"endsWith"},{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"equalsIgnoreCase","kind":"method","documentation":"equalsIgnoreCase(String a): boolean","insertText":"equalsIgnoreCase"},{"label":"getChars","kind":"method","documentation":"getChars(int a, int b, char[] c, int d): void","insertText":"getChars"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"indexOf","kind":"method","documentation":"indexOf(String a, int b | String a): int","insertText":"indexOf"},{"label":"isEmpty","kind":"method","documentation":"isEmpty(): boolean","insertText":"isEmpty"},{"label":"lastIndexOf","kind":"method","documentation":"lastIndexOf(String a, int b | String a): int","insertText":"lastIndexOf"},{"label":"length","kind":"method","documentation":"length(): int","insertText":"length"},{"label":"offsetByCodePoints","kind":"method","documentation":"offsetByCodePoints(int a, int b): int","insertText":"offsetByCodePoints"},{"label":"regionMatches","kind":"method","documentation":"regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean","insertText":"regionMatches"},{"label":"replace","kind":"method","documentation":"replace(CharSequence a, CharSequence b): String","insertText":"replace"},{"label":"replaceAll","kind":"method","documentation":"replaceAll(Pattern a, Function b): String","insertText":"replaceAll"},{"label":"replaceFirst","kind":"method","documentation":"replaceFirst(Pattern a, Function b): String","insertText":"replaceFirst"},{"label":"splitOnToken","kind":"method","documentation":"splitOnToken(String a, int b | String a): String[]","insertText":"splitOnToken"},{"label":"startsWith","kind":"method","documentation":"startsWith(String a, int b | String a): boolean","insertText":"startsWith"},{"label":"subSequence","kind":"method","documentation":"subSequence(int a, int b): CharSequence","insertText":"subSequence"},{"label":"substring","kind":"method","documentation":"substring(int a, int b | int a): String","insertText":"substring"},{"label":"toCharArray","kind":"method","documentation":"toCharArray(): char[]","insertText":"toCharArray"},{"label":"toLowerCase","kind":"method","documentation":"toLowerCase(Locale a): String","insertText":"toLowerCase"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"},{"label":"toUpperCase","kind":"method","documentation":"toUpperCase(Locale a): String","insertText":"toUpperCase"},{"label":"trim","kind":"method","documentation":"trim(): String","insertText":"trim"}],"constructorDefinition":{"label":"String","kind":"constructor","documentation":"Constructor: String","insertText":"String"}},{"label":"org.elasticsearch.xpack.runtimefields.mapper.BooleanFieldScript","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.BooleanFieldScript","insertText":"org.elasticsearch.xpack.runtimefields.mapper.BooleanFieldScript","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]},{"label":"org.elasticsearch.xpack.runtimefields.mapper.BooleanFieldScript.Factory","kind":"class","documentation":"Class: org.elasticsearch.xpack.runtimefields.mapper.BooleanFieldScript.Factory","insertText":"org.elasticsearch.xpack.runtimefields.mapper.BooleanFieldScript.Factory","properties":[{"label":"equals","kind":"method","documentation":"equals(Object a): boolean","insertText":"equals"},{"label":"hashCode","kind":"method","documentation":"hashCode(): int","insertText":"hashCode"},{"label":"toString","kind":"method","documentation":"toString(): String","insertText":"toString"}]}]}')},,,,,,,,,,,function(e,t,n){"use strict";n.r(t);var i={};n.r(i),n.d(i,"defaultEnFormats",(function(){return s})),n.d(i,"getLocale",(function(){return Ct})),n.d(i,"getTranslation",(function(){return St})),n.d(i,"init",(function(){return At})),n.d(i,"load",(function(){return yt})),n.d(i,"translate",(function(){return Et})),n.d(i,"getIsInitialized",(function(){return ft})),n.d(i,"handleIntlError",(function(){return gt}));n(18);var o=n(11),a=n(0),r=n.n(a);const s={number:{currency:{style:"currency"},percent:{style:"percent"}},date:{short:{month:"numeric",day:"numeric",year:"2-digit"},medium:{month:"short",day:"numeric",year:"numeric"},long:{month:"long",day:"numeric",year:"numeric"},full:{weekday:"long",month:"long",day:"numeric",year:"numeric"}},time:{short:{hour:"numeric",minute:"numeric"},medium:{hour:"numeric",minute:"numeric",second:"numeric"},long:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"},full:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"}},relative:{years:{style:"long"},months:{style:"long"},days:{style:"long"},hours:{style:"long"},minutes:{style:"long"},seconds:{style:"long"}}};var l,d,c,u=n(6);function m(e){return e.type===d.literal}function h(e){return e.type===d.argument}function b(e){return e.type===d.number}function T(e){return e.type===d.date}function g(e){return e.type===d.time}function p(e){return e.type===d.select}function x(e){return e.type===d.plural}function k(e){return e.type===d.pound}function f(e){return e.type===d.tag}function S(e){return!(!e||"object"!=typeof e||e.type!==c.number)}function C(e){return!(!e||"object"!=typeof e||e.type!==c.dateTime)}!function(e){e[e.EXPECT_ARGUMENT_CLOSING_BRACE=1]="EXPECT_ARGUMENT_CLOSING_BRACE",e[e.EMPTY_ARGUMENT=2]="EMPTY_ARGUMENT",e[e.MALFORMED_ARGUMENT=3]="MALFORMED_ARGUMENT",e[e.EXPECT_ARGUMENT_TYPE=4]="EXPECT_ARGUMENT_TYPE",e[e.INVALID_ARGUMENT_TYPE=5]="INVALID_ARGUMENT_TYPE",e[e.EXPECT_ARGUMENT_STYLE=6]="EXPECT_ARGUMENT_STYLE",e[e.INVALID_NUMBER_SKELETON=7]="INVALID_NUMBER_SKELETON",e[e.INVALID_DATE_TIME_SKELETON=8]="INVALID_DATE_TIME_SKELETON",e[e.EXPECT_NUMBER_SKELETON=9]="EXPECT_NUMBER_SKELETON",e[e.EXPECT_DATE_TIME_SKELETON=10]="EXPECT_DATE_TIME_SKELETON",e[e.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE=11]="UNCLOSED_QUOTE_IN_ARGUMENT_STYLE",e[e.EXPECT_SELECT_ARGUMENT_OPTIONS=12]="EXPECT_SELECT_ARGUMENT_OPTIONS",e[e.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE=13]="EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE",e[e.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE=14]="INVALID_PLURAL_ARGUMENT_OFFSET_VALUE",e[e.EXPECT_SELECT_ARGUMENT_SELECTOR=15]="EXPECT_SELECT_ARGUMENT_SELECTOR",e[e.EXPECT_PLURAL_ARGUMENT_SELECTOR=16]="EXPECT_PLURAL_ARGUMENT_SELECTOR",e[e.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT=17]="EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT",e[e.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT=18]="EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT",e[e.INVALID_PLURAL_ARGUMENT_SELECTOR=19]="INVALID_PLURAL_ARGUMENT_SELECTOR",e[e.DUPLICATE_PLURAL_ARGUMENT_SELECTOR=20]="DUPLICATE_PLURAL_ARGUMENT_SELECTOR",e[e.DUPLICATE_SELECT_ARGUMENT_SELECTOR=21]="DUPLICATE_SELECT_ARGUMENT_SELECTOR",e[e.MISSING_OTHER_CLAUSE=22]="MISSING_OTHER_CLAUSE",e[e.INVALID_TAG=23]="INVALID_TAG",e[e.INVALID_TAG_NAME=25]="INVALID_TAG_NAME",e[e.UNMATCHED_CLOSING_TAG=26]="UNMATCHED_CLOSING_TAG",e[e.UNCLOSED_TAG=27]="UNCLOSED_TAG"}(l||(l={})),function(e){e[e.literal=0]="literal",e[e.argument=1]="argument",e[e.number=2]="number",e[e.date=3]="date",e[e.time=4]="time",e[e.select=5]="select",e[e.plural=6]="plural",e[e.pound=7]="pound",e[e.tag=8]="tag"}(d||(d={})),function(e){e[e.number=0]="number",e[e.dateTime=1]="dateTime"}(c||(c={}));var E=/[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/,A=/(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;function y(e){var t={};return e.replace(A,(function(e){var n=e.length;switch(e[0]){case"G":t.era=4===n?"long":5===n?"narrow":"short";break;case"y":t.year=2===n?"2-digit":"numeric";break;case"Y":case"u":case"U":case"r":throw new RangeError("`Y/u/U/r` (year) patterns are not supported, use `y` instead");case"q":case"Q":throw new RangeError("`q/Q` (quarter) patterns are not supported");case"M":case"L":t.month=["numeric","2-digit","short","long","narrow"][n-1];break;case"w":case"W":throw new RangeError("`w/W` (week) patterns are not supported");case"d":t.day=["numeric","2-digit"][n-1];break;case"D":case"F":case"g":throw new RangeError("`D/F/g` (day) patterns are not supported, use `d` instead");case"E":t.weekday=4===n?"long":5===n?"narrow":"short";break;case"e":if(n<4)throw new RangeError("`e..eee` (weekday) patterns are not supported");t.weekday=["short","long","narrow","short"][n-4];break;case"c":if(n<4)throw new RangeError("`c..ccc` (weekday) patterns are not supported");t.weekday=["short","long","narrow","short"][n-4];break;case"a":t.hour12=!0;break;case"b":case"B":throw new RangeError("`b/B` (period) patterns are not supported, use `a` instead");case"h":t.hourCycle="h12",t.hour=["numeric","2-digit"][n-1];break;case"H":t.hourCycle="h23",t.hour=["numeric","2-digit"][n-1];break;case"K":t.hourCycle="h11",t.hour=["numeric","2-digit"][n-1];break;case"k":t.hourCycle="h24",t.hour=["numeric","2-digit"][n-1];break;case"j":case"J":case"C":throw new RangeError("`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead");case"m":t.minute=["numeric","2-digit"][n-1];break;case"s":t.second=["numeric","2-digit"][n-1];break;case"S":case"A":throw new RangeError("`S/A` (second) patterns are not supported, use `s` instead");case"z":t.timeZoneName=n<4?"short":"long";break;case"Z":case"O":case"v":case"V":case"X":case"x":throw new RangeError("`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead")}return""})),t}var I=/[\t-\r \x85\u200E\u200F\u2028\u2029]/i;var L=/^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g,O=/^(@+)?(\+|#+)?[rs]?$/g,_=/(\*)(0+)|(#+)(0+)|(0+)/g,N=/^(0+)$/;function R(e){var t={};return"r"===e[e.length-1]?t.roundingPriority="morePrecision":"s"===e[e.length-1]&&(t.roundingPriority="lessPrecision"),e.replace(O,(function(e,n,i){return"string"!=typeof i?(t.minimumSignificantDigits=n.length,t.maximumSignificantDigits=n.length):"+"===i?t.minimumSignificantDigits=n.length:"#"===n[0]?t.maximumSignificantDigits=n.length:(t.minimumSignificantDigits=n.length,t.maximumSignificantDigits=n.length+("string"==typeof i?i.length:0)),""})),t}function D(e){switch(e){case"sign-auto":return{signDisplay:"auto"};case"sign-accounting":case"()":return{currencySign:"accounting"};case"sign-always":case"+!":return{signDisplay:"always"};case"sign-accounting-always":case"()!":return{signDisplay:"always",currencySign:"accounting"};case"sign-except-zero":case"+?":return{signDisplay:"exceptZero"};case"sign-accounting-except-zero":case"()?":return{signDisplay:"exceptZero",currencySign:"accounting"};case"sign-never":case"+_":return{signDisplay:"never"}}}function M(e){var t;if("E"===e[0]&&"E"===e[1]?(t={notation:"engineering"},e=e.slice(2)):"E"===e[0]&&(t={notation:"scientific"},e=e.slice(1)),t){var n=e.slice(0,2);if("+!"===n?(t.signDisplay="always",e=e.slice(2)):"+?"===n&&(t.signDisplay="exceptZero",e=e.slice(2)),!N.test(e))throw new Error("Malformed concise eng/scientific notation");t.minimumIntegerDigits=e.length}return t}function v(e){var t=D(e);return t||{}}function F(e){for(var t={},n=0,i=e;n<i.length;n++){var o=i[n];switch(o.stem){case"percent":case"%":t.style="percent";continue;case"%x100":t.style="percent",t.scale=100;continue;case"currency":t.style="currency",t.currency=o.options[0];continue;case"group-off":case",_":t.useGrouping=!1;continue;case"precision-integer":case".":t.maximumFractionDigits=0;continue;case"measure-unit":case"unit":t.style="unit",t.unit=o.options[0].replace(/^(.*?)-/,"");continue;case"compact-short":case"K":t.notation="compact",t.compactDisplay="short";continue;case"compact-long":case"KK":t.notation="compact",t.compactDisplay="long";continue;case"scientific":t=Object(u.a)(Object(u.a)(Object(u.a)({},t),{notation:"scientific"}),o.options.reduce((function(e,t){return Object(u.a)(Object(u.a)({},e),v(t))}),{}));continue;case"engineering":t=Object(u.a)(Object(u.a)(Object(u.a)({},t),{notation:"engineering"}),o.options.reduce((function(e,t){return Object(u.a)(Object(u.a)({},e),v(t))}),{}));continue;case"notation-simple":t.notation="standard";continue;case"unit-width-narrow":t.currencyDisplay="narrowSymbol",t.unitDisplay="narrow";continue;case"unit-width-short":t.currencyDisplay="code",t.unitDisplay="short";continue;case"unit-width-full-name":t.currencyDisplay="name",t.unitDisplay="long";continue;case"unit-width-iso-code":t.currencyDisplay="symbol";continue;case"scale":t.scale=parseFloat(o.options[0]);continue;case"rounding-mode-floor":t.roundingMode="floor";continue;case"rounding-mode-ceiling":t.roundingMode="ceil";continue;case"rounding-mode-down":t.roundingMode="trunc";continue;case"rounding-mode-up":t.roundingMode="expand";continue;case"rounding-mode-half-even":t.roundingMode="halfEven";continue;case"rounding-mode-half-down":t.roundingMode="halfTrunc";continue;case"rounding-mode-half-up":t.roundingMode="halfExpand";continue;case"integer-width":if(o.options.length>1)throw new RangeError("integer-width stems only accept a single optional option");o.options[0].replace(_,(function(e,n,i,o,a,r){if(n)t.minimumIntegerDigits=i.length;else{if(o&&a)throw new Error("We currently do not support maximum integer digits");if(r)throw new Error("We currently do not support exact integer digits")}return""}));continue}if(N.test(o.stem))t.minimumIntegerDigits=o.stem.length;else if(L.test(o.stem)){if(o.options.length>1)throw new RangeError("Fraction-precision stems only accept a single optional option");o.stem.replace(L,(function(e,n,i,o,a,r){return"*"===i?t.minimumFractionDigits=n.length:o&&"#"===o[0]?t.maximumFractionDigits=o.length:a&&r?(t.minimumFractionDigits=a.length,t.maximumFractionDigits=a.length+r.length):(t.minimumFractionDigits=n.length,t.maximumFractionDigits=n.length),""}));var a=o.options[0];"w"===a?t=Object(u.a)(Object(u.a)({},t),{trailingZeroDisplay:"stripIfInteger"}):a&&(t=Object(u.a)(Object(u.a)({},t),R(a)))}else if(O.test(o.stem))t=Object(u.a)(Object(u.a)({},t),R(o.stem));else{var r=D(o.stem);r&&(t=Object(u.a)(Object(u.a)({},t),r));var s=M(o.stem);s&&(t=Object(u.a)(Object(u.a)({},t),s))}}return t}var P,B={"001":["H","h"],AC:["H","h","hb","hB"],AD:["H","hB"],AE:["h","hB","hb","H"],AF:["H","hb","hB","h"],AG:["h","hb","H","hB"],AI:["H","h","hb","hB"],AL:["h","H","hB"],AM:["H","hB"],AO:["H","hB"],AR:["H","h","hB","hb"],AS:["h","H"],AT:["H","hB"],AU:["h","hb","H","hB"],AW:["H","hB"],AX:["H"],AZ:["H","hB","h"],BA:["H","hB","h"],BB:["h","hb","H","hB"],BD:["h","hB","H"],BE:["H","hB"],BF:["H","hB"],BG:["H","hB","h"],BH:["h","hB","hb","H"],BI:["H","h"],BJ:["H","hB"],BL:["H","hB"],BM:["h","hb","H","hB"],BN:["hb","hB","h","H"],BO:["H","hB","h","hb"],BQ:["H"],BR:["H","hB"],BS:["h","hb","H","hB"],BT:["h","H"],BW:["H","h","hb","hB"],BY:["H","h"],BZ:["H","h","hb","hB"],CA:["h","hb","H","hB"],CC:["H","h","hb","hB"],CD:["hB","H"],CF:["H","h","hB"],CG:["H","hB"],CH:["H","hB","h"],CI:["H","hB"],CK:["H","h","hb","hB"],CL:["H","h","hB","hb"],CM:["H","h","hB"],CN:["H","hB","hb","h"],CO:["h","H","hB","hb"],CP:["H"],CR:["H","h","hB","hb"],CU:["H","h","hB","hb"],CV:["H","hB"],CW:["H","hB"],CX:["H","h","hb","hB"],CY:["h","H","hb","hB"],CZ:["H"],DE:["H","hB"],DG:["H","h","hb","hB"],DJ:["h","H"],DK:["H"],DM:["h","hb","H","hB"],DO:["h","H","hB","hb"],DZ:["h","hB","hb","H"],EA:["H","h","hB","hb"],EC:["H","hB","h","hb"],EE:["H","hB"],EG:["h","hB","hb","H"],EH:["h","hB","hb","H"],ER:["h","H"],ES:["H","hB","h","hb"],ET:["hB","hb","h","H"],FI:["H"],FJ:["h","hb","H","hB"],FK:["H","h","hb","hB"],FM:["h","hb","H","hB"],FO:["H","h"],FR:["H","hB"],GA:["H","hB"],GB:["H","h","hb","hB"],GD:["h","hb","H","hB"],GE:["H","hB","h"],GF:["H","hB"],GG:["H","h","hb","hB"],GH:["h","H"],GI:["H","h","hb","hB"],GL:["H","h"],GM:["h","hb","H","hB"],GN:["H","hB"],GP:["H","hB"],GQ:["H","hB","h","hb"],GR:["h","H","hb","hB"],GT:["H","h","hB","hb"],GU:["h","hb","H","hB"],GW:["H","hB"],GY:["h","hb","H","hB"],HK:["h","hB","hb","H"],HN:["H","h","hB","hb"],HR:["H","hB"],HU:["H","h"],IC:["H","h","hB","hb"],ID:["H"],IE:["H","h","hb","hB"],IL:["H","hB"],IM:["H","h","hb","hB"],IN:["h","H"],IO:["H","h","hb","hB"],IQ:["h","hB","hb","H"],IR:["hB","H"],IS:["H"],IT:["H","hB"],JE:["H","h","hb","hB"],JM:["h","hb","H","hB"],JO:["h","hB","hb","H"],JP:["H","K","h"],KE:["hB","hb","H","h"],KG:["H","h","hB","hb"],KH:["hB","h","H","hb"],KI:["h","hb","H","hB"],KM:["H","h","hB","hb"],KN:["h","hb","H","hB"],KP:["h","H","hB","hb"],KR:["h","H","hB","hb"],KW:["h","hB","hb","H"],KY:["h","hb","H","hB"],KZ:["H","hB"],LA:["H","hb","hB","h"],LB:["h","hB","hb","H"],LC:["h","hb","H","hB"],LI:["H","hB","h"],LK:["H","h","hB","hb"],LR:["h","hb","H","hB"],LS:["h","H"],LT:["H","h","hb","hB"],LU:["H","h","hB"],LV:["H","hB","hb","h"],LY:["h","hB","hb","H"],MA:["H","h","hB","hb"],MC:["H","hB"],MD:["H","hB"],ME:["H","hB","h"],MF:["H","hB"],MG:["H","h"],MH:["h","hb","H","hB"],MK:["H","h","hb","hB"],ML:["H"],MM:["hB","hb","H","h"],MN:["H","h","hb","hB"],MO:["h","hB","hb","H"],MP:["h","hb","H","hB"],MQ:["H","hB"],MR:["h","hB","hb","H"],MS:["H","h","hb","hB"],MT:["H","h"],MU:["H","h"],MV:["H","h"],MW:["h","hb","H","hB"],MX:["H","h","hB","hb"],MY:["hb","hB","h","H"],MZ:["H","hB"],NA:["h","H","hB","hb"],NC:["H","hB"],NE:["H"],NF:["H","h","hb","hB"],NG:["H","h","hb","hB"],NI:["H","h","hB","hb"],NL:["H","hB"],NO:["H","h"],NP:["H","h","hB"],NR:["H","h","hb","hB"],NU:["H","h","hb","hB"],NZ:["h","hb","H","hB"],OM:["h","hB","hb","H"],PA:["h","H","hB","hb"],PE:["H","hB","h","hb"],PF:["H","h","hB"],PG:["h","H"],PH:["h","hB","hb","H"],PK:["h","hB","H"],PL:["H","h"],PM:["H","hB"],PN:["H","h","hb","hB"],PR:["h","H","hB","hb"],PS:["h","hB","hb","H"],PT:["H","hB"],PW:["h","H"],PY:["H","h","hB","hb"],QA:["h","hB","hb","H"],RE:["H","hB"],RO:["H","hB"],RS:["H","hB","h"],RU:["H"],RW:["H","h"],SA:["h","hB","hb","H"],SB:["h","hb","H","hB"],SC:["H","h","hB"],SD:["h","hB","hb","H"],SE:["H"],SG:["h","hb","H","hB"],SH:["H","h","hb","hB"],SI:["H","hB"],SJ:["H"],SK:["H"],SL:["h","hb","H","hB"],SM:["H","h","hB"],SN:["H","h","hB"],SO:["h","H"],SR:["H","hB"],SS:["h","hb","H","hB"],ST:["H","hB"],SV:["H","h","hB","hb"],SX:["H","h","hb","hB"],SY:["h","hB","hb","H"],SZ:["h","hb","H","hB"],TA:["H","h","hb","hB"],TC:["h","hb","H","hB"],TD:["h","H","hB"],TF:["H","h","hB"],TG:["H","hB"],TH:["H","h"],TJ:["H","h"],TL:["H","hB","hb","h"],TM:["H","h"],TN:["h","hB","hb","H"],TO:["h","H"],TR:["H","hB"],TT:["h","hb","H","hB"],TW:["hB","hb","h","H"],TZ:["hB","hb","H","h"],UA:["H","hB","h"],UG:["hB","hb","H","h"],UM:["h","hb","H","hB"],US:["h","hb","H","hB"],UY:["H","h","hB","hb"],UZ:["H","hB","h"],VA:["H","h","hB"],VC:["h","hb","H","hB"],VE:["h","H","hB","hb"],VG:["h","hb","H","hB"],VI:["h","hb","H","hB"],VN:["H","h"],VU:["h","H"],WF:["H","hB"],WS:["h","H"],XK:["H","hB","h"],YE:["h","hB","hb","H"],YT:["H","hB"],ZA:["H","h","hb","hB"],ZM:["h","hb","H","hB"],ZW:["H","h"],"af-ZA":["H","h","hB","hb"],"ar-001":["h","hB","hb","H"],"ca-ES":["H","h","hB"],"en-001":["h","hb","H","hB"],"es-BO":["H","h","hB","hb"],"es-BR":["H","h","hB","hb"],"es-EC":["H","h","hB","hb"],"es-ES":["H","h","hB","hb"],"es-GQ":["H","h","hB","hb"],"es-PE":["H","h","hB","hb"],"fr-CA":["H","h","hB"],"gl-ES":["H","h","hB"],"gu-IN":["hB","hb","h","H"],"hi-IN":["hB","h","H"],"it-CH":["H","h","hB"],"it-IT":["H","h","hB"],"kn-IN":["hB","h","H"],"ml-IN":["hB","h","H"],"mr-IN":["hB","hb","h","H"],"pa-IN":["hB","hb","h","H"],"ta-IN":["hB","h","hb","H"],"te-IN":["hB","h","H"],"zu-ZA":["H","hB","hb","h"]};function w(e){var t=e.hourCycle;if(void 0===t&&e.hourCycles&&e.hourCycles.length&&(t=e.hourCycles[0]),t)switch(t){case"h24":return"k";case"h23":return"H";case"h12":return"h";case"h11":return"K";default:throw new Error("Invalid hourCycle")}var n,i=e.language;return"root"!==i&&(n=e.maximize().region),(B[n||""]||B[i||""]||B["".concat(i,"-001")]||B["001"])[0]}var U=new RegExp("^".concat(E.source,"*")),q=new RegExp("".concat(E.source,"*$"));function H(e,t){return{start:e,end:t}}var V=!!String.prototype.startsWith&&"_a".startsWith("a",1),j=!!String.fromCodePoint,Y=!!Object.fromEntries,G=!!String.prototype.codePointAt,K=!!String.prototype.trimStart,W=!!String.prototype.trimEnd,z=!!Number.isSafeInteger?Number.isSafeInteger:function(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e&&Math.abs(e)<=9007199254740991},Z=!0;try{Z="a"===(null===(P=ie("([^\\p{White_Space}\\p{Pattern_Syntax}]*)","yu").exec("a"))||void 0===P?void 0:P[0])}catch(e){Z=!1}var X,J=V?function(e,t,n){return e.startsWith(t,n)}:function(e,t,n){return e.slice(n,n+t.length)===t},$=j?String.fromCodePoint:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n,i="",o=e.length,a=0;o>a;){if((n=e[a++])>1114111)throw RangeError(n+" is not a valid code point");i+=n<65536?String.fromCharCode(n):String.fromCharCode(55296+((n-=65536)>>10),n%1024+56320)}return i},Q=Y?Object.fromEntries:function(e){for(var t={},n=0,i=e;n<i.length;n++){var o=i[n],a=o[0],r=o[1];t[a]=r}return t},ee=G?function(e,t){return e.codePointAt(t)}:function(e,t){var n=e.length;if(!(t<0||t>=n)){var i,o=e.charCodeAt(t);return o<55296||o>56319||t+1===n||(i=e.charCodeAt(t+1))<56320||i>57343?o:i-56320+(o-55296<<10)+65536}},te=K?function(e){return e.trimStart()}:function(e){return e.replace(U,"")},ne=W?function(e){return e.trimEnd()}:function(e){return e.replace(q,"")};function ie(e,t){return new RegExp(e,t)}if(Z){var oe=ie("([^\\p{White_Space}\\p{Pattern_Syntax}]*)","yu");X=function(e,t){var n;return oe.lastIndex=t,null!==(n=oe.exec(e)[1])&&void 0!==n?n:""}}else X=function(e,t){for(var n=[];;){var i=ee(e,t);if(void 0===i||se(i)||le(i))break;n.push(i),t+=i>=65536?2:1}return $.apply(void 0,n)};var ae=function(){function e(e,t){void 0===t&&(t={}),this.message=e,this.position={offset:0,line:1,column:1},this.ignoreTag=!!t.ignoreTag,this.locale=t.locale,this.requiresOtherClause=!!t.requiresOtherClause,this.shouldParseSkeletons=!!t.shouldParseSkeletons}return e.prototype.parse=function(){if(0!==this.offset())throw Error("parser can only be used once");return this.parseMessage(0,"",!1)},e.prototype.parseMessage=function(e,t,n){for(var i=[];!this.isEOF();){var o=this.char();if(123===o){if((a=this.parseArgument(e,n)).err)return a;i.push(a.val)}else{if(125===o&&e>0)break;if(35!==o||"plural"!==t&&"selectordinal"!==t){if(60===o&&!this.ignoreTag&&47===this.peek()){if(n)break;return this.error(l.UNMATCHED_CLOSING_TAG,H(this.clonePosition(),this.clonePosition()))}if(60===o&&!this.ignoreTag&&re(this.peek()||0)){if((a=this.parseTag(e,t)).err)return a;i.push(a.val)}else{var a;if((a=this.parseLiteral(e,t)).err)return a;i.push(a.val)}}else{var r=this.clonePosition();this.bump(),i.push({type:d.pound,location:H(r,this.clonePosition())})}}}return{val:i,err:null}},e.prototype.parseTag=function(e,t){var n=this.clonePosition();this.bump();var i=this.parseTagName();if(this.bumpSpace(),this.bumpIf("/>"))return{val:{type:d.literal,value:"<".concat(i,"/>"),location:H(n,this.clonePosition())},err:null};if(this.bumpIf(">")){var o=this.parseMessage(e+1,t,!0);if(o.err)return o;var a=o.val,r=this.clonePosition();if(this.bumpIf("</")){if(this.isEOF()||!re(this.char()))return this.error(l.INVALID_TAG,H(r,this.clonePosition()));var s=this.clonePosition();return i!==this.parseTagName()?this.error(l.UNMATCHED_CLOSING_TAG,H(s,this.clonePosition())):(this.bumpSpace(),this.bumpIf(">")?{val:{type:d.tag,value:i,children:a,location:H(n,this.clonePosition())},err:null}:this.error(l.INVALID_TAG,H(r,this.clonePosition())))}return this.error(l.UNCLOSED_TAG,H(n,this.clonePosition()))}return this.error(l.INVALID_TAG,H(n,this.clonePosition()))},e.prototype.parseTagName=function(){var e,t=this.offset();for(this.bump();!this.isEOF()&&(45===(e=this.char())||46===e||e>=48&&e<=57||95===e||e>=97&&e<=122||e>=65&&e<=90||183==e||e>=192&&e<=214||e>=216&&e<=246||e>=248&&e<=893||e>=895&&e<=8191||e>=8204&&e<=8205||e>=8255&&e<=8256||e>=8304&&e<=8591||e>=11264&&e<=12271||e>=12289&&e<=55295||e>=63744&&e<=64975||e>=65008&&e<=65533||e>=65536&&e<=983039);)this.bump();return this.message.slice(t,this.offset())},e.prototype.parseLiteral=function(e,t){for(var n=this.clonePosition(),i="";;){var o=this.tryParseQuote(t);if(o)i+=o;else{var a=this.tryParseUnquoted(e,t);if(a)i+=a;else{var r=this.tryParseLeftAngleBracket();if(!r)break;i+=r}}}var s=H(n,this.clonePosition());return{val:{type:d.literal,value:i,location:s},err:null}},e.prototype.tryParseLeftAngleBracket=function(){return this.isEOF()||60!==this.char()||!this.ignoreTag&&(re(e=this.peek()||0)||47===e)?null:(this.bump(),"<");var e},e.prototype.tryParseQuote=function(e){if(this.isEOF()||39!==this.char())return null;switch(this.peek()){case 39:return this.bump(),this.bump(),"'";case 123:case 60:case 62:case 125:break;case 35:if("plural"===e||"selectordinal"===e)break;return null;default:return null}this.bump();var t=[this.char()];for(this.bump();!this.isEOF();){var n=this.char();if(39===n){if(39!==this.peek()){this.bump();break}t.push(39),this.bump()}else t.push(n);this.bump()}return $.apply(void 0,t)},e.prototype.tryParseUnquoted=function(e,t){if(this.isEOF())return null;var n=this.char();return 60===n||123===n||35===n&&("plural"===t||"selectordinal"===t)||125===n&&e>0?null:(this.bump(),$(n))},e.prototype.parseArgument=function(e,t){var n=this.clonePosition();if(this.bump(),this.bumpSpace(),this.isEOF())return this.error(l.EXPECT_ARGUMENT_CLOSING_BRACE,H(n,this.clonePosition()));if(125===this.char())return this.bump(),this.error(l.EMPTY_ARGUMENT,H(n,this.clonePosition()));var i=this.parseIdentifierIfPossible().value;if(!i)return this.error(l.MALFORMED_ARGUMENT,H(n,this.clonePosition()));if(this.bumpSpace(),this.isEOF())return this.error(l.EXPECT_ARGUMENT_CLOSING_BRACE,H(n,this.clonePosition()));switch(this.char()){case 125:return this.bump(),{val:{type:d.argument,value:i,location:H(n,this.clonePosition())},err:null};case 44:return this.bump(),this.bumpSpace(),this.isEOF()?this.error(l.EXPECT_ARGUMENT_CLOSING_BRACE,H(n,this.clonePosition())):this.parseArgumentOptions(e,t,i,n);default:return this.error(l.MALFORMED_ARGUMENT,H(n,this.clonePosition()))}},e.prototype.parseIdentifierIfPossible=function(){var e=this.clonePosition(),t=this.offset(),n=X(this.message,t),i=t+n.length;return this.bumpTo(i),{value:n,location:H(e,this.clonePosition())}},e.prototype.parseArgumentOptions=function(e,t,n,i){var o,a=this.clonePosition(),r=this.parseIdentifierIfPossible().value,s=this.clonePosition();switch(r){case"":return this.error(l.EXPECT_ARGUMENT_TYPE,H(a,s));case"number":case"date":case"time":this.bumpSpace();var m=null;if(this.bumpIf(",")){this.bumpSpace();var h=this.clonePosition();if((S=this.parseSimpleArgStyleIfPossible()).err)return S;if(0===(p=ne(S.val)).length)return this.error(l.EXPECT_ARGUMENT_STYLE,H(this.clonePosition(),this.clonePosition()));m={style:p,styleLocation:H(h,this.clonePosition())}}if((C=this.tryParseArgumentClose(i)).err)return C;var b=H(i,this.clonePosition());if(m&&J(null==m?void 0:m.style,"::",0)){var T=te(m.style.slice(2));if("number"===r)return(S=this.parseNumberSkeletonFromString(T,m.styleLocation)).err?S:{val:{type:d.number,value:n,location:b,style:S.val},err:null};if(0===T.length)return this.error(l.EXPECT_DATE_TIME_SKELETON,b);var g=T;this.locale&&(g=function(e,t){for(var n="",i=0;i<e.length;i++){var o=e.charAt(i);if("j"===o){for(var a=0;i+1<e.length&&e.charAt(i+1)===o;)a++,i++;var r=1+(1&a),s=a<2?1:3+(a>>1),l=w(t);for("H"!=l&&"k"!=l||(s=0);s-- >0;)n+="a";for(;r-- >0;)n=l+n}else n+="J"===o?"H":o}return n}(T,this.locale));var p={type:c.dateTime,pattern:g,location:m.styleLocation,parsedOptions:this.shouldParseSkeletons?y(g):{}};return{val:{type:"date"===r?d.date:d.time,value:n,location:b,style:p},err:null}}return{val:{type:"number"===r?d.number:"date"===r?d.date:d.time,value:n,location:b,style:null!==(o=null==m?void 0:m.style)&&void 0!==o?o:null},err:null};case"plural":case"selectordinal":case"select":var x=this.clonePosition();if(this.bumpSpace(),!this.bumpIf(","))return this.error(l.EXPECT_SELECT_ARGUMENT_OPTIONS,H(x,Object(u.a)({},x)));this.bumpSpace();var k=this.parseIdentifierIfPossible(),f=0;if("select"!==r&&"offset"===k.value){if(!this.bumpIf(":"))return this.error(l.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE,H(this.clonePosition(),this.clonePosition()));var S;if(this.bumpSpace(),(S=this.tryParseDecimalInteger(l.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE,l.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE)).err)return S;this.bumpSpace(),k=this.parseIdentifierIfPossible(),f=S.val}var C,E=this.tryParsePluralOrSelectOptions(e,r,t,k);if(E.err)return E;if((C=this.tryParseArgumentClose(i)).err)return C;var A=H(i,this.clonePosition());return"select"===r?{val:{type:d.select,value:n,options:Q(E.val),location:A},err:null}:{val:{type:d.plural,value:n,options:Q(E.val),offset:f,pluralType:"plural"===r?"cardinal":"ordinal",location:A},err:null};default:return this.error(l.INVALID_ARGUMENT_TYPE,H(a,s))}},e.prototype.tryParseArgumentClose=function(e){return this.isEOF()||125!==this.char()?this.error(l.EXPECT_ARGUMENT_CLOSING_BRACE,H(e,this.clonePosition())):(this.bump(),{val:!0,err:null})},e.prototype.parseSimpleArgStyleIfPossible=function(){for(var e=0,t=this.clonePosition();!this.isEOF();){switch(this.char()){case 39:this.bump();var n=this.clonePosition();if(!this.bumpUntil("'"))return this.error(l.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE,H(n,this.clonePosition()));this.bump();break;case 123:e+=1,this.bump();break;case 125:if(!(e>0))return{val:this.message.slice(t.offset,this.offset()),err:null};e-=1;break;default:this.bump()}}return{val:this.message.slice(t.offset,this.offset()),err:null}},e.prototype.parseNumberSkeletonFromString=function(e,t){var n=[];try{n=function(e){if(0===e.length)throw new Error("Number skeleton cannot be empty");for(var t=[],n=0,i=e.split(I).filter((function(e){return e.length>0}));n<i.length;n++){var o=i[n].split("/");if(0===o.length)throw new Error("Invalid number skeleton");for(var a=o[0],r=o.slice(1),s=0,l=r;s<l.length;s++)if(0===l[s].length)throw new Error("Invalid number skeleton");t.push({stem:a,options:r})}return t}(e)}catch(e){return this.error(l.INVALID_NUMBER_SKELETON,t)}return{val:{type:c.number,tokens:n,location:t,parsedOptions:this.shouldParseSkeletons?F(n):{}},err:null}},e.prototype.tryParsePluralOrSelectOptions=function(e,t,n,i){for(var o,a=!1,r=[],s=new Set,d=i.value,c=i.location;;){if(0===d.length){var u=this.clonePosition();if("select"===t||!this.bumpIf("="))break;var m=this.tryParseDecimalInteger(l.EXPECT_PLURAL_ARGUMENT_SELECTOR,l.INVALID_PLURAL_ARGUMENT_SELECTOR);if(m.err)return m;c=H(u,this.clonePosition()),d=this.message.slice(u.offset,this.offset())}if(s.has(d))return this.error("select"===t?l.DUPLICATE_SELECT_ARGUMENT_SELECTOR:l.DUPLICATE_PLURAL_ARGUMENT_SELECTOR,c);"other"===d&&(a=!0),this.bumpSpace();var h=this.clonePosition();if(!this.bumpIf("{"))return this.error("select"===t?l.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT:l.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT,H(this.clonePosition(),this.clonePosition()));var b=this.parseMessage(e+1,t,n);if(b.err)return b;var T=this.tryParseArgumentClose(h);if(T.err)return T;r.push([d,{value:b.val,location:H(h,this.clonePosition())}]),s.add(d),this.bumpSpace(),d=(o=this.parseIdentifierIfPossible()).value,c=o.location}return 0===r.length?this.error("select"===t?l.EXPECT_SELECT_ARGUMENT_SELECTOR:l.EXPECT_PLURAL_ARGUMENT_SELECTOR,H(this.clonePosition(),this.clonePosition())):this.requiresOtherClause&&!a?this.error(l.MISSING_OTHER_CLAUSE,H(this.clonePosition(),this.clonePosition())):{val:r,err:null}},e.prototype.tryParseDecimalInteger=function(e,t){var n=1,i=this.clonePosition();this.bumpIf("+")||this.bumpIf("-")&&(n=-1);for(var o=!1,a=0;!this.isEOF();){var r=this.char();if(!(r>=48&&r<=57))break;o=!0,a=10*a+(r-48),this.bump()}var s=H(i,this.clonePosition());return o?z(a*=n)?{val:a,err:null}:this.error(t,s):this.error(e,s)},e.prototype.offset=function(){return this.position.offset},e.prototype.isEOF=function(){return this.offset()===this.message.length},e.prototype.clonePosition=function(){return{offset:this.position.offset,line:this.position.line,column:this.position.column}},e.prototype.char=function(){var e=this.position.offset;if(e>=this.message.length)throw Error("out of bound");var t=ee(this.message,e);if(void 0===t)throw Error("Offset ".concat(e," is at invalid UTF-16 code unit boundary"));return t},e.prototype.error=function(e,t){return{val:null,err:{kind:e,message:this.message,location:t}}},e.prototype.bump=function(){if(!this.isEOF()){var e=this.char();10===e?(this.position.line+=1,this.position.column=1,this.position.offset+=1):(this.position.column+=1,this.position.offset+=e<65536?1:2)}},e.prototype.bumpIf=function(e){if(J(this.message,e,this.offset())){for(var t=0;t<e.length;t++)this.bump();return!0}return!1},e.prototype.bumpUntil=function(e){var t=this.offset(),n=this.message.indexOf(e,t);return n>=0?(this.bumpTo(n),!0):(this.bumpTo(this.message.length),!1)},e.prototype.bumpTo=function(e){if(this.offset()>e)throw Error("targetOffset ".concat(e," must be greater than or equal to the current offset ").concat(this.offset()));for(e=Math.min(e,this.message.length);;){var t=this.offset();if(t===e)break;if(t>e)throw Error("targetOffset ".concat(e," is at invalid UTF-16 code unit boundary"));if(this.bump(),this.isEOF())break}},e.prototype.bumpSpace=function(){for(;!this.isEOF()&&se(this.char());)this.bump()},e.prototype.peek=function(){if(this.isEOF())return null;var e=this.char(),t=this.offset(),n=this.message.charCodeAt(t+(e>=65536?2:1));return null!=n?n:null},e}();function re(e){return e>=97&&e<=122||e>=65&&e<=90}function se(e){return e>=9&&e<=13||32===e||133===e||e>=8206&&e<=8207||8232===e||8233===e}function le(e){return e>=33&&e<=35||36===e||e>=37&&e<=39||40===e||41===e||42===e||43===e||44===e||45===e||e>=46&&e<=47||e>=58&&e<=59||e>=60&&e<=62||e>=63&&e<=64||91===e||92===e||93===e||94===e||96===e||123===e||124===e||125===e||126===e||161===e||e>=162&&e<=165||166===e||167===e||169===e||171===e||172===e||174===e||176===e||177===e||182===e||187===e||191===e||215===e||247===e||e>=8208&&e<=8213||e>=8214&&e<=8215||8216===e||8217===e||8218===e||e>=8219&&e<=8220||8221===e||8222===e||8223===e||e>=8224&&e<=8231||e>=8240&&e<=8248||8249===e||8250===e||e>=8251&&e<=8254||e>=8257&&e<=8259||8260===e||8261===e||8262===e||e>=8263&&e<=8273||8274===e||8275===e||e>=8277&&e<=8286||e>=8592&&e<=8596||e>=8597&&e<=8601||e>=8602&&e<=8603||e>=8604&&e<=8607||8608===e||e>=8609&&e<=8610||8611===e||e>=8612&&e<=8613||8614===e||e>=8615&&e<=8621||8622===e||e>=8623&&e<=8653||e>=8654&&e<=8655||e>=8656&&e<=8657||8658===e||8659===e||8660===e||e>=8661&&e<=8691||e>=8692&&e<=8959||e>=8960&&e<=8967||8968===e||8969===e||8970===e||8971===e||e>=8972&&e<=8991||e>=8992&&e<=8993||e>=8994&&e<=9e3||9001===e||9002===e||e>=9003&&e<=9083||9084===e||e>=9085&&e<=9114||e>=9115&&e<=9139||e>=9140&&e<=9179||e>=9180&&e<=9185||e>=9186&&e<=9254||e>=9255&&e<=9279||e>=9280&&e<=9290||e>=9291&&e<=9311||e>=9472&&e<=9654||9655===e||e>=9656&&e<=9664||9665===e||e>=9666&&e<=9719||e>=9720&&e<=9727||e>=9728&&e<=9838||9839===e||e>=9840&&e<=10087||10088===e||10089===e||10090===e||10091===e||10092===e||10093===e||10094===e||10095===e||10096===e||10097===e||10098===e||10099===e||10100===e||10101===e||e>=10132&&e<=10175||e>=10176&&e<=10180||10181===e||10182===e||e>=10183&&e<=10213||10214===e||10215===e||10216===e||10217===e||10218===e||10219===e||10220===e||10221===e||10222===e||10223===e||e>=10224&&e<=10239||e>=10240&&e<=10495||e>=10496&&e<=10626||10627===e||10628===e||10629===e||10630===e||10631===e||10632===e||10633===e||10634===e||10635===e||10636===e||10637===e||10638===e||10639===e||10640===e||10641===e||10642===e||10643===e||10644===e||10645===e||10646===e||10647===e||10648===e||e>=10649&&e<=10711||10712===e||10713===e||10714===e||10715===e||e>=10716&&e<=10747||10748===e||10749===e||e>=10750&&e<=11007||e>=11008&&e<=11055||e>=11056&&e<=11076||e>=11077&&e<=11078||e>=11079&&e<=11084||e>=11085&&e<=11123||e>=11124&&e<=11125||e>=11126&&e<=11157||11158===e||e>=11159&&e<=11263||e>=11776&&e<=11777||11778===e||11779===e||11780===e||11781===e||e>=11782&&e<=11784||11785===e||11786===e||11787===e||11788===e||11789===e||e>=11790&&e<=11798||11799===e||e>=11800&&e<=11801||11802===e||11803===e||11804===e||11805===e||e>=11806&&e<=11807||11808===e||11809===e||11810===e||11811===e||11812===e||11813===e||11814===e||11815===e||11816===e||11817===e||e>=11818&&e<=11822||11823===e||e>=11824&&e<=11833||e>=11834&&e<=11835||e>=11836&&e<=11839||11840===e||11841===e||11842===e||e>=11843&&e<=11855||e>=11856&&e<=11857||11858===e||e>=11859&&e<=11903||e>=12289&&e<=12291||12296===e||12297===e||12298===e||12299===e||12300===e||12301===e||12302===e||12303===e||12304===e||12305===e||e>=12306&&e<=12307||12308===e||12309===e||12310===e||12311===e||12312===e||12313===e||12314===e||12315===e||12316===e||12317===e||e>=12318&&e<=12319||12320===e||12336===e||64830===e||64831===e||e>=65093&&e<=65094}function de(e){e.forEach((function(e){if(delete e.location,p(e)||x(e))for(var t in e.options)delete e.options[t].location,de(e.options[t].value);else b(e)&&S(e.style)||(T(e)||g(e))&&C(e.style)?delete e.style.location:f(e)&&de(e.children)}))}function ce(e,t){void 0===t&&(t={}),t=Object(u.a)({shouldParseSkeletons:!0,requiresOtherClause:!0},t);var n=new ae(e,t).parse();if(n.err){var i=SyntaxError(l[n.err.kind]);throw i.location=n.err.location,i.originalMessage=n.err.message,i}return(null==t?void 0:t.captureLocation)||de(n.val),n.val}function ue(e,t){var n=t&&t.cache?t.cache:ke,i=t&&t.serializer?t.serializer:ge;return(t&&t.strategy?t.strategy:Te)(e,{cache:n,serializer:i})}function me(e,t,n,i){var o,a=null==(o=i)||"number"==typeof o||"boolean"==typeof o?i:n(i),r=t.get(a);return void 0===r&&(r=e.call(this,i),t.set(a,r)),r}function he(e,t,n){var i=Array.prototype.slice.call(arguments,3),o=n(i),a=t.get(o);return void 0===a&&(a=e.apply(this,i),t.set(o,a)),a}function be(e,t,n,i,o){return n.bind(t,e,i,o)}function Te(e,t){return be(e,this,1===e.length?me:he,t.cache.create(),t.serializer)}var ge=function(){return JSON.stringify(arguments)};function pe(){this.cache=Object.create(null)}pe.prototype.get=function(e){return this.cache[e]},pe.prototype.set=function(e,t){this.cache[e]=t};var xe,ke={create:function(){return new pe}},fe={variadic:function(e,t){return be(e,this,he,t.cache.create(),t.serializer)},monadic:function(e,t){return be(e,this,me,t.cache.create(),t.serializer)}};!function(e){e.MISSING_VALUE="MISSING_VALUE",e.INVALID_VALUE="INVALID_VALUE",e.MISSING_INTL_API="MISSING_INTL_API"}(xe||(xe={}));var Se,Ce=function(e){function t(t,n,i){var o=e.call(this,t)||this;return o.code=n,o.originalMessage=i,o}return Object(u.b)(t,e),t.prototype.toString=function(){return"[formatjs Error: ".concat(this.code,"] ").concat(this.message)},t}(Error),Ee=function(e){function t(t,n,i,o){return e.call(this,'Invalid values for "'.concat(t,'": "').concat(n,'". Options are "').concat(Object.keys(i).join('", "'),'"'),xe.INVALID_VALUE,o)||this}return Object(u.b)(t,e),t}(Ce),Ae=function(e){function t(t,n,i){return e.call(this,'Value for "'.concat(t,'" must be of type ').concat(n),xe.INVALID_VALUE,i)||this}return Object(u.b)(t,e),t}(Ce),ye=function(e){function t(t,n){return e.call(this,'The intl string context variable "'.concat(t,'" was not provided to the string "').concat(n,'"'),xe.MISSING_VALUE,n)||this}return Object(u.b)(t,e),t}(Ce);function Ie(e){return"function"==typeof e}function Le(e,t,n,i,o,a,r){if(1===e.length&&m(e[0]))return[{type:Se.literal,value:e[0].value}];for(var s=[],l=0,d=e;l<d.length;l++){var c=d[l];if(m(c))s.push({type:Se.literal,value:c.value});else if(k(c))"number"==typeof a&&s.push({type:Se.literal,value:n.getNumberFormat(t).format(a)});else{var u=c.value;if(!o||!(u in o))throw new ye(u,r);var E=o[u];if(h(c))E&&"string"!=typeof E&&"number"!=typeof E||(E="string"==typeof E||"number"==typeof E?String(E):""),s.push({type:"string"==typeof E?Se.literal:Se.object,value:E});else if(T(c)){var A="string"==typeof c.style?i.date[c.style]:C(c.style)?c.style.parsedOptions:void 0;s.push({type:Se.literal,value:n.getDateTimeFormat(t,A).format(E)})}else if(g(c)){A="string"==typeof c.style?i.time[c.style]:C(c.style)?c.style.parsedOptions:i.time.medium;s.push({type:Se.literal,value:n.getDateTimeFormat(t,A).format(E)})}else if(b(c)){(A="string"==typeof c.style?i.number[c.style]:S(c.style)?c.style.parsedOptions:void 0)&&A.scale&&(E*=A.scale||1),s.push({type:Se.literal,value:n.getNumberFormat(t,A).format(E)})}else{if(f(c)){var y=c.children,I=c.value,L=o[I];if(!Ie(L))throw new Ae(I,"function",r);var O=L(Le(y,t,n,i,o,a).map((function(e){return e.value})));Array.isArray(O)||(O=[O]),s.push.apply(s,O.map((function(e){return{type:"string"==typeof e?Se.literal:Se.object,value:e}})))}if(p(c)){if(!(_=c.options[E]||c.options.other))throw new Ee(c.value,E,Object.keys(c.options),r);s.push.apply(s,Le(_.value,t,n,i,o))}else if(x(c)){var _;if(!(_=c.options["=".concat(E)])){if(!Intl.PluralRules)throw new Ce('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n',xe.MISSING_INTL_API,r);var N=n.getPluralRules(t,{type:c.pluralType}).select(E-(c.offset||0));_=c.options[N]||c.options.other}if(!_)throw new Ee(c.value,E,Object.keys(c.options),r);s.push.apply(s,Le(_.value,t,n,i,o,E-(c.offset||0)))}else;}}}return function(e){return e.length<2?e:e.reduce((function(e,t){var n=e[e.length-1];return n&&n.type===Se.literal&&t.type===Se.literal?n.value+=t.value:e.push(t),e}),[])}(s)}function Oe(e,t){return t?Object.keys(e).reduce((function(n,i){var o,a;return n[i]=(o=e[i],(a=t[i])?Object(u.a)(Object(u.a)(Object(u.a)({},o||{}),a||{}),Object.keys(o).reduce((function(e,t){return e[t]=Object(u.a)(Object(u.a)({},o[t]),a[t]||{}),e}),{})):o),n}),Object(u.a)({},e)):e}function _e(e){return{create:function(){return{get:function(t){return e[t]},set:function(t,n){e[t]=n}}}}}!function(e){e[e.literal=0]="literal",e[e.object=1]="object"}(Se||(Se={}));var Ne,Re=function(){function e(t,n,i,o){var a,r=this;if(void 0===n&&(n=e.defaultLocale),this.formatterCache={number:{},dateTime:{},pluralRules:{}},this.format=function(e){var t=r.formatToParts(e);if(1===t.length)return t[0].value;var n=t.reduce((function(e,t){return e.length&&t.type===Se.literal&&"string"==typeof e[e.length-1]?e[e.length-1]+=t.value:e.push(t.value),e}),[]);return n.length<=1?n[0]||"":n},this.formatToParts=function(e){return Le(r.ast,r.locales,r.formatters,r.formats,e,void 0,r.message)},this.resolvedOptions=function(){var e;return{locale:(null===(e=r.resolvedLocale)||void 0===e?void 0:e.toString())||Intl.NumberFormat.supportedLocalesOf(r.locales)[0]}},this.getAst=function(){return r.ast},this.locales=n,this.resolvedLocale=e.resolveLocale(n),"string"==typeof t){if(this.message=t,!e.__parse)throw new TypeError("IntlMessageFormat.__parse must be set to process `message` of type `string`");var s=o||{},l=(s.formatters,Object(u.c)(s,["formatters"]));this.ast=e.__parse(t,Object(u.a)(Object(u.a)({},l),{locale:this.resolvedLocale}))}else this.ast=t;if(!Array.isArray(this.ast))throw new TypeError("A message must be provided as a String or AST.");this.formats=Oe(e.formats,i),this.formatters=o&&o.formatters||(void 0===(a=this.formatterCache)&&(a={number:{},dateTime:{},pluralRules:{}}),{getNumberFormat:ue((function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return new((e=Intl.NumberFormat).bind.apply(e,Object(u.d)([void 0],t,!1)))}),{cache:_e(a.number),strategy:fe.variadic}),getDateTimeFormat:ue((function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return new((e=Intl.DateTimeFormat).bind.apply(e,Object(u.d)([void 0],t,!1)))}),{cache:_e(a.dateTime),strategy:fe.variadic}),getPluralRules:ue((function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return new((e=Intl.PluralRules).bind.apply(e,Object(u.d)([void 0],t,!1)))}),{cache:_e(a.pluralRules),strategy:fe.variadic})})}return Object.defineProperty(e,"defaultLocale",{get:function(){return e.memoizedDefaultLocale||(e.memoizedDefaultLocale=(new Intl.NumberFormat).resolvedOptions().locale),e.memoizedDefaultLocale},enumerable:!1,configurable:!0}),e.memoizedDefaultLocale=null,e.resolveLocale=function(e){if(void 0!==Intl.Locale){var t=Intl.NumberFormat.supportedLocalesOf(e);return t.length>0?new Intl.Locale(t[0]):new Intl.Locale("string"==typeof e?e:e[0])}},e.__parse=ce,e.formats={number:{integer:{maximumFractionDigits:0},currency:{style:"currency"},percent:{style:"percent"}},date:{short:{month:"numeric",day:"numeric",year:"2-digit"},medium:{month:"short",day:"numeric",year:"numeric"},long:{month:"long",day:"numeric",year:"numeric"},full:{weekday:"long",month:"long",day:"numeric",year:"numeric"}},time:{short:{hour:"numeric",minute:"numeric"},medium:{hour:"numeric",minute:"numeric",second:"numeric"},long:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"},full:{hour:"numeric",minute:"numeric",second:"numeric",timeZoneName:"short"}}},e}();!function(e){e.FORMAT_ERROR="FORMAT_ERROR",e.UNSUPPORTED_FORMATTER="UNSUPPORTED_FORMATTER",e.INVALID_CONFIG="INVALID_CONFIG",e.MISSING_DATA="MISSING_DATA",e.MISSING_TRANSLATION="MISSING_TRANSLATION"}(Ne||(Ne={}));var De=function(e){function t(n,i,o){var a=this,r=o?o instanceof Error?o:new Error(String(o)):void 0;return(a=e.call(this,"[@formatjs/intl Error ".concat(n,"] ").concat(i,"\n").concat(r?"\n".concat(r.message,"\n").concat(r.stack):""))||this).code=n,"function"==typeof Error.captureStackTrace&&Error.captureStackTrace(a,t),a}return Object(u.b)(t,e),t}(Error),Me=function(e){function t(t,n){return e.call(this,Ne.UNSUPPORTED_FORMATTER,t,n)||this}return Object(u.b)(t,e),t}(De),ve=function(e){function t(t,n){return e.call(this,Ne.INVALID_CONFIG,t,n)||this}return Object(u.b)(t,e),t}(De),Fe=function(e){function t(t,n){return e.call(this,Ne.MISSING_DATA,t,n)||this}return Object(u.b)(t,e),t}(De),Pe=function(e){function t(t,n,i){var o=e.call(this,Ne.FORMAT_ERROR,"".concat(t,"\nLocale: ").concat(n,"\n"),i)||this;return o.locale=n,o}return Object(u.b)(t,e),t}(De),Be=function(e){function t(t,n,i,o){var a=e.call(this,"".concat(t,"\nMessageID: ").concat(null==i?void 0:i.id,"\nDefault Message: ").concat(null==i?void 0:i.defaultMessage,"\nDescription: ").concat(null==i?void 0:i.description,"\n"),n,o)||this;return a.descriptor=i,a.locale=n,a}return Object(u.b)(t,e),t}(Pe),we=function(e){function t(t,n){var i=e.call(this,Ne.MISSING_TRANSLATION,'Missing message: "'.concat(t.id,'" for locale "').concat(n,'", using ').concat(t.defaultMessage?"default message (".concat("string"==typeof t.defaultMessage?t.defaultMessage:t.defaultMessage.map((function(e){var t;return null!==(t=e.value)&&void 0!==t?t:JSON.stringify(e)})).join(),")"):"id"," as fallback."))||this;return i.descriptor=t,i}return Object(u.b)(t,e),t}(De);function Ue(e,t,n){return void 0===n&&(n={}),t.reduce((function(t,i){return i in e?t[i]=e[i]:i in n&&(t[i]=n[i]),t}),{})}var qe={formats:{},messages:{},timeZone:void 0,defaultLocale:"en",defaultFormats:{},fallbackOnEmptyString:!0,onError:function(e){0},onWarn:function(e){0}};function He(e){return{create:function(){return{get:function(t){return e[t]},set:function(t,n){e[t]=n}}}}}function Ve(e,t,n,i){var o,a=e&&e[t];if(a&&(o=a[n]),o)return o;i(new Me("No ".concat(t," format named: ").concat(n)))}var je=["style","currency","unit","unitDisplay","useGrouping","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","compactDisplay","currencyDisplay","currencySign","notation","signDisplay","unit","unitDisplay","numberingSystem","trailingZeroDisplay","roundingPriority","roundingIncrement","roundingMode"];function Ye(e,t,n){var i=e.locale,o=e.formats,a=e.onError;void 0===n&&(n={});var r=n.format,s=r&&Ve(o,"number",r,a)||{};return t(i,Ue(n,je,s))}function Ge(e,t,n,i){void 0===i&&(i={});try{return Ye(e,t,i).format(n)}catch(t){e.onError(new Pe("Error formatting number.",e.locale,t))}return String(n)}function Ke(e,t,n,i){void 0===i&&(i={});try{return Ye(e,t,i).formatToParts(n)}catch(t){e.onError(new Pe("Error formatting number.",e.locale,t))}return[]}var We=["numeric","style"];function ze(e,t,n,i,o){void 0===o&&(o={}),i||(i="second"),Intl.RelativeTimeFormat||e.onError(new Ce('Intl.RelativeTimeFormat is not available in this environment.\nTry polyfilling it using "@formatjs/intl-relativetimeformat"\n',xe.MISSING_INTL_API));try{return function(e,t,n){var i=e.locale,o=e.formats,a=e.onError;void 0===n&&(n={});var r=n.format,s=!!r&&Ve(o,"relative",r,a)||{};return t(i,Ue(n,We,s))}(e,t,o).format(n,i)}catch(t){e.onError(new Pe("Error formatting relative time.",e.locale,t))}return String(n)}var Ze=["formatMatcher","timeZone","hour12","weekday","era","year","month","day","hour","minute","second","timeZoneName","hourCycle","dateStyle","timeStyle","calendar","numberingSystem","fractionalSecondDigits"];function Xe(e,t,n,i){var o=e.locale,a=e.formats,r=e.onError,s=e.timeZone;void 0===i&&(i={});var l=i.format,d=Object(u.a)(Object(u.a)({},s&&{timeZone:s}),l&&Ve(a,t,l,r)),c=Ue(i,Ze,d);return"time"!==t||c.hour||c.minute||c.second||c.timeStyle||c.dateStyle||(c=Object(u.a)(Object(u.a)({},c),{hour:"numeric",minute:"numeric"})),n(o,c)}function Je(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];var o=n[0],a=n[1],r=void 0===a?{}:a,s="string"==typeof o?new Date(o||0):o;try{return Xe(e,"date",t,r).format(s)}catch(t){e.onError(new Pe("Error formatting date.",e.locale,t))}return String(s)}function $e(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];var o=n[0],a=n[1],r=void 0===a?{}:a,s="string"==typeof o?new Date(o||0):o;try{return Xe(e,"time",t,r).format(s)}catch(t){e.onError(new Pe("Error formatting time.",e.locale,t))}return String(s)}function Qe(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];var o=n[0],a=n[1],r=n[2],s=void 0===r?{}:r,l=e.timeZone,d=e.locale,c=e.onError,u=Ue(s,Ze,l?{timeZone:l}:{});try{return t(d,u).formatRange(o,a)}catch(t){c(new Pe("Error formatting date time range.",e.locale,t))}return String(o)}function et(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];var o=n[0],a=n[1],r=void 0===a?{}:a,s="string"==typeof o?new Date(o||0):o;try{return Xe(e,"date",t,r).formatToParts(s)}catch(t){e.onError(new Pe("Error formatting date.",e.locale,t))}return[]}function tt(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];var o=n[0],a=n[1],r=void 0===a?{}:a,s="string"==typeof o?new Date(o||0):o;try{return Xe(e,"time",t,r).formatToParts(s)}catch(t){e.onError(new Pe("Error formatting time.",e.locale,t))}return[]}var nt=["type"];function it(e,t,n,i){var o=e.locale,a=e.onError;void 0===i&&(i={}),Intl.PluralRules||a(new Ce('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n',xe.MISSING_INTL_API));var r=Ue(i,nt);try{return t(o,r).select(n)}catch(e){a(new Pe("Error formatting plural.",o,e))}return"other"}function ot(e,t){return Object.keys(e).reduce((function(n,i){return n[i]=Object(u.a)({timeZone:t},e[i]),n}),{})}function at(e,t){return Object.keys(Object(u.a)(Object(u.a)({},e),t)).reduce((function(n,i){return n[i]=Object(u.a)(Object(u.a)({},e[i]||{}),t[i]||{}),n}),{})}function rt(e,t){if(!t)return e;var n=Re.formats;return Object(u.a)(Object(u.a)(Object(u.a)({},n),e),{date:at(ot(n.date,t),ot(e.date||{},t)),time:at(ot(n.time,t),ot(e.time||{},t))})}var st=function(e,t,n,i,o){var a=e.locale,r=e.formats,s=e.messages,l=e.defaultLocale,c=e.defaultFormats,m=e.fallbackOnEmptyString,h=e.onError,b=e.timeZone,T=e.defaultRichTextElements;void 0===n&&(n={id:""});var g=n.id,p=n.defaultMessage;!function(e,t,n){if(void 0===n&&(n=Error),!e)throw new n(t)}(!!g,"[@formatjs/intl] An `id` must be provided to format a message. You can either:\n1. Configure your build toolchain with [babel-plugin-formatjs](https://formatjs.io/docs/tooling/babel-plugin)\nor [@formatjs/ts-transformer](https://formatjs.io/docs/tooling/ts-transformer) OR\n2. Configure your `eslint` config to include [eslint-plugin-formatjs](https://formatjs.io/docs/tooling/linter#enforce-id)\nto autofix this issue");var x=String(g),k=s&&Object.prototype.hasOwnProperty.call(s,x)&&s[x];if(Array.isArray(k)&&1===k.length&&k[0].type===d.literal)return k[0].value;if(!i&&k&&"string"==typeof k&&!T)return k.replace(/'\{(.*?)\}'/gi,"{$1}");if(i=Object(u.a)(Object(u.a)({},T),i||{}),r=rt(r,b),c=rt(c,b),!k){if(!1===m&&""===k)return k;if((!p||a&&a.toLowerCase()!==l.toLowerCase())&&h(new we(n,a)),p)try{return t.getMessageFormat(p,l,c,o).format(i)}catch(e){return h(new Be('Error formatting default message for: "'.concat(x,'", rendering default message verbatim'),a,n,e)),"string"==typeof p?p:x}return x}try{return t.getMessageFormat(k,a,r,Object(u.a)({formatters:t},o||{})).format(i)}catch(e){h(new Be('Error formatting message: "'.concat(x,'", using ').concat(p?"default message":"id"," as fallback."),a,n,e))}if(p)try{return t.getMessageFormat(p,l,c,o).format(i)}catch(e){h(new Be('Error formatting the default message for: "'.concat(x,'", rendering message verbatim'),a,n,e))}return"string"==typeof k?k:"string"==typeof p?p:x},lt=["type","style"],dt=Date.now();function ct(e,t,n,i){void 0===i&&(i={});var o=ut(e,t,n,i).reduce((function(e,t){var n=t.value;return"string"!=typeof n?e.push(n):"string"==typeof e[e.length-1]?e[e.length-1]+=n:e.push(n),e}),[]);return 1===o.length?o[0]:0===o.length?"":o}function ut(e,t,n,i){var o=e.locale,a=e.onError;void 0===i&&(i={}),Intl.ListFormat||a(new Ce('Intl.ListFormat is not available in this environment.\nTry polyfilling it using "@formatjs/intl-listformat"\n',xe.MISSING_INTL_API));var r=Ue(i,lt);try{var s={},l=n.map((function(e,t){if("object"==typeof e){var n=function(e){return"".concat(dt,"_").concat(e,"_").concat(dt)}(t);return s[n]=e,n}return String(e)}));return t(o,r).formatToParts(l).map((function(e){return"literal"===e.type?e:Object(u.a)(Object(u.a)({},e),{value:s[e.value]||e.value})}))}catch(e){a(new Pe("Error formatting list.",o,e))}return n}var mt=["style","type","fallback","languageDisplay"];function ht(e,t,n,i){var o=e.locale,a=e.onError;Intl.DisplayNames||a(new Ce('Intl.DisplayNames is not available in this environment.\nTry polyfilling it using "@formatjs/intl-displaynames"\n',xe.MISSING_INTL_API));var r=Ue(i,mt);try{return t(o,r).of(n)}catch(e){a(new Pe("Error formatting display name.",o,e))}}function bt(e){var t;e.onWarn&&e.defaultRichTextElements&&"string"==typeof((t=e.messages||{})?t[Object.keys(t)[0]]:void 0)&&e.onWarn('[@formatjs/intl] "defaultRichTextElements" was specified but "message" was not pre-compiled. \nPlease consider using "@formatjs/cli" to pre-compile your messages for performance.\nFor more details see https://formatjs.io/docs/getting-started/message-distribution')}function Tt(e,t){var n=function(e){void 0===e&&(e={dateTime:{},number:{},message:{},relativeTime:{},pluralRules:{},list:{},displayNames:{}});var t=Intl.RelativeTimeFormat,n=Intl.ListFormat,i=Intl.DisplayNames,o=ue((function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return new((e=Intl.DateTimeFormat).bind.apply(e,Object(u.d)([void 0],t,!1)))}),{cache:He(e.dateTime),strategy:fe.variadic}),a=ue((function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return new((e=Intl.NumberFormat).bind.apply(e,Object(u.d)([void 0],t,!1)))}),{cache:He(e.number),strategy:fe.variadic}),r=ue((function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return new((e=Intl.PluralRules).bind.apply(e,Object(u.d)([void 0],t,!1)))}),{cache:He(e.pluralRules),strategy:fe.variadic});return{getDateTimeFormat:o,getNumberFormat:a,getMessageFormat:ue((function(e,t,n,i){return new Re(e,t,n,Object(u.a)({formatters:{getNumberFormat:a,getDateTimeFormat:o,getPluralRules:r}},i||{}))}),{cache:He(e.message),strategy:fe.variadic}),getRelativeTimeFormat:ue((function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return new(t.bind.apply(t,Object(u.d)([void 0],e,!1)))}),{cache:He(e.relativeTime),strategy:fe.variadic}),getPluralRules:r,getListFormat:ue((function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return new(n.bind.apply(n,Object(u.d)([void 0],e,!1)))}),{cache:He(e.list),strategy:fe.variadic}),getDisplayNames:ue((function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return new(i.bind.apply(i,Object(u.d)([void 0],e,!1)))}),{cache:He(e.displayNames),strategy:fe.variadic})}}(t),i=Object(u.a)(Object(u.a)({},qe),e),o=i.locale,a=i.defaultLocale,r=i.onError;return o?!Intl.NumberFormat.supportedLocalesOf(o).length&&r?r(new Fe('Missing locale data for locale: "'.concat(o,'" in Intl.NumberFormat. Using default locale: "').concat(a,'" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details'))):!Intl.DateTimeFormat.supportedLocalesOf(o).length&&r&&r(new Fe('Missing locale data for locale: "'.concat(o,'" in Intl.DateTimeFormat. Using default locale: "').concat(a,'" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details'))):(r&&r(new ve('"locale" was not configured, using "'.concat(a,'" as fallback. See https://formatjs.io/docs/react-intl/api#intlshape for more details'))),i.locale=i.defaultLocale||"en"),bt(i),Object(u.a)(Object(u.a)({},i),{formatters:n,formatNumber:Ge.bind(null,i,n.getNumberFormat),formatNumberToParts:Ke.bind(null,i,n.getNumberFormat),formatRelativeTime:ze.bind(null,i,n.getRelativeTimeFormat),formatDate:Je.bind(null,i,n.getDateTimeFormat),formatDateToParts:et.bind(null,i,n.getDateTimeFormat),formatTime:$e.bind(null,i,n.getDateTimeFormat),formatDateTimeRange:Qe.bind(null,i,n.getDateTimeFormat),formatTimeToParts:tt.bind(null,i,n.getDateTimeFormat),formatPlural:it.bind(null,i,n.getPluralRules),formatMessage:st.bind(null,i,n),$t:st.bind(null,i,n),formatList:ct.bind(null,i,n.getListFormat),formatListToParts:ut.bind(null,i,n.getListFormat),formatDisplayName:ht.bind(null,i,n.getDisplayNames)})}const gt=e=>{e.code!==Ne.MISSING_TRANSLATION&&(console.error("Error Parsing translation string. This will start throwing an error once the i18n package tooling is upgraded."),console.error(e))},pt="en";let xt,kt=!1;xt=Tt({locale:pt,defaultFormats:s,defaultLocale:pt,onError:()=>{}});const ft=()=>kt;function St(){return{messages:xt.messages,locale:xt.locale,defaultLocale:xt.defaultLocale,defaultFormats:xt.defaultFormats,formats:xt.formats}}function Ct(){return xt.locale}function Et(e,{values:t={},description:n,defaultMessage:i,ignoreTag:o}){if(!e||"string"!=typeof e)throw new Error("[I18n] An `id` must be a non-empty string to translate a message.");try{if(!i)throw new Error("Missing `defaultMessage`.");return xt.formatMessage({id:e,defaultMessage:i,description:n},t,{ignoreTag:o,shouldParseSkeletons:!0})}catch(t){throw new Error(`[I18n] Error formatting the default message for: "${e}".\n${t}`)}}function At(e){"string"==typeof(null==e?void 0:e.locale)&&(!function(e){if(!e.locale||"string"!=typeof e.locale)throw new Error("[I18n] A `locale` must be a non-empty string to add messages.");const t={locale:(n=e.locale,n.toLowerCase()),messages:e.messages,defaultFormats:s,defaultLocale:pt,onError:gt};var n;e.formats&&(t.formats=e.formats),xt=Tt(t,{dateTime:{},number:{},message:{},relativeTime:{},pluralRules:{},list:{},displayNames:{}})}(e),kt=!0)}async function yt(e){const t=await fetch(e,{credentials:"same-origin"});if(t.status>=400)throw new Error(`Translations request failed with status code: ${t.status}`);const n=await t.json();n&&n.locale&&"string"==typeof n.locale&&(At(n),kt=!0)}const It=i;var Lt=n(25),Ot=n.t(Lt,2),_t=n(26),Nt=n.t(_t,2),Rt=n(27),Dt=n.t(Rt,2),Mt=n(28),vt=n.t(Mt,2),Ft=n(29),Pt=n.t(Ft,2),Bt=n(30),wt=n.t(Bt,2),Ut=n(31),qt=n.t(Ut,2),Ht=n(32),Vt=n.t(Ht,2),jt=n(33),Yt=n.t(jt,2),Gt=n(34);const Kt={default:"",brackets:[["{","}","delimiter.curly"],["[","]","delimiter.square"],["(",")","delimiter.parenthesis"]],keywords:["if","in","else","while","do","for","continue","break","return","new","try","catch","throw","this","instanceof"],primitives:["void","boolean","byte","short","char","int","long","float","double","def"],constants:["true","false"],operators:["=",">","<","!","~","?","?:","?.",":","==","===","<=",">=","!=","!==","&&","||","++","--","+","-","*","/","&","|","^","%","<<",">>",">>>","+=","-=","*=","/=","&=","|=","^=","%=","<<=",">>=",">>>=","->","::","=~","==~"],symbols:/[=><!~?:&|+\-*\/^%]+/,escapes:/\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,digits:/\d+(_+\d+)*/,octaldigits:/[0-7]+(_+[0-7]+)*/,binarydigits:/[0-1]+(_+[0-1]+)*/,hexdigits:/[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,tokenizer:{root:[[/[a-zA-Z_][\w]*/,{cases:{"@keywords":"keyword","@primitives":"type","@constants":"constant","@default":"identifier"}}],[/[ \t\r\n]+/,"@whitespace"],[/\/\/.*$/,"comment"],[/[{}()\[\]]/,"@brackets"],[/@symbols/,{cases:{"@operators":"operators","@default":""}}],[/(@digits)[eE]([\-+]?(@digits))?[fFdD]?/,"number.float"],[/(@digits)\.(@digits)([eE][\-+]?(@digits))?[fFdD]?/,"number.float"],[/0[xX](@hexdigits)[Ll]?/,"number.hex"],[/0(@octaldigits)[Ll]?/,"number.octal"],[/0[bB](@binarydigits)[Ll]?/,"number.binary"],[/(@digits)[fFdD]/,"number.float"],[/(@digits)[lL]?/,"number"],[/[;,.]/,"delimiter"],[/"([^"\\]|\\.)*$/,"string.invalid"],[/"/,"string","@string_dq"],[/'([^'\\]|\\.)*$/,"string.invalid"],[/'/,"string","@string_sq"]],comment:[[/[^\/*]+/,"comment"],[/\*\//,"comment","@pop"],[/[\/*]/,"comment"]],string_dq:[[/[^\\"]+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/"/,"string","@pop"]],string_sq:[[/[^\\']+/,"string"],[/@escapes/,"string.escape"],[/\\./,"string.escape.invalid"],[/'/,"string","@pop"]]}},Wt=["boolean_script_field_script_field","date_script_field","double_script_field_script_field","ip_script_field_script_field","long_script_field_script_field","string_script_field_script_field"],zt={painless_test:vt,score:Nt,filter:qt,boolean_script_field_script_field:n.t(Gt,2),date_script_field:Yt,double_script_field_script_field:Vt,ip_script_field_script_field:wt,long_script_field_script_field:Pt,processor_conditional:Dt,string_script_field_script_field:Ot},Zt=({suggestions:e,hasFields:t,isRuntimeContext:n})=>{const i=e.map((e=>{const{properties:t,constructorDefinition:n,...i}=e;return i})),o=[...Kt.keywords.map((e=>({label:e,kind:"keyword",documentation:`Keyword: ${e}`,insertText:e}))),{label:"params",kind:"keyword",documentation:It.translate("monaco.painlessLanguage.autocomplete.paramsKeywordDescription",{defaultMessage:"Access variables passed into the script."}),insertText:"params"}],a=Kt.primitives.map((e=>({label:e,kind:"type",documentation:`Type: ${e}`,insertText:e})));let r=t?[...o,{label:"doc",kind:"keyword",documentation:It.translate("monaco.painlessLanguage.autocomplete.docKeywordDescription",{defaultMessage:"Access a field value from a script using the doc['field_name'] syntax"}),insertText:"doc[${1:'my_field'}]",insertTextAsSnippet:!0}]:o;return r=n?[...r,{label:"emit",kind:"keyword",documentation:It.translate("monaco.painlessLanguage.autocomplete.emitKeywordDescription",{defaultMessage:"Emit value without returning."}),insertText:"emit"}]:r,{isIncomplete:!1,suggestions:[...i,...r,...a]}},Xt=(e,t,n)=>{const i=zt[e].suggestions,o="painless_test"===e?i:i.concat(vt.suggestions),a=t[t.length-1],r=Wt.includes(e),s=null==n?void 0:n.filter((e=>"text"!==e.type)),l=Boolean(null==s?void 0:s.length);let d={isIncomplete:!1,suggestions:[]};if("new"===(c=t)[c.length-2])d=(e=>{let t=[];const n=e.filter((e=>e.constructorDefinition));return n&&(t=n.map((e=>e.constructorDefinition))),{isIncomplete:!1,suggestions:t}})(o);else if(s&&(e=>{const t="doc['",n=e.indexOf(t),i=n+4;return-1!==n&&e.length-1===i})(a))d=(e=>({isIncomplete:!1,suggestions:e.map((({name:e})=>({label:e,kind:"field",documentation:It.translate("monaco.painlessLanguage.autocomplete.fieldValueDescription",{defaultMessage:"Retrieve the value for field ''{fieldName}''",values:{fieldName:e}}),insertText:`${e}'`})))}))(s);else if((e=>{const t=e.split(".");return 2===t.length&&!1===t[1].includes("(")})(a)){d=((e,t)=>{const n=e.find((e=>e.label===t));return{isIncomplete:!1,suggestions:(null==n?void 0:n.properties)||[]}})(o,a.substring(0,a.length-1).split(".")[0])}else((e,t,n)=>{const i=e.split(".");return!1===((e,t)=>2===e.length&&t.includes(e[0]))(t,n)&&!1===(e=>{if(4===e.length){const t=e[0],n=e[2];return"boolean"===t&&"="===n}return!1})(t)&&!1===(e=>{const t=["'",'"'],n=e.split(""),i=n[0],o=n[n.length-1];return t.includes(i)||t.includes(o)})(e)&&1===i.length})(a,t,Kt.primitives)&&(d=Zt({suggestions:o,hasFields:l,isRuntimeContext:r}));var c;return d};var Jt,$t,Qt=n(1);class en extends Qt.k{get grammarFileName(){return"painless_parser.g4"}get literalNames(){return en.literalNames}get symbolicNames(){return en.symbolicNames}get ruleNames(){return en.ruleNames}get serializedATN(){return en._serializedATN}createFailedPredicateException(e,t){return new Qt.g(this,e,t)}constructor(e){super(e),this._interp=new Qt.l(this,en._ATN,en.DecisionsToDFA,new Qt.n)}source(){let e,t=new tn(this,this._ctx,this.state);this.enterRule(t,0,en.RULE_source);try{let n;for(this.enterOuterAlt(t,1),this.state=81,this._errHandler.sync(this),n=this._interp.adaptivePredict(this._input,0,this._ctx);2!==n&&n!==Qt.a.INVALID_ALT_NUMBER;)1===n&&(this.state=78,this.function_()),this.state=83,this._errHandler.sync(this),n=this._interp.adaptivePredict(this._input,0,this._ctx);for(this.state=87,this._errHandler.sync(this),e=this._input.LA(1);!(e-5&-32)&&1<<e-5&1664086549||!(e-59&-32)&&1<<e-59&67092483;)this.state=84,this.statement(),this.state=89,this._errHandler.sync(this),e=this._input.LA(1);this.state=90,this.match(en.EOF)}catch(e){if(!(e instanceof Qt.o))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}function_(){let e=new nn(this,this._ctx,this.state);this.enterRule(e,2,en.RULE_function);try{this.enterOuterAlt(e,1),this.state=92,this.decltype(),this.state=93,this.match(en.ID),this.state=94,this.parameters(),this.state=95,this.block()}catch(t){if(!(t instanceof Qt.o))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}parameters(){let e,t=new on(this,this._ctx,this.state);this.enterRule(t,4,en.RULE_parameters);try{if(this.enterOuterAlt(t,1),this.state=97,this.match(en.LP),this.state=109,this._errHandler.sync(this),e=this._input.LA(1),!(e-82&-32)&&1<<e-82&7)for(this.state=98,this.decltype(),this.state=99,this.match(en.ID),this.state=106,this._errHandler.sync(this),e=this._input.LA(1);12===e;)this.state=100,this.match(en.COMMA),this.state=101,this.decltype(),this.state=102,this.match(en.ID),this.state=108,this._errHandler.sync(this),e=this._input.LA(1);this.state=111,this.match(en.RP)}catch(e){if(!(e instanceof Qt.o))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}statement(){let e,t=new an(this,this._ctx,this.state);this.enterRule(t,6,en.RULE_statement);try{switch(this.state=117,this._errHandler.sync(this),this._input.LA(1)){case 14:case 17:case 19:case 24:this.enterOuterAlt(t,1),this.state=113,this.rstatement();break;case 5:case 7:case 9:case 18:case 20:case 21:case 22:case 23:case 26:case 29:case 30:case 34:case 35:case 59:case 60:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:this.enterOuterAlt(t,2),this.state=114,this.dstatement(),this.state=115,e=this._input.LA(1),-1!==e&&13!==e?this._errHandler.recoverInline(this):(this._errHandler.reportMatch(this),this.consume());break;default:throw new Qt.j(this)}}catch(e){if(!(e instanceof Qt.o))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}rstatement(){let e,t=new rn(this,this._ctx,this.state);this.enterRule(t,8,en.RULE_rstatement);try{let n;switch(this.state=179,this._errHandler.sync(this),this._interp.adaptivePredict(this._input,12,this._ctx)){case 1:switch(t=new un(this,t),this.enterOuterAlt(t,1),this.state=119,this.match(en.IF),this.state=120,this.match(en.LP),this.state=121,this.expression(),this.state=122,this.match(en.RP),this.state=123,this.trailer(),this.state=127,this._errHandler.sync(this),this._interp.adaptivePredict(this._input,5,this._ctx)){case 1:this.state=124,this.match(en.ELSE),this.state=125,this.trailer();break;case 2:if(this.state=126,this._input.LA(1)==en.ELSE)throw this.createFailedPredicateException(" this._input.LA(1) != painless_parser.ELSE ")}break;case 2:switch(t=new dn(this,t),this.enterOuterAlt(t,2),this.state=129,this.match(en.WHILE),this.state=130,this.match(en.LP),this.state=131,this.expression(),this.state=132,this.match(en.RP),this.state=135,this._errHandler.sync(this),this._input.LA(1)){case 3:case 5:case 7:case 9:case 14:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 26:case 29:case 30:case 34:case 35:case 59:case 60:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:this.state=133,this.trailer();break;case 13:this.state=134,this.empty();break;default:throw new Qt.j(this)}break;case 3:switch(t=new sn(this,t),this.enterOuterAlt(t,3),this.state=137,this.match(en.FOR),this.state=138,this.match(en.LP),this.state=140,this._errHandler.sync(this),e=this._input.LA(1),(!(e-5&-32)&&1<<e-5&1661206549||!(e-59&-32)&&1<<e-59&67092483)&&(this.state=139,this.initializer()),this.state=142,this.match(en.SEMICOLON),this.state=144,this._errHandler.sync(this),e=this._input.LA(1),(!(e-5&-32)&&1<<e-5&1661206549||!(e-59&-32)&&1<<e-59&41926659)&&(this.state=143,this.expression()),this.state=146,this.match(en.SEMICOLON),this.state=148,this._errHandler.sync(this),e=this._input.LA(1),(!(e-5&-32)&&1<<e-5&1661206549||!(e-59&-32)&&1<<e-59&41926659)&&(this.state=147,this.afterthought()),this.state=150,this.match(en.RP),this.state=153,this._errHandler.sync(this),this._input.LA(1)){case 3:case 5:case 7:case 9:case 14:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 26:case 29:case 30:case 34:case 35:case 59:case 60:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:this.state=151,this.trailer();break;case 13:this.state=152,this.empty();break;default:throw new Qt.j(this)}break;case 4:t=new mn(this,t),this.enterOuterAlt(t,4),this.state=155,this.match(en.FOR),this.state=156,this.match(en.LP),this.state=157,this.decltype(),this.state=158,this.match(en.ID),this.state=159,this.match(en.COLON),this.state=160,this.expression(),this.state=161,this.match(en.RP),this.state=162,this.trailer();break;case 5:t=new cn(this,t),this.enterOuterAlt(t,5),this.state=164,this.match(en.FOR),this.state=165,this.match(en.LP),this.state=166,this.match(en.ID),this.state=167,this.match(en.IN),this.state=168,this.expression(),this.state=169,this.match(en.RP),this.state=170,this.trailer();break;case 6:t=new ln(this,t),this.enterOuterAlt(t,6),this.state=172,this.match(en.TRY),this.state=173,this.block(),this.state=175,this._errHandler.sync(this),n=1;do{if(1!==n)throw new Qt.j(this);this.state=174,this.trap(),this.state=177,this._errHandler.sync(this),n=this._interp.adaptivePredict(this._input,11,this._ctx)}while(2!==n&&n!==Qt.a.INVALID_ALT_NUMBER)}}catch(e){if(!(e instanceof Qt.o))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}dstatement(){let e,t=new hn(this,this._ctx,this.state);this.enterRule(t,10,en.RULE_dstatement);try{switch(this.state=198,this._errHandler.sync(this),this._interp.adaptivePredict(this._input,14,this._ctx)){case 1:t=new kn(this,t),this.enterOuterAlt(t,1),this.state=181,this.match(en.DO),this.state=182,this.block(),this.state=183,this.match(en.WHILE),this.state=184,this.match(en.LP),this.state=185,this.expression(),this.state=186,this.match(en.RP);break;case 2:t=new bn(this,t),this.enterOuterAlt(t,2),this.state=188,this.declaration();break;case 3:t=new pn(this,t),this.enterOuterAlt(t,3),this.state=189,this.match(en.CONTINUE);break;case 4:t=new Tn(this,t),this.enterOuterAlt(t,4),this.state=190,this.match(en.BREAK);break;case 5:t=new fn(this,t),this.enterOuterAlt(t,5),this.state=191,this.match(en.RETURN),this.state=193,this._errHandler.sync(this),e=this._input.LA(1),(!(e-5&-32)&&1<<e-5&1661206549||!(e-59&-32)&&1<<e-59&41926659)&&(this.state=192,this.expression());break;case 6:t=new gn(this,t),this.enterOuterAlt(t,6),this.state=195,this.match(en.THROW),this.state=196,this.expression();break;case 7:t=new xn(this,t),this.enterOuterAlt(t,7),this.state=197,this.expression()}}catch(e){if(!(e instanceof Qt.o))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}trailer(){let e=new Sn(this,this._ctx,this.state);this.enterRule(e,12,en.RULE_trailer);try{switch(this.state=202,this._errHandler.sync(this),this._input.LA(1)){case 3:this.enterOuterAlt(e,1),this.state=200,this.block();break;case 5:case 7:case 9:case 14:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 26:case 29:case 30:case 34:case 35:case 59:case 60:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:this.enterOuterAlt(e,2),this.state=201,this.statement();break;default:throw new Qt.j(this)}}catch(t){if(!(t instanceof Qt.o))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}block(){let e,t=new Cn(this,this._ctx,this.state);this.enterRule(t,14,en.RULE_block);try{let n;for(this.enterOuterAlt(t,1),this.state=204,this.match(en.LBRACK),this.state=208,this._errHandler.sync(this),n=this._interp.adaptivePredict(this._input,16,this._ctx);2!==n&&n!==Qt.a.INVALID_ALT_NUMBER;)1===n&&(this.state=205,this.statement()),this.state=210,this._errHandler.sync(this),n=this._interp.adaptivePredict(this._input,16,this._ctx);this.state=212,this._errHandler.sync(this),e=this._input.LA(1),(!(e-5&-32)&&1<<e-5&1663541269||!(e-59&-32)&&1<<e-59&67092483)&&(this.state=211,this.dstatement()),this.state=214,this.match(en.RBRACK)}catch(e){if(!(e instanceof Qt.o))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}empty(){let e=new En(this,this._ctx,this.state);this.enterRule(e,16,en.RULE_empty);try{this.enterOuterAlt(e,1),this.state=216,this.match(en.SEMICOLON)}catch(t){if(!(t instanceof Qt.o))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}initializer(){let e=new An(this,this._ctx,this.state);this.enterRule(e,18,en.RULE_initializer);try{switch(this.state=220,this._errHandler.sync(this),this._interp.adaptivePredict(this._input,18,this._ctx)){case 1:this.enterOuterAlt(e,1),this.state=218,this.declaration();break;case 2:this.enterOuterAlt(e,2),this.state=219,this.expression()}}catch(t){if(!(t instanceof Qt.o))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}afterthought(){let e=new yn(this,this._ctx,this.state);this.enterRule(e,20,en.RULE_afterthought);try{this.enterOuterAlt(e,1),this.state=222,this.expression()}catch(t){if(!(t instanceof Qt.o))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}declaration(){let e,t=new In(this,this._ctx,this.state);this.enterRule(t,22,en.RULE_declaration);try{for(this.enterOuterAlt(t,1),this.state=224,this.decltype(),this.state=225,this.declvar(),this.state=230,this._errHandler.sync(this),e=this._input.LA(1);12===e;)this.state=226,this.match(en.COMMA),this.state=227,this.declvar(),this.state=232,this._errHandler.sync(this),e=this._input.LA(1)}catch(e){if(!(e instanceof Qt.o))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}decltype(){let e=new Ln(this,this._ctx,this.state);this.enterRule(e,24,en.RULE_decltype);try{let t;for(this.enterOuterAlt(e,1),this.state=233,this.type_(),this.state=238,this._errHandler.sync(this),t=this._interp.adaptivePredict(this._input,20,this._ctx);2!==t&&t!==Qt.a.INVALID_ALT_NUMBER;)1===t&&(this.state=234,this.match(en.LBRACE),this.state=235,this.match(en.RBRACE)),this.state=240,this._errHandler.sync(this),t=this._interp.adaptivePredict(this._input,20,this._ctx)}catch(t){if(!(t instanceof Qt.o))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}type_(){let e=new On(this,this._ctx,this.state);this.enterRule(e,26,en.RULE_type);try{let t;switch(this.state=251,this._errHandler.sync(this),this._input.LA(1)){case 83:this.enterOuterAlt(e,1),this.state=241,this.match(en.DEF);break;case 82:this.enterOuterAlt(e,2),this.state=242,this.match(en.PRIMITIVE);break;case 84:for(this.enterOuterAlt(e,3),this.state=243,this.match(en.ID),this.state=248,this._errHandler.sync(this),t=this._interp.adaptivePredict(this._input,21,this._ctx);2!==t&&t!==Qt.a.INVALID_ALT_NUMBER;)1===t&&(this.state=244,this.match(en.DOT),this.state=245,this.match(en.DOTID)),this.state=250,this._errHandler.sync(this),t=this._interp.adaptivePredict(this._input,21,this._ctx);break;default:throw new Qt.j(this)}}catch(t){if(!(t instanceof Qt.o))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}declvar(){let e,t=new _n(this,this._ctx,this.state);this.enterRule(t,28,en.RULE_declvar);try{this.enterOuterAlt(t,1),this.state=253,this.match(en.ID),this.state=256,this._errHandler.sync(this),e=this._input.LA(1),61===e&&(this.state=254,this.match(en.ASSIGN),this.state=255,this.expression())}catch(e){if(!(e instanceof Qt.o))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}trap(){let e=new Nn(this,this._ctx,this.state);this.enterRule(e,30,en.RULE_trap);try{this.enterOuterAlt(e,1),this.state=258,this.match(en.CATCH),this.state=259,this.match(en.LP),this.state=260,this.type_(),this.state=261,this.match(en.ID),this.state=262,this.match(en.RP),this.state=263,this.block()}catch(t){if(!(t instanceof Qt.o))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}noncondexpression(e){void 0===e&&(e=0);let t,n=this._ctx,i=this.state,o=new Rn(this,this._ctx,i),a=o,r=32;this.enterRecursionRule(o,32,en.RULE_noncondexpression,e);try{let e;for(this.enterOuterAlt(o,1),o=new Dn(this,o),this._ctx=o,a=o,this.state=266,this.unary(),this._ctx.stop=this._input.LT(-1),this.state=309,this._errHandler.sync(this),e=this._interp.adaptivePredict(this._input,25,this._ctx);2!==e&&e!==Qt.a.INVALID_ALT_NUMBER;){if(1===e)switch(null!=this._parseListeners&&this.triggerExitRuleEvent(),a=o,this.state=307,this._errHandler.sync(this),this._interp.adaptivePredict(this._input,24,this._ctx)){case 1:if(o=new Fn(this,new Rn(this,n,i)),this.pushNewRecursionContext(o,r,en.RULE_noncondexpression),this.state=268,!this.precpred(this._ctx,13))throw this.createFailedPredicateException("this.precpred(this._ctx, 13)");this.state=269,t=this._input.LA(1),t-31&-32||!(1<<t-31&7)?this._errHandler.recoverInline(this):(this._errHandler.reportMatch(this),this.consume()),this.state=270,this.noncondexpression(14);break;case 2:if(o=new Fn(this,new Rn(this,n,i)),this.pushNewRecursionContext(o,r,en.RULE_noncondexpression),this.state=271,!this.precpred(this._ctx,12))throw this.createFailedPredicateException("this.precpred(this._ctx, 12)");this.state=272,t=this._input.LA(1),34!==t&&35!==t?this._errHandler.recoverInline(this):(this._errHandler.reportMatch(this),this.consume()),this.state=273,this.noncondexpression(13);break;case 3:if(o=new Fn(this,new Rn(this,n,i)),this.pushNewRecursionContext(o,r,en.RULE_noncondexpression),this.state=274,!this.precpred(this._ctx,11))throw this.createFailedPredicateException("this.precpred(this._ctx, 11)");this.state=275,t=this._input.LA(1),57!==t&&58!==t?this._errHandler.recoverInline(this):(this._errHandler.reportMatch(this),this.consume()),this.state=276,this.noncondexpression(12);break;case 4:if(o=new Fn(this,new Rn(this,n,i)),this.pushNewRecursionContext(o,r,en.RULE_noncondexpression),this.state=277,!this.precpred(this._ctx,10))throw this.createFailedPredicateException("this.precpred(this._ctx, 10)");this.state=278,t=this._input.LA(1),t-36&-32||!(1<<t-36&7)?this._errHandler.recoverInline(this):(this._errHandler.reportMatch(this),this.consume()),this.state=279,this.noncondexpression(11);break;case 5:if(o=new Mn(this,new Rn(this,n,i)),this.pushNewRecursionContext(o,r,en.RULE_noncondexpression),this.state=280,!this.precpred(this._ctx,9))throw this.createFailedPredicateException("this.precpred(this._ctx, 9)");this.state=281,t=this._input.LA(1),t-39&-32||!(1<<t-39&15)?this._errHandler.recoverInline(this):(this._errHandler.reportMatch(this),this.consume()),this.state=282,this.noncondexpression(10);break;case 6:if(o=new Mn(this,new Rn(this,n,i)),this.pushNewRecursionContext(o,r,en.RULE_noncondexpression),this.state=283,!this.precpred(this._ctx,7))throw this.createFailedPredicateException("this.precpred(this._ctx, 7)");this.state=284,t=this._input.LA(1),t-43&-32||!(1<<t-43&15)?this._errHandler.recoverInline(this):(this._errHandler.reportMatch(this),this.consume()),this.state=285,this.noncondexpression(8);break;case 7:if(o=new Fn(this,new Rn(this,n,i)),this.pushNewRecursionContext(o,r,en.RULE_noncondexpression),this.state=286,!this.precpred(this._ctx,6))throw this.createFailedPredicateException("this.precpred(this._ctx, 6)");this.state=287,this.match(en.BWAND),this.state=288,this.noncondexpression(7);break;case 8:if(o=new Fn(this,new Rn(this,n,i)),this.pushNewRecursionContext(o,r,en.RULE_noncondexpression),this.state=289,!this.precpred(this._ctx,5))throw this.createFailedPredicateException("this.precpred(this._ctx, 5)");this.state=290,this.match(en.XOR),this.state=291,this.noncondexpression(6);break;case 9:if(o=new Fn(this,new Rn(this,n,i)),this.pushNewRecursionContext(o,r,en.RULE_noncondexpression),this.state=292,!this.precpred(this._ctx,4))throw this.createFailedPredicateException("this.precpred(this._ctx, 4)");this.state=293,this.match(en.BWOR),this.state=294,this.noncondexpression(5);break;case 10:if(o=new vn(this,new Rn(this,n,i)),this.pushNewRecursionContext(o,r,en.RULE_noncondexpression),this.state=295,!this.precpred(this._ctx,3))throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");this.state=296,this.match(en.BOOLAND),this.state=297,this.noncondexpression(4);break;case 11:if(o=new vn(this,new Rn(this,n,i)),this.pushNewRecursionContext(o,r,en.RULE_noncondexpression),this.state=298,!this.precpred(this._ctx,2))throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");this.state=299,this.match(en.BOOLOR),this.state=300,this.noncondexpression(3);break;case 12:if(o=new Pn(this,new Rn(this,n,i)),this.pushNewRecursionContext(o,r,en.RULE_noncondexpression),this.state=301,!this.precpred(this._ctx,1))throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");this.state=302,this.match(en.ELVIS),this.state=303,this.noncondexpression(1);break;case 13:if(o=new Bn(this,new Rn(this,n,i)),this.pushNewRecursionContext(o,r,en.RULE_noncondexpression),this.state=304,!this.precpred(this._ctx,8))throw this.createFailedPredicateException("this.precpred(this._ctx, 8)");this.state=305,this.match(en.INSTANCEOF),this.state=306,this.decltype()}this.state=311,this._errHandler.sync(this),e=this._interp.adaptivePredict(this._input,25,this._ctx)}}catch(e){if(!(e instanceof Qt.o))throw e;o.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.unrollRecursionContexts(n)}return o}expression(){let e,t=new wn(this,this._ctx,this.state);this.enterRule(t,34,en.RULE_expression);try{switch(this.state=323,this._errHandler.sync(this),this._interp.adaptivePredict(this._input,26,this._ctx)){case 1:t=new Hn(this,t),this.enterOuterAlt(t,1),this.state=312,this.noncondexpression(0);break;case 2:t=new Un(this,t),this.enterOuterAlt(t,2),this.state=313,this.noncondexpression(0),this.state=314,this.match(en.COND),this.state=315,this.expression(),this.state=316,this.match(en.COLON),this.state=317,this.expression();break;case 3:t=new qn(this,t),this.enterOuterAlt(t,3),this.state=319,this.noncondexpression(0),this.state=320,e=this._input.LA(1),e-61&-32||!(1<<e-61&4095)?this._errHandler.recoverInline(this):(this._errHandler.reportMatch(this),this.consume()),this.state=321,this.expression()}}catch(e){if(!(e instanceof Qt.o))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}unary(){let e,t=new Vn(this,this._ctx,this.state);this.enterRule(t,36,en.RULE_unary);try{switch(this.state=330,this._errHandler.sync(this),this._input.LA(1)){case 59:case 60:t=new Yn(this,t),this.enterOuterAlt(t,1),this.state=325,e=this._input.LA(1),59!==e&&60!==e?this._errHandler.recoverInline(this):(this._errHandler.reportMatch(this),this.consume()),this.state=326,this.chain();break;case 34:case 35:t=new Gn(this,t),this.enterOuterAlt(t,2),this.state=327,e=this._input.LA(1),34!==e&&35!==e?this._errHandler.recoverInline(this):(this._errHandler.reportMatch(this),this.consume()),this.state=328,this.unary();break;case 5:case 7:case 9:case 23:case 29:case 30:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 84:t=new jn(this,t),this.enterOuterAlt(t,3),this.state=329,this.unarynotaddsub();break;default:throw new Qt.j(this)}}catch(e){if(!(e instanceof Qt.o))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}unarynotaddsub(){let e,t=new Kn(this,this._ctx,this.state);this.enterRule(t,38,en.RULE_unarynotaddsub);try{switch(this.state=339,this._errHandler.sync(this),this._interp.adaptivePredict(this._input,28,this._ctx)){case 1:t=new Zn(this,t),this.enterOuterAlt(t,1),this.state=332,this.chain();break;case 2:t=new Xn(this,t),this.enterOuterAlt(t,2),this.state=333,this.chain(),this.state=334,e=this._input.LA(1),59!==e&&60!==e?this._errHandler.recoverInline(this):(this._errHandler.reportMatch(this),this.consume());break;case 3:t=new zn(this,t),this.enterOuterAlt(t,3),this.state=336,e=this._input.LA(1),29!==e&&30!==e?this._errHandler.recoverInline(this):(this._errHandler.reportMatch(this),this.consume()),this.state=337,this.unary();break;case 4:t=new Wn(this,t),this.enterOuterAlt(t,4),this.state=338,this.castexpression()}}catch(e){if(!(e instanceof Qt.o))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}castexpression(){let e=new Jn(this,this._ctx,this.state);this.enterRule(e,40,en.RULE_castexpression);try{switch(this.state=351,this._errHandler.sync(this),this._interp.adaptivePredict(this._input,29,this._ctx)){case 1:e=new Qn(this,e),this.enterOuterAlt(e,1),this.state=341,this.match(en.LP),this.state=342,this.primordefcasttype(),this.state=343,this.match(en.RP),this.state=344,this.unary();break;case 2:e=new $n(this,e),this.enterOuterAlt(e,2),this.state=346,this.match(en.LP),this.state=347,this.refcasttype(),this.state=348,this.match(en.RP),this.state=349,this.unarynotaddsub()}}catch(t){if(!(t instanceof Qt.o))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}primordefcasttype(){let e,t=new ei(this,this._ctx,this.state);this.enterRule(t,42,en.RULE_primordefcasttype);try{this.enterOuterAlt(t,1),this.state=353,e=this._input.LA(1),82!==e&&83!==e?this._errHandler.recoverInline(this):(this._errHandler.reportMatch(this),this.consume())}catch(e){if(!(e instanceof Qt.o))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}refcasttype(){let e,t=new ti(this,this._ctx,this.state);this.enterRule(t,44,en.RULE_refcasttype);try{switch(this.state=384,this._errHandler.sync(this),this._input.LA(1)){case 83:this.enterOuterAlt(t,1),this.state=355,this.match(en.DEF),this.state=358,this._errHandler.sync(this),e=this._input.LA(1);do{this.state=356,this.match(en.LBRACE),this.state=357,this.match(en.RBRACE),this.state=360,this._errHandler.sync(this),e=this._input.LA(1)}while(5===e);break;case 82:this.enterOuterAlt(t,2),this.state=362,this.match(en.PRIMITIVE),this.state=365,this._errHandler.sync(this),e=this._input.LA(1);do{this.state=363,this.match(en.LBRACE),this.state=364,this.match(en.RBRACE),this.state=367,this._errHandler.sync(this),e=this._input.LA(1)}while(5===e);break;case 84:for(this.enterOuterAlt(t,3),this.state=369,this.match(en.ID),this.state=374,this._errHandler.sync(this),e=this._input.LA(1);10===e;)this.state=370,this.match(en.DOT),this.state=371,this.match(en.DOTID),this.state=376,this._errHandler.sync(this),e=this._input.LA(1);for(this.state=381,this._errHandler.sync(this),e=this._input.LA(1);5===e;)this.state=377,this.match(en.LBRACE),this.state=378,this.match(en.RBRACE),this.state=383,this._errHandler.sync(this),e=this._input.LA(1);break;default:throw new Qt.j(this)}}catch(e){if(!(e instanceof Qt.o))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}chain(){let e=new ni(this,this._ctx,this.state);this.enterRule(e,46,en.RULE_chain);try{let t;switch(this.state=394,this._errHandler.sync(this),this._interp.adaptivePredict(this._input,36,this._ctx)){case 1:for(e=new ii(this,e),this.enterOuterAlt(e,1),this.state=386,this.primary(),this.state=390,this._errHandler.sync(this),t=this._interp.adaptivePredict(this._input,35,this._ctx);2!==t&&t!==Qt.a.INVALID_ALT_NUMBER;)1===t&&(this.state=387,this.postfix()),this.state=392,this._errHandler.sync(this),t=this._interp.adaptivePredict(this._input,35,this._ctx);break;case 2:e=new oi(this,e),this.enterOuterAlt(e,2),this.state=393,this.arrayinitializer()}}catch(t){if(!(t instanceof Qt.o))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}primary(){let e,t=new ai(this,this._ctx,this.state);this.enterRule(t,48,en.RULE_primary);try{switch(this.state=415,this._errHandler.sync(this),this._interp.adaptivePredict(this._input,37,this._ctx)){case 1:t=new pi(this,t),this.enterOuterAlt(t,1),this.state=396,this.match(en.LP),this.state=397,this.expression(),this.state=398,this.match(en.RP);break;case 2:t=new Ti(this,t),this.enterOuterAlt(t,2),this.state=400,e=this._input.LA(1),e-73&-32||!(1<<e-73&15)?this._errHandler.recoverInline(this):(this._errHandler.reportMatch(this),this.consume());break;case 3:t=new mi(this,t),this.enterOuterAlt(t,3),this.state=401,this.match(en.TRUE);break;case 4:t=new hi(this,t),this.enterOuterAlt(t,4),this.state=402,this.match(en.FALSE);break;case 5:t=new li(this,t),this.enterOuterAlt(t,5),this.state=403,this.match(en.NULL);break;case 6:t=new di(this,t),this.enterOuterAlt(t,6),this.state=404,this.match(en.STRING);break;case 7:t=new si(this,t),this.enterOuterAlt(t,7),this.state=405,this.match(en.REGEX);break;case 8:t=new ri(this,t),this.enterOuterAlt(t,8),this.state=406,this.listinitializer();break;case 9:t=new ci(this,t),this.enterOuterAlt(t,9),this.state=407,this.mapinitializer();break;case 10:t=new bi(this,t),this.enterOuterAlt(t,10),this.state=408,this.match(en.ID);break;case 11:t=new ui(this,t),this.enterOuterAlt(t,11),this.state=409,e=this._input.LA(1),9!==e&&84!==e?this._errHandler.recoverInline(this):(this._errHandler.reportMatch(this),this.consume()),this.state=410,this.arguments();break;case 12:t=new gi(this,t),this.enterOuterAlt(t,12),this.state=411,this.match(en.NEW),this.state=412,this.type_(),this.state=413,this.arguments()}}catch(e){if(!(e instanceof Qt.o))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}postfix(){let e=new xi(this,this._ctx,this.state);this.enterRule(e,50,en.RULE_postfix);try{switch(this.state=420,this._errHandler.sync(this),this._interp.adaptivePredict(this._input,38,this._ctx)){case 1:this.enterOuterAlt(e,1),this.state=417,this.callinvoke();break;case 2:this.enterOuterAlt(e,2),this.state=418,this.fieldaccess();break;case 3:this.enterOuterAlt(e,3),this.state=419,this.braceaccess()}}catch(t){if(!(t instanceof Qt.o))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}postdot(){let e=new ki(this,this._ctx,this.state);this.enterRule(e,52,en.RULE_postdot);try{switch(this.state=424,this._errHandler.sync(this),this._interp.adaptivePredict(this._input,39,this._ctx)){case 1:this.enterOuterAlt(e,1),this.state=422,this.callinvoke();break;case 2:this.enterOuterAlt(e,2),this.state=423,this.fieldaccess()}}catch(t){if(!(t instanceof Qt.o))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}callinvoke(){let e,t=new fi(this,this._ctx,this.state);this.enterRule(t,54,en.RULE_callinvoke);try{this.enterOuterAlt(t,1),this.state=426,e=this._input.LA(1),10!==e&&11!==e?this._errHandler.recoverInline(this):(this._errHandler.reportMatch(this),this.consume()),this.state=427,this.match(en.DOTID),this.state=428,this.arguments()}catch(e){if(!(e instanceof Qt.o))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}fieldaccess(){let e,t=new Si(this,this._ctx,this.state);this.enterRule(t,56,en.RULE_fieldaccess);try{this.enterOuterAlt(t,1),this.state=430,e=this._input.LA(1),10!==e&&11!==e?this._errHandler.recoverInline(this):(this._errHandler.reportMatch(this),this.consume()),this.state=431,e=this._input.LA(1),85!==e&&86!==e?this._errHandler.recoverInline(this):(this._errHandler.reportMatch(this),this.consume())}catch(e){if(!(e instanceof Qt.o))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}braceaccess(){let e=new Ci(this,this._ctx,this.state);this.enterRule(e,58,en.RULE_braceaccess);try{this.enterOuterAlt(e,1),this.state=433,this.match(en.LBRACE),this.state=434,this.expression(),this.state=435,this.match(en.RBRACE)}catch(t){if(!(t instanceof Qt.o))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}arrayinitializer(){let e,t=new Ei(this,this._ctx,this.state);this.enterRule(t,60,en.RULE_arrayinitializer);try{let n;switch(this.state=478,this._errHandler.sync(this),this._interp.adaptivePredict(this._input,46,this._ctx)){case 1:t=new Ai(this,t),this.enterOuterAlt(t,1),this.state=437,this.match(en.NEW),this.state=438,this.type_(),this.state=443,this._errHandler.sync(this),n=1;do{if(1!==n)throw new Qt.j(this);this.state=439,this.match(en.LBRACE),this.state=440,this.expression(),this.state=441,this.match(en.RBRACE),this.state=445,this._errHandler.sync(this),n=this._interp.adaptivePredict(this._input,40,this._ctx)}while(2!==n&&n!==Qt.a.INVALID_ALT_NUMBER);if(this.state=454,this._errHandler.sync(this),1===this._interp.adaptivePredict(this._input,42,this._ctx))for(this.state=447,this.postdot(),this.state=451,this._errHandler.sync(this),n=this._interp.adaptivePredict(this._input,41,this._ctx);2!==n&&n!==Qt.a.INVALID_ALT_NUMBER;)1===n&&(this.state=448,this.postfix()),this.state=453,this._errHandler.sync(this),n=this._interp.adaptivePredict(this._input,41,this._ctx);break;case 2:if(t=new yi(this,t),this.enterOuterAlt(t,2),this.state=456,this.match(en.NEW),this.state=457,this.type_(),this.state=458,this.match(en.LBRACE),this.state=459,this.match(en.RBRACE),this.state=460,this.match(en.LBRACK),this.state=469,this._errHandler.sync(this),e=this._input.LA(1),!(e-5&-32)&&1<<e-5&1661206549||!(e-59&-32)&&1<<e-59&41926659)for(this.state=461,this.expression(),this.state=466,this._errHandler.sync(this),e=this._input.LA(1);12===e;)this.state=462,this.match(en.COMMA),this.state=463,this.expression(),this.state=468,this._errHandler.sync(this),e=this._input.LA(1);for(this.state=471,this.match(en.RBRACK),this.state=475,this._errHandler.sync(this),n=this._interp.adaptivePredict(this._input,45,this._ctx);2!==n&&n!==Qt.a.INVALID_ALT_NUMBER;)1===n&&(this.state=472,this.postfix()),this.state=477,this._errHandler.sync(this),n=this._interp.adaptivePredict(this._input,45,this._ctx)}}catch(e){if(!(e instanceof Qt.o))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}listinitializer(){let e,t=new Ii(this,this._ctx,this.state);this.enterRule(t,62,en.RULE_listinitializer);try{switch(this.state=493,this._errHandler.sync(this),this._interp.adaptivePredict(this._input,48,this._ctx)){case 1:for(this.enterOuterAlt(t,1),this.state=480,this.match(en.LBRACE),this.state=481,this.expression(),this.state=486,this._errHandler.sync(this),e=this._input.LA(1);12===e;)this.state=482,this.match(en.COMMA),this.state=483,this.expression(),this.state=488,this._errHandler.sync(this),e=this._input.LA(1);this.state=489,this.match(en.RBRACE);break;case 2:this.enterOuterAlt(t,2),this.state=491,this.match(en.LBRACE),this.state=492,this.match(en.RBRACE)}}catch(e){if(!(e instanceof Qt.o))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}mapinitializer(){let e,t=new Li(this,this._ctx,this.state);this.enterRule(t,64,en.RULE_mapinitializer);try{switch(this.state=509,this._errHandler.sync(this),this._interp.adaptivePredict(this._input,50,this._ctx)){case 1:for(this.enterOuterAlt(t,1),this.state=495,this.match(en.LBRACE),this.state=496,this.maptoken(),this.state=501,this._errHandler.sync(this),e=this._input.LA(1);12===e;)this.state=497,this.match(en.COMMA),this.state=498,this.maptoken(),this.state=503,this._errHandler.sync(this),e=this._input.LA(1);this.state=504,this.match(en.RBRACE);break;case 2:this.enterOuterAlt(t,2),this.state=506,this.match(en.LBRACE),this.state=507,this.match(en.COLON),this.state=508,this.match(en.RBRACE)}}catch(e){if(!(e instanceof Qt.o))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}maptoken(){let e=new Oi(this,this._ctx,this.state);this.enterRule(e,66,en.RULE_maptoken);try{this.enterOuterAlt(e,1),this.state=511,this.expression(),this.state=512,this.match(en.COLON),this.state=513,this.expression()}catch(t){if(!(t instanceof Qt.o))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}arguments(){let e,t=new _i(this,this._ctx,this.state);this.enterRule(t,68,en.RULE_arguments);try{if(this.enterOuterAlt(t,1),this.state=515,this.match(en.LP),this.state=524,this._errHandler.sync(this),e=this._input.LA(1),!(e-5&-32)&&1<<e-5&1665400853||!(e-59&-32)&&1<<e-59&67092483)for(this.state=516,this.argument(),this.state=521,this._errHandler.sync(this),e=this._input.LA(1);12===e;)this.state=517,this.match(en.COMMA),this.state=518,this.argument(),this.state=523,this._errHandler.sync(this),e=this._input.LA(1);this.state=526,this.match(en.RP)}catch(e){if(!(e instanceof Qt.o))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}argument(){let e=new Ni(this,this._ctx,this.state);this.enterRule(e,70,en.RULE_argument);try{switch(this.state=531,this._errHandler.sync(this),this._interp.adaptivePredict(this._input,53,this._ctx)){case 1:this.enterOuterAlt(e,1),this.state=528,this.expression();break;case 2:this.enterOuterAlt(e,2),this.state=529,this.lambda();break;case 3:this.enterOuterAlt(e,3),this.state=530,this.funcref()}}catch(t){if(!(t instanceof Qt.o))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}lambda(){let e,t=new Ri(this,this._ctx,this.state);this.enterRule(t,72,en.RULE_lambda);try{switch(this.enterOuterAlt(t,1),this.state=546,this._errHandler.sync(this),this._input.LA(1)){case 82:case 83:case 84:this.state=533,this.lamtype();break;case 7:if(this.state=534,this.match(en.LP),this.state=543,this._errHandler.sync(this),e=this._input.LA(1),!(e-82&-32)&&1<<e-82&7)for(this.state=535,this.lamtype(),this.state=540,this._errHandler.sync(this),e=this._input.LA(1);12===e;)this.state=536,this.match(en.COMMA),this.state=537,this.lamtype(),this.state=542,this._errHandler.sync(this),e=this._input.LA(1);this.state=545,this.match(en.RP);break;default:throw new Qt.j(this)}switch(this.state=548,this.match(en.ARROW),this.state=551,this._errHandler.sync(this),this._input.LA(1)){case 3:this.state=549,this.block();break;case 5:case 7:case 9:case 23:case 29:case 30:case 34:case 35:case 59:case 60:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 84:this.state=550,this.expression();break;default:throw new Qt.j(this)}}catch(e){if(!(e instanceof Qt.o))throw e;t.exception=e,this._errHandler.reportError(this,e),this._errHandler.recover(this,e)}finally{this.exitRule()}return t}lamtype(){let e=new Di(this,this._ctx,this.state);this.enterRule(e,74,en.RULE_lamtype);try{if(this.enterOuterAlt(e,1),this.state=554,this._errHandler.sync(this),1===this._interp.adaptivePredict(this._input,58,this._ctx))this.state=553,this.decltype();this.state=556,this.match(en.ID)}catch(t){if(!(t instanceof Qt.o))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}funcref(){let e=new Mi(this,this._ctx,this.state);this.enterRule(e,76,en.RULE_funcref);try{switch(this.state=569,this._errHandler.sync(this),this._interp.adaptivePredict(this._input,59,this._ctx)){case 1:e=new vi(this,e),this.enterOuterAlt(e,1),this.state=558,this.decltype(),this.state=559,this.match(en.REF),this.state=560,this.match(en.ID);break;case 2:e=new Fi(this,e),this.enterOuterAlt(e,2),this.state=562,this.decltype(),this.state=563,this.match(en.REF),this.state=564,this.match(en.NEW);break;case 3:e=new Pi(this,e),this.enterOuterAlt(e,3),this.state=566,this.match(en.THIS),this.state=567,this.match(en.REF),this.state=568,this.match(en.ID)}}catch(t){if(!(t instanceof Qt.o))throw t;e.exception=t,this._errHandler.reportError(this,t),this._errHandler.recover(this,t)}finally{this.exitRule()}return e}sempred(e,t,n){switch(t){case 4:return this.rstatement_sempred(e,n);case 16:return this.noncondexpression_sempred(e,n)}return!0}rstatement_sempred(e,t){return 0!==t||this._input.LA(1)!=en.ELSE}noncondexpression_sempred(e,t){switch(t){case 1:return this.precpred(this._ctx,13);case 2:return this.precpred(this._ctx,12);case 3:return this.precpred(this._ctx,11);case 4:return this.precpred(this._ctx,10);case 5:return this.precpred(this._ctx,9);case 6:return this.precpred(this._ctx,7);case 7:return this.precpred(this._ctx,6);case 8:return this.precpred(this._ctx,5);case 9:return this.precpred(this._ctx,4);case 10:return this.precpred(this._ctx,3);case 11:return this.precpred(this._ctx,2);case 12:return this.precpred(this._ctx,1);case 13:return this.precpred(this._ctx,8)}return!0}static get _ATN(){return en.__ATN||(en.__ATN=(new Qt.b).deserialize(en._serializedATN)),en.__ATN}}Jt=en,r()(en,"WS",1),r()(en,"COMMENT",2),r()(en,"LBRACK",3),r()(en,"RBRACK",4),r()(en,"LBRACE",5),r()(en,"RBRACE",6),r()(en,"LP",7),r()(en,"RP",8),r()(en,"DOLLAR",9),r()(en,"DOT",10),r()(en,"NSDOT",11),r()(en,"COMMA",12),r()(en,"SEMICOLON",13),r()(en,"IF",14),r()(en,"IN",15),r()(en,"ELSE",16),r()(en,"WHILE",17),r()(en,"DO",18),r()(en,"FOR",19),r()(en,"CONTINUE",20),r()(en,"BREAK",21),r()(en,"RETURN",22),r()(en,"NEW",23),r()(en,"TRY",24),r()(en,"CATCH",25),r()(en,"THROW",26),r()(en,"THIS",27),r()(en,"INSTANCEOF",28),r()(en,"BOOLNOT",29),r()(en,"BWNOT",30),r()(en,"MUL",31),r()(en,"DIV",32),r()(en,"REM",33),r()(en,"ADD",34),r()(en,"SUB",35),r()(en,"LSH",36),r()(en,"RSH",37),r()(en,"USH",38),r()(en,"LT",39),r()(en,"LTE",40),r()(en,"GT",41),r()(en,"GTE",42),r()(en,"EQ",43),r()(en,"EQR",44),r()(en,"NE",45),r()(en,"NER",46),r()(en,"BWAND",47),r()(en,"XOR",48),r()(en,"BWOR",49),r()(en,"BOOLAND",50),r()(en,"BOOLOR",51),r()(en,"COND",52),r()(en,"COLON",53),r()(en,"ELVIS",54),r()(en,"REF",55),r()(en,"ARROW",56),r()(en,"FIND",57),r()(en,"MATCH",58),r()(en,"INCR",59),r()(en,"DECR",60),r()(en,"ASSIGN",61),r()(en,"AADD",62),r()(en,"ASUB",63),r()(en,"AMUL",64),r()(en,"ADIV",65),r()(en,"AREM",66),r()(en,"AAND",67),r()(en,"AXOR",68),r()(en,"AOR",69),r()(en,"ALSH",70),r()(en,"ARSH",71),r()(en,"AUSH",72),r()(en,"OCTAL",73),r()(en,"HEX",74),r()(en,"INTEGER",75),r()(en,"DECIMAL",76),r()(en,"STRING",77),r()(en,"REGEX",78),r()(en,"TRUE",79),r()(en,"FALSE",80),r()(en,"NULL",81),r()(en,"PRIMITIVE",82),r()(en,"DEF",83),r()(en,"ID",84),r()(en,"DOTINTEGER",85),r()(en,"DOTID",86),r()(en,"EOF",Qt.p.EOF),r()(en,"RULE_source",0),r()(en,"RULE_function",1),r()(en,"RULE_parameters",2),r()(en,"RULE_statement",3),r()(en,"RULE_rstatement",4),r()(en,"RULE_dstatement",5),r()(en,"RULE_trailer",6),r()(en,"RULE_block",7),r()(en,"RULE_empty",8),r()(en,"RULE_initializer",9),r()(en,"RULE_afterthought",10),r()(en,"RULE_declaration",11),r()(en,"RULE_decltype",12),r()(en,"RULE_type",13),r()(en,"RULE_declvar",14),r()(en,"RULE_trap",15),r()(en,"RULE_noncondexpression",16),r()(en,"RULE_expression",17),r()(en,"RULE_unary",18),r()(en,"RULE_unarynotaddsub",19),r()(en,"RULE_castexpression",20),r()(en,"RULE_primordefcasttype",21),r()(en,"RULE_refcasttype",22),r()(en,"RULE_chain",23),r()(en,"RULE_primary",24),r()(en,"RULE_postfix",25),r()(en,"RULE_postdot",26),r()(en,"RULE_callinvoke",27),r()(en,"RULE_fieldaccess",28),r()(en,"RULE_braceaccess",29),r()(en,"RULE_arrayinitializer",30),r()(en,"RULE_listinitializer",31),r()(en,"RULE_mapinitializer",32),r()(en,"RULE_maptoken",33),r()(en,"RULE_arguments",34),r()(en,"RULE_argument",35),r()(en,"RULE_lambda",36),r()(en,"RULE_lamtype",37),r()(en,"RULE_funcref",38),r()(en,"literalNames",[null,null,null,"'{'","'}'","'['","']'","'('","')'","'$'","'.'","'?.'","','","';'","'if'","'in'","'else'","'while'","'do'","'for'","'continue'","'break'","'return'","'new'","'try'","'catch'","'throw'","'this'","'instanceof'","'!'","'~'","'*'","'/'","'%'","'+'","'-'","'<<'","'>>'","'>>>'","'<'","'<='","'>'","'>='","'=='","'==='","'!='","'!=='","'&'","'^'","'|'","'&&'","'||'","'?'","':'","'?:'","'::'","'->'","'=~'","'==~'","'++'","'--'","'='","'+='","'-='","'*='","'/='","'%='","'&='","'^='","'|='","'<<='","'>>='","'>>>='",null,null,null,null,null,null,"'true'","'false'","'null'",null,"'def'"]),r()(en,"symbolicNames",[null,"WS","COMMENT","LBRACK","RBRACK","LBRACE","RBRACE","LP","RP","DOLLAR","DOT","NSDOT","COMMA","SEMICOLON","IF","IN","ELSE","WHILE","DO","FOR","CONTINUE","BREAK","RETURN","NEW","TRY","CATCH","THROW","THIS","INSTANCEOF","BOOLNOT","BWNOT","MUL","DIV","REM","ADD","SUB","LSH","RSH","USH","LT","LTE","GT","GTE","EQ","EQR","NE","NER","BWAND","XOR","BWOR","BOOLAND","BOOLOR","COND","COLON","ELVIS","REF","ARROW","FIND","MATCH","INCR","DECR","ASSIGN","AADD","ASUB","AMUL","ADIV","AREM","AAND","AXOR","AOR","ALSH","ARSH","AUSH","OCTAL","HEX","INTEGER","DECIMAL","STRING","REGEX","TRUE","FALSE","NULL","PRIMITIVE","DEF","ID","DOTINTEGER","DOTID"]),r()(en,"ruleNames",["source","function","parameters","statement","rstatement","dstatement","trailer","block","empty","initializer","afterthought","declaration","decltype","type","declvar","trap","noncondexpression","expression","unary","unarynotaddsub","castexpression","primordefcasttype","refcasttype","chain","primary","postfix","postdot","callinvoke","fieldaccess","braceaccess","arrayinitializer","listinitializer","mapinitializer","maptoken","arguments","argument","lambda","lamtype","funcref"]),r()(en,"_serializedATN",[4,1,86,572,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,0,5,0,80,8,0,10,0,12,0,83,9,0,1,0,5,0,86,8,0,10,0,12,0,89,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,105,8,2,10,2,12,2,108,9,2,3,2,110,8,2,1,2,1,2,1,3,1,3,1,3,1,3,3,3,118,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,128,8,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,136,8,4,1,4,1,4,1,4,3,4,141,8,4,1,4,1,4,3,4,145,8,4,1,4,1,4,3,4,149,8,4,1,4,1,4,1,4,3,4,154,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,4,4,176,8,4,11,4,12,4,177,3,4,180,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,194,8,5,1,5,1,5,1,5,3,5,199,8,5,1,6,1,6,3,6,203,8,6,1,7,1,7,5,7,207,8,7,10,7,12,7,210,9,7,1,7,3,7,213,8,7,1,7,1,7,1,8,1,8,1,9,1,9,3,9,221,8,9,1,10,1,10,1,11,1,11,1,11,1,11,5,11,229,8,11,10,11,12,11,232,9,11,1,12,1,12,1,12,5,12,237,8,12,10,12,12,12,240,9,12,1,13,1,13,1,13,1,13,1,13,5,13,247,8,13,10,13,12,13,250,9,13,3,13,252,8,13,1,14,1,14,1,14,3,14,257,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,5,16,308,8,16,10,16,12,16,311,9,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,324,8,17,1,18,1,18,1,18,1,18,1,18,3,18,331,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,340,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,352,8,20,1,21,1,21,1,22,1,22,1,22,4,22,359,8,22,11,22,12,22,360,1,22,1,22,1,22,4,22,366,8,22,11,22,12,22,367,1,22,1,22,1,22,5,22,373,8,22,10,22,12,22,376,9,22,1,22,1,22,5,22,380,8,22,10,22,12,22,383,9,22,3,22,385,8,22,1,23,1,23,5,23,389,8,23,10,23,12,23,392,9,23,1,23,3,23,395,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,416,8,24,1,25,1,25,1,25,3,25,421,8,25,1,26,1,26,3,26,425,8,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,4,30,444,8,30,11,30,12,30,445,1,30,1,30,5,30,450,8,30,10,30,12,30,453,9,30,3,30,455,8,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,5,30,465,8,30,10,30,12,30,468,9,30,3,30,470,8,30,1,30,1,30,5,30,474,8,30,10,30,12,30,477,9,30,3,30,479,8,30,1,31,1,31,1,31,1,31,5,31,485,8,31,10,31,12,31,488,9,31,1,31,1,31,1,31,1,31,3,31,494,8,31,1,32,1,32,1,32,1,32,5,32,500,8,32,10,32,12,32,503,9,32,1,32,1,32,1,32,1,32,1,32,3,32,510,8,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,5,34,520,8,34,10,34,12,34,523,9,34,3,34,525,8,34,1,34,1,34,1,35,1,35,1,35,3,35,532,8,35,1,36,1,36,1,36,1,36,1,36,5,36,539,8,36,10,36,12,36,542,9,36,3,36,544,8,36,1,36,3,36,547,8,36,1,36,1,36,1,36,3,36,552,8,36,1,37,3,37,555,8,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,570,8,38,1,38,0,1,32,39,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,0,15,1,1,13,13,1,0,31,33,1,0,34,35,1,0,57,58,1,0,36,38,1,0,39,42,1,0,43,46,1,0,61,72,1,0,59,60,1,0,29,30,1,0,82,83,1,0,73,76,2,0,9,9,84,84,1,0,10,11,1,0,85,86,631,0,81,1,0,0,0,2,92,1,0,0,0,4,97,1,0,0,0,6,117,1,0,0,0,8,179,1,0,0,0,10,198,1,0,0,0,12,202,1,0,0,0,14,204,1,0,0,0,16,216,1,0,0,0,18,220,1,0,0,0,20,222,1,0,0,0,22,224,1,0,0,0,24,233,1,0,0,0,26,251,1,0,0,0,28,253,1,0,0,0,30,258,1,0,0,0,32,265,1,0,0,0,34,323,1,0,0,0,36,330,1,0,0,0,38,339,1,0,0,0,40,351,1,0,0,0,42,353,1,0,0,0,44,384,1,0,0,0,46,394,1,0,0,0,48,415,1,0,0,0,50,420,1,0,0,0,52,424,1,0,0,0,54,426,1,0,0,0,56,430,1,0,0,0,58,433,1,0,0,0,60,478,1,0,0,0,62,493,1,0,0,0,64,509,1,0,0,0,66,511,1,0,0,0,68,515,1,0,0,0,70,531,1,0,0,0,72,546,1,0,0,0,74,554,1,0,0,0,76,569,1,0,0,0,78,80,3,2,1,0,79,78,1,0,0,0,80,83,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,87,1,0,0,0,83,81,1,0,0,0,84,86,3,6,3,0,85,84,1,0,0,0,86,89,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,90,1,0,0,0,89,87,1,0,0,0,90,91,5,0,0,1,91,1,1,0,0,0,92,93,3,24,12,0,93,94,5,84,0,0,94,95,3,4,2,0,95,96,3,14,7,0,96,3,1,0,0,0,97,109,5,7,0,0,98,99,3,24,12,0,99,106,5,84,0,0,100,101,5,12,0,0,101,102,3,24,12,0,102,103,5,84,0,0,103,105,1,0,0,0,104,100,1,0,0,0,105,108,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,109,98,1,0,0,0,109,110,1,0,0,0,110,111,1,0,0,0,111,112,5,8,0,0,112,5,1,0,0,0,113,118,3,8,4,0,114,115,3,10,5,0,115,116,7,0,0,0,116,118,1,0,0,0,117,113,1,0,0,0,117,114,1,0,0,0,118,7,1,0,0,0,119,120,5,14,0,0,120,121,5,7,0,0,121,122,3,34,17,0,122,123,5,8,0,0,123,127,3,12,6,0,124,125,5,16,0,0,125,128,3,12,6,0,126,128,4,4,0,0,127,124,1,0,0,0,127,126,1,0,0,0,128,180,1,0,0,0,129,130,5,17,0,0,130,131,5,7,0,0,131,132,3,34,17,0,132,135,5,8,0,0,133,136,3,12,6,0,134,136,3,16,8,0,135,133,1,0,0,0,135,134,1,0,0,0,136,180,1,0,0,0,137,138,5,19,0,0,138,140,5,7,0,0,139,141,3,18,9,0,140,139,1,0,0,0,140,141,1,0,0,0,141,142,1,0,0,0,142,144,5,13,0,0,143,145,3,34,17,0,144,143,1,0,0,0,144,145,1,0,0,0,145,146,1,0,0,0,146,148,5,13,0,0,147,149,3,20,10,0,148,147,1,0,0,0,148,149,1,0,0,0,149,150,1,0,0,0,150,153,5,8,0,0,151,154,3,12,6,0,152,154,3,16,8,0,153,151,1,0,0,0,153,152,1,0,0,0,154,180,1,0,0,0,155,156,5,19,0,0,156,157,5,7,0,0,157,158,3,24,12,0,158,159,5,84,0,0,159,160,5,53,0,0,160,161,3,34,17,0,161,162,5,8,0,0,162,163,3,12,6,0,163,180,1,0,0,0,164,165,5,19,0,0,165,166,5,7,0,0,166,167,5,84,0,0,167,168,5,15,0,0,168,169,3,34,17,0,169,170,5,8,0,0,170,171,3,12,6,0,171,180,1,0,0,0,172,173,5,24,0,0,173,175,3,14,7,0,174,176,3,30,15,0,175,174,1,0,0,0,176,177,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,180,1,0,0,0,179,119,1,0,0,0,179,129,1,0,0,0,179,137,1,0,0,0,179,155,1,0,0,0,179,164,1,0,0,0,179,172,1,0,0,0,180,9,1,0,0,0,181,182,5,18,0,0,182,183,3,14,7,0,183,184,5,17,0,0,184,185,5,7,0,0,185,186,3,34,17,0,186,187,5,8,0,0,187,199,1,0,0,0,188,199,3,22,11,0,189,199,5,20,0,0,190,199,5,21,0,0,191,193,5,22,0,0,192,194,3,34,17,0,193,192,1,0,0,0,193,194,1,0,0,0,194,199,1,0,0,0,195,196,5,26,0,0,196,199,3,34,17,0,197,199,3,34,17,0,198,181,1,0,0,0,198,188,1,0,0,0,198,189,1,0,0,0,198,190,1,0,0,0,198,191,1,0,0,0,198,195,1,0,0,0,198,197,1,0,0,0,199,11,1,0,0,0,200,203,3,14,7,0,201,203,3,6,3,0,202,200,1,0,0,0,202,201,1,0,0,0,203,13,1,0,0,0,204,208,5,3,0,0,205,207,3,6,3,0,206,205,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,211,213,3,10,5,0,212,211,1,0,0,0,212,213,1,0,0,0,213,214,1,0,0,0,214,215,5,4,0,0,215,15,1,0,0,0,216,217,5,13,0,0,217,17,1,0,0,0,218,221,3,22,11,0,219,221,3,34,17,0,220,218,1,0,0,0,220,219,1,0,0,0,221,19,1,0,0,0,222,223,3,34,17,0,223,21,1,0,0,0,224,225,3,24,12,0,225,230,3,28,14,0,226,227,5,12,0,0,227,229,3,28,14,0,228,226,1,0,0,0,229,232,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,23,1,0,0,0,232,230,1,0,0,0,233,238,3,26,13,0,234,235,5,5,0,0,235,237,5,6,0,0,236,234,1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,25,1,0,0,0,240,238,1,0,0,0,241,252,5,83,0,0,242,252,5,82,0,0,243,248,5,84,0,0,244,245,5,10,0,0,245,247,5,86,0,0,246,244,1,0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,251,241,1,0,0,0,251,242,1,0,0,0,251,243,1,0,0,0,252,27,1,0,0,0,253,256,5,84,0,0,254,255,5,61,0,0,255,257,3,34,17,0,256,254,1,0,0,0,256,257,1,0,0,0,257,29,1,0,0,0,258,259,5,25,0,0,259,260,5,7,0,0,260,261,3,26,13,0,261,262,5,84,0,0,262,263,5,8,0,0,263,264,3,14,7,0,264,31,1,0,0,0,265,266,6,16,-1,0,266,267,3,36,18,0,267,309,1,0,0,0,268,269,10,13,0,0,269,270,7,1,0,0,270,308,3,32,16,14,271,272,10,12,0,0,272,273,7,2,0,0,273,308,3,32,16,13,274,275,10,11,0,0,275,276,7,3,0,0,276,308,3,32,16,12,277,278,10,10,0,0,278,279,7,4,0,0,279,308,3,32,16,11,280,281,10,9,0,0,281,282,7,5,0,0,282,308,3,32,16,10,283,284,10,7,0,0,284,285,7,6,0,0,285,308,3,32,16,8,286,287,10,6,0,0,287,288,5,47,0,0,288,308,3,32,16,7,289,290,10,5,0,0,290,291,5,48,0,0,291,308,3,32,16,6,292,293,10,4,0,0,293,294,5,49,0,0,294,308,3,32,16,5,295,296,10,3,0,0,296,297,5,50,0,0,297,308,3,32,16,4,298,299,10,2,0,0,299,300,5,51,0,0,300,308,3,32,16,3,301,302,10,1,0,0,302,303,5,54,0,0,303,308,3,32,16,1,304,305,10,8,0,0,305,306,5,28,0,0,306,308,3,24,12,0,307,268,1,0,0,0,307,271,1,0,0,0,307,274,1,0,0,0,307,277,1,0,0,0,307,280,1,0,0,0,307,283,1,0,0,0,307,286,1,0,0,0,307,289,1,0,0,0,307,292,1,0,0,0,307,295,1,0,0,0,307,298,1,0,0,0,307,301,1,0,0,0,307,304,1,0,0,0,308,311,1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,33,1,0,0,0,311,309,1,0,0,0,312,324,3,32,16,0,313,314,3,32,16,0,314,315,5,52,0,0,315,316,3,34,17,0,316,317,5,53,0,0,317,318,3,34,17,0,318,324,1,0,0,0,319,320,3,32,16,0,320,321,7,7,0,0,321,322,3,34,17,0,322,324,1,0,0,0,323,312,1,0,0,0,323,313,1,0,0,0,323,319,1,0,0,0,324,35,1,0,0,0,325,326,7,8,0,0,326,331,3,46,23,0,327,328,7,2,0,0,328,331,3,36,18,0,329,331,3,38,19,0,330,325,1,0,0,0,330,327,1,0,0,0,330,329,1,0,0,0,331,37,1,0,0,0,332,340,3,46,23,0,333,334,3,46,23,0,334,335,7,8,0,0,335,340,1,0,0,0,336,337,7,9,0,0,337,340,3,36,18,0,338,340,3,40,20,0,339,332,1,0,0,0,339,333,1,0,0,0,339,336,1,0,0,0,339,338,1,0,0,0,340,39,1,0,0,0,341,342,5,7,0,0,342,343,3,42,21,0,343,344,5,8,0,0,344,345,3,36,18,0,345,352,1,0,0,0,346,347,5,7,0,0,347,348,3,44,22,0,348,349,5,8,0,0,349,350,3,38,19,0,350,352,1,0,0,0,351,341,1,0,0,0,351,346,1,0,0,0,352,41,1,0,0,0,353,354,7,10,0,0,354,43,1,0,0,0,355,358,5,83,0,0,356,357,5,5,0,0,357,359,5,6,0,0,358,356,1,0,0,0,359,360,1,0,0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,385,1,0,0,0,362,365,5,82,0,0,363,364,5,5,0,0,364,366,5,6,0,0,365,363,1,0,0,0,366,367,1,0,0,0,367,365,1,0,0,0,367,368,1,0,0,0,368,385,1,0,0,0,369,374,5,84,0,0,370,371,5,10,0,0,371,373,5,86,0,0,372,370,1,0,0,0,373,376,1,0,0,0,374,372,1,0,0,0,374,375,1,0,0,0,375,381,1,0,0,0,376,374,1,0,0,0,377,378,5,5,0,0,378,380,5,6,0,0,379,377,1,0,0,0,380,383,1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,385,1,0,0,0,383,381,1,0,0,0,384,355,1,0,0,0,384,362,1,0,0,0,384,369,1,0,0,0,385,45,1,0,0,0,386,390,3,48,24,0,387,389,3,50,25,0,388,387,1,0,0,0,389,392,1,0,0,0,390,388,1,0,0,0,390,391,1,0,0,0,391,395,1,0,0,0,392,390,1,0,0,0,393,395,3,60,30,0,394,386,1,0,0,0,394,393,1,0,0,0,395,47,1,0,0,0,396,397,5,7,0,0,397,398,3,34,17,0,398,399,5,8,0,0,399,416,1,0,0,0,400,416,7,11,0,0,401,416,5,79,0,0,402,416,5,80,0,0,403,416,5,81,0,0,404,416,5,77,0,0,405,416,5,78,0,0,406,416,3,62,31,0,407,416,3,64,32,0,408,416,5,84,0,0,409,410,7,12,0,0,410,416,3,68,34,0,411,412,5,23,0,0,412,413,3,26,13,0,413,414,3,68,34,0,414,416,1,0,0,0,415,396,1,0,0,0,415,400,1,0,0,0,415,401,1,0,0,0,415,402,1,0,0,0,415,403,1,0,0,0,415,404,1,0,0,0,415,405,1,0,0,0,415,406,1,0,0,0,415,407,1,0,0,0,415,408,1,0,0,0,415,409,1,0,0,0,415,411,1,0,0,0,416,49,1,0,0,0,417,421,3,54,27,0,418,421,3,56,28,0,419,421,3,58,29,0,420,417,1,0,0,0,420,418,1,0,0,0,420,419,1,0,0,0,421,51,1,0,0,0,422,425,3,54,27,0,423,425,3,56,28,0,424,422,1,0,0,0,424,423,1,0,0,0,425,53,1,0,0,0,426,427,7,13,0,0,427,428,5,86,0,0,428,429,3,68,34,0,429,55,1,0,0,0,430,431,7,13,0,0,431,432,7,14,0,0,432,57,1,0,0,0,433,434,5,5,0,0,434,435,3,34,17,0,435,436,5,6,0,0,436,59,1,0,0,0,437,438,5,23,0,0,438,443,3,26,13,0,439,440,5,5,0,0,440,441,3,34,17,0,441,442,5,6,0,0,442,444,1,0,0,0,443,439,1,0,0,0,444,445,1,0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,454,1,0,0,0,447,451,3,52,26,0,448,450,3,50,25,0,449,448,1,0,0,0,450,453,1,0,0,0,451,449,1,0,0,0,451,452,1,0,0,0,452,455,1,0,0,0,453,451,1,0,0,0,454,447,1,0,0,0,454,455,1,0,0,0,455,479,1,0,0,0,456,457,5,23,0,0,457,458,3,26,13,0,458,459,5,5,0,0,459,460,5,6,0,0,460,469,5,3,0,0,461,466,3,34,17,0,462,463,5,12,0,0,463,465,3,34,17,0,464,462,1,0,0,0,465,468,1,0,0,0,466,464,1,0,0,0,466,467,1,0,0,0,467,470,1,0,0,0,468,466,1,0,0,0,469,461,1,0,0,0,469,470,1,0,0,0,470,471,1,0,0,0,471,475,5,4,0,0,472,474,3,50,25,0,473,472,1,0,0,0,474,477,1,0,0,0,475,473,1,0,0,0,475,476,1,0,0,0,476,479,1,0,0,0,477,475,1,0,0,0,478,437,1,0,0,0,478,456,1,0,0,0,479,61,1,0,0,0,480,481,5,5,0,0,481,486,3,34,17,0,482,483,5,12,0,0,483,485,3,34,17,0,484,482,1,0,0,0,485,488,1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,489,1,0,0,0,488,486,1,0,0,0,489,490,5,6,0,0,490,494,1,0,0,0,491,492,5,5,0,0,492,494,5,6,0,0,493,480,1,0,0,0,493,491,1,0,0,0,494,63,1,0,0,0,495,496,5,5,0,0,496,501,3,66,33,0,497,498,5,12,0,0,498,500,3,66,33,0,499,497,1,0,0,0,500,503,1,0,0,0,501,499,1,0,0,0,501,502,1,0,0,0,502,504,1,0,0,0,503,501,1,0,0,0,504,505,5,6,0,0,505,510,1,0,0,0,506,507,5,5,0,0,507,508,5,53,0,0,508,510,5,6,0,0,509,495,1,0,0,0,509,506,1,0,0,0,510,65,1,0,0,0,511,512,3,34,17,0,512,513,5,53,0,0,513,514,3,34,17,0,514,67,1,0,0,0,515,524,5,7,0,0,516,521,3,70,35,0,517,518,5,12,0,0,518,520,3,70,35,0,519,517,1,0,0,0,520,523,1,0,0,0,521,519,1,0,0,0,521,522,1,0,0,0,522,525,1,0,0,0,523,521,1,0,0,0,524,516,1,0,0,0,524,525,1,0,0,0,525,526,1,0,0,0,526,527,5,8,0,0,527,69,1,0,0,0,528,532,3,34,17,0,529,532,3,72,36,0,530,532,3,76,38,0,531,528,1,0,0,0,531,529,1,0,0,0,531,530,1,0,0,0,532,71,1,0,0,0,533,547,3,74,37,0,534,543,5,7,0,0,535,540,3,74,37,0,536,537,5,12,0,0,537,539,3,74,37,0,538,536,1,0,0,0,539,542,1,0,0,0,540,538,1,0,0,0,540,541,1,0,0,0,541,544,1,0,0,0,542,540,1,0,0,0,543,535,1,0,0,0,543,544,1,0,0,0,544,545,1,0,0,0,545,547,5,8,0,0,546,533,1,0,0,0,546,534,1,0,0,0,547,548,1,0,0,0,548,551,5,56,0,0,549,552,3,14,7,0,550,552,3,34,17,0,551,549,1,0,0,0,551,550,1,0,0,0,552,73,1,0,0,0,553,555,3,24,12,0,554,553,1,0,0,0,554,555,1,0,0,0,555,556,1,0,0,0,556,557,5,84,0,0,557,75,1,0,0,0,558,559,3,24,12,0,559,560,5,55,0,0,560,561,5,84,0,0,561,570,1,0,0,0,562,563,3,24,12,0,563,564,5,55,0,0,564,565,5,23,0,0,565,570,1,0,0,0,566,567,5,27,0,0,567,568,5,55,0,0,568,570,5,84,0,0,569,558,1,0,0,0,569,562,1,0,0,0,569,566,1,0,0,0,570,77,1,0,0,0,60,81,87,106,109,117,127,135,140,144,148,153,177,179,193,198,202,208,212,220,230,238,248,251,256,307,309,323,330,339,351,360,367,374,381,384,390,394,415,420,424,445,451,454,466,469,475,478,486,493,501,509,521,524,531,540,543,546,551,554,569]),r()(en,"__ATN",void 0),r()(en,"DecisionsToDFA",Jt._ATN.decisionToState.map(((e,t)=>new Qt.e(e,t))));class tn extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}EOF(){return this.getToken(en.EOF,0)}function__list(){return this.getTypedRuleContexts(nn)}function_(e){return this.getTypedRuleContext(nn,e)}statement_list(){return this.getTypedRuleContexts(an)}statement(e){return this.getTypedRuleContext(an,e)}get ruleIndex(){return en.RULE_source}enterRule(e){e.enterSource&&e.enterSource(this)}exitRule(e){e.exitSource&&e.exitSource(this)}}class nn extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}decltype(){return this.getTypedRuleContext(Ln,0)}ID(){return this.getToken(en.ID,0)}parameters(){return this.getTypedRuleContext(on,0)}block(){return this.getTypedRuleContext(Cn,0)}get ruleIndex(){return en.RULE_function}enterRule(e){e.enterFunction&&e.enterFunction(this)}exitRule(e){e.exitFunction&&e.exitFunction(this)}}class on extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}LP(){return this.getToken(en.LP,0)}RP(){return this.getToken(en.RP,0)}decltype_list(){return this.getTypedRuleContexts(Ln)}decltype(e){return this.getTypedRuleContext(Ln,e)}ID_list(){return this.getTokens(en.ID)}ID(e){return this.getToken(en.ID,e)}COMMA_list(){return this.getTokens(en.COMMA)}COMMA(e){return this.getToken(en.COMMA,e)}get ruleIndex(){return en.RULE_parameters}enterRule(e){e.enterParameters&&e.enterParameters(this)}exitRule(e){e.exitParameters&&e.exitParameters(this)}}class an extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}rstatement(){return this.getTypedRuleContext(rn,0)}dstatement(){return this.getTypedRuleContext(hn,0)}SEMICOLON(){return this.getToken(en.SEMICOLON,0)}EOF(){return this.getToken(en.EOF,0)}get ruleIndex(){return en.RULE_statement}enterRule(e){e.enterStatement&&e.enterStatement(this)}exitRule(e){e.exitStatement&&e.exitStatement(this)}}class rn extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}get ruleIndex(){return en.RULE_rstatement}copyFrom(e){super.copyFrom(e)}}class sn extends rn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}FOR(){return this.getToken(en.FOR,0)}LP(){return this.getToken(en.LP,0)}SEMICOLON_list(){return this.getTokens(en.SEMICOLON)}SEMICOLON(e){return this.getToken(en.SEMICOLON,e)}RP(){return this.getToken(en.RP,0)}trailer(){return this.getTypedRuleContext(Sn,0)}empty(){return this.getTypedRuleContext(En,0)}initializer(){return this.getTypedRuleContext(An,0)}expression(){return this.getTypedRuleContext(wn,0)}afterthought(){return this.getTypedRuleContext(yn,0)}enterRule(e){e.enterFor&&e.enterFor(this)}exitRule(e){e.exitFor&&e.exitFor(this)}}class ln extends rn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}TRY(){return this.getToken(en.TRY,0)}block(){return this.getTypedRuleContext(Cn,0)}trap_list(){return this.getTypedRuleContexts(Nn)}trap(e){return this.getTypedRuleContext(Nn,e)}enterRule(e){e.enterTry&&e.enterTry(this)}exitRule(e){e.exitTry&&e.exitTry(this)}}class dn extends rn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}WHILE(){return this.getToken(en.WHILE,0)}LP(){return this.getToken(en.LP,0)}expression(){return this.getTypedRuleContext(wn,0)}RP(){return this.getToken(en.RP,0)}trailer(){return this.getTypedRuleContext(Sn,0)}empty(){return this.getTypedRuleContext(En,0)}enterRule(e){e.enterWhile&&e.enterWhile(this)}exitRule(e){e.exitWhile&&e.exitWhile(this)}}class cn extends rn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}FOR(){return this.getToken(en.FOR,0)}LP(){return this.getToken(en.LP,0)}ID(){return this.getToken(en.ID,0)}IN(){return this.getToken(en.IN,0)}expression(){return this.getTypedRuleContext(wn,0)}RP(){return this.getToken(en.RP,0)}trailer(){return this.getTypedRuleContext(Sn,0)}enterRule(e){e.enterIneach&&e.enterIneach(this)}exitRule(e){e.exitIneach&&e.exitIneach(this)}}class un extends rn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}IF(){return this.getToken(en.IF,0)}LP(){return this.getToken(en.LP,0)}expression(){return this.getTypedRuleContext(wn,0)}RP(){return this.getToken(en.RP,0)}trailer_list(){return this.getTypedRuleContexts(Sn)}trailer(e){return this.getTypedRuleContext(Sn,e)}ELSE(){return this.getToken(en.ELSE,0)}enterRule(e){e.enterIf&&e.enterIf(this)}exitRule(e){e.exitIf&&e.exitIf(this)}}class mn extends rn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}FOR(){return this.getToken(en.FOR,0)}LP(){return this.getToken(en.LP,0)}decltype(){return this.getTypedRuleContext(Ln,0)}ID(){return this.getToken(en.ID,0)}COLON(){return this.getToken(en.COLON,0)}expression(){return this.getTypedRuleContext(wn,0)}RP(){return this.getToken(en.RP,0)}trailer(){return this.getTypedRuleContext(Sn,0)}enterRule(e){e.enterEach&&e.enterEach(this)}exitRule(e){e.exitEach&&e.exitEach(this)}}class hn extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}get ruleIndex(){return en.RULE_dstatement}copyFrom(e){super.copyFrom(e)}}class bn extends hn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}declaration(){return this.getTypedRuleContext(In,0)}enterRule(e){e.enterDecl&&e.enterDecl(this)}exitRule(e){e.exitDecl&&e.exitDecl(this)}}class Tn extends hn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}BREAK(){return this.getToken(en.BREAK,0)}enterRule(e){e.enterBreak&&e.enterBreak(this)}exitRule(e){e.exitBreak&&e.exitBreak(this)}}class gn extends hn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}THROW(){return this.getToken(en.THROW,0)}expression(){return this.getTypedRuleContext(wn,0)}enterRule(e){e.enterThrow&&e.enterThrow(this)}exitRule(e){e.exitThrow&&e.exitThrow(this)}}class pn extends hn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}CONTINUE(){return this.getToken(en.CONTINUE,0)}enterRule(e){e.enterContinue&&e.enterContinue(this)}exitRule(e){e.exitContinue&&e.exitContinue(this)}}class xn extends hn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}expression(){return this.getTypedRuleContext(wn,0)}enterRule(e){e.enterExpr&&e.enterExpr(this)}exitRule(e){e.exitExpr&&e.exitExpr(this)}}class kn extends hn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}DO(){return this.getToken(en.DO,0)}block(){return this.getTypedRuleContext(Cn,0)}WHILE(){return this.getToken(en.WHILE,0)}LP(){return this.getToken(en.LP,0)}expression(){return this.getTypedRuleContext(wn,0)}RP(){return this.getToken(en.RP,0)}enterRule(e){e.enterDo&&e.enterDo(this)}exitRule(e){e.exitDo&&e.exitDo(this)}}class fn extends hn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}RETURN(){return this.getToken(en.RETURN,0)}expression(){return this.getTypedRuleContext(wn,0)}enterRule(e){e.enterReturn&&e.enterReturn(this)}exitRule(e){e.exitReturn&&e.exitReturn(this)}}class Sn extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}block(){return this.getTypedRuleContext(Cn,0)}statement(){return this.getTypedRuleContext(an,0)}get ruleIndex(){return en.RULE_trailer}enterRule(e){e.enterTrailer&&e.enterTrailer(this)}exitRule(e){e.exitTrailer&&e.exitTrailer(this)}}class Cn extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}LBRACK(){return this.getToken(en.LBRACK,0)}RBRACK(){return this.getToken(en.RBRACK,0)}statement_list(){return this.getTypedRuleContexts(an)}statement(e){return this.getTypedRuleContext(an,e)}dstatement(){return this.getTypedRuleContext(hn,0)}get ruleIndex(){return en.RULE_block}enterRule(e){e.enterBlock&&e.enterBlock(this)}exitRule(e){e.exitBlock&&e.exitBlock(this)}}class En extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}SEMICOLON(){return this.getToken(en.SEMICOLON,0)}get ruleIndex(){return en.RULE_empty}enterRule(e){e.enterEmpty&&e.enterEmpty(this)}exitRule(e){e.exitEmpty&&e.exitEmpty(this)}}class An extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}declaration(){return this.getTypedRuleContext(In,0)}expression(){return this.getTypedRuleContext(wn,0)}get ruleIndex(){return en.RULE_initializer}enterRule(e){e.enterInitializer&&e.enterInitializer(this)}exitRule(e){e.exitInitializer&&e.exitInitializer(this)}}class yn extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}expression(){return this.getTypedRuleContext(wn,0)}get ruleIndex(){return en.RULE_afterthought}enterRule(e){e.enterAfterthought&&e.enterAfterthought(this)}exitRule(e){e.exitAfterthought&&e.exitAfterthought(this)}}class In extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}decltype(){return this.getTypedRuleContext(Ln,0)}declvar_list(){return this.getTypedRuleContexts(_n)}declvar(e){return this.getTypedRuleContext(_n,e)}COMMA_list(){return this.getTokens(en.COMMA)}COMMA(e){return this.getToken(en.COMMA,e)}get ruleIndex(){return en.RULE_declaration}enterRule(e){e.enterDeclaration&&e.enterDeclaration(this)}exitRule(e){e.exitDeclaration&&e.exitDeclaration(this)}}class Ln extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}type_(){return this.getTypedRuleContext(On,0)}LBRACE_list(){return this.getTokens(en.LBRACE)}LBRACE(e){return this.getToken(en.LBRACE,e)}RBRACE_list(){return this.getTokens(en.RBRACE)}RBRACE(e){return this.getToken(en.RBRACE,e)}get ruleIndex(){return en.RULE_decltype}enterRule(e){e.enterDecltype&&e.enterDecltype(this)}exitRule(e){e.exitDecltype&&e.exitDecltype(this)}}class On extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}DEF(){return this.getToken(en.DEF,0)}PRIMITIVE(){return this.getToken(en.PRIMITIVE,0)}ID(){return this.getToken(en.ID,0)}DOT_list(){return this.getTokens(en.DOT)}DOT(e){return this.getToken(en.DOT,e)}DOTID_list(){return this.getTokens(en.DOTID)}DOTID(e){return this.getToken(en.DOTID,e)}get ruleIndex(){return en.RULE_type}enterRule(e){e.enterType&&e.enterType(this)}exitRule(e){e.exitType&&e.exitType(this)}}class _n extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}ID(){return this.getToken(en.ID,0)}ASSIGN(){return this.getToken(en.ASSIGN,0)}expression(){return this.getTypedRuleContext(wn,0)}get ruleIndex(){return en.RULE_declvar}enterRule(e){e.enterDeclvar&&e.enterDeclvar(this)}exitRule(e){e.exitDeclvar&&e.exitDeclvar(this)}}class Nn extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}CATCH(){return this.getToken(en.CATCH,0)}LP(){return this.getToken(en.LP,0)}type_(){return this.getTypedRuleContext(On,0)}ID(){return this.getToken(en.ID,0)}RP(){return this.getToken(en.RP,0)}block(){return this.getTypedRuleContext(Cn,0)}get ruleIndex(){return en.RULE_trap}enterRule(e){e.enterTrap&&e.enterTrap(this)}exitRule(e){e.exitTrap&&e.exitTrap(this)}}class Rn extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}get ruleIndex(){return en.RULE_noncondexpression}copyFrom(e){super.copyFrom(e)}}class Dn extends Rn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}unary(){return this.getTypedRuleContext(Vn,0)}enterRule(e){e.enterSingle&&e.enterSingle(this)}exitRule(e){e.exitSingle&&e.exitSingle(this)}}class Mn extends Rn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}noncondexpression_list(){return this.getTypedRuleContexts(Rn)}noncondexpression(e){return this.getTypedRuleContext(Rn,e)}LT(){return this.getToken(en.LT,0)}LTE(){return this.getToken(en.LTE,0)}GT(){return this.getToken(en.GT,0)}GTE(){return this.getToken(en.GTE,0)}EQ(){return this.getToken(en.EQ,0)}EQR(){return this.getToken(en.EQR,0)}NE(){return this.getToken(en.NE,0)}NER(){return this.getToken(en.NER,0)}enterRule(e){e.enterComp&&e.enterComp(this)}exitRule(e){e.exitComp&&e.exitComp(this)}}class vn extends Rn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}noncondexpression_list(){return this.getTypedRuleContexts(Rn)}noncondexpression(e){return this.getTypedRuleContext(Rn,e)}BOOLAND(){return this.getToken(en.BOOLAND,0)}BOOLOR(){return this.getToken(en.BOOLOR,0)}enterRule(e){e.enterBool&&e.enterBool(this)}exitRule(e){e.exitBool&&e.exitBool(this)}}class Fn extends Rn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}noncondexpression_list(){return this.getTypedRuleContexts(Rn)}noncondexpression(e){return this.getTypedRuleContext(Rn,e)}MUL(){return this.getToken(en.MUL,0)}DIV(){return this.getToken(en.DIV,0)}REM(){return this.getToken(en.REM,0)}ADD(){return this.getToken(en.ADD,0)}SUB(){return this.getToken(en.SUB,0)}FIND(){return this.getToken(en.FIND,0)}MATCH(){return this.getToken(en.MATCH,0)}LSH(){return this.getToken(en.LSH,0)}RSH(){return this.getToken(en.RSH,0)}USH(){return this.getToken(en.USH,0)}BWAND(){return this.getToken(en.BWAND,0)}XOR(){return this.getToken(en.XOR,0)}BWOR(){return this.getToken(en.BWOR,0)}enterRule(e){e.enterBinary&&e.enterBinary(this)}exitRule(e){e.exitBinary&&e.exitBinary(this)}}class Pn extends Rn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}noncondexpression_list(){return this.getTypedRuleContexts(Rn)}noncondexpression(e){return this.getTypedRuleContext(Rn,e)}ELVIS(){return this.getToken(en.ELVIS,0)}enterRule(e){e.enterElvis&&e.enterElvis(this)}exitRule(e){e.exitElvis&&e.exitElvis(this)}}class Bn extends Rn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}noncondexpression(){return this.getTypedRuleContext(Rn,0)}INSTANCEOF(){return this.getToken(en.INSTANCEOF,0)}decltype(){return this.getTypedRuleContext(Ln,0)}enterRule(e){e.enterInstanceof&&e.enterInstanceof(this)}exitRule(e){e.exitInstanceof&&e.exitInstanceof(this)}}class wn extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}get ruleIndex(){return en.RULE_expression}copyFrom(e){super.copyFrom(e)}}class Un extends wn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}noncondexpression(){return this.getTypedRuleContext(Rn,0)}COND(){return this.getToken(en.COND,0)}expression_list(){return this.getTypedRuleContexts(wn)}expression(e){return this.getTypedRuleContext(wn,e)}COLON(){return this.getToken(en.COLON,0)}enterRule(e){e.enterConditional&&e.enterConditional(this)}exitRule(e){e.exitConditional&&e.exitConditional(this)}}class qn extends wn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}noncondexpression(){return this.getTypedRuleContext(Rn,0)}expression(){return this.getTypedRuleContext(wn,0)}ASSIGN(){return this.getToken(en.ASSIGN,0)}AADD(){return this.getToken(en.AADD,0)}ASUB(){return this.getToken(en.ASUB,0)}AMUL(){return this.getToken(en.AMUL,0)}ADIV(){return this.getToken(en.ADIV,0)}AREM(){return this.getToken(en.AREM,0)}AAND(){return this.getToken(en.AAND,0)}AXOR(){return this.getToken(en.AXOR,0)}AOR(){return this.getToken(en.AOR,0)}ALSH(){return this.getToken(en.ALSH,0)}ARSH(){return this.getToken(en.ARSH,0)}AUSH(){return this.getToken(en.AUSH,0)}enterRule(e){e.enterAssignment&&e.enterAssignment(this)}exitRule(e){e.exitAssignment&&e.exitAssignment(this)}}class Hn extends wn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}noncondexpression(){return this.getTypedRuleContext(Rn,0)}enterRule(e){e.enterNonconditional&&e.enterNonconditional(this)}exitRule(e){e.exitNonconditional&&e.exitNonconditional(this)}}class Vn extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}get ruleIndex(){return en.RULE_unary}copyFrom(e){super.copyFrom(e)}}class jn extends Vn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}unarynotaddsub(){return this.getTypedRuleContext(Kn,0)}enterRule(e){e.enterNotaddsub&&e.enterNotaddsub(this)}exitRule(e){e.exitNotaddsub&&e.exitNotaddsub(this)}}class Yn extends Vn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}chain(){return this.getTypedRuleContext(ni,0)}INCR(){return this.getToken(en.INCR,0)}DECR(){return this.getToken(en.DECR,0)}enterRule(e){e.enterPre&&e.enterPre(this)}exitRule(e){e.exitPre&&e.exitPre(this)}}class Gn extends Vn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}unary(){return this.getTypedRuleContext(Vn,0)}ADD(){return this.getToken(en.ADD,0)}SUB(){return this.getToken(en.SUB,0)}enterRule(e){e.enterAddsub&&e.enterAddsub(this)}exitRule(e){e.exitAddsub&&e.exitAddsub(this)}}class Kn extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}get ruleIndex(){return en.RULE_unarynotaddsub}copyFrom(e){super.copyFrom(e)}}class Wn extends Kn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}castexpression(){return this.getTypedRuleContext(Jn,0)}enterRule(e){e.enterCast&&e.enterCast(this)}exitRule(e){e.exitCast&&e.exitCast(this)}}class zn extends Kn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}unary(){return this.getTypedRuleContext(Vn,0)}BOOLNOT(){return this.getToken(en.BOOLNOT,0)}BWNOT(){return this.getToken(en.BWNOT,0)}enterRule(e){e.enterNot&&e.enterNot(this)}exitRule(e){e.exitNot&&e.exitNot(this)}}class Zn extends Kn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}chain(){return this.getTypedRuleContext(ni,0)}enterRule(e){e.enterRead&&e.enterRead(this)}exitRule(e){e.exitRead&&e.exitRead(this)}}class Xn extends Kn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}chain(){return this.getTypedRuleContext(ni,0)}INCR(){return this.getToken(en.INCR,0)}DECR(){return this.getToken(en.DECR,0)}enterRule(e){e.enterPost&&e.enterPost(this)}exitRule(e){e.exitPost&&e.exitPost(this)}}class Jn extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}get ruleIndex(){return en.RULE_castexpression}copyFrom(e){super.copyFrom(e)}}class $n extends Jn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}LP(){return this.getToken(en.LP,0)}refcasttype(){return this.getTypedRuleContext(ti,0)}RP(){return this.getToken(en.RP,0)}unarynotaddsub(){return this.getTypedRuleContext(Kn,0)}enterRule(e){e.enterRefcast&&e.enterRefcast(this)}exitRule(e){e.exitRefcast&&e.exitRefcast(this)}}class Qn extends Jn{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}LP(){return this.getToken(en.LP,0)}primordefcasttype(){return this.getTypedRuleContext(ei,0)}RP(){return this.getToken(en.RP,0)}unary(){return this.getTypedRuleContext(Vn,0)}enterRule(e){e.enterPrimordefcast&&e.enterPrimordefcast(this)}exitRule(e){e.exitPrimordefcast&&e.exitPrimordefcast(this)}}class ei extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}DEF(){return this.getToken(en.DEF,0)}PRIMITIVE(){return this.getToken(en.PRIMITIVE,0)}get ruleIndex(){return en.RULE_primordefcasttype}enterRule(e){e.enterPrimordefcasttype&&e.enterPrimordefcasttype(this)}exitRule(e){e.exitPrimordefcasttype&&e.exitPrimordefcasttype(this)}}class ti extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}DEF(){return this.getToken(en.DEF,0)}LBRACE_list(){return this.getTokens(en.LBRACE)}LBRACE(e){return this.getToken(en.LBRACE,e)}RBRACE_list(){return this.getTokens(en.RBRACE)}RBRACE(e){return this.getToken(en.RBRACE,e)}PRIMITIVE(){return this.getToken(en.PRIMITIVE,0)}ID(){return this.getToken(en.ID,0)}DOT_list(){return this.getTokens(en.DOT)}DOT(e){return this.getToken(en.DOT,e)}DOTID_list(){return this.getTokens(en.DOTID)}DOTID(e){return this.getToken(en.DOTID,e)}get ruleIndex(){return en.RULE_refcasttype}enterRule(e){e.enterRefcasttype&&e.enterRefcasttype(this)}exitRule(e){e.exitRefcasttype&&e.exitRefcasttype(this)}}class ni extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}get ruleIndex(){return en.RULE_chain}copyFrom(e){super.copyFrom(e)}}class ii extends ni{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}primary(){return this.getTypedRuleContext(ai,0)}postfix_list(){return this.getTypedRuleContexts(xi)}postfix(e){return this.getTypedRuleContext(xi,e)}enterRule(e){e.enterDynamic&&e.enterDynamic(this)}exitRule(e){e.exitDynamic&&e.exitDynamic(this)}}class oi extends ni{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}arrayinitializer(){return this.getTypedRuleContext(Ei,0)}enterRule(e){e.enterNewarray&&e.enterNewarray(this)}exitRule(e){e.exitNewarray&&e.exitNewarray(this)}}class ai extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}get ruleIndex(){return en.RULE_primary}copyFrom(e){super.copyFrom(e)}}class ri extends ai{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}listinitializer(){return this.getTypedRuleContext(Ii,0)}enterRule(e){e.enterListinit&&e.enterListinit(this)}exitRule(e){e.exitListinit&&e.exitListinit(this)}}class si extends ai{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}REGEX(){return this.getToken(en.REGEX,0)}enterRule(e){e.enterRegex&&e.enterRegex(this)}exitRule(e){e.exitRegex&&e.exitRegex(this)}}class li extends ai{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}NULL(){return this.getToken(en.NULL,0)}enterRule(e){e.enterNull&&e.enterNull(this)}exitRule(e){e.exitNull&&e.exitNull(this)}}class di extends ai{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}STRING(){return this.getToken(en.STRING,0)}enterRule(e){e.enterString&&e.enterString(this)}exitRule(e){e.exitString&&e.exitString(this)}}class ci extends ai{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}mapinitializer(){return this.getTypedRuleContext(Li,0)}enterRule(e){e.enterMapinit&&e.enterMapinit(this)}exitRule(e){e.exitMapinit&&e.exitMapinit(this)}}class ui extends ai{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}arguments(){return this.getTypedRuleContext(_i,0)}ID(){return this.getToken(en.ID,0)}DOLLAR(){return this.getToken(en.DOLLAR,0)}enterRule(e){e.enterCalllocal&&e.enterCalllocal(this)}exitRule(e){e.exitCalllocal&&e.exitCalllocal(this)}}class mi extends ai{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}TRUE(){return this.getToken(en.TRUE,0)}enterRule(e){e.enterTrue&&e.enterTrue(this)}exitRule(e){e.exitTrue&&e.exitTrue(this)}}class hi extends ai{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}FALSE(){return this.getToken(en.FALSE,0)}enterRule(e){e.enterFalse&&e.enterFalse(this)}exitRule(e){e.exitFalse&&e.exitFalse(this)}}class bi extends ai{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}ID(){return this.getToken(en.ID,0)}enterRule(e){e.enterVariable&&e.enterVariable(this)}exitRule(e){e.exitVariable&&e.exitVariable(this)}}class Ti extends ai{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}OCTAL(){return this.getToken(en.OCTAL,0)}HEX(){return this.getToken(en.HEX,0)}INTEGER(){return this.getToken(en.INTEGER,0)}DECIMAL(){return this.getToken(en.DECIMAL,0)}enterRule(e){e.enterNumeric&&e.enterNumeric(this)}exitRule(e){e.exitNumeric&&e.exitNumeric(this)}}class gi extends ai{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}NEW(){return this.getToken(en.NEW,0)}type_(){return this.getTypedRuleContext(On,0)}arguments(){return this.getTypedRuleContext(_i,0)}enterRule(e){e.enterNewobject&&e.enterNewobject(this)}exitRule(e){e.exitNewobject&&e.exitNewobject(this)}}class pi extends ai{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}LP(){return this.getToken(en.LP,0)}expression(){return this.getTypedRuleContext(wn,0)}RP(){return this.getToken(en.RP,0)}enterRule(e){e.enterPrecedence&&e.enterPrecedence(this)}exitRule(e){e.exitPrecedence&&e.exitPrecedence(this)}}class xi extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}callinvoke(){return this.getTypedRuleContext(fi,0)}fieldaccess(){return this.getTypedRuleContext(Si,0)}braceaccess(){return this.getTypedRuleContext(Ci,0)}get ruleIndex(){return en.RULE_postfix}enterRule(e){e.enterPostfix&&e.enterPostfix(this)}exitRule(e){e.exitPostfix&&e.exitPostfix(this)}}class ki extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}callinvoke(){return this.getTypedRuleContext(fi,0)}fieldaccess(){return this.getTypedRuleContext(Si,0)}get ruleIndex(){return en.RULE_postdot}enterRule(e){e.enterPostdot&&e.enterPostdot(this)}exitRule(e){e.exitPostdot&&e.exitPostdot(this)}}class fi extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}DOTID(){return this.getToken(en.DOTID,0)}arguments(){return this.getTypedRuleContext(_i,0)}DOT(){return this.getToken(en.DOT,0)}NSDOT(){return this.getToken(en.NSDOT,0)}get ruleIndex(){return en.RULE_callinvoke}enterRule(e){e.enterCallinvoke&&e.enterCallinvoke(this)}exitRule(e){e.exitCallinvoke&&e.exitCallinvoke(this)}}class Si extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}DOT(){return this.getToken(en.DOT,0)}NSDOT(){return this.getToken(en.NSDOT,0)}DOTID(){return this.getToken(en.DOTID,0)}DOTINTEGER(){return this.getToken(en.DOTINTEGER,0)}get ruleIndex(){return en.RULE_fieldaccess}enterRule(e){e.enterFieldaccess&&e.enterFieldaccess(this)}exitRule(e){e.exitFieldaccess&&e.exitFieldaccess(this)}}class Ci extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}LBRACE(){return this.getToken(en.LBRACE,0)}expression(){return this.getTypedRuleContext(wn,0)}RBRACE(){return this.getToken(en.RBRACE,0)}get ruleIndex(){return en.RULE_braceaccess}enterRule(e){e.enterBraceaccess&&e.enterBraceaccess(this)}exitRule(e){e.exitBraceaccess&&e.exitBraceaccess(this)}}class Ei extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}get ruleIndex(){return en.RULE_arrayinitializer}copyFrom(e){super.copyFrom(e)}}class Ai extends Ei{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}NEW(){return this.getToken(en.NEW,0)}type_(){return this.getTypedRuleContext(On,0)}LBRACE_list(){return this.getTokens(en.LBRACE)}LBRACE(e){return this.getToken(en.LBRACE,e)}expression_list(){return this.getTypedRuleContexts(wn)}expression(e){return this.getTypedRuleContext(wn,e)}RBRACE_list(){return this.getTokens(en.RBRACE)}RBRACE(e){return this.getToken(en.RBRACE,e)}postdot(){return this.getTypedRuleContext(ki,0)}postfix_list(){return this.getTypedRuleContexts(xi)}postfix(e){return this.getTypedRuleContext(xi,e)}enterRule(e){e.enterNewstandardarray&&e.enterNewstandardarray(this)}exitRule(e){e.exitNewstandardarray&&e.exitNewstandardarray(this)}}class yi extends Ei{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}NEW(){return this.getToken(en.NEW,0)}type_(){return this.getTypedRuleContext(On,0)}LBRACE(){return this.getToken(en.LBRACE,0)}RBRACE(){return this.getToken(en.RBRACE,0)}LBRACK(){return this.getToken(en.LBRACK,0)}RBRACK(){return this.getToken(en.RBRACK,0)}expression_list(){return this.getTypedRuleContexts(wn)}expression(e){return this.getTypedRuleContext(wn,e)}postfix_list(){return this.getTypedRuleContexts(xi)}postfix(e){return this.getTypedRuleContext(xi,e)}COMMA_list(){return this.getTokens(en.COMMA)}COMMA(e){return this.getToken(en.COMMA,e)}enterRule(e){e.enterNewinitializedarray&&e.enterNewinitializedarray(this)}exitRule(e){e.exitNewinitializedarray&&e.exitNewinitializedarray(this)}}class Ii extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}LBRACE(){return this.getToken(en.LBRACE,0)}expression_list(){return this.getTypedRuleContexts(wn)}expression(e){return this.getTypedRuleContext(wn,e)}RBRACE(){return this.getToken(en.RBRACE,0)}COMMA_list(){return this.getTokens(en.COMMA)}COMMA(e){return this.getToken(en.COMMA,e)}get ruleIndex(){return en.RULE_listinitializer}enterRule(e){e.enterListinitializer&&e.enterListinitializer(this)}exitRule(e){e.exitListinitializer&&e.exitListinitializer(this)}}class Li extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}LBRACE(){return this.getToken(en.LBRACE,0)}maptoken_list(){return this.getTypedRuleContexts(Oi)}maptoken(e){return this.getTypedRuleContext(Oi,e)}RBRACE(){return this.getToken(en.RBRACE,0)}COMMA_list(){return this.getTokens(en.COMMA)}COMMA(e){return this.getToken(en.COMMA,e)}COLON(){return this.getToken(en.COLON,0)}get ruleIndex(){return en.RULE_mapinitializer}enterRule(e){e.enterMapinitializer&&e.enterMapinitializer(this)}exitRule(e){e.exitMapinitializer&&e.exitMapinitializer(this)}}class Oi extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}expression_list(){return this.getTypedRuleContexts(wn)}expression(e){return this.getTypedRuleContext(wn,e)}COLON(){return this.getToken(en.COLON,0)}get ruleIndex(){return en.RULE_maptoken}enterRule(e){e.enterMaptoken&&e.enterMaptoken(this)}exitRule(e){e.exitMaptoken&&e.exitMaptoken(this)}}class _i extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}LP(){return this.getToken(en.LP,0)}RP(){return this.getToken(en.RP,0)}argument_list(){return this.getTypedRuleContexts(Ni)}argument(e){return this.getTypedRuleContext(Ni,e)}COMMA_list(){return this.getTokens(en.COMMA)}COMMA(e){return this.getToken(en.COMMA,e)}get ruleIndex(){return en.RULE_arguments}enterRule(e){e.enterArguments&&e.enterArguments(this)}exitRule(e){e.exitArguments&&e.exitArguments(this)}}class Ni extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}expression(){return this.getTypedRuleContext(wn,0)}lambda(){return this.getTypedRuleContext(Ri,0)}funcref(){return this.getTypedRuleContext(Mi,0)}get ruleIndex(){return en.RULE_argument}enterRule(e){e.enterArgument&&e.enterArgument(this)}exitRule(e){e.exitArgument&&e.exitArgument(this)}}class Ri extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}ARROW(){return this.getToken(en.ARROW,0)}lamtype_list(){return this.getTypedRuleContexts(Di)}lamtype(e){return this.getTypedRuleContext(Di,e)}LP(){return this.getToken(en.LP,0)}RP(){return this.getToken(en.RP,0)}block(){return this.getTypedRuleContext(Cn,0)}expression(){return this.getTypedRuleContext(wn,0)}COMMA_list(){return this.getTokens(en.COMMA)}COMMA(e){return this.getToken(en.COMMA,e)}get ruleIndex(){return en.RULE_lambda}enterRule(e){e.enterLambda&&e.enterLambda(this)}exitRule(e){e.exitLambda&&e.exitLambda(this)}}class Di extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}ID(){return this.getToken(en.ID,0)}decltype(){return this.getTypedRuleContext(Ln,0)}get ruleIndex(){return en.RULE_lamtype}enterRule(e){e.enterLamtype&&e.enterLamtype(this)}exitRule(e){e.exitLamtype&&e.exitLamtype(this)}}class Mi extends Qt.m{constructor(e,t,n){super(t,n),this.parser=e}get ruleIndex(){return en.RULE_funcref}copyFrom(e){super.copyFrom(e)}}class vi extends Mi{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}decltype(){return this.getTypedRuleContext(Ln,0)}REF(){return this.getToken(en.REF,0)}ID(){return this.getToken(en.ID,0)}enterRule(e){e.enterClassfuncref&&e.enterClassfuncref(this)}exitRule(e){e.exitClassfuncref&&e.exitClassfuncref(this)}}class Fi extends Mi{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}decltype(){return this.getTypedRuleContext(Ln,0)}REF(){return this.getToken(en.REF,0)}NEW(){return this.getToken(en.NEW,0)}enterRule(e){e.enterConstructorfuncref&&e.enterConstructorfuncref(this)}exitRule(e){e.exitConstructorfuncref&&e.exitConstructorfuncref(this)}}class Pi extends Mi{constructor(e,t){super(e,t.parentCtx,t.invokingState),super.copyFrom(t)}THIS(){return this.getToken(en.THIS,0)}REF(){return this.getToken(en.REF,0)}ID(){return this.getToken(en.ID,0)}enterRule(e){e.enterLocalfuncref&&e.enterLocalfuncref(this)}exitRule(e){e.exitLocalfuncref&&e.exitLocalfuncref(this)}}class Bi extends Qt.h{constructor(e){super(e),this._interp=new Qt.i(this,Bi._ATN,Bi.DecisionsToDFA,new Qt.n)}get grammarFileName(){return"painless_lexer.g4"}get literalNames(){return Bi.literalNames}get symbolicNames(){return Bi.symbolicNames}get ruleNames(){return Bi.ruleNames}get serializedATN(){return Bi._serializedATN}get channelNames(){return Bi.channelNames}get modeNames(){return Bi.modeNames}sempred(e,t,n){switch(t){case 31:return this.DIV_sempred(e,n);case 77:return this.REGEX_sempred(e,n)}return!0}DIV_sempred(e,t){return 0!==t||0==this.isSlashRegex()}REGEX_sempred(e,t){return 1!==t||this.isSlashRegex()}static get _ATN(){return Bi.__ATN||(Bi.__ATN=(new Qt.b).deserialize(Bi._serializedATN)),Bi.__ATN}}$t=Bi,r()(Bi,"WS",1),r()(Bi,"COMMENT",2),r()(Bi,"LBRACK",3),r()(Bi,"RBRACK",4),r()(Bi,"LBRACE",5),r()(Bi,"RBRACE",6),r()(Bi,"LP",7),r()(Bi,"RP",8),r()(Bi,"DOLLAR",9),r()(Bi,"DOT",10),r()(Bi,"NSDOT",11),r()(Bi,"COMMA",12),r()(Bi,"SEMICOLON",13),r()(Bi,"IF",14),r()(Bi,"IN",15),r()(Bi,"ELSE",16),r()(Bi,"WHILE",17),r()(Bi,"DO",18),r()(Bi,"FOR",19),r()(Bi,"CONTINUE",20),r()(Bi,"BREAK",21),r()(Bi,"RETURN",22),r()(Bi,"NEW",23),r()(Bi,"TRY",24),r()(Bi,"CATCH",25),r()(Bi,"THROW",26),r()(Bi,"THIS",27),r()(Bi,"INSTANCEOF",28),r()(Bi,"BOOLNOT",29),r()(Bi,"BWNOT",30),r()(Bi,"MUL",31),r()(Bi,"DIV",32),r()(Bi,"REM",33),r()(Bi,"ADD",34),r()(Bi,"SUB",35),r()(Bi,"LSH",36),r()(Bi,"RSH",37),r()(Bi,"USH",38),r()(Bi,"LT",39),r()(Bi,"LTE",40),r()(Bi,"GT",41),r()(Bi,"GTE",42),r()(Bi,"EQ",43),r()(Bi,"EQR",44),r()(Bi,"NE",45),r()(Bi,"NER",46),r()(Bi,"BWAND",47),r()(Bi,"XOR",48),r()(Bi,"BWOR",49),r()(Bi,"BOOLAND",50),r()(Bi,"BOOLOR",51),r()(Bi,"COND",52),r()(Bi,"COLON",53),r()(Bi,"ELVIS",54),r()(Bi,"REF",55),r()(Bi,"ARROW",56),r()(Bi,"FIND",57),r()(Bi,"MATCH",58),r()(Bi,"INCR",59),r()(Bi,"DECR",60),r()(Bi,"ASSIGN",61),r()(Bi,"AADD",62),r()(Bi,"ASUB",63),r()(Bi,"AMUL",64),r()(Bi,"ADIV",65),r()(Bi,"AREM",66),r()(Bi,"AAND",67),r()(Bi,"AXOR",68),r()(Bi,"AOR",69),r()(Bi,"ALSH",70),r()(Bi,"ARSH",71),r()(Bi,"AUSH",72),r()(Bi,"OCTAL",73),r()(Bi,"HEX",74),r()(Bi,"INTEGER",75),r()(Bi,"DECIMAL",76),r()(Bi,"STRING",77),r()(Bi,"REGEX",78),r()(Bi,"TRUE",79),r()(Bi,"FALSE",80),r()(Bi,"NULL",81),r()(Bi,"PRIMITIVE",82),r()(Bi,"DEF",83),r()(Bi,"ID",84),r()(Bi,"DOTINTEGER",85),r()(Bi,"DOTID",86),r()(Bi,"EOF",Qt.p.EOF),r()(Bi,"AFTER_DOT",1),r()(Bi,"channelNames",["DEFAULT_TOKEN_CHANNEL","HIDDEN"]),r()(Bi,"literalNames",[null,null,null,"'{'","'}'","'['","']'","'('","')'","'$'","'.'","'?.'","','","';'","'if'","'in'","'else'","'while'","'do'","'for'","'continue'","'break'","'return'","'new'","'try'","'catch'","'throw'","'this'","'instanceof'","'!'","'~'","'*'","'/'","'%'","'+'","'-'","'<<'","'>>'","'>>>'","'<'","'<='","'>'","'>='","'=='","'==='","'!='","'!=='","'&'","'^'","'|'","'&&'","'||'","'?'","':'","'?:'","'::'","'->'","'=~'","'==~'","'++'","'--'","'='","'+='","'-='","'*='","'/='","'%='","'&='","'^='","'|='","'<<='","'>>='","'>>>='",null,null,null,null,null,null,"'true'","'false'","'null'",null,"'def'"]),r()(Bi,"symbolicNames",[null,"WS","COMMENT","LBRACK","RBRACK","LBRACE","RBRACE","LP","RP","DOLLAR","DOT","NSDOT","COMMA","SEMICOLON","IF","IN","ELSE","WHILE","DO","FOR","CONTINUE","BREAK","RETURN","NEW","TRY","CATCH","THROW","THIS","INSTANCEOF","BOOLNOT","BWNOT","MUL","DIV","REM","ADD","SUB","LSH","RSH","USH","LT","LTE","GT","GTE","EQ","EQR","NE","NER","BWAND","XOR","BWOR","BOOLAND","BOOLOR","COND","COLON","ELVIS","REF","ARROW","FIND","MATCH","INCR","DECR","ASSIGN","AADD","ASUB","AMUL","ADIV","AREM","AAND","AXOR","AOR","ALSH","ARSH","AUSH","OCTAL","HEX","INTEGER","DECIMAL","STRING","REGEX","TRUE","FALSE","NULL","PRIMITIVE","DEF","ID","DOTINTEGER","DOTID"]),r()(Bi,"modeNames",["DEFAULT_MODE","AFTER_DOT"]),r()(Bi,"ruleNames",["WS","COMMENT","LBRACK","RBRACK","LBRACE","RBRACE","LP","RP","DOLLAR","DOT","NSDOT","COMMA","SEMICOLON","IF","IN","ELSE","WHILE","DO","FOR","CONTINUE","BREAK","RETURN","NEW","TRY","CATCH","THROW","THIS","INSTANCEOF","BOOLNOT","BWNOT","MUL","DIV","REM","ADD","SUB","LSH","RSH","USH","LT","LTE","GT","GTE","EQ","EQR","NE","NER","BWAND","XOR","BWOR","BOOLAND","BOOLOR","COND","COLON","ELVIS","REF","ARROW","FIND","MATCH","INCR","DECR","ASSIGN","AADD","ASUB","AMUL","ADIV","AREM","AAND","AXOR","AOR","ALSH","ARSH","AUSH","OCTAL","HEX","INTEGER","DECIMAL","STRING","REGEX","TRUE","FALSE","NULL","PRIMITIVE","DEF","ID","DOTINTEGER","DOTID"]),r()(Bi,"_serializedATN",[4,0,86,636,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,7,85,1,0,4,0,176,8,0,11,0,12,0,177,1,0,1,0,1,1,1,1,1,1,1,1,5,1,186,8,1,10,1,12,1,189,9,1,1,1,1,1,1,1,1,1,1,1,5,1,196,8,1,10,1,12,1,199,9,1,1,1,1,1,3,1,203,8,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,65,1,66,1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,72,1,72,4,72,444,8,72,11,72,12,72,445,1,72,3,72,449,8,72,1,73,1,73,1,73,4,73,454,8,73,11,73,12,73,455,1,73,3,73,459,8,73,1,74,1,74,1,74,5,74,464,8,74,10,74,12,74,467,9,74,3,74,469,8,74,1,74,3,74,472,8,74,1,75,1,75,1,75,5,75,477,8,75,10,75,12,75,480,9,75,3,75,482,8,75,1,75,1,75,4,75,486,8,75,11,75,12,75,487,3,75,490,8,75,1,75,1,75,3,75,494,8,75,1,75,4,75,497,8,75,11,75,12,75,498,3,75,501,8,75,1,75,3,75,504,8,75,1,76,1,76,1,76,1,76,1,76,1,76,5,76,512,8,76,10,76,12,76,515,9,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,5,76,524,8,76,10,76,12,76,527,9,76,1,76,3,76,530,8,76,1,77,1,77,1,77,1,77,4,77,536,8,77,11,77,12,77,537,1,77,1,77,5,77,542,8,77,10,77,12,77,545,9,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,603,8,81,1,82,1,82,1,82,1,82,1,83,1,83,5,83,611,8,83,10,83,12,83,614,9,83,1,84,1,84,1,84,5,84,619,8,84,10,84,12,84,622,9,84,3,84,624,8,84,1,84,1,84,1,85,1,85,5,85,630,8,85,10,85,12,85,633,9,85,1,85,1,85,5,187,197,513,525,537,0,86,2,1,4,2,6,3,8,4,10,5,12,6,14,7,16,8,18,9,20,10,22,11,24,12,26,13,28,14,30,15,32,16,34,17,36,18,38,19,40,20,42,21,44,22,46,23,48,24,50,25,52,26,54,27,56,28,58,29,60,30,62,31,64,32,66,33,68,34,70,35,72,36,74,37,76,38,78,39,80,40,82,41,84,42,86,43,88,44,90,45,92,46,94,47,96,48,98,49,100,50,102,51,104,52,106,53,108,54,110,55,112,56,114,57,116,58,118,59,120,60,122,61,124,62,126,63,128,64,130,65,132,66,134,67,136,68,138,69,140,70,142,71,144,72,146,73,148,74,150,75,152,76,154,77,156,78,158,79,160,80,162,81,164,82,166,83,168,84,170,85,172,86,2,0,1,19,3,0,9,10,13,13,32,32,2,0,10,10,13,13,1,0,48,55,2,0,76,76,108,108,2,0,88,88,120,120,3,0,48,57,65,70,97,102,1,0,49,57,1,0,48,57,6,0,68,68,70,70,76,76,100,100,102,102,108,108,2,0,69,69,101,101,2,0,43,43,45,45,4,0,68,68,70,70,100,100,102,102,2,0,34,34,92,92,2,0,39,39,92,92,1,0,10,10,2,0,10,10,47,47,7,0,85,85,99,99,105,105,108,109,115,115,117,117,120,120,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,674,0,2,1,0,0,0,0,4,1,0,0,0,0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,0,0,18,1,0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,1,0,0,0,0,28,1,0,0,0,0,30,1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,0,0,38,1,0,0,0,0,40,1,0,0,0,0,42,1,0,0,0,0,44,1,0,0,0,0,46,1,0,0,0,0,48,1,0,0,0,0,50,1,0,0,0,0,52,1,0,0,0,0,54,1,0,0,0,0,56,1,0,0,0,0,58,1,0,0,0,0,60,1,0,0,0,0,62,1,0,0,0,0,64,1,0,0,0,0,66,1,0,0,0,0,68,1,0,0,0,0,70,1,0,0,0,0,72,1,0,0,0,0,74,1,0,0,0,0,76,1,0,0,0,0,78,1,0,0,0,0,80,1,0,0,0,0,82,1,0,0,0,0,84,1,0,0,0,0,86,1,0,0,0,0,88,1,0,0,0,0,90,1,0,0,0,0,92,1,0,0,0,0,94,1,0,0,0,0,96,1,0,0,0,0,98,1,0,0,0,0,100,1,0,0,0,0,102,1,0,0,0,0,104,1,0,0,0,0,106,1,0,0,0,0,108,1,0,0,0,0,110,1,0,0,0,0,112,1,0,0,0,0,114,1,0,0,0,0,116,1,0,0,0,0,118,1,0,0,0,0,120,1,0,0,0,0,122,1,0,0,0,0,124,1,0,0,0,0,126,1,0,0,0,0,128,1,0,0,0,0,130,1,0,0,0,0,132,1,0,0,0,0,134,1,0,0,0,0,136,1,0,0,0,0,138,1,0,0,0,0,140,1,0,0,0,0,142,1,0,0,0,0,144,1,0,0,0,0,146,1,0,0,0,0,148,1,0,0,0,0,150,1,0,0,0,0,152,1,0,0,0,0,154,1,0,0,0,0,156,1,0,0,0,0,158,1,0,0,0,0,160,1,0,0,0,0,162,1,0,0,0,0,164,1,0,0,0,0,166,1,0,0,0,0,168,1,0,0,0,1,170,1,0,0,0,1,172,1,0,0,0,2,175,1,0,0,0,4,202,1,0,0,0,6,206,1,0,0,0,8,208,1,0,0,0,10,210,1,0,0,0,12,212,1,0,0,0,14,214,1,0,0,0,16,216,1,0,0,0,18,218,1,0,0,0,20,220,1,0,0,0,22,224,1,0,0,0,24,229,1,0,0,0,26,231,1,0,0,0,28,233,1,0,0,0,30,236,1,0,0,0,32,239,1,0,0,0,34,244,1,0,0,0,36,250,1,0,0,0,38,253,1,0,0,0,40,257,1,0,0,0,42,266,1,0,0,0,44,272,1,0,0,0,46,279,1,0,0,0,48,283,1,0,0,0,50,287,1,0,0,0,52,293,1,0,0,0,54,299,1,0,0,0,56,304,1,0,0,0,58,315,1,0,0,0,60,317,1,0,0,0,62,319,1,0,0,0,64,321,1,0,0,0,66,324,1,0,0,0,68,326,1,0,0,0,70,328,1,0,0,0,72,330,1,0,0,0,74,333,1,0,0,0,76,336,1,0,0,0,78,340,1,0,0,0,80,342,1,0,0,0,82,345,1,0,0,0,84,347,1,0,0,0,86,350,1,0,0,0,88,353,1,0,0,0,90,357,1,0,0,0,92,360,1,0,0,0,94,364,1,0,0,0,96,366,1,0,0,0,98,368,1,0,0,0,100,370,1,0,0,0,102,373,1,0,0,0,104,376,1,0,0,0,106,378,1,0,0,0,108,380,1,0,0,0,110,383,1,0,0,0,112,386,1,0,0,0,114,389,1,0,0,0,116,392,1,0,0,0,118,396,1,0,0,0,120,399,1,0,0,0,122,402,1,0,0,0,124,404,1,0,0,0,126,407,1,0,0,0,128,410,1,0,0,0,130,413,1,0,0,0,132,416,1,0,0,0,134,419,1,0,0,0,136,422,1,0,0,0,138,425,1,0,0,0,140,428,1,0,0,0,142,432,1,0,0,0,144,436,1,0,0,0,146,441,1,0,0,0,148,450,1,0,0,0,150,468,1,0,0,0,152,481,1,0,0,0,154,529,1,0,0,0,156,531,1,0,0,0,158,548,1,0,0,0,160,553,1,0,0,0,162,559,1,0,0,0,164,602,1,0,0,0,166,604,1,0,0,0,168,608,1,0,0,0,170,623,1,0,0,0,172,627,1,0,0,0,174,176,7,0,0,0,175,174,1,0,0,0,176,177,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,179,1,0,0,0,179,180,6,0,0,0,180,3,1,0,0,0,181,182,5,47,0,0,182,183,5,47,0,0,183,187,1,0,0,0,184,186,9,0,0,0,185,184,1,0,0,0,186,189,1,0,0,0,187,188,1,0,0,0,187,185,1,0,0,0,188,190,1,0,0,0,189,187,1,0,0,0,190,203,7,1,0,0,191,192,5,47,0,0,192,193,5,42,0,0,193,197,1,0,0,0,194,196,9,0,0,0,195,194,1,0,0,0,196,199,1,0,0,0,197,198,1,0,0,0,197,195,1,0,0,0,198,200,1,0,0,0,199,197,1,0,0,0,200,201,5,42,0,0,201,203,5,47,0,0,202,181,1,0,0,0,202,191,1,0,0,0,203,204,1,0,0,0,204,205,6,1,0,0,205,5,1,0,0,0,206,207,5,123,0,0,207,7,1,0,0,0,208,209,5,125,0,0,209,9,1,0,0,0,210,211,5,91,0,0,211,11,1,0,0,0,212,213,5,93,0,0,213,13,1,0,0,0,214,215,5,40,0,0,215,15,1,0,0,0,216,217,5,41,0,0,217,17,1,0,0,0,218,219,5,36,0,0,219,19,1,0,0,0,220,221,5,46,0,0,221,222,1,0,0,0,222,223,6,9,1,0,223,21,1,0,0,0,224,225,5,63,0,0,225,226,5,46,0,0,226,227,1,0,0,0,227,228,6,10,1,0,228,23,1,0,0,0,229,230,5,44,0,0,230,25,1,0,0,0,231,232,5,59,0,0,232,27,1,0,0,0,233,234,5,105,0,0,234,235,5,102,0,0,235,29,1,0,0,0,236,237,5,105,0,0,237,238,5,110,0,0,238,31,1,0,0,0,239,240,5,101,0,0,240,241,5,108,0,0,241,242,5,115,0,0,242,243,5,101,0,0,243,33,1,0,0,0,244,245,5,119,0,0,245,246,5,104,0,0,246,247,5,105,0,0,247,248,5,108,0,0,248,249,5,101,0,0,249,35,1,0,0,0,250,251,5,100,0,0,251,252,5,111,0,0,252,37,1,0,0,0,253,254,5,102,0,0,254,255,5,111,0,0,255,256,5,114,0,0,256,39,1,0,0,0,257,258,5,99,0,0,258,259,5,111,0,0,259,260,5,110,0,0,260,261,5,116,0,0,261,262,5,105,0,0,262,263,5,110,0,0,263,264,5,117,0,0,264,265,5,101,0,0,265,41,1,0,0,0,266,267,5,98,0,0,267,268,5,114,0,0,268,269,5,101,0,0,269,270,5,97,0,0,270,271,5,107,0,0,271,43,1,0,0,0,272,273,5,114,0,0,273,274,5,101,0,0,274,275,5,116,0,0,275,276,5,117,0,0,276,277,5,114,0,0,277,278,5,110,0,0,278,45,1,0,0,0,279,280,5,110,0,0,280,281,5,101,0,0,281,282,5,119,0,0,282,47,1,0,0,0,283,284,5,116,0,0,284,285,5,114,0,0,285,286,5,121,0,0,286,49,1,0,0,0,287,288,5,99,0,0,288,289,5,97,0,0,289,290,5,116,0,0,290,291,5,99,0,0,291,292,5,104,0,0,292,51,1,0,0,0,293,294,5,116,0,0,294,295,5,104,0,0,295,296,5,114,0,0,296,297,5,111,0,0,297,298,5,119,0,0,298,53,1,0,0,0,299,300,5,116,0,0,300,301,5,104,0,0,301,302,5,105,0,0,302,303,5,115,0,0,303,55,1,0,0,0,304,305,5,105,0,0,305,306,5,110,0,0,306,307,5,115,0,0,307,308,5,116,0,0,308,309,5,97,0,0,309,310,5,110,0,0,310,311,5,99,0,0,311,312,5,101,0,0,312,313,5,111,0,0,313,314,5,102,0,0,314,57,1,0,0,0,315,316,5,33,0,0,316,59,1,0,0,0,317,318,5,126,0,0,318,61,1,0,0,0,319,320,5,42,0,0,320,63,1,0,0,0,321,322,5,47,0,0,322,323,4,31,0,0,323,65,1,0,0,0,324,325,5,37,0,0,325,67,1,0,0,0,326,327,5,43,0,0,327,69,1,0,0,0,328,329,5,45,0,0,329,71,1,0,0,0,330,331,5,60,0,0,331,332,5,60,0,0,332,73,1,0,0,0,333,334,5,62,0,0,334,335,5,62,0,0,335,75,1,0,0,0,336,337,5,62,0,0,337,338,5,62,0,0,338,339,5,62,0,0,339,77,1,0,0,0,340,341,5,60,0,0,341,79,1,0,0,0,342,343,5,60,0,0,343,344,5,61,0,0,344,81,1,0,0,0,345,346,5,62,0,0,346,83,1,0,0,0,347,348,5,62,0,0,348,349,5,61,0,0,349,85,1,0,0,0,350,351,5,61,0,0,351,352,5,61,0,0,352,87,1,0,0,0,353,354,5,61,0,0,354,355,5,61,0,0,355,356,5,61,0,0,356,89,1,0,0,0,357,358,5,33,0,0,358,359,5,61,0,0,359,91,1,0,0,0,360,361,5,33,0,0,361,362,5,61,0,0,362,363,5,61,0,0,363,93,1,0,0,0,364,365,5,38,0,0,365,95,1,0,0,0,366,367,5,94,0,0,367,97,1,0,0,0,368,369,5,124,0,0,369,99,1,0,0,0,370,371,5,38,0,0,371,372,5,38,0,0,372,101,1,0,0,0,373,374,5,124,0,0,374,375,5,124,0,0,375,103,1,0,0,0,376,377,5,63,0,0,377,105,1,0,0,0,378,379,5,58,0,0,379,107,1,0,0,0,380,381,5,63,0,0,381,382,5,58,0,0,382,109,1,0,0,0,383,384,5,58,0,0,384,385,5,58,0,0,385,111,1,0,0,0,386,387,5,45,0,0,387,388,5,62,0,0,388,113,1,0,0,0,389,390,5,61,0,0,390,391,5,126,0,0,391,115,1,0,0,0,392,393,5,61,0,0,393,394,5,61,0,0,394,395,5,126,0,0,395,117,1,0,0,0,396,397,5,43,0,0,397,398,5,43,0,0,398,119,1,0,0,0,399,400,5,45,0,0,400,401,5,45,0,0,401,121,1,0,0,0,402,403,5,61,0,0,403,123,1,0,0,0,404,405,5,43,0,0,405,406,5,61,0,0,406,125,1,0,0,0,407,408,5,45,0,0,408,409,5,61,0,0,409,127,1,0,0,0,410,411,5,42,0,0,411,412,5,61,0,0,412,129,1,0,0,0,413,414,5,47,0,0,414,415,5,61,0,0,415,131,1,0,0,0,416,417,5,37,0,0,417,418,5,61,0,0,418,133,1,0,0,0,419,420,5,38,0,0,420,421,5,61,0,0,421,135,1,0,0,0,422,423,5,94,0,0,423,424,5,61,0,0,424,137,1,0,0,0,425,426,5,124,0,0,426,427,5,61,0,0,427,139,1,0,0,0,428,429,5,60,0,0,429,430,5,60,0,0,430,431,5,61,0,0,431,141,1,0,0,0,432,433,5,62,0,0,433,434,5,62,0,0,434,435,5,61,0,0,435,143,1,0,0,0,436,437,5,62,0,0,437,438,5,62,0,0,438,439,5,62,0,0,439,440,5,61,0,0,440,145,1,0,0,0,441,443,5,48,0,0,442,444,7,2,0,0,443,442,1,0,0,0,444,445,1,0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,448,1,0,0,0,447,449,7,3,0,0,448,447,1,0,0,0,448,449,1,0,0,0,449,147,1,0,0,0,450,451,5,48,0,0,451,453,7,4,0,0,452,454,7,5,0,0,453,452,1,0,0,0,454,455,1,0,0,0,455,453,1,0,0,0,455,456,1,0,0,0,456,458,1,0,0,0,457,459,7,3,0,0,458,457,1,0,0,0,458,459,1,0,0,0,459,149,1,0,0,0,460,469,5,48,0,0,461,465,7,6,0,0,462,464,7,7,0,0,463,462,1,0,0,0,464,467,1,0,0,0,465,463,1,0,0,0,465,466,1,0,0,0,466,469,1,0,0,0,467,465,1,0,0,0,468,460,1,0,0,0,468,461,1,0,0,0,469,471,1,0,0,0,470,472,7,8,0,0,471,470,1,0,0,0,471,472,1,0,0,0,472,151,1,0,0,0,473,482,5,48,0,0,474,478,7,6,0,0,475,477,7,7,0,0,476,475,1,0,0,0,477,480,1,0,0,0,478,476,1,0,0,0,478,479,1,0,0,0,479,482,1,0,0,0,480,478,1,0,0,0,481,473,1,0,0,0,481,474,1,0,0,0,482,489,1,0,0,0,483,485,3,20,9,0,484,486,7,7,0,0,485,484,1,0,0,0,486,487,1,0,0,0,487,485,1,0,0,0,487,488,1,0,0,0,488,490,1,0,0,0,489,483,1,0,0,0,489,490,1,0,0,0,490,500,1,0,0,0,491,493,7,9,0,0,492,494,7,10,0,0,493,492,1,0,0,0,493,494,1,0,0,0,494,496,1,0,0,0,495,497,7,7,0,0,496,495,1,0,0,0,497,498,1,0,0,0,498,496,1,0,0,0,498,499,1,0,0,0,499,501,1,0,0,0,500,491,1,0,0,0,500,501,1,0,0,0,501,503,1,0,0,0,502,504,7,11,0,0,503,502,1,0,0,0,503,504,1,0,0,0,504,153,1,0,0,0,505,513,5,34,0,0,506,507,5,92,0,0,507,512,5,34,0,0,508,509,5,92,0,0,509,512,5,92,0,0,510,512,8,12,0,0,511,506,1,0,0,0,511,508,1,0,0,0,511,510,1,0,0,0,512,515,1,0,0,0,513,514,1,0,0,0,513,511,1,0,0,0,514,516,1,0,0,0,515,513,1,0,0,0,516,530,5,34,0,0,517,525,5,39,0,0,518,519,5,92,0,0,519,524,5,39,0,0,520,521,5,92,0,0,521,524,5,92,0,0,522,524,8,13,0,0,523,518,1,0,0,0,523,520,1,0,0,0,523,522,1,0,0,0,524,527,1,0,0,0,525,526,1,0,0,0,525,523,1,0,0,0,526,528,1,0,0,0,527,525,1,0,0,0,528,530,5,39,0,0,529,505,1,0,0,0,529,517,1,0,0,0,530,155,1,0,0,0,531,535,5,47,0,0,532,533,5,92,0,0,533,536,8,14,0,0,534,536,8,15,0,0,535,532,1,0,0,0,535,534,1,0,0,0,536,537,1,0,0,0,537,538,1,0,0,0,537,535,1,0,0,0,538,539,1,0,0,0,539,543,5,47,0,0,540,542,7,16,0,0,541,540,1,0,0,0,542,545,1,0,0,0,543,541,1,0,0,0,543,544,1,0,0,0,544,546,1,0,0,0,545,543,1,0,0,0,546,547,4,77,1,0,547,157,1,0,0,0,548,549,5,116,0,0,549,550,5,114,0,0,550,551,5,117,0,0,551,552,5,101,0,0,552,159,1,0,0,0,553,554,5,102,0,0,554,555,5,97,0,0,555,556,5,108,0,0,556,557,5,115,0,0,557,558,5,101,0,0,558,161,1,0,0,0,559,560,5,110,0,0,560,561,5,117,0,0,561,562,5,108,0,0,562,563,5,108,0,0,563,163,1,0,0,0,564,565,5,98,0,0,565,566,5,111,0,0,566,567,5,111,0,0,567,568,5,108,0,0,568,569,5,101,0,0,569,570,5,97,0,0,570,603,5,110,0,0,571,572,5,98,0,0,572,573,5,121,0,0,573,574,5,116,0,0,574,603,5,101,0,0,575,576,5,115,0,0,576,577,5,104,0,0,577,578,5,111,0,0,578,579,5,114,0,0,579,603,5,116,0,0,580,581,5,99,0,0,581,582,5,104,0,0,582,583,5,97,0,0,583,603,5,114,0,0,584,585,5,105,0,0,585,586,5,110,0,0,586,603,5,116,0,0,587,588,5,108,0,0,588,589,5,111,0,0,589,590,5,110,0,0,590,603,5,103,0,0,591,592,5,102,0,0,592,593,5,108,0,0,593,594,5,111,0,0,594,595,5,97,0,0,595,603,5,116,0,0,596,597,5,100,0,0,597,598,5,111,0,0,598,599,5,117,0,0,599,600,5,98,0,0,600,601,5,108,0,0,601,603,5,101,0,0,602,564,1,0,0,0,602,571,1,0,0,0,602,575,1,0,0,0,602,580,1,0,0,0,602,584,1,0,0,0,602,587,1,0,0,0,602,591,1,0,0,0,602,596,1,0,0,0,603,165,1,0,0,0,604,605,5,100,0,0,605,606,5,101,0,0,606,607,5,102,0,0,607,167,1,0,0,0,608,612,7,17,0,0,609,611,7,18,0,0,610,609,1,0,0,0,611,614,1,0,0,0,612,610,1,0,0,0,612,613,1,0,0,0,613,169,1,0,0,0,614,612,1,0,0,0,615,624,5,48,0,0,616,620,7,6,0,0,617,619,7,7,0,0,618,617,1,0,0,0,619,622,1,0,0,0,620,618,1,0,0,0,620,621,1,0,0,0,621,624,1,0,0,0,622,620,1,0,0,0,623,615,1,0,0,0,623,616,1,0,0,0,624,625,1,0,0,0,625,626,6,84,2,0,626,171,1,0,0,0,627,631,7,17,0,0,628,630,7,18,0,0,629,628,1,0,0,0,630,633,1,0,0,0,631,629,1,0,0,0,631,632,1,0,0,0,632,634,1,0,0,0,633,631,1,0,0,0,634,635,6,85,2,0,635,173,1,0,0,0,34,0,1,177,187,197,202,445,448,455,458,465,468,471,478,481,487,489,493,498,500,503,511,513,523,525,529,535,537,543,602,612,620,623,631,3,6,0,0,2,1,0,2,0,0]),r()(Bi,"__ATN",void 0),r()(Bi,"DecisionsToDFA",$t._ATN.decisionToState.map(((e,t)=>new Qt.e(e,t))));class wi extends Bi{constructor(...e){super(...e),r()(this,"lastToken",void 0)}nextToken(){return this.lastToken=super.nextToken(),this.lastToken}isSlashRegex(){var e;switch(null===(e=this.lastToken)||void 0===e?void 0:e.type){case Bi.RBRACE:case Bi.RP:case Bi.OCTAL:case Bi.HEX:case Bi.INTEGER:case Bi.DECIMAL:case Bi.ID:case Bi.DOTINTEGER:case Bi.DOTID:return!1;default:return!0}}}class Ui extends Qt.f{constructor(...e){super(...e),r()(this,"errors",[])}syntaxError(e,t,n,i,o,a){let r=i+1;null!=t&&t._text&&(r=i+t._text.length),this.errors.push({startLineNumber:n,endLineNumber:n,startColumn:i,endColumn:r,message:o,severity:8})}getErrors(){return this.errors}}const qi=e=>{const{errors:t}=(e=>{const t=Qt.c.fromString(e),n=new wi(t),i=new Ui,o=new Qt.d(n),a=new en(o);n.removeErrorListeners(),a.removeErrorListeners(),n.addErrorListener(i),a.addErrorListener(i);const r=i.getErrors();return{source:a.source(),errors:r}})(e);return t};class Hi{constructor(e){r()(this,"_ctx",void 0),this._ctx=e}getTextDocument(e){const t=this._ctx.getMirrorModels().find((t=>t.uri.toString()===e));return null==t?void 0:t.getValue()}async getSyntaxErrors(e){const t=this.getTextDocument(e);if(t)return qi(t)}provideAutocompleteSuggestions(e,t,n){const i=e.replace("\t","").split(" ");return Xt(t,i,n)}}self.onmessage=()=>{o.initialize(((e,t)=>new Hi(e)))}}]);