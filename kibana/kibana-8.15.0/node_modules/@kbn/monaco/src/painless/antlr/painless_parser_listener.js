"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _antlr = require("antlr4");
// @ts-nocheck
// Generated from ./src/painless/antlr/painless_parser.g4 by ANTLR 4.13.1

/**
 * This interface defines a complete listener for a parse tree produced by
 * `painless_parser`.
 */
class painless_parserListener extends _antlr.ParseTreeListener {
  constructor(...args) {
    super(...args);
    /**
     * Enter a parse tree produced by `painless_parser.source`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterSource", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.source`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitSource", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.function`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterFunction", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.function`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitFunction", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.parameters`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterParameters", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.parameters`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitParameters", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.statement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterStatement", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.statement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitStatement", void 0);
    /**
     * Enter a parse tree produced by the `if`
     * labeled alternative in `painless_parser.rstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterIf", void 0);
    /**
     * Exit a parse tree produced by the `if`
     * labeled alternative in `painless_parser.rstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitIf", void 0);
    /**
     * Enter a parse tree produced by the `while`
     * labeled alternative in `painless_parser.rstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterWhile", void 0);
    /**
     * Exit a parse tree produced by the `while`
     * labeled alternative in `painless_parser.rstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitWhile", void 0);
    /**
     * Enter a parse tree produced by the `for`
     * labeled alternative in `painless_parser.rstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterFor", void 0);
    /**
     * Exit a parse tree produced by the `for`
     * labeled alternative in `painless_parser.rstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitFor", void 0);
    /**
     * Enter a parse tree produced by the `each`
     * labeled alternative in `painless_parser.rstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterEach", void 0);
    /**
     * Exit a parse tree produced by the `each`
     * labeled alternative in `painless_parser.rstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitEach", void 0);
    /**
     * Enter a parse tree produced by the `ineach`
     * labeled alternative in `painless_parser.rstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterIneach", void 0);
    /**
     * Exit a parse tree produced by the `ineach`
     * labeled alternative in `painless_parser.rstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitIneach", void 0);
    /**
     * Enter a parse tree produced by the `try`
     * labeled alternative in `painless_parser.rstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterTry", void 0);
    /**
     * Exit a parse tree produced by the `try`
     * labeled alternative in `painless_parser.rstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitTry", void 0);
    /**
     * Enter a parse tree produced by the `do`
     * labeled alternative in `painless_parser.dstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterDo", void 0);
    /**
     * Exit a parse tree produced by the `do`
     * labeled alternative in `painless_parser.dstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitDo", void 0);
    /**
     * Enter a parse tree produced by the `decl`
     * labeled alternative in `painless_parser.dstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterDecl", void 0);
    /**
     * Exit a parse tree produced by the `decl`
     * labeled alternative in `painless_parser.dstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitDecl", void 0);
    /**
     * Enter a parse tree produced by the `continue`
     * labeled alternative in `painless_parser.dstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterContinue", void 0);
    /**
     * Exit a parse tree produced by the `continue`
     * labeled alternative in `painless_parser.dstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitContinue", void 0);
    /**
     * Enter a parse tree produced by the `break`
     * labeled alternative in `painless_parser.dstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterBreak", void 0);
    /**
     * Exit a parse tree produced by the `break`
     * labeled alternative in `painless_parser.dstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitBreak", void 0);
    /**
     * Enter a parse tree produced by the `return`
     * labeled alternative in `painless_parser.dstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterReturn", void 0);
    /**
     * Exit a parse tree produced by the `return`
     * labeled alternative in `painless_parser.dstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitReturn", void 0);
    /**
     * Enter a parse tree produced by the `throw`
     * labeled alternative in `painless_parser.dstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterThrow", void 0);
    /**
     * Exit a parse tree produced by the `throw`
     * labeled alternative in `painless_parser.dstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitThrow", void 0);
    /**
     * Enter a parse tree produced by the `expr`
     * labeled alternative in `painless_parser.dstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterExpr", void 0);
    /**
     * Exit a parse tree produced by the `expr`
     * labeled alternative in `painless_parser.dstatement`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitExpr", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.trailer`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterTrailer", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.trailer`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitTrailer", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.block`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterBlock", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.block`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitBlock", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.empty`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterEmpty", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.empty`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitEmpty", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.initializer`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterInitializer", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.initializer`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitInitializer", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.afterthought`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterAfterthought", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.afterthought`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitAfterthought", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.declaration`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterDeclaration", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.declaration`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitDeclaration", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.decltype`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterDecltype", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.decltype`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitDecltype", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.type`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterType", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.type`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitType", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.declvar`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterDeclvar", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.declvar`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitDeclvar", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.trap`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterTrap", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.trap`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitTrap", void 0);
    /**
     * Enter a parse tree produced by the `single`
     * labeled alternative in `painless_parser.noncondexpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterSingle", void 0);
    /**
     * Exit a parse tree produced by the `single`
     * labeled alternative in `painless_parser.noncondexpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitSingle", void 0);
    /**
     * Enter a parse tree produced by the `comp`
     * labeled alternative in `painless_parser.noncondexpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterComp", void 0);
    /**
     * Exit a parse tree produced by the `comp`
     * labeled alternative in `painless_parser.noncondexpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitComp", void 0);
    /**
     * Enter a parse tree produced by the `bool`
     * labeled alternative in `painless_parser.noncondexpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterBool", void 0);
    /**
     * Exit a parse tree produced by the `bool`
     * labeled alternative in `painless_parser.noncondexpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitBool", void 0);
    /**
     * Enter a parse tree produced by the `binary`
     * labeled alternative in `painless_parser.noncondexpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterBinary", void 0);
    /**
     * Exit a parse tree produced by the `binary`
     * labeled alternative in `painless_parser.noncondexpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitBinary", void 0);
    /**
     * Enter a parse tree produced by the `elvis`
     * labeled alternative in `painless_parser.noncondexpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterElvis", void 0);
    /**
     * Exit a parse tree produced by the `elvis`
     * labeled alternative in `painless_parser.noncondexpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitElvis", void 0);
    /**
     * Enter a parse tree produced by the `instanceof`
     * labeled alternative in `painless_parser.noncondexpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterInstanceof", void 0);
    /**
     * Exit a parse tree produced by the `instanceof`
     * labeled alternative in `painless_parser.noncondexpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitInstanceof", void 0);
    /**
     * Enter a parse tree produced by the `nonconditional`
     * labeled alternative in `painless_parser.expression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterNonconditional", void 0);
    /**
     * Exit a parse tree produced by the `nonconditional`
     * labeled alternative in `painless_parser.expression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitNonconditional", void 0);
    /**
     * Enter a parse tree produced by the `conditional`
     * labeled alternative in `painless_parser.expression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterConditional", void 0);
    /**
     * Exit a parse tree produced by the `conditional`
     * labeled alternative in `painless_parser.expression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitConditional", void 0);
    /**
     * Enter a parse tree produced by the `assignment`
     * labeled alternative in `painless_parser.expression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterAssignment", void 0);
    /**
     * Exit a parse tree produced by the `assignment`
     * labeled alternative in `painless_parser.expression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitAssignment", void 0);
    /**
     * Enter a parse tree produced by the `pre`
     * labeled alternative in `painless_parser.unary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterPre", void 0);
    /**
     * Exit a parse tree produced by the `pre`
     * labeled alternative in `painless_parser.unary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitPre", void 0);
    /**
     * Enter a parse tree produced by the `addsub`
     * labeled alternative in `painless_parser.unary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterAddsub", void 0);
    /**
     * Exit a parse tree produced by the `addsub`
     * labeled alternative in `painless_parser.unary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitAddsub", void 0);
    /**
     * Enter a parse tree produced by the `notaddsub`
     * labeled alternative in `painless_parser.unary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterNotaddsub", void 0);
    /**
     * Exit a parse tree produced by the `notaddsub`
     * labeled alternative in `painless_parser.unary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitNotaddsub", void 0);
    /**
     * Enter a parse tree produced by the `read`
     * labeled alternative in `painless_parser.unarynotaddsub`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterRead", void 0);
    /**
     * Exit a parse tree produced by the `read`
     * labeled alternative in `painless_parser.unarynotaddsub`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitRead", void 0);
    /**
     * Enter a parse tree produced by the `post`
     * labeled alternative in `painless_parser.unarynotaddsub`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterPost", void 0);
    /**
     * Exit a parse tree produced by the `post`
     * labeled alternative in `painless_parser.unarynotaddsub`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitPost", void 0);
    /**
     * Enter a parse tree produced by the `not`
     * labeled alternative in `painless_parser.unarynotaddsub`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterNot", void 0);
    /**
     * Exit a parse tree produced by the `not`
     * labeled alternative in `painless_parser.unarynotaddsub`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitNot", void 0);
    /**
     * Enter a parse tree produced by the `cast`
     * labeled alternative in `painless_parser.unarynotaddsub`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterCast", void 0);
    /**
     * Exit a parse tree produced by the `cast`
     * labeled alternative in `painless_parser.unarynotaddsub`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitCast", void 0);
    /**
     * Enter a parse tree produced by the `primordefcast`
     * labeled alternative in `painless_parser.castexpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterPrimordefcast", void 0);
    /**
     * Exit a parse tree produced by the `primordefcast`
     * labeled alternative in `painless_parser.castexpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitPrimordefcast", void 0);
    /**
     * Enter a parse tree produced by the `refcast`
     * labeled alternative in `painless_parser.castexpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterRefcast", void 0);
    /**
     * Exit a parse tree produced by the `refcast`
     * labeled alternative in `painless_parser.castexpression`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitRefcast", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.primordefcasttype`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterPrimordefcasttype", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.primordefcasttype`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitPrimordefcasttype", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.refcasttype`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterRefcasttype", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.refcasttype`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitRefcasttype", void 0);
    /**
     * Enter a parse tree produced by the `dynamic`
     * labeled alternative in `painless_parser.chain`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterDynamic", void 0);
    /**
     * Exit a parse tree produced by the `dynamic`
     * labeled alternative in `painless_parser.chain`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitDynamic", void 0);
    /**
     * Enter a parse tree produced by the `newarray`
     * labeled alternative in `painless_parser.chain`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterNewarray", void 0);
    /**
     * Exit a parse tree produced by the `newarray`
     * labeled alternative in `painless_parser.chain`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitNewarray", void 0);
    /**
     * Enter a parse tree produced by the `precedence`
     * labeled alternative in `painless_parser.primary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterPrecedence", void 0);
    /**
     * Exit a parse tree produced by the `precedence`
     * labeled alternative in `painless_parser.primary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitPrecedence", void 0);
    /**
     * Enter a parse tree produced by the `numeric`
     * labeled alternative in `painless_parser.primary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterNumeric", void 0);
    /**
     * Exit a parse tree produced by the `numeric`
     * labeled alternative in `painless_parser.primary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitNumeric", void 0);
    /**
     * Enter a parse tree produced by the `true`
     * labeled alternative in `painless_parser.primary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterTrue", void 0);
    /**
     * Exit a parse tree produced by the `true`
     * labeled alternative in `painless_parser.primary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitTrue", void 0);
    /**
     * Enter a parse tree produced by the `false`
     * labeled alternative in `painless_parser.primary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterFalse", void 0);
    /**
     * Exit a parse tree produced by the `false`
     * labeled alternative in `painless_parser.primary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitFalse", void 0);
    /**
     * Enter a parse tree produced by the `null`
     * labeled alternative in `painless_parser.primary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterNull", void 0);
    /**
     * Exit a parse tree produced by the `null`
     * labeled alternative in `painless_parser.primary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitNull", void 0);
    /**
     * Enter a parse tree produced by the `string`
     * labeled alternative in `painless_parser.primary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterString", void 0);
    /**
     * Exit a parse tree produced by the `string`
     * labeled alternative in `painless_parser.primary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitString", void 0);
    /**
     * Enter a parse tree produced by the `regex`
     * labeled alternative in `painless_parser.primary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterRegex", void 0);
    /**
     * Exit a parse tree produced by the `regex`
     * labeled alternative in `painless_parser.primary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitRegex", void 0);
    /**
     * Enter a parse tree produced by the `listinit`
     * labeled alternative in `painless_parser.primary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterListinit", void 0);
    /**
     * Exit a parse tree produced by the `listinit`
     * labeled alternative in `painless_parser.primary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitListinit", void 0);
    /**
     * Enter a parse tree produced by the `mapinit`
     * labeled alternative in `painless_parser.primary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterMapinit", void 0);
    /**
     * Exit a parse tree produced by the `mapinit`
     * labeled alternative in `painless_parser.primary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitMapinit", void 0);
    /**
     * Enter a parse tree produced by the `variable`
     * labeled alternative in `painless_parser.primary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterVariable", void 0);
    /**
     * Exit a parse tree produced by the `variable`
     * labeled alternative in `painless_parser.primary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitVariable", void 0);
    /**
     * Enter a parse tree produced by the `calllocal`
     * labeled alternative in `painless_parser.primary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterCalllocal", void 0);
    /**
     * Exit a parse tree produced by the `calllocal`
     * labeled alternative in `painless_parser.primary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitCalllocal", void 0);
    /**
     * Enter a parse tree produced by the `newobject`
     * labeled alternative in `painless_parser.primary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterNewobject", void 0);
    /**
     * Exit a parse tree produced by the `newobject`
     * labeled alternative in `painless_parser.primary`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitNewobject", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.postfix`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterPostfix", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.postfix`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitPostfix", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.postdot`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterPostdot", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.postdot`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitPostdot", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.callinvoke`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterCallinvoke", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.callinvoke`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitCallinvoke", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.fieldaccess`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterFieldaccess", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.fieldaccess`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitFieldaccess", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.braceaccess`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterBraceaccess", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.braceaccess`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitBraceaccess", void 0);
    /**
     * Enter a parse tree produced by the `newstandardarray`
     * labeled alternative in `painless_parser.arrayinitializer`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterNewstandardarray", void 0);
    /**
     * Exit a parse tree produced by the `newstandardarray`
     * labeled alternative in `painless_parser.arrayinitializer`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitNewstandardarray", void 0);
    /**
     * Enter a parse tree produced by the `newinitializedarray`
     * labeled alternative in `painless_parser.arrayinitializer`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterNewinitializedarray", void 0);
    /**
     * Exit a parse tree produced by the `newinitializedarray`
     * labeled alternative in `painless_parser.arrayinitializer`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitNewinitializedarray", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.listinitializer`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterListinitializer", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.listinitializer`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitListinitializer", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.mapinitializer`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterMapinitializer", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.mapinitializer`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitMapinitializer", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.maptoken`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterMaptoken", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.maptoken`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitMaptoken", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.arguments`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterArguments", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.arguments`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitArguments", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.argument`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterArgument", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.argument`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitArgument", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.lambda`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterLambda", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.lambda`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitLambda", void 0);
    /**
     * Enter a parse tree produced by `painless_parser.lamtype`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterLamtype", void 0);
    /**
     * Exit a parse tree produced by `painless_parser.lamtype`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitLamtype", void 0);
    /**
     * Enter a parse tree produced by the `classfuncref`
     * labeled alternative in `painless_parser.funcref`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterClassfuncref", void 0);
    /**
     * Exit a parse tree produced by the `classfuncref`
     * labeled alternative in `painless_parser.funcref`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitClassfuncref", void 0);
    /**
     * Enter a parse tree produced by the `constructorfuncref`
     * labeled alternative in `painless_parser.funcref`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterConstructorfuncref", void 0);
    /**
     * Exit a parse tree produced by the `constructorfuncref`
     * labeled alternative in `painless_parser.funcref`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitConstructorfuncref", void 0);
    /**
     * Enter a parse tree produced by the `localfuncref`
     * labeled alternative in `painless_parser.funcref`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "enterLocalfuncref", void 0);
    /**
     * Exit a parse tree produced by the `localfuncref`
     * labeled alternative in `painless_parser.funcref`.
     * @param ctx the parse tree
     */
    (0, _defineProperty2.default)(this, "exitLocalfuncref", void 0);
  }
}
exports.default = painless_parserListener;
module.exports = exports.default;