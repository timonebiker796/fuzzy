"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defineRoutes = defineRoutes;
var _legacy = require("./legacy");
var _create = require("./rule/apis/create");
var _get_rule_route = require("./rule/apis/get/get_rule_route");
var _update_rule_route = require("./rule/apis/update/update_rule_route");
var _delete_rule_route = require("./rule/apis/delete/delete_rule_route");
var _aggregate_rules_route = require("./rule/apis/aggregate/aggregate_rules_route");
var _disable_rule = require("./disable_rule");
var _enable_rule = require("./enable_rule");
var _find_rules_route = require("./rule/apis/find/find_rules_route");
var _get_rule_alert_summary = require("./get_rule_alert_summary");
var _get_rule_execution_log = require("./get_rule_execution_log");
var _get_global_execution_logs = require("./get_global_execution_logs");
var _get_global_execution_kpi = require("./get_global_execution_kpi");
var _get_action_error_log = require("./get_action_error_log");
var _get_rule_execution_kpi = require("./get_rule_execution_kpi");
var _get_rule_state = require("./get_rule_state");
var _health = require("./health");
var _resolve = require("./rule/apis/resolve");
var _rule_types = require("./rule_types");
var _mute_all_rule = require("./mute_all_rule");
var _mute_alert = require("./rule/apis/mute_alert/mute_alert");
var _unmute_all_rule = require("./unmute_all_rule");
var _unmute_alert = require("./unmute_alert");
var _update_rule_api_key = require("./update_rule_api_key");
var _bulk_edit_rules_route = require("./rule/apis/bulk_edit/bulk_edit_rules_route");
var _snooze = require("./rule/apis/snooze");
var _unsnooze = require("./rule/apis/unsnooze");
var _run_soon = require("./run_soon");
var _bulk_delete_rules_route = require("./rule/apis/bulk_delete/bulk_delete_rules_route");
var _bulk_enable_rules_route = require("./rule/apis/bulk_enable/bulk_enable_rules_route");
var _bulk_disable_rules_route = require("./rule/apis/bulk_disable/bulk_disable_rules_route");
var _clone_rule_route = require("./rule/apis/clone/clone_rule_route");
var _get_flapping_settings = require("./get_flapping_settings");
var _update_flapping_settings = require("./update_flapping_settings");
var _get_rule_tags = require("./rule/apis/tags/get_rule_tags");
var _get_schedule_frequency = require("./rule/apis/get_schedule_frequency");
var _bulk_untrack = require("./rule/apis/bulk_untrack");
var _bulk_untrack_by_query = require("./rule/apis/bulk_untrack_by_query");
var _create_maintenance_window_route = require("./maintenance_window/apis/create/create_maintenance_window_route");
var _get_maintenance_window_route = require("./maintenance_window/apis/get/get_maintenance_window_route");
var _update_maintenance_window_route = require("./maintenance_window/apis/update/update_maintenance_window_route");
var _delete_maintenance_window_route = require("./maintenance_window/apis/delete/delete_maintenance_window_route");
var _find_maintenance_windows_route = require("./maintenance_window/apis/find/find_maintenance_windows_route");
var _archive_maintenance_window_route = require("./maintenance_window/apis/archive/archive_maintenance_window_route");
var _finish_maintenance_window_route = require("./maintenance_window/apis/finish/finish_maintenance_window_route");
var _get_active_maintenance_windows_route = require("./maintenance_window/apis/get_active/get_active_maintenance_windows_route");
var _values_suggestion_rules = require("./suggestions/values_suggestion_rules");
var _fields_rules = require("./suggestions/fields_rules");
var _bulk_get_maintenance_windows_route = require("./maintenance_window/apis/bulk_get/bulk_get_maintenance_windows_route");
var _values_suggestion_alerts = require("./suggestions/values_suggestion_alerts");
var _get_query_delay_settings = require("./rules_settings/apis/get/get_query_delay_settings");
var _update_query_delay_settings = require("./rules_settings/apis/update/update_query_delay_settings");
var _schedule_backfill_route = require("./backfill/apis/schedule/schedule_backfill_route");
var _get_backfill_route = require("./backfill/apis/get/get_backfill_route");
var _find_backfill_route = require("./backfill/apis/find/find_backfill_route");
var _delete_backfill_route = require("./backfill/apis/delete/delete_backfill_route");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

// backfill API

function defineRoutes(opts) {
  const {
    router,
    licenseState,
    encryptedSavedObjects,
    usageCounter,
    config$,
    getAlertIndicesAlias
  } = opts;
  (0, _legacy.defineLegacyRoutes)(opts);
  (0, _create.createRuleRoute)(opts);
  (0, _get_rule_route.getRuleRoute)(router, licenseState);
  (0, _get_rule_route.getInternalRuleRoute)(router, licenseState);
  (0, _resolve.resolveRuleRoute)(router, licenseState);
  (0, _update_rule_route.updateRuleRoute)(router, licenseState);
  (0, _delete_rule_route.deleteRuleRoute)(router, licenseState);
  (0, _aggregate_rules_route.aggregateRulesRoute)(router, licenseState);
  (0, _disable_rule.disableRuleRoute)(router, licenseState);
  (0, _enable_rule.enableRuleRoute)(router, licenseState);
  (0, _find_rules_route.findRulesRoute)(router, licenseState, usageCounter);
  (0, _find_rules_route.findInternalRulesRoute)(router, licenseState, usageCounter);
  (0, _get_rule_alert_summary.getRuleAlertSummaryRoute)(router, licenseState);
  (0, _get_rule_execution_log.getRuleExecutionLogRoute)(router, licenseState);
  (0, _get_global_execution_logs.getGlobalExecutionLogRoute)(router, licenseState);
  (0, _get_action_error_log.getActionErrorLogRoute)(router, licenseState);
  (0, _get_rule_execution_kpi.getRuleExecutionKPIRoute)(router, licenseState);
  (0, _get_global_execution_kpi.getGlobalExecutionKPIRoute)(router, licenseState);
  (0, _get_rule_state.getRuleStateRoute)(router, licenseState);
  (0, _health.healthRoute)(router, licenseState, encryptedSavedObjects);
  (0, _rule_types.ruleTypesRoute)(router, licenseState);
  (0, _mute_all_rule.muteAllRuleRoute)(router, licenseState, usageCounter);
  (0, _mute_alert.muteAlertRoute)(router, licenseState);
  (0, _unmute_all_rule.unmuteAllRuleRoute)(router, licenseState);
  (0, _unmute_alert.unmuteAlertRoute)(router, licenseState);
  (0, _update_rule_api_key.updateRuleApiKeyRoute)(router, licenseState);
  (0, _bulk_edit_rules_route.bulkEditInternalRulesRoute)(router, licenseState);
  (0, _bulk_delete_rules_route.bulkDeleteRulesRoute)({
    router,
    licenseState
  });
  (0, _bulk_enable_rules_route.bulkEnableRulesRoute)({
    router,
    licenseState
  });
  (0, _bulk_disable_rules_route.bulkDisableRulesRoute)({
    router,
    licenseState
  });
  (0, _snooze.snoozeRuleRoute)(router, licenseState);
  (0, _unsnooze.unsnoozeRuleRoute)(router, licenseState);
  (0, _run_soon.runSoonRoute)(router, licenseState);
  (0, _clone_rule_route.cloneRuleRoute)(router, licenseState);
  (0, _get_flapping_settings.getFlappingSettingsRoute)(router, licenseState);
  (0, _update_flapping_settings.updateFlappingSettingsRoute)(router, licenseState);
  (0, _get_rule_tags.getRuleTagsRoute)(router, licenseState);
  (0, _create_maintenance_window_route.createMaintenanceWindowRoute)(router, licenseState);
  (0, _get_maintenance_window_route.getMaintenanceWindowRoute)(router, licenseState);
  (0, _update_maintenance_window_route.updateMaintenanceWindowRoute)(router, licenseState);
  (0, _delete_maintenance_window_route.deleteMaintenanceWindowRoute)(router, licenseState);
  (0, _find_maintenance_windows_route.findMaintenanceWindowsRoute)(router, licenseState);
  (0, _archive_maintenance_window_route.archiveMaintenanceWindowRoute)(router, licenseState);
  (0, _finish_maintenance_window_route.finishMaintenanceWindowRoute)(router, licenseState);
  (0, _get_active_maintenance_windows_route.getActiveMaintenanceWindowsRoute)(router, licenseState);
  (0, _values_suggestion_alerts.registerAlertsValueSuggestionsRoute)(router, licenseState, config$, getAlertIndicesAlias);
  (0, _values_suggestion_rules.registerRulesValueSuggestionsRoute)(router, licenseState, config$);
  (0, _fields_rules.registerFieldsRoute)(router, licenseState);
  (0, _bulk_get_maintenance_windows_route.bulkGetMaintenanceWindowRoute)(router, licenseState);
  (0, _get_schedule_frequency.getScheduleFrequencyRoute)(router, licenseState);
  (0, _bulk_untrack.bulkUntrackAlertsRoute)(router, licenseState);
  (0, _bulk_untrack_by_query.bulkUntrackAlertsByQueryRoute)(router, licenseState);
  (0, _get_query_delay_settings.getQueryDelaySettingsRoute)(router, licenseState);
  (0, _update_query_delay_settings.updateQueryDelaySettingsRoute)(router, licenseState);

  // backfill APIs
  (0, _schedule_backfill_route.scheduleBackfillRoute)(router, licenseState);
  (0, _get_backfill_route.getBackfillRoute)(router, licenseState);
  (0, _find_backfill_route.findBackfillRoute)(router, licenseState);
  (0, _delete_backfill_route.deleteBackfillRoute)(router, licenseState);
}