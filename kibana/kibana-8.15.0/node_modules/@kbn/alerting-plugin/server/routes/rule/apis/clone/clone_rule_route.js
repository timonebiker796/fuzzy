"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cloneRuleRoute = void 0;
var _lib = require("../../../../lib");
var _lib2 = require("../../../lib");
var _types = require("../../../../types");
var _clone = require("../../../../../common/routes/rule/apis/clone");
var _transforms = require("../../transforms");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const cloneRuleRoute = (router, licenseState) => {
  router.post({
    path: `${_types.INTERNAL_BASE_ALERTING_API_PATH}/rule/{id}/_clone/{newId?}`,
    validate: {
      params: _clone.cloneRuleRequestParamsSchemaV1
    }
  }, (0, _lib2.handleDisabledApiKeysError)(router.handleLegacyErrors((0, _lib2.verifyAccessAndContext)(licenseState, async function (context, req, res) {
    const rulesClient = (await context.alerting).getRulesClient();
    const params = req.params;
    try {
      // TODO (http-versioning): Remove this cast, this enables us to move forward
      // without fixing all of other solution types
      const cloneRule = await rulesClient.clone({
        id: params.id,
        newId: params.newId
      });
      const response = {
        body: (0, _transforms.transformRuleToRuleResponseV1)(cloneRule)
      };
      return res.ok(response);
    } catch (e) {
      if (e instanceof _lib.RuleTypeDisabledError) {
        return e.sendResponse(res);
      }
      throw e;
    }
  }))));
};
exports.cloneRuleRoute = cloneRuleRoute;