"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFindMaintenanceWindows = void 0;
var _i18n = require("@kbn/i18n");
var _reactQuery = require("@tanstack/react-query");
var _kibana_react = require("../utils/kibana_react");
var _find = require("../services/maintenance_windows_api/find");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const useFindMaintenanceWindows = props => {
  const {
    enabled = true
  } = props || {};
  const {
    http,
    notifications: {
      toasts
    }
  } = (0, _kibana_react.useKibana)().services;
  const queryFn = () => {
    return (0, _find.findMaintenanceWindows)({
      http
    });
  };
  const onErrorFn = error => {
    if (error) {
      toasts.addDanger(_i18n.i18n.translate('xpack.alerting.maintenanceWindowsListFailure', {
        defaultMessage: 'Unable to load maintenance windows.'
      }));
    }
  };
  const {
    isLoading,
    isFetching,
    data = [],
    refetch
  } = (0, _reactQuery.useQuery)({
    queryKey: ['findMaintenanceWindows'],
    queryFn,
    onError: onErrorFn,
    refetchOnWindowFocus: false,
    retry: false,
    cacheTime: 0,
    enabled
  });
  return {
    maintenanceWindows: data,
    isLoading: enabled && (isLoading || isFetching),
    refetch
  };
};
exports.useFindMaintenanceWindows = useFindMaintenanceWindows;