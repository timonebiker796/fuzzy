"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.routes = void 0;
var fieldRoutes = _interopRequireWildcard(require("./fields"));
var runtimeRoutes = _interopRequireWildcard(require("./runtime_fields"));
var scriptedRoutes = _interopRequireWildcard(require("./scripted_fields"));
var createRoutes = _interopRequireWildcard(require("./create_data_view"));
var defaultRoutes = _interopRequireWildcard(require("./default_data_view"));
var deleteRoutes = _interopRequireWildcard(require("./delete_data_view"));
var getRoutes = _interopRequireWildcard(require("./get_data_view"));
var getAllRoutes = _interopRequireWildcard(require("./get_data_views"));
var hasRoutes = _interopRequireWildcard(require("./has_user_data_view"));
var updateRoutes = _interopRequireWildcard(require("./update_data_view"));
var _swap_references = require("./swap_references");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

const routes = exports.routes = [fieldRoutes.registerUpdateFieldsRoute, fieldRoutes.registerUpdateFieldsRouteLegacy, runtimeRoutes.registerCreateRuntimeFieldRoute, runtimeRoutes.registerCreateRuntimeFieldRouteLegacy, runtimeRoutes.registerDeleteRuntimeFieldRoute, runtimeRoutes.registerDeleteRuntimeFieldRouteLegacy, runtimeRoutes.registerGetRuntimeFieldRoute, runtimeRoutes.registerGetRuntimeFieldRouteLegacy, runtimeRoutes.registerPutRuntimeFieldRoute, runtimeRoutes.registerPutRuntimeFieldRouteLegacy, runtimeRoutes.registerUpdateRuntimeFieldRoute, runtimeRoutes.registerUpdateRuntimeFieldRouteLegacy, createRoutes.registerCreateDataViewRoute, createRoutes.registerCreateDataViewRouteLegacy, defaultRoutes.registerManageDefaultDataViewRoute, defaultRoutes.registerManageDefaultDataViewRouteLegacy, deleteRoutes.registerDeleteDataViewRoute, deleteRoutes.registerDeleteDataViewRouteLegacy, getRoutes.registerGetDataViewRoute, getRoutes.registerGetDataViewRouteLegacy, getAllRoutes.registerGetDataViewsRoute, hasRoutes.registerHasUserDataViewRoute, hasRoutes.registerHasUserDataViewRouteLegacy, updateRoutes.registerUpdateDataViewRoute, updateRoutes.registerUpdateDataViewRouteLegacy, ...Object.values(scriptedRoutes), (0, _swap_references.swapReferencesRoute)({
  previewRoute: false
}), (0, _swap_references.swapReferencesRoute)({
  previewRoute: true
})];