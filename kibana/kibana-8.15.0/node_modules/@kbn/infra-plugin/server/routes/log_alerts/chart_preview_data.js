"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initGetLogAlertsChartPreviewDataRoute = void 0;
var _boom = _interopRequireDefault(require("@hapi/boom"));
var _http_api = require("../../../common/http_api");
var _runtime_types = require("../../../common/runtime_types");
var _log_threshold_chart_preview = require("../../lib/alerting/log_threshold/log_threshold_chart_preview");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const initGetLogAlertsChartPreviewDataRoute = ({
  framework,
  getStartServices
}) => {
  if (!framework.config.featureFlags.logThresholdAlertRuleEnabled) {
    return;
  }
  framework.registerVersionedRoute({
    access: 'internal',
    method: 'post',
    path: _http_api.logAlertsV1.LOG_ALERTS_CHART_PREVIEW_DATA_PATH
  }).addVersion({
    version: '1',
    validate: {
      request: {
        body: (0, _runtime_types.createValidationFunction)(_http_api.logAlertsV1.getLogAlertsChartPreviewDataRequestPayloadRT)
      }
    }
  }, framework.router.handleLegacyErrors(async (requestContext, request, response) => {
    const {
      data: {
        logView,
        buckets,
        alertParams,
        executionTimeRange
      }
    } = request.body;
    const [, {
      logsShared
    }] = await getStartServices();
    const resolvedLogView = await logsShared.logViews.getScopedClient(request).getResolvedLogView(logView);
    try {
      const {
        series
      } = await (0, _log_threshold_chart_preview.getChartPreviewData)(requestContext, resolvedLogView, framework.callWithRequest, alertParams, buckets, executionTimeRange);
      return response.ok({
        body: _http_api.logAlertsV1.getLogAlertsChartPreviewDataSuccessResponsePayloadRT.encode({
          data: {
            series
          }
        })
      });
    } catch (error) {
      var _error$statusCode, _error$message;
      if (_boom.default.isBoom(error)) {
        throw error;
      }
      return response.customError({
        statusCode: (_error$statusCode = error.statusCode) !== null && _error$statusCode !== void 0 ? _error$statusCode : 500,
        body: {
          message: (_error$message = error.message) !== null && _error$message !== void 0 ? _error$message : 'An unexpected error occurred'
        }
      });
    }
  }));
};
exports.initGetLogAlertsChartPreviewDataRoute = initGetLogAlertsChartPreviewDataRoute;