"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inventoryViewResponsePayloadRT = exports.inventoryViewRequestQueryRT = exports.inventoryViewRequestParamsRT = exports.getInventoryViewUrl = exports.INVENTORY_VIEW_URL_ENTITY = exports.INVENTORY_VIEW_URL = void 0;
var rt = _interopRequireWildcard(require("io-ts"));
var _Either = require("fp-ts/Either");
var _inventory_views = require("../../../inventory_views");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const INVENTORY_VIEW_URL = exports.INVENTORY_VIEW_URL = '/api/infra/inventory_views';
const INVENTORY_VIEW_URL_ENTITY = exports.INVENTORY_VIEW_URL_ENTITY = `${INVENTORY_VIEW_URL}/{inventoryViewId}`;
const getInventoryViewUrl = inventoryViewId => [INVENTORY_VIEW_URL, inventoryViewId].filter(Boolean).join('/');
exports.getInventoryViewUrl = getInventoryViewUrl;
const inventoryViewIdRT = new rt.Type('InventoryViewId', rt.string.is, (u, c) => _Either.either.chain(rt.string.validate(u, c), id => {
  return id === '0' ? rt.failure(u, c, `The inventory view with id ${id} is not configurable.`) : rt.success(id);
}), String);
const inventoryViewRequestParamsRT = exports.inventoryViewRequestParamsRT = rt.type({
  inventoryViewId: inventoryViewIdRT
});
const inventoryViewRequestQueryRT = exports.inventoryViewRequestQueryRT = rt.partial({
  sourceId: rt.string
});
const inventoryViewResponsePayloadRT = exports.inventoryViewResponsePayloadRT = rt.type({
  data: _inventory_views.inventoryViewRT
});