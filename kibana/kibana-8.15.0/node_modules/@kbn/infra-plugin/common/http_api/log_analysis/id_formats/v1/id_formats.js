"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.idFormatRT = exports.idFormatByJobTypeRT = exports.getLogAnalysisIdFormatsSuccessResponsePayloadRT = exports.getLogAnalysisIdFormatsRequestPayloadRT = exports.LOG_ANALYSIS_GET_ID_FORMATS = void 0;
var rt = _interopRequireWildcard(require("io-ts"));
var _log_analysis = require("../../../../log_analysis");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const idFormatRT = exports.idFormatRT = rt.union([rt.literal('legacy'), rt.literal('hashed')]);
const jobTypeRT = rt.union([_log_analysis.logEntryRateJobTypeRT, _log_analysis.logEntryCategoriesJobTypeRT]);
const idFormatByJobTypeRT = exports.idFormatByJobTypeRT = rt.record(jobTypeRT, idFormatRT);
const LOG_ANALYSIS_GET_ID_FORMATS = exports.LOG_ANALYSIS_GET_ID_FORMATS = '/api/infra/log_analysis/id_formats';
const getLogAnalysisIdFormatsRequestPayloadRT = exports.getLogAnalysisIdFormatsRequestPayloadRT = rt.type({
  data: rt.type({
    logViewId: rt.string,
    spaceId: rt.string
  })
});
const getLogAnalysisIdFormatsSuccessResponsePayloadRT = exports.getLogAnalysisIdFormatsSuccessResponsePayloadRT = rt.type({
  data: rt.record(rt.union([_log_analysis.logEntryRateJobTypeRT, _log_analysis.logEntryCategoriesJobTypeRT]), idFormatRT)
});