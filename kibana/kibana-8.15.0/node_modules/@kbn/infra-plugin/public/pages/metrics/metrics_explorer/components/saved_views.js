"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SavedViews = void 0;
var _react = _interopRequireDefault(require("react"));
var _use_metrics_explorer_views = require("../../../../hooks/use_metrics_explorer_views");
var _toolbar_control = require("../../../../components/saved_views/toolbar_control");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const SavedViews = ({
  viewState
}) => {
  const {
    currentView,
    views,
    isFetchingViews,
    isFetchingCurrentView,
    isCreatingView,
    isUpdatingView,
    createView,
    deleteViewById,
    fetchViews,
    updateViewById,
    switchViewById,
    setDefaultViewById
  } = (0, _use_metrics_explorer_views.useMetricsExplorerViews)();
  return /*#__PURE__*/_react.default.createElement(_toolbar_control.SavedViewsToolbarControls, {
    currentView: currentView,
    views: views,
    isFetchingViews: isFetchingViews,
    isFetchingCurrentView: isFetchingCurrentView,
    isCreatingView: isCreatingView,
    isUpdatingView: isUpdatingView,
    onCreateView: createView,
    onDeleteView: deleteViewById,
    onUpdateView: updateViewById,
    onLoadViews: fetchViews,
    onSetDefaultView: setDefaultViewById,
    onSwitchView: switchViewById,
    viewState: viewState
  });
};
exports.SavedViews = SavedViews;