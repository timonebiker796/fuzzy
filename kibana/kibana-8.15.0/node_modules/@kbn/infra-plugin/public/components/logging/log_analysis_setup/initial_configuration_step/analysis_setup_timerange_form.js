"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnalysisSetupTimerangeForm = void 0;
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _i18nReact = require("@kbn/i18n-react");
var _moment = _interopRequireDefault(require("moment"));
var _react = _interopRequireWildcard(require("react"));
var _fixed_datepicker = require("../../../fixed_datepicker");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const startTimeLabel = _i18n.i18n.translate('xpack.infra.analysisSetup.startTimeLabel', {
  defaultMessage: 'Start time'
});
const endTimeLabel = _i18n.i18n.translate('xpack.infra.analysisSetup.endTimeLabel', {
  defaultMessage: 'End time'
});
const startTimeDefaultDescription = _i18n.i18n.translate('xpack.infra.analysisSetup.startTimeDefaultDescription', {
  defaultMessage: 'Start of log indices'
});
const endTimeDefaultDescription = _i18n.i18n.translate('xpack.infra.analysisSetup.endTimeDefaultDescription', {
  defaultMessage: 'Indefinitely'
});
function selectedDateToParam(selectedDate) {
  if (selectedDate) {
    return selectedDate.valueOf(); // To ms unix timestamp
  }
  return undefined;
}
const AnalysisSetupTimerangeForm = ({
  disabled = false,
  setStartTime,
  setEndTime,
  startTime,
  endTime,
  validationErrors = []
}) => {
  const [now] = (0, _react.useState)(() => (0, _moment.default)());
  const selectedEndTimeIsToday = !endTime || (0, _moment.default)(endTime).isSame(now, 'day');
  const startTimeValue = (0, _react.useMemo)(() => {
    return startTime ? (0, _moment.default)(startTime) : undefined;
  }, [startTime]);
  const endTimeValue = (0, _react.useMemo)(() => {
    return endTime ? (0, _moment.default)(endTime) : undefined;
  }, [endTime]);
  const startTimeValidationErrorMessages = (0, _react.useMemo)(() => getStartTimeValidationErrorMessages(validationErrors), [validationErrors]);
  const endTimeValidationErrorMessages = (0, _react.useMemo)(() => getEndTimeValidationErrorMessages(validationErrors), [validationErrors]);
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    direction: "column"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiTitle, {
    size: "xs"
  }, /*#__PURE__*/_react.default.createElement("h3", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.infra.analysisSetup.timeRangeTitle",
    defaultMessage: "Choose a time range"
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    size: "s",
    color: "subdued"
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.infra.analysisSetup.timeRangeDescription",
    defaultMessage: "By default, Machine Learning analyzes log messages in your log indices no older than four weeks, and continues indefinitely. You can specify a different date to begin, to end, or both."
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    error: startTimeValidationErrorMessages,
    fullWidth: true,
    isInvalid: startTimeValidationErrorMessages.length > 0,
    label: startTimeLabel
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    gutterSize: "s"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFormControlLayout, {
    clear: startTime && !disabled ? {
      onClick: () => setStartTime(undefined)
    } : undefined,
    isDisabled: disabled
  }, /*#__PURE__*/_react.default.createElement(_fixed_datepicker.FixedDatePicker, {
    disabled: disabled,
    showTimeSelect: true,
    selected: startTimeValue,
    onChange: date => setStartTime(selectedDateToParam(date)),
    placeholder: startTimeDefaultDescription,
    maxDate: now
  })))), /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    error: endTimeValidationErrorMessages,
    fullWidth: true,
    isInvalid: endTimeValidationErrorMessages.length > 0,
    label: endTimeLabel
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    gutterSize: "s"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFormControlLayout, {
    clear: endTime && !disabled ? {
      onClick: () => setEndTime(undefined)
    } : undefined,
    isDisabled: disabled
  }, /*#__PURE__*/_react.default.createElement(_fixed_datepicker.FixedDatePicker, {
    disabled: disabled,
    showTimeSelect: true,
    selected: endTimeValue,
    onChange: date => setEndTime(selectedDateToParam(date)),
    placeholder: endTimeDefaultDescription,
    openToDate: now,
    minDate: startTimeValue,
    minTime: selectedEndTimeIsToday ? now : (0, _moment.default)().hour(0).minutes(0),
    maxTime: (0, _moment.default)().hour(23).minutes(59)
  }))))));
};
exports.AnalysisSetupTimerangeForm = AnalysisSetupTimerangeForm;
const getStartTimeValidationErrorMessages = validationErrors => validationErrors.flatMap(validationError => {
  switch (validationError.error) {
    case 'INVALID_TIME_RANGE':
      return [_i18n.i18n.translate('xpack.infra.analysisSetup.startTimeBeforeEndTimeErrorMessage', {
        defaultMessage: 'The start time must be before the end time.'
      })];
    default:
      return [];
  }
});
const getEndTimeValidationErrorMessages = validationErrors => validationErrors.flatMap(validationError => {
  switch (validationError.error) {
    case 'INVALID_TIME_RANGE':
      return [_i18n.i18n.translate('xpack.infra.analysisSetup.endTimeAfterStartTimeErrorMessage', {
        defaultMessage: 'The end time must be after the start time.'
      })];
    default:
      return [];
  }
});