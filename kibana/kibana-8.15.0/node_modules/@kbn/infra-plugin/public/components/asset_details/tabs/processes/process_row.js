"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProcessRow = exports.ContextualInsightProcessRow = void 0;
var _react = _interopRequireWildcard(require("react"));
var _i18n = require("@kbn/i18n");
var _eui = require("@elastic/eui");
var _common = require("@kbn/kibana-react-plugin/common");
var _useToggle = _interopRequireDefault(require("react-use/lib/useToggle"));
var _use_kibana = require("../../../../hooks/use_kibana");
var _process_row_charts = require("./process_row_charts");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const ContextualInsightProcessRow = ({
  command
}) => {
  const {
    observabilityAIAssistant
  } = (0, _use_kibana.useKibanaContextForPlugin)().services;
  const explainProcessMessages = (0, _react.useMemo)(() => {
    if (!command || !observabilityAIAssistant) {
      return undefined;
    }
    return observabilityAIAssistant.getContextualInsightMessages({
      message: `I am a software engineer. I am trying to understand what this process running on my
      machine does.`,
      instructions: `Your task is to first describe what the process is and what its general use cases are. If I also provide you
      with the arguments to the process you should then explain its arguments and how they influence the behaviour
      of the process. If I do not provide any arguments then explain the behaviour of the process when no arguments are
      provided.
      
      Here is an example with arguments.
      Process: metricbeat -c /etc/metricbeat.yml -d autodiscover,kafka -e -system.hostfs=/hostfs
      Explanation: Metricbeat is part of the Elastic Stack. It is a lightweight shipper that you can install on your
      servers to periodically collect metrics from the operating system and from services running on the server.
      Use cases for Metricbeat generally revolve around infrastructure monitoring. You would typically install
      Metricbeat on your servers to collect metrics from your systems and services. These metrics are then
      used for performance monitoring, anomaly detection, system status checks, etc.
      Here is a breakdown of the arguments used:
      * -c /etc/metricbeat.yml: The -c option is used to specify the configuration file for Metricbeat. In
      this case, /etc/metricbeat.yml is the configuration file. This file contains configurations for what
      metrics to collect and where to send them (e.g., to Elasticsearch or Logstash).
      * -d autodiscover,kafka: The -d option is used to enable debug output for selected components. In
      this case, debug output is enabled for autodiscover and kafka components. The autodiscover feature
      allows Metricbeat to automatically discover services as they get started and stopped in your environment,
      and kafka is presumably a monitored service from which Metricbeat collects metrics.
      * -e: The -e option is used to log to stderr and disable syslog/file output. This is useful for debugging.
      * -system.hostfs=/hostfs: The -system.hostfs option is used to set the mount point of the hostâ€™s
      filesystem for use in monitoring a host from within a container. In this case, /hostfs is the mount
      point. When running Metricbeat inside a container, filesystem metrics would be for the container by
      default, but with this option, Metricbeat can get metrics for the host system.
      Here is an example without arguments.
      Process: metricbeat
      Explanation: Metricbeat is part of the Elastic Stack. It is a lightweight shipper that you can install on your
      servers to periodically collect metrics from the operating system and from services running on the server.
      Use cases for Metricbeat generally revolve around infrastructure monitoring. You would typically install
      Metricbeat on your servers to collect metrics from your systems and services. These metrics are then
      used for performance monitoring, anomaly detection, system status checks, etc.
      Running it without any arguments will start the process with the default configuration file, typically
      located at /etc/metricbeat/metricbeat.yml. This file specifies the metrics to be collected and where
      to ship them to.
      Now explain this process to me.
      Process: ${command}
      Explanation:`
    });
  }, [command, observabilityAIAssistant]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, observabilityAIAssistant !== null && observabilityAIAssistant !== void 0 && observabilityAIAssistant.ObservabilityAIAssistantContextualInsight && explainProcessMessages ? /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(observabilityAIAssistant.ObservabilityAIAssistantContextualInsight, {
    title: explainProcessMessageTitle,
    messages: explainProcessMessages
  })))) : null);
};
exports.ContextualInsightProcessRow = ContextualInsightProcessRow;
const ProcessRow = ({
  cells,
  item,
  supportAIAssistant = false
}) => {
  const [isExpanded, toggle] = (0, _useToggle.default)(false);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiTableRow, null, /*#__PURE__*/_react.default.createElement(_eui.EuiTableRowCell, {
    isExpander: true,
    textOnly: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiButtonEmpty, {
    "data-test-subj": "infraProcessRowButton",
    iconType: isExpanded ? 'arrowDown' : 'arrowRight',
    "aria-expanded": isExpanded,
    onClick: toggle
  })), cells), /*#__PURE__*/_react.default.createElement(_eui.EuiTableRow, {
    isExpandable: true,
    isExpandedRow: isExpanded
  }, isExpanded && /*#__PURE__*/_react.default.createElement(ExpandedRowCell, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  }), /*#__PURE__*/_react.default.createElement(ExpandedRowDescriptionList, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    gutterSize: "s"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_eui.EuiDescriptionListTitle, null, _i18n.i18n.translate('xpack.infra.metrics.nodeDetails.processes.expandedRowLabelCommand', {
    defaultMessage: 'Command'
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiDescriptionListDescription, null, /*#__PURE__*/_react.default.createElement(ExpandedCommandLine, null, item.command)))), item.apmTrace && /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
    "data-test-subj": "infraProcessRowViewTraceInApmButton"
  }, _i18n.i18n.translate('xpack.infra.metrics.nodeDetails.processes.viewTraceInAPM', {
    defaultMessage: 'View trace in APM'
  })))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGrid, {
    columns: 2,
    gutterSize: "s",
    responsive: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiDescriptionListTitle, null, _i18n.i18n.translate('xpack.infra.metrics.nodeDetails.processes.expandedRowLabelPID', {
    defaultMessage: 'PID'
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiDescriptionListDescription, null, /*#__PURE__*/_react.default.createElement(CodeListItem, null, item.pid))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiDescriptionListTitle, null, _i18n.i18n.translate('xpack.infra.metrics.nodeDetails.processes.expandedRowLabelUser', {
    defaultMessage: 'User'
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiDescriptionListDescription, null, /*#__PURE__*/_react.default.createElement(CodeListItem, null, item.user))), /*#__PURE__*/_react.default.createElement(_process_row_charts.ProcessRowCharts, {
    command: item.command,
    hasCpuData: item.cpu !== null,
    hasMemoryData: item.memory !== null
  })), supportAIAssistant && /*#__PURE__*/_react.default.createElement(ContextualInsightProcessRow, {
    command: item.command
  })))));
};
exports.ProcessRow = ProcessRow;
const explainProcessMessageTitle = _i18n.i18n.translate('xpack.infra.hostFlyout.explainProcessMessageTitle', {
  defaultMessage: "What's this process?"
});
const ExpandedRowDescriptionList = (0, _common.euiStyled)(_eui.EuiDescriptionList).attrs({
  compressed: true
})`
  width: 100%;
`;
const CodeListItem = (0, _common.euiStyled)(_eui.EuiCode).attrs({
  transparentBackground: true
})`
  padding: 0 !important;
  & code.euiCodeBlock__code {
    white-space: nowrap !important;
    vertical-align: middle;
  }
`;
const ExpandedCommandLine = (0, _common.euiStyled)(_eui.EuiCode).attrs({
  transparentBackground: true
})`
  padding: 0 !important;
  margin-bottom: ${props => props.theme.eui.euiSizeS};
`;
const ExpandedRowCell = (0, _common.euiStyled)(_eui.EuiTableRowCell).attrs({
  textOnly: false,
  colSpan: 6
})`
  padding-top: ${props => props.theme.eui.euiSizeM} !important;
  padding-bottom: ${props => props.theme.eui.euiSizeM} !important;
  background-color: ${props => props.theme.eui.euiColorLightestShade};
`;