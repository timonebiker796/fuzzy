"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.metricHostsModule = void 0;
var _i18n = require("@kbn/i18n");
var _hosts_memory_usage = _interopRequireDefault(require("@kbn/ml-plugin/server/models/data_recognizer/modules/metrics_ui_hosts/ml/hosts_memory_usage.json"));
var _datafeed_hosts_memory_usage = _interopRequireDefault(require("@kbn/ml-plugin/server/models/data_recognizer/modules/metrics_ui_hosts/ml/datafeed_hosts_memory_usage.json"));
var _hosts_network_in = _interopRequireDefault(require("@kbn/ml-plugin/server/models/data_recognizer/modules/metrics_ui_hosts/ml/hosts_network_in.json"));
var _datafeed_hosts_network_in = _interopRequireDefault(require("@kbn/ml-plugin/server/models/data_recognizer/modules/metrics_ui_hosts/ml/datafeed_hosts_network_in.json"));
var _hosts_network_out = _interopRequireDefault(require("@kbn/ml-plugin/server/models/data_recognizer/modules/metrics_ui_hosts/ml/hosts_network_out.json"));
var _datafeed_hosts_network_out = _interopRequireDefault(require("@kbn/ml-plugin/server/models/data_recognizer/modules/metrics_ui_hosts/ml/datafeed_hosts_network_out.json"));
var _infra_ml_cleanup = require("../../infra_ml_cleanup");
var _ml_get_jobs_summary_api = require("../../api/ml_get_jobs_summary_api");
var _ml_get_module = require("../../api/ml_get_module");
var _ml_setup_module_api = require("../../api/ml_setup_module_api");
var _infra_ml = require("../../../../../common/infra_ml");
var _constants = require("../../../../../common/constants");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const moduleId = 'metrics_ui_hosts';
const moduleName = _i18n.i18n.translate('xpack.infra.ml.metricsModuleName', {
  defaultMessage: 'Metrics anomanly detection'
});
const moduleDescription = _i18n.i18n.translate('xpack.infra.ml.metricsHostModuleDescription', {
  defaultMessage: 'Use Machine Learning to automatically detect anomalous log entry rates.'
});
const getJobIds = (spaceId, sourceId) => _infra_ml.metricsHostsJobTypes.reduce((accumulatedJobIds, jobType) => ({
  ...accumulatedJobIds,
  [jobType]: (0, _infra_ml.getJobId)(spaceId, sourceId, jobType)
}), {});
const getJobSummary = async (spaceId, sourceId, fetch) => {
  const response = await (0, _ml_get_jobs_summary_api.callJobsSummaryAPI)({
    spaceId,
    sourceId,
    jobTypes: _infra_ml.metricsHostsJobTypes
  }, fetch);
  const jobIds = Object.values(getJobIds(spaceId, sourceId));
  return response.filter(jobSummary => jobIds.includes(jobSummary.id));
};
const getModuleDefinition = async fetch => {
  return await (0, _ml_get_module.callGetMlModuleAPI)(moduleId, fetch);
};
const setUpModule = async (setUpModuleArgs, fetch) => {
  const {
    start,
    end,
    filter,
    moduleSourceConfiguration: {
      spaceId,
      sourceId,
      indices
    },
    partitionField
  } = setUpModuleArgs;
  const indexNamePattern = indices.join(',');
  const jobIds = ['hosts_memory_usage', 'hosts_network_in', 'hosts_network_out'];
  const jobOverrides = jobIds.map(id => {
    const {
      job: defaultJobConfig
    } = getDefaultJobConfigs(id);

    // eslint-disable-next-line @typescript-eslint/naming-convention
    const analysis_config = {
      ...defaultJobConfig.analysis_config
    };
    if (partitionField) {
      analysis_config.detectors[0].partition_field_name = partitionField;
      if (analysis_config.influencers.indexOf(partitionField) === -1) {
        analysis_config.influencers.push(partitionField);
      }
    }
    return {
      job_id: id,
      data_description: {
        time_field: _constants.TIMESTAMP_FIELD
      },
      analysis_config,
      custom_settings: {
        metrics_source_config: {
          indexPattern: indexNamePattern,
          timestampField: _constants.TIMESTAMP_FIELD,
          bucketSpan: _infra_ml.bucketSpan
        }
      }
    };
  });
  const datafeedOverrides = jobIds.map(id => {
    const {
      datafeed: defaultDatafeedConfig
    } = getDefaultJobConfigs(id);
    const config = {
      ...defaultDatafeedConfig
    };
    if (filter) {
      const query = JSON.parse(filter);
      config.query.bool = {
        ...config.query.bool,
        ...query.bool
      };
    }
    if (!partitionField || id === 'hosts_memory_usage') {
      // Since the host memory usage doesn't have custom aggs, we don't need to do anything to add a partition field
      return {
        ...config,
        job_id: id
      };
    }

    // If we have a partition field, we need to change the aggregation to do a terms agg at the top level
    const aggregations = {
      [partitionField]: {
        terms: {
          field: partitionField
        },
        aggregations: {
          ...defaultDatafeedConfig.aggregations
        }
      }
    };
    return {
      ...config,
      job_id: id,
      aggregations
    };
  });
  return (0, _ml_setup_module_api.callSetupMlModuleAPI)({
    moduleId,
    start,
    end,
    spaceId,
    sourceId,
    indexPattern: indexNamePattern,
    jobOverrides,
    datafeedOverrides
  }, fetch);
};
const getDefaultJobConfigs = jobId => {
  switch (jobId) {
    case 'hosts_memory_usage':
      return {
        datafeed: _datafeed_hosts_memory_usage.default,
        job: _hosts_memory_usage.default
      };
    case 'hosts_network_in':
      return {
        datafeed: _datafeed_hosts_network_in.default,
        job: _hosts_network_in.default
      };
    case 'hosts_network_out':
      return {
        datafeed: _datafeed_hosts_network_out.default,
        job: _hosts_network_out.default
      };
  }
};
const cleanUpModule = async (spaceId, sourceId, fetch) => {
  return await (0, _infra_ml_cleanup.cleanUpJobsAndDatafeeds)(spaceId, sourceId, _infra_ml.metricsHostsJobTypes, fetch);
};
const metricHostsModule = exports.metricHostsModule = {
  moduleId,
  moduleName,
  moduleDescription,
  jobTypes: _infra_ml.metricsHostsJobTypes,
  bucketSpan: _infra_ml.bucketSpan,
  getJobIds,
  getJobSummary,
  getModuleDefinition,
  setUpModule,
  cleanUpModule
};