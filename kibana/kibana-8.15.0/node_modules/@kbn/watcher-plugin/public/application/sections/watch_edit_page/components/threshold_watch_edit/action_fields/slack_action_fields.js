"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SlackActionFields = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const SlackActionFields = ({
  action,
  editAction,
  children
}) => {
  const {
    text,
    to
  } = action;
  const toOptions = to ? to.map(label => ({
    label
  })) : [];
  return /*#__PURE__*/_react.default.createElement(_react.Fragment, null, children, /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    fullWidth: true,
    label: _i18n.i18n.translate('xpack.watcher.sections.watchEdit.threshold.slackAction.recipientTextFieldLabel', {
      defaultMessage: 'Recipient (optional)'
    })
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiComboBox, {
    noSuggestions: true,
    fullWidth: true,
    selectedOptions: toOptions,
    "data-test-subj": "slackRecipientComboBox",
    onCreateOption: searchValue => {
      const newOptions = [...toOptions, {
        label: searchValue
      }];
      editAction({
        key: 'to',
        value: newOptions.map(newOption => newOption.label)
      });
    },
    onChange: selectedOptions => {
      editAction({
        key: 'to',
        value: selectedOptions.map(selectedOption => selectedOption.label)
      });
    }
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    fullWidth: true,
    label: _i18n.i18n.translate('xpack.watcher.sections.watchEdit.threshold.slackAction.messageTextAreaFieldLabel', {
      defaultMessage: 'Message (optional)'
    })
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiTextArea, {
    fullWidth: true,
    name: "text",
    value: text,
    "data-test-subj": "slackMessageTextarea",
    onChange: e => {
      editAction({
        key: 'text',
        value: e.target.value
      });
    }
  })));
};
exports.SlackActionFields = SlackActionFields;