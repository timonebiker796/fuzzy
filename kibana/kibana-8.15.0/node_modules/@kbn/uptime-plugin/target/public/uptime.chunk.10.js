/*! Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one or more contributor license agreements.
 * Licensed under the Elastic License 2.0; you may not use this file except in compliance with the Elastic License 2.0. */
(window.uptime_bundle_jsonpfunction=window.uptime_bundle_jsonpfunction||[]).push([[10],{206:function(e,t,r){"use strict";r.r(t),r.d(t,"validateMonitorStatusParams",(function(){return s}));var i=r(140),n=r(69),a=r(99);function s(e){var t,r;const s={},o=a.a.decode(e),l=a.d.decode(e),u=a.c.decode(e);if(!Object(n.isRight)(o)&&!Object(n.isRight)(l)&&!Object(n.isRight)(u))return{errors:{typeCheckFailure:"Provided parameters do not conform to the expected type.",typeCheckParsingMessage:i.PathReporter.report(o)}};if(!(null!==(t=e.shouldCheckAvailability)&&void 0!==t&&t||null!==(r=e.shouldCheckStatus)&&void 0!==r&&r))return{errors:{noAlertSelected:"Alert must check for monitor status or monitor availability."}};if(Object(n.isRight)(o)&&o.right.shouldCheckStatus){const{numTimes:e,timerangeCount:t}=o.right;e<1&&(s.invalidNumTimes="Number of alert check down times must be an integer greater than 0"),isNaN(t)&&(s.timeRangeStartValueNaN="Specified time range value must be a number"),t<=0&&(s.invalidTimeRangeValue="Time range value must be greater than 0")}return{errors:s}}},99:function(e,t,r){"use strict";r.d(t,"a",(function(){return a})),r.d(t,"d",(function(){return s})),r.d(t,"b",(function(){return l})),r.d(t,"c",(function(){return u}));var i=r(28);i.intersection([i.partial({currentTriggerStarted:i.string,firstTriggeredAt:i.string,lastTriggeredAt:i.string,lastResolvedAt:i.string}),i.type({firstCheckedAt:i.string,lastCheckedAt:i.string,isTriggered:i.boolean})]);const n=i.type({"monitor.type":i.array(i.string),"observer.geo.name":i.array(i.string),tags:i.array(i.string),"url.port":i.array(i.string)}),a=i.intersection([i.type({numTimes:i.number,timerangeCount:i.number,timerangeUnit:i.string}),i.partial({search:i.string,filters:n,shouldCheckStatus:i.boolean,isAutoGenerated:i.boolean,shouldCheckAvailability:i.boolean})]),s=i.intersection([i.partial({filters:i.string,shouldCheckStatus:i.boolean,isAutoGenerated:i.boolean}),i.type({locations:i.array(i.string),numTimes:i.number,timerange:i.type({from:i.string,to:i.string})})]),o=i.union([i.literal("s","Second"),i.literal("m","Minute"),i.literal("h","Hour"),i.literal("d","Day"),i.literal("w","Week"),i.literal("M","Month"),i.literal("y","Year")]),l=i.intersection([i.type({range:i.number,rangeUnit:o,threshold:i.string}),i.partial({filters:i.string})]),u=i.intersection([i.type({availability:l,shouldCheckAvailability:i.boolean}),i.partial({filters:n,search:i.string})])}}]);