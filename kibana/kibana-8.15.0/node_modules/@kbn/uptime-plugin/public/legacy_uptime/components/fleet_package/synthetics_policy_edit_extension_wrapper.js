"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SyntheticsPolicyEditExtensionWrapper = void 0;
var _react = _interopRequireWildcard(require("react"));
var _i18n = require("@kbn/i18n");
var _eui = require("@elastic/eui");
var _public = require("@kbn/kibana-react-plugin/public");
var _use_edit_monitor_locator = require("./use_edit_monitor_locator");
var _deprecate_notice_modal = require("./deprecate_notice_modal");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
var DataStream = /*#__PURE__*/function (DataStream) {
  DataStream["HTTP"] = "http";
  DataStream["TCP"] = "tcp";
  DataStream["ICMP"] = "icmp";
  DataStream["BROWSER"] = "browser";
  return DataStream;
}(DataStream || {});
/**
 * Exports Synthetics-specific package policy instructions
 * for use in the Ingest app create / edit package policy
 */
const SyntheticsPolicyEditExtensionWrapper = exports.SyntheticsPolicyEditExtensionWrapper = /*#__PURE__*/(0, _react.memo)(({
  policy: currentPolicy,
  newPolicy,
  onChange
}) => {
  var _useKibana$services, _useKibana$services$s, _useKibana$services$s2, _currentInput$streams;
  const {
    application
  } = (0, _public.useKibana)().services;
  const {
    package: pkg
  } = newPolicy;
  const onCancel = (0, _react.useCallback)(() => {
    application === null || application === void 0 ? void 0 : application.navigateToApp('integrations', {
      path: `/detail/${pkg === null || pkg === void 0 ? void 0 : pkg.name}-${pkg === null || pkg === void 0 ? void 0 : pkg.version}/overview`
    });
  }, [application, pkg === null || pkg === void 0 ? void 0 : pkg.name, pkg === null || pkg === void 0 ? void 0 : pkg.version]);
  const locators = (_useKibana$services = (0, _public.useKibana)().services) === null || _useKibana$services === void 0 ? void 0 : (_useKibana$services$s = _useKibana$services.share) === null || _useKibana$services$s === void 0 ? void 0 : (_useKibana$services$s2 = _useKibana$services$s.url) === null || _useKibana$services$s2 === void 0 ? void 0 : _useKibana$services$s2.locators;
  const currentInput = currentPolicy.inputs.find(input => input.enabled === true);
  const vars = currentInput === null || currentInput === void 0 ? void 0 : (_currentInput$streams = currentInput.streams.find(stream => Object.values(DataStream).includes(stream.data_stream.dataset))) === null || _currentInput$streams === void 0 ? void 0 : _currentInput$streams.vars;
  let configId = '';
  try {
    configId = JSON.parse(vars === null || vars === void 0 ? void 0 : vars.processors.value)[0].add_fields.fields.config_id;
  } catch (e) {
    // ignore
  }
  const url = (0, _use_edit_monitor_locator.useEditMonitorLocator)({
    configId,
    locators
  });
  if (currentPolicy.is_managed) {
    return /*#__PURE__*/_react.default.createElement(_eui.EuiCallOut, null, /*#__PURE__*/_react.default.createElement("p", null, EDIT_IN_SYNTHETICS_DESC), /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
      isLoading: !url,
      href: url + `?packagePolicyId=${currentPolicy.id}`,
      "data-test-subj": "syntheticsEditMonitorButton"
    }, EDIT_IN_SYNTHETICS_LABEL));
  } else {
    return /*#__PURE__*/_react.default.createElement(_deprecate_notice_modal.DeprecateNoticeModal, {
      onCancel: onCancel
    });
  }
});
SyntheticsPolicyEditExtensionWrapper.displayName = 'SyntheticsPolicyEditExtensionWrapper';
const EDIT_IN_SYNTHETICS_LABEL = _i18n.i18n.translate('xpack.uptime.editPackagePolicy.inSynthetics', {
  defaultMessage: 'Edit in Synthetics'
});
const EDIT_IN_SYNTHETICS_DESC = _i18n.i18n.translate('xpack.uptime.editPackagePolicy.inSyntheticsDesc', {
  defaultMessage: 'This package policy is managed by the Synthetics app.'
});