"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UNNAMED_LOCATION = exports.TEST_RUN_DETAILS_ROUTE = exports.SYNTHETIC_CHECK_STEPS_ROUTE = exports.SYNTHETICS_STEP_DETAIL_ROUTE = exports.SYNTHETICS_SETTINGS_ROUTE = exports.SYNTHETICS_INDEX_PATTERN = exports.STEP_DETAIL_ROUTE = exports.STATUS = exports.SHORT_TS_LOCALE = exports.SHORT_TIMESPAN_LOCALE = exports.SETTINGS_ROUTE = exports.PRIVATE_LOCATIOSN_ROUTE = exports.OVERVIEW_ROUTE = exports.MONITOR_TYPES = exports.MONITOR_ROUTE = exports.MONITOR_NOT_FOUND_ROUTE = exports.MONITOR_MANAGEMENT_ROUTE = exports.MONITOR_HISTORY_ROUTE = exports.MONITOR_ERRORS_ROUTE = exports.MONITOR_EDIT_ROUTE = exports.MONITOR_ADD_ROUTE = exports.MONITORS_ROUTE = exports.ML_MODULE_ID = exports.ML_JOB_ID = exports.MAPPING_ERROR_ROUTE = exports.LICENSE_NOT_SUPPORTED_ERROR = exports.LICENSE_NOT_ACTIVE_ERROR = exports.LICENSE_MISSING_ERROR = exports.KQL_SYNTAX_LOCAL_STORAGE = exports.INITIAL_REST_VERSION = exports.GETTING_STARTED_ROUTE = exports.FILTER_FIELDS = exports.ERROR_DETAILS_ROUTE = exports.CERT_STATUS = exports.CERTIFICATES_ROUTE = void 0;
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const MONITOR_ROUTE = exports.MONITOR_ROUTE = '/monitor/:monitorId?';
const MONITOR_NOT_FOUND_ROUTE = exports.MONITOR_NOT_FOUND_ROUTE = '/monitor-not-found/:monitorId';
const MONITOR_HISTORY_ROUTE = exports.MONITOR_HISTORY_ROUTE = '/monitor/:monitorId/history';
const MONITOR_ERRORS_ROUTE = exports.MONITOR_ERRORS_ROUTE = '/monitor/:monitorId/errors';
const MONITOR_ADD_ROUTE = exports.MONITOR_ADD_ROUTE = '/add-monitor';
const MONITOR_EDIT_ROUTE = exports.MONITOR_EDIT_ROUTE = '/edit-monitor/:monitorId';
const MONITOR_MANAGEMENT_ROUTE = exports.MONITOR_MANAGEMENT_ROUTE = '/manage-monitors';
const OVERVIEW_ROUTE = exports.OVERVIEW_ROUTE = '/';
const MONITORS_ROUTE = exports.MONITORS_ROUTE = '/monitors';
const GETTING_STARTED_ROUTE = exports.GETTING_STARTED_ROUTE = '/monitors/getting-started';
const SETTINGS_ROUTE = exports.SETTINGS_ROUTE = '/settings';
const PRIVATE_LOCATIOSN_ROUTE = exports.PRIVATE_LOCATIOSN_ROUTE = '/settings/private-locations';
const SYNTHETICS_SETTINGS_ROUTE = exports.SYNTHETICS_SETTINGS_ROUTE = '/settings/:tabId';
const CERTIFICATES_ROUTE = exports.CERTIFICATES_ROUTE = '/certificates';
const SYNTHETICS_STEP_DETAIL_ROUTE = exports.SYNTHETICS_STEP_DETAIL_ROUTE = '/monitor/:monitorId/test-run/:checkGroupId/step/:stepIndex';
const STEP_DETAIL_ROUTE = exports.STEP_DETAIL_ROUTE = '/journey/:checkGroupId/step/:stepIndex';
const SYNTHETIC_CHECK_STEPS_ROUTE = exports.SYNTHETIC_CHECK_STEPS_ROUTE = '/journey/:checkGroupId/steps';
const TEST_RUN_DETAILS_ROUTE = exports.TEST_RUN_DETAILS_ROUTE = '/monitor/:monitorId/test-run/:checkGroupId';
const MAPPING_ERROR_ROUTE = exports.MAPPING_ERROR_ROUTE = '/mapping-error';
const ERROR_DETAILS_ROUTE = exports.ERROR_DETAILS_ROUTE = '/monitor/:monitorId/errors/:errorStateId';
let STATUS = exports.STATUS = /*#__PURE__*/function (STATUS) {
  STATUS["UP"] = "up";
  STATUS["DOWN"] = "down";
  STATUS["COMPLETE"] = "complete";
  STATUS["FAILED"] = "failed";
  STATUS["SKIPPED"] = "skipped";
  return STATUS;
}({});
let MONITOR_TYPES = exports.MONITOR_TYPES = /*#__PURE__*/function (MONITOR_TYPES) {
  MONITOR_TYPES["HTTP"] = "http";
  MONITOR_TYPES["TCP"] = "tcp";
  MONITOR_TYPES["ICMP"] = "icmp";
  MONITOR_TYPES["BROWSER"] = "browser";
  return MONITOR_TYPES;
}({});
const ML_JOB_ID = exports.ML_JOB_ID = 'high_latency_by_geo';
const ML_MODULE_ID = exports.ML_MODULE_ID = 'uptime_heartbeat';
const UNNAMED_LOCATION = exports.UNNAMED_LOCATION = 'Unnamed-location';
const SHORT_TS_LOCALE = exports.SHORT_TS_LOCALE = 'en-short-locale';
const SHORT_TIMESPAN_LOCALE = exports.SHORT_TIMESPAN_LOCALE = {
  relativeTime: {
    future: 'in %s',
    past: '%s ago',
    s: '%ds',
    ss: '%ss',
    m: '%dm',
    mm: '%dm',
    h: '%dh',
    hh: '%dh',
    d: '%dd',
    dd: '%dd',
    M: '%d Mon',
    MM: '%d Mon',
    y: '%d Yr',
    yy: '%d Yr'
  }
};
let CERT_STATUS = exports.CERT_STATUS = /*#__PURE__*/function (CERT_STATUS) {
  CERT_STATUS["OK"] = "OK";
  CERT_STATUS["EXPIRING_SOON"] = "EXPIRING_SOON";
  CERT_STATUS["EXPIRED"] = "EXPIRED";
  CERT_STATUS["TOO_OLD"] = "TOO_OLD";
  return CERT_STATUS;
}({});
const KQL_SYNTAX_LOCAL_STORAGE = exports.KQL_SYNTAX_LOCAL_STORAGE = 'xpack.uptime.kql.syntax';
const FILTER_FIELDS = exports.FILTER_FIELDS = {
  TAGS: 'tags',
  PORT: 'url.port',
  LOCATION: 'observer.geo.name',
  TYPE: 'monitor.type'
};
const SYNTHETICS_INDEX_PATTERN = exports.SYNTHETICS_INDEX_PATTERN = 'synthetics-*';
const LICENSE_NOT_ACTIVE_ERROR = exports.LICENSE_NOT_ACTIVE_ERROR = 'License not active';
const LICENSE_MISSING_ERROR = exports.LICENSE_MISSING_ERROR = 'Missing license information';
const LICENSE_NOT_SUPPORTED_ERROR = exports.LICENSE_NOT_SUPPORTED_ERROR = 'License not supported';
const INITIAL_REST_VERSION = exports.INITIAL_REST_VERSION = '2023-10-31';