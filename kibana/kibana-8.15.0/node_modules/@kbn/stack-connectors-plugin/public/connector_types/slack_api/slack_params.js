"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _public = require("@kbn/triggers-actions-ui-plugin/public");
var _i18n = require("@kbn/i18n");
var _i18nReact = require("@kbn/i18n-react");
var _eui = require("@elastic/eui");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const SlackParamsFields = ({
  actionConnector,
  actionParams,
  editAction,
  index,
  errors,
  messageVariables,
  defaultMessage,
  useDefaultMessage
}) => {
  var _config$allowedChanne, _config, _errors$channels, _errors$text, _errors$text2;
  const [connectorId, setConnectorId] = (0, _react.useState)();
  const {
    subAction,
    subActionParams
  } = actionParams;
  const {
    channels = [],
    text,
    channelIds = []
  } = subActionParams !== null && subActionParams !== void 0 ? subActionParams : {};
  const [tempChannelId, setTempChannelId] = (0, _react.useState)(channels.length > 0 ? channels[0] : channelIds.length > 0 && channelIds[0].length > 0 ? channelIds[0] : '');
  const [messageType, setMessageType] = (0, _react.useState)('text');
  const [textValue, setTextValue] = (0, _react.useState)(text);
  const [validChannelId, setValidChannelId] = (0, _react.useState)('');
  const {
    toasts
  } = (0, _public.useKibana)().notifications;
  const allowedChannelsConfig = (_config$allowedChanne = actionConnector === null || actionConnector === void 0 ? void 0 : (_config = actionConnector.config) === null || _config === void 0 ? void 0 : _config.allowedChannels) !== null && _config$allowedChanne !== void 0 ? _config$allowedChanne : [];
  const [selectedChannels, setSelectedChannels] = (0, _react.useState)((channelIds !== null && channelIds !== void 0 ? channelIds : []).map(c => {
    const allowedChannelSelected = allowedChannelsConfig === null || allowedChannelsConfig === void 0 ? void 0 : allowedChannelsConfig.find(ac => ac.id === c);
    return {
      value: c,
      label: allowedChannelSelected ? `${allowedChannelSelected.id} - ${allowedChannelSelected.name}` : c
    };
  }));
  const [channelValidError, setChannelValidError] = (0, _react.useState)([]);
  const {
    response: {
      channel: channelValidInfo
    } = {},
    isLoading: isValidatingChannel,
    error: channelValidErrorResp
  } = (0, _public.useSubAction)({
    connectorId: actionConnector === null || actionConnector === void 0 ? void 0 : actionConnector.id,
    subAction: 'validChannelId',
    subActionParams: {
      channelId: validChannelId
    },
    disabled: validChannelId.length === 0 && allowedChannelsConfig.length === 0
  });
  const onToggleInput = (0, _react.useCallback)(id => {
    // clear the text when toggled
    setTextValue('');
    editAction('subAction', id === 'text' ? 'postMessage' : 'postBlockkit', index);
    setMessageType(id);
  }, [setMessageType, editAction, index, setTextValue]);
  (0, _react.useEffect)(() => {
    if (useDefaultMessage || !text) {
      editAction('subActionParams', {
        channels,
        channelIds,
        text: defaultMessage
      }, index);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [defaultMessage, useDefaultMessage]);
  (0, _react.useEffect)(() => {
    if (!isValidatingChannel && !channelValidErrorResp && channelValidInfo && validChannelId === channelValidInfo.id) {
      editAction('subActionParams', {
        channels: undefined,
        channelIds: [channelValidInfo.id],
        text
      }, index);
      setValidChannelId('');
      setChannelValidError([]);
    }
  }, [channelValidInfo, validChannelId, channelValidErrorResp, isValidatingChannel, editAction, text, index]);
  (0, _react.useEffect)(() => {
    if (channelValidErrorResp && validChannelId.length > 0) {
      editAction('subActionParams', {
        channels: undefined,
        channelIds: [],
        text
      }, index);
      const errorMessage = _i18n.i18n.translate('xpack.stackConnectors.slack.params.componentError.validChannelsRequestFailed', {
        defaultMessage: '{validChannelId} is not a valid Slack channel',
        values: {
          validChannelId
        }
      });
      setChannelValidError([errorMessage]);
      setValidChannelId('');
      toasts.danger({
        title: errorMessage,
        body: channelValidErrorResp.message
      });
    }
  }, [toasts, channelValidErrorResp, validChannelId, editAction, text, index]);
  (0, _react.useEffect)(() => {
    if (subAction) {
      setMessageType(subAction === 'postMessage' ? 'text' : 'blockkit');
    }
  }, [subAction]);
  (0, _react.useEffect)(() => {
    var _actionConnector$id;
    // Reset channel id input when we changes connector
    if (connectorId && connectorId !== (actionConnector === null || actionConnector === void 0 ? void 0 : actionConnector.id)) {
      editAction('subActionParams', {
        channels: undefined,
        channelIds: [],
        text
      }, index);
      setTempChannelId('');
      setValidChannelId('');
      setChannelValidError([]);
      setSelectedChannels([]);
    }
    setConnectorId((_actionConnector$id = actionConnector === null || actionConnector === void 0 ? void 0 : actionConnector.id) !== null && _actionConnector$id !== void 0 ? _actionConnector$id : '');
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [actionConnector === null || actionConnector === void 0 ? void 0 : actionConnector.id]);
  if (!subAction) {
    editAction('subAction', 'postMessage', index);
  }
  if (!subActionParams) {
    editAction('subActionParams', {
      channels,
      channelIds,
      text
    }, index);
  }
  const typeChannelInput = (0, _react.useMemo)(() => {
    var _config$allowedChanne2, _config2;
    if (channels.length > 0 && channelIds.length === 0) {
      return 'channel-name';
    } else if (((_config$allowedChanne2 = actionConnector === null || actionConnector === void 0 ? void 0 : (_config2 = actionConnector.config) === null || _config2 === void 0 ? void 0 : _config2.allowedChannels) !== null && _config$allowedChanne2 !== void 0 ? _config$allowedChanne2 : []).length > 0) {
      return 'channel-allowed-ids';
    }
    return 'channel-id';
  }, [actionConnector, channelIds.length, channels.length]);
  const slackChannelsOptions = (0, _react.useMemo)(() => {
    var _config$allowedChanne3, _config3;
    return ((_config$allowedChanne3 = actionConnector === null || actionConnector === void 0 ? void 0 : (_config3 = actionConnector.config) === null || _config3 === void 0 ? void 0 : _config3.allowedChannels) !== null && _config$allowedChanne3 !== void 0 ? _config$allowedChanne3 : []).map(ac => ({
      label: `${ac.id} - ${ac.name}`,
      value: ac.id,
      'data-test-subj': ac.id
    }));
  }, [actionConnector]);
  const onChangeComboBox = (0, _react.useCallback)(newOptions => {
    const newSelectedChannels = newOptions.map(option => option.value.toString());
    setSelectedChannels(newOptions);
    editAction('subActionParams', {
      channels: undefined,
      channelIds: newSelectedChannels,
      text
    }, index);
  }, [editAction, index, text]);
  const onBlurChannelIds = (0, _react.useCallback)(() => {
    if (tempChannelId === '') {
      editAction('subActionParams', {
        channels: undefined,
        channelIds: [],
        text
      }, index);
    }
    setValidChannelId(tempChannelId.trim());
  }, [editAction, index, tempChannelId, text]);
  const onChangeTextField = (0, _react.useCallback)(evt => {
    editAction('subActionParams', {
      channels: undefined,
      channelIds: [],
      text
    }, index);
    setTempChannelId(evt.target.value);
  }, [editAction, index, text]);
  const channelInput = (0, _react.useMemo)(() => {
    if (typeChannelInput === 'channel-name' || typeChannelInput === 'channel-id') {
      return /*#__PURE__*/_react.default.createElement(_eui.EuiFieldText, {
        "data-test-subj": "slackApiChannelId",
        name: "slackApiChannelId",
        value: tempChannelId,
        isLoading: isValidatingChannel,
        onChange: onChangeTextField,
        onBlur: onBlurChannelIds,
        isInvalid: channelValidError.length > 0,
        fullWidth: true
      });
    }
    return /*#__PURE__*/_react.default.createElement(_eui.EuiComboBox, {
      noSuggestions: false,
      "data-test-subj": "slackChannelsComboBox",
      options: slackChannelsOptions,
      selectedOptions: selectedChannels,
      onChange: onChangeComboBox,
      singleSelection: true,
      fullWidth: true
    });
  }, [channelValidError.length, isValidatingChannel, onBlurChannelIds, onChangeComboBox, onChangeTextField, selectedChannels, slackChannelsOptions, tempChannelId, typeChannelInput]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    label: typeChannelInput === 'channel-name' ? _i18n.i18n.translate('xpack.stackConnectors.slack.params.channelsComboBoxLabel', {
      defaultMessage: 'Channel'
    }) : _i18n.i18n.translate('xpack.stackConnectors.slack.params.channelIdComboBoxLabel', {
      defaultMessage: 'Channel ID'
    }),
    fullWidth: true,
    error: channelValidError.length > 0 ? channelValidError : errors.channels,
    isInvalid: ((_errors$channels = errors.channels) === null || _errors$channels === void 0 ? void 0 : _errors$channels.length) > 0 || channelValidError.length > 0,
    helpText: channelIds.length > 0 && channelValidInfo ? `${channelValidInfo.id} - ${channelValidInfo.name}` : ''
  }, channelInput), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  }), (actionConnector === null || actionConnector === void 0 ? void 0 : actionConnector.actionTypeId) === '.slack_api' && /*#__PURE__*/_react.default.createElement(_eui.EuiButtonGroup, {
    isFullWidth: true,
    buttonSize: "m",
    color: "primary",
    legend: "",
    options: [{
      id: 'text',
      label: _i18n.i18n.translate('xpack.stackConnectors.slack.params.textLabel', {
        defaultMessage: 'Text'
      })
    }, {
      id: 'blockkit',
      label: _i18n.i18n.translate('xpack.stackConnectors.slack.params.blockkitLabel', {
        defaultMessage: 'Block Kit'
      })
    }],
    idSelected: messageType,
    onChange: onToggleInput,
    "data-test-subj": "slackMessageTypeChangeButton"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  }), messageType === 'text' ? /*#__PURE__*/_react.default.createElement(_public.TextAreaWithMessageVariables, {
    index: index,
    editAction: (_, value) => {
      setTextValue(value);
      editAction('subActionParams', {
        channels,
        channelIds,
        text: value
      }, index);
    },
    messageVariables: messageVariables,
    paramsProperty: "webApiText",
    inputTargetValue: textValue,
    label: _i18n.i18n.translate('xpack.stackConnectors.components.slack.messageTextAreaFieldLabel', {
      defaultMessage: 'Message'
    }),
    errors: (_errors$text = errors.text) !== null && _errors$text !== void 0 ? _errors$text : []
  }) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_public.JsonEditorWithMessageVariables, {
    onDocumentsChange: json => {
      setTextValue(json);
      editAction('subActionParams', {
        channels,
        channelIds,
        text: json
      }, index);
    },
    messageVariables: messageVariables,
    paramsProperty: "webApiBlock",
    inputTargetValue: textValue,
    label: _i18n.i18n.translate('xpack.stackConnectors.components.slack.messageJsonAreaFieldLabel', {
      defaultMessage: 'Block Kit'
    }),
    dataTestSubj: "webApiBlock",
    errors: (_errors$text2 = errors.text) !== null && _errors$text2 !== void 0 ? _errors$text2 : []
  }), text && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiLink, {
    target: "_blank",
    href: `https://app.slack.com/block-kit-builder/#${encodeURIComponent(text)}`,
    external: true
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.stackConnectors.components.slack.viewInBlockkitBuilder",
    defaultMessage: "View in Slack Block Kit Builder"
  })))));
};

// eslint-disable-next-line import/no-default-export
exports.default = SlackParamsFields;
module.exports = exports.default;