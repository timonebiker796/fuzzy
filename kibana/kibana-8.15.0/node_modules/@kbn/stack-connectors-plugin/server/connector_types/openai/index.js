"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getConnectorType = exports.configValidator = void 0;
var _i18n = require("@kbn/i18n");
var _types = require("@kbn/actions-plugin/server/sub_action_framework/types");
var _common = require("@kbn/actions-plugin/common");
var _server = require("@kbn/actions-plugin/server");
var _validators = require("@kbn/actions-plugin/server/sub_action_framework/helpers/validators");
var _constants = require("../../../common/openai/constants");
var _schema = require("../../../common/openai/schema");
var _openai = require("./openai");
var _render = require("./render");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const getConnectorType = () => ({
  id: _constants.OPENAI_CONNECTOR_ID,
  name: _constants.OPENAI_TITLE,
  getService: params => new _openai.OpenAIConnector(params),
  schema: {
    config: _schema.ConfigSchema,
    secrets: _schema.SecretsSchema
  },
  validators: [{
    type: _types.ValidatorType.CONFIG,
    validator: configValidator
  }],
  supportedFeatureIds: [_common.GenerativeAIForSecurityConnectorFeatureId, _common.GenerativeAIForObservabilityConnectorFeatureId, _common.GenerativeAIForSearchPlaygroundConnectorFeatureId],
  minimumLicenseRequired: 'enterprise',
  renderParameterTemplates: _render.renderParameterTemplates
});
exports.getConnectorType = getConnectorType;
const configValidator = (configObject, validatorServices) => {
  try {
    (0, _validators.assertURL)(configObject.apiUrl);
    (0, _server.urlAllowListValidator)('apiUrl')(configObject, validatorServices);
    const {
      apiProvider
    } = configObject;
    if (apiProvider !== _constants.OpenAiProviderType.OpenAi && apiProvider !== _constants.OpenAiProviderType.AzureAi) {
      throw new Error(`API Provider is not supported${apiProvider && apiProvider.length ? `: ${apiProvider}` : ``}`);
    }
    return configObject;
  } catch (err) {
    throw new Error(_i18n.i18n.translate('xpack.stackConnectors.genAi.configurationErrorApiProvider', {
      defaultMessage: 'Error configuring OpenAI action: {err}',
      values: {
        err: err.toString()
      }
    }));
  }
};
exports.configValidator = configValidator;