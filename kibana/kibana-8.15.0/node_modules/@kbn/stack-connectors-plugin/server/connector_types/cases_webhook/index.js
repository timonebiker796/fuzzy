"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConnectorTypeId = void 0;
exports.executor = executor;
exports.getConnectorType = getConnectorType;
var _connector_feature_config = require("@kbn/actions-plugin/common/connector_feature_config");
var _service = require("./service");
var _schema = require("./schema");
var _api = require("./api");
var _validators = require("./validators");
var i18n = _interopRequireWildcard(require("./translations"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const supportedSubActions = ['pushToService'];
const ConnectorTypeId = exports.ConnectorTypeId = '.cases-webhook';

// connector type definition
function getConnectorType() {
  return {
    id: ConnectorTypeId,
    minimumLicenseRequired: 'gold',
    name: i18n.NAME,
    validate: {
      config: {
        schema: _schema.ExternalIncidentServiceConfigurationSchema,
        customValidator: _validators.validateCasesWebhookConfig
      },
      secrets: {
        schema: _schema.ExternalIncidentServiceSecretConfigurationSchema
      },
      params: {
        schema: _schema.ExecutorParamsSchema
      },
      connector: _validators.validateConnector
    },
    executor,
    supportedFeatureIds: [_connector_feature_config.CasesConnectorFeatureId]
  };
}

// action executor
async function executor(execOptions) {
  const {
    actionId,
    configurationUtilities,
    params,
    logger
  } = execOptions;
  const {
    subAction,
    subActionParams
  } = params;
  let data;
  const externalService = (0, _service.createExternalService)(actionId, {
    config: execOptions.config,
    secrets: execOptions.secrets
  }, logger, configurationUtilities);
  if (!_api.api[subAction]) {
    const errorMessage = `[Action][ExternalService] Unsupported subAction type ${subAction}.`;
    logger.error(errorMessage);
    throw new Error(errorMessage);
  }
  if (!supportedSubActions.includes(subAction)) {
    const errorMessage = `[Action][ExternalService] subAction ${subAction} not implemented.`;
    logger.error(errorMessage);
    throw new Error(errorMessage);
  }
  if (subAction === 'pushToService') {
    const pushToServiceParams = subActionParams;
    data = await _api.api.pushToService({
      externalService,
      params: pushToServiceParams,
      logger
    });
    logger.debug(`response push to service for case id: ${data.id}`);
  }
  return {
    status: 'ok',
    data,
    actionId
  };
}