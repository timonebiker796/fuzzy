"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AggBasedSelection = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _i18n = require("@kbn/i18n");
var _i18nReact = require("@kbn/i18n-react");
var _lodash = require("lodash");
var _react = _interopRequireDefault(require("react"));
var _eui = require("@elastic/eui");
var _memoize = require("../../legacy/memoize");
var _vis_groups_enum = require("../../vis_types/vis_groups_enum");
var _dialog_navigation = require("../dialog_navigation");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

class AggBasedSelection extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      query: ''
    });
    (0, _defineProperty2.default)(this, "getFilteredVisTypes", (0, _memoize.memoizeLast)(this.filteredVisTypes));
    (0, _defineProperty2.default)(this, "renderVisType", visType => {
      const isDisabled = this.state.query !== '' && !visType.highlighted;
      const onClick = () => this.props.onVisTypeSelected(visType.type);
      return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
        key: visType.type.name
      }, /*#__PURE__*/_react.default.createElement(_eui.EuiCard, {
        titleSize: "xs",
        title: /*#__PURE__*/_react.default.createElement("span", {
          "data-test-subj": "visTypeTitle"
        }, visType.type.title),
        onClick: onClick,
        "data-test-subj": `visType-${visType.type.name}`,
        "data-vis-stage": visType.type.stage,
        "aria-label": `visType-${visType.type.name}`,
        description: visType.type.description || '',
        layout: "horizontal",
        isDisabled: isDisabled,
        icon: /*#__PURE__*/_react.default.createElement(_eui.EuiIcon, {
          type: visType.type.icon || 'empty',
          size: "l",
          color: "success"
        }),
        className: "aggBasedDialog__card",
        hasBorder: true
      }));
    });
    (0, _defineProperty2.default)(this, "onQueryChange", ev => {
      this.setState({
        query: ev.target.value
      });
    });
  }
  render() {
    const {
      query
    } = this.state;
    const visTypes = this.getFilteredVisTypes(this.props.visTypesRegistry, query);
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiModalHeader, null, /*#__PURE__*/_react.default.createElement(_eui.EuiModalHeaderTitle, null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "visualizations.newAggVisWizard.title",
      defaultMessage: "New aggregation based visualization"
    }))), /*#__PURE__*/_react.default.createElement(_eui.EuiModalBody, null, this.props.openedAsRoot ? null : /*#__PURE__*/_react.default.createElement(_dialog_navigation.DialogNavigation, {
      goBack: () => this.props.toggleGroups(true)
    }), /*#__PURE__*/_react.default.createElement(_eui.EuiFieldSearch, {
      placeholder: "Filter",
      value: query,
      onChange: this.onQueryChange,
      fullWidth: true,
      "data-test-subj": "filterVisType",
      "aria-label": _i18n.i18n.translate('visualizations.newVisWizard.filterVisTypeAriaLabel', {
        defaultMessage: 'Filter for a visualization type'
      })
    }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, null), /*#__PURE__*/_react.default.createElement(_eui.EuiScreenReaderOnly, null, /*#__PURE__*/_react.default.createElement("span", {
      "aria-live": "polite"
    }, query && /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "visualizations.newVisWizard.resultsFound",
      defaultMessage: "{resultCount, plural, one {type} other {types}} found",
      values: {
        resultCount: visTypes.filter(type => type.highlighted).length
      }
    }))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGrid, {
      columns: 3,
      "data-test-subj": "visNewDialogTypes"
    }, visTypes.map(this.renderVisType))));
  }
  filteredVisTypes(visTypes, query) {
    const types = visTypes.getByGroup(_vis_groups_enum.VisGroups.AGGBASED).filter(type => {
      // Filter out hidden visualizations and visualizations that are only aggregations based
      return !type.disableCreate;
    });
    let entries;
    if (!query) {
      entries = types.map(type => ({
        type,
        highlighted: false
      }));
    } else {
      const q = query.toLowerCase();
      entries = types.map(type => {
        const matchesQuery = type.name.toLowerCase().includes(q) || type.title.toLowerCase().includes(q) || typeof type.description === 'string' && type.description.toLowerCase().includes(q);
        return {
          type,
          highlighted: matchesQuery
        };
      });
    }
    return (0, _lodash.orderBy)(entries, ['highlighted', 'type.title'], ['desc', 'asc']);
  }
}
exports.AggBasedSelection = AggBasedSelection;