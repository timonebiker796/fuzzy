"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PlatformIcons = void 0;
var _eui = require("@elastic/eui");
var _react = _interopRequireWildcard(require("react"));
var _constants = require("./constants");
var _platform_icon = require("./platform_icon");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const PlatformIconsComponent = ({
  platform
}) => {
  const [platforms, setPlatforms] = (0, _react.useState)(_constants.SUPPORTED_PLATFORMS);
  (0, _react.useEffect)(() => {
    setPlatforms(prevValue => {
      if (platform) {
        let platformArray;
        try {
          platformArray = platform === null || platform === void 0 ? void 0 : platform.split(',').map(platformString => platformString.trim());
        } catch (e) {
          return prevValue;
        }
        return platformArray;
      } else {
        return _constants.SUPPORTED_PLATFORMS;
      }
    });
  }, [platform]);
  const content = (0, _react.useMemo)(() => platforms.map(platformString => /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    key: platformString,
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_platform_icon.PlatformIcon, {
    platform: platformString
  }))), [platforms]);
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    gutterSize: "s"
  }, content);
};
const PlatformIcons = exports.PlatformIcons = /*#__PURE__*/_react.default.memo(PlatformIconsComponent);