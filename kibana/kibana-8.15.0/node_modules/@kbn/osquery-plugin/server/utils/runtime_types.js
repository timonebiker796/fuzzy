"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.throwErrors = exports.excess = exports.decodeOrThrow = exports.createPlainError = void 0;
var _Either = require("fp-ts/lib/Either");
var _function = require("fp-ts/lib/function");
var _pipeable = require("fp-ts/lib/pipeable");
var rt = _interopRequireWildcard(require("io-ts"));
var _PathReporter = require("io-ts/lib/PathReporter");
var _get = _interopRequireDefault(require("lodash/get"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const createPlainError = message => new Error(message);
exports.createPlainError = createPlainError;
const throwErrors = createError => errors => {
  throw createError((0, _PathReporter.failure)(errors).join('\n'));
};
exports.throwErrors = throwErrors;
const decodeOrThrow = (runtimeType, createError = createPlainError) => inputValue => (0, _pipeable.pipe)(runtimeType.decode(inputValue), (0, _Either.fold)(throwErrors(createError), _function.identity));
exports.decodeOrThrow = decodeOrThrow;
const getProps = codec => {
  if (codec == null) {
    return null;
  }
  switch (codec._tag) {
    case 'DictionaryType':
      {
        if (codec.codomain.props != null) {
          return codec.codomain.props;
        }
        const dTypes = codec.codomain.types;
        return dTypes.reduce((props, type) => Object.assign(props, getProps(type)), {});
      }
    case 'RefinementType':
    case 'ReadonlyType':
      return getProps(codec.type);
    case 'InterfaceType':
    case 'StrictType':
    case 'PartialType':
      return codec.props;
    case 'IntersectionType':
      {
        const iTypes = codec.types;
        return iTypes.reduce((props, type) => Object.assign(props, getProps(type)), {});
      }
    default:
      return null;
  }
};
const getExcessProps = (props, r) => Object.keys(r).reduce((acc, k) => {
  const codecChildren = (0, _get.default)(props, [k]);
  const childrenProps = getProps(codecChildren);
  const childrenObject = r[k];
  if (codecChildren != null && childrenProps != null && codecChildren._tag === 'DictionaryType') {
    const keys = Object.keys(childrenObject);
    return [...acc, ...keys.reduce((kAcc, i) => [...kAcc, ...getExcessProps(childrenProps, childrenObject[i])], [])];
  }
  if (codecChildren != null && childrenProps != null) {
    return [...acc, ...getExcessProps(childrenProps, childrenObject)];
  } else if (codecChildren == null) {
    return [...acc, k];
  }
  return acc;
}, []);
const excess = codec => {
  const codecProps = getProps(codec);
  const r = new rt.InterfaceType(codec.name, codec.is, (i, c) => _Either.either.chain(rt.UnknownRecord.validate(i, c), s => {
    if (codecProps == null) {
      return rt.failure(i, c, 'unknown codec');
    }
    const ex = getExcessProps(codecProps, s);
    return ex.length > 0 ? rt.failure(i, c, `Invalid value ${JSON.stringify(i)}, excess properties: ${JSON.stringify(ex)}`) : codec.validate(i, c);
  }), codec.encode, codecProps);
  return r;
};
exports.excess = excess;