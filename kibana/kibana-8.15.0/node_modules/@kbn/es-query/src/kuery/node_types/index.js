"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "KQL_NODE_TYPE_FUNCTION", {
  enumerable: true,
  get: function () {
    return functionType.KQL_NODE_TYPE_FUNCTION;
  }
});
Object.defineProperty(exports, "KQL_NODE_TYPE_LITERAL", {
  enumerable: true,
  get: function () {
    return literal.KQL_NODE_TYPE_LITERAL;
  }
});
Object.defineProperty(exports, "KQL_NODE_TYPE_WILDCARD", {
  enumerable: true,
  get: function () {
    return wildcard.KQL_NODE_TYPE_WILDCARD;
  }
});
Object.defineProperty(exports, "nodeBuilder", {
  enumerable: true,
  get: function () {
    return _node_builder.nodeBuilder;
  }
});
exports.nodeTypes = void 0;
var functionType = _interopRequireWildcard(require("./function"));
var literal = _interopRequireWildcard(require("./literal"));
var wildcard = _interopRequireWildcard(require("./wildcard"));
var _node_builder = require("./node_builder");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

/**
 * @public
 */
const nodeTypes = exports.nodeTypes = {
  // This requires better typing of the different typings and their return types.
  // @ts-ignore
  function: functionType,
  literal,
  wildcard
};