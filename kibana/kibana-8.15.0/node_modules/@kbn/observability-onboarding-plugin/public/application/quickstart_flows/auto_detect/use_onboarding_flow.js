"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useOnboardingFlow = useOnboardingFlow;
var _useInterval = _interopRequireDefault(require("react-use/lib/useInterval"));
var _public = require("@kbn/kibana-react-plugin/public");
var _useAsync = _interopRequireDefault(require("react-use/lib/useAsync"));
var _use_fetcher = require("../../../hooks/use_fetcher");
var _get_onboarding_status = require("./get_onboarding_status");
var _get_installed_integrations = require("./get_installed_integrations");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function useOnboardingFlow() {
  var _assetsState$value;
  const {
    services: {
      fleet
    }
  } = (0, _public.useKibana)();

  // Create onboarding session
  const {
    data,
    error,
    refetch
  } = (0, _use_fetcher.useFetcher)(callApi => callApi('POST /internal/observability_onboarding/flow', {
    params: {
      body: {
        name: 'auto-detect'
      }
    }
  }), [], {
    showToastOnError: false
  });
  const onboardingId = data === null || data === void 0 ? void 0 : data.onboardingFlow.id;

  // Fetch onboarding progress
  const {
    data: progressData,
    status: progressStatus,
    refetch: refetchProgress
  } = (0, _use_fetcher.useFetcher)(callApi => {
    if (onboardingId) {
      return callApi('GET /internal/observability_onboarding/flow/{onboardingId}/progress', {
        params: {
          path: {
            onboardingId
          }
        }
      });
    }
  }, [onboardingId]);
  const status = (0, _get_onboarding_status.getOnboardingStatus)(progressData);
  const installedIntegrations = (0, _get_installed_integrations.getInstalledIntegrations)(progressData);

  // Fetch metadata for installed Kibana assets
  const assetsState = (0, _useAsync.default)(async () => {
    if (installedIntegrations.length === 0) {
      return [];
    }
    const assetsMetadata = await fleet.hooks.epm.getBulkAssets({
      assetIds: installedIntegrations.map(integration => integration.kibanaAssets).flat()
    });
    return installedIntegrations.map(integration => {
      return {
        ...integration,
        // Enrich installed Kibana assets with metadata from Fleet API (e.g. title, description, etc.)
        kibanaAssets: integration.kibanaAssets.reduce((acc, asset) => {
          var _assetsMetadata$data;
          const assetWithMetadata = (_assetsMetadata$data = assetsMetadata.data) === null || _assetsMetadata$data === void 0 ? void 0 : _assetsMetadata$data.items.find(({
            id
          }) => id === asset.id);
          if (assetWithMetadata) {
            acc.push(assetWithMetadata);
          }
          return acc;
        }, [])
      };
    });
  }, [installedIntegrations.length]); // eslint-disable-line react-hooks/exhaustive-deps

  (0, _useInterval.default)(refetchProgress, progressStatus === _use_fetcher.FETCH_STATUS.SUCCESS && status !== 'dataReceived' ? 3000 : null);
  return {
    data,
    error,
    refetch,
    status,
    installedIntegrations: (_assetsState$value = assetsState.value) !== null && _assetsState$value !== void 0 ? _assetsState$value : []
  };
}