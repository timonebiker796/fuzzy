"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OtelLogsPanel = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _locators = require("@kbn/deeplinks-observability/locators");
var _i18n = require("@kbn/i18n");
var _public = require("@kbn/kibana-react-plugin/public");
var _useAsyncFn = _interopRequireDefault(require("react-use/lib/useAsyncFn"));
var _i18nReact = require("@kbn/i18n-react");
var _api_key_banner = require("../custom_logs/api_key_banner");
var _use_fetcher = require("../../../hooks/use_fetcher");
var _multi_integration_install_banner = require("./multi_integration_install_banner");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const feedbackUrl = 'https://ela.st/otelcollector';
const HOST_COMMAND = _i18n.i18n.translate('xpack.observability_onboarding.otelLogsPanel.p.runTheCommandOnYourHostLabel', {
  defaultMessage: 'Run the following command on your host to download and configure the collector.'
});
const OtelLogsPanel = () => {
  const {
    data: apiKeyData,
    status: apiKeyStatus,
    error
  } = (0, _use_fetcher.useFetcher)(callApi => {
    return callApi('POST /internal/observability_onboarding/otel/api_key', {});
  }, []);
  const {
    data: setup
  } = (0, _use_fetcher.useFetcher)(callApi => {
    return callApi('GET /internal/observability_onboarding/logs/setup/environment');
  }, []);
  const {
    services: {
      share,
      http,
      context: {
        isServerless,
        stackVersion
      }
    }
  } = (0, _public.useKibana)();
  const AGENT_CDN_BASE_URL = isServerless ? 'snapshots.elastic.co/8.15.0-bc431a00/downloads/beats/elastic-agent' : 'artifacts.elastic.co/downloads/beats/elastic-agent';
  // TODO change once otel flow should be shown on serverless
  // const agentVersion = isServerless ? setup?.elasticAgentVersion : stackVersion;
  const agentVersion = isServerless ? '8.15.0-SNAPSHOT' : stackVersion;
  const allDatasetsLocator = share.url.locators.get(_locators.ALL_DATASETS_LOCATOR_ID);
  const hostsLocator = share.url.locators.get('HOSTS_LOCATOR');
  const [{
    value: deeplinks
  }, getDeeplinks] = (0, _useAsyncFn.default)(async () => {
    return {
      logs: allDatasetsLocator === null || allDatasetsLocator === void 0 ? void 0 : allDatasetsLocator.getRedirectUrl({
        type: 'logs'
      }),
      metrics: hostsLocator === null || hostsLocator === void 0 ? void 0 : hostsLocator.getRedirectUrl({})
    };
  }, [allDatasetsLocator]);
  (0, _react.useEffect)(() => {
    getDeeplinks();
  }, [getDeeplinks]);
  const installTabContents = [{
    id: 'kubernetes',
    name: 'Kubernetes',
    prompt: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiText, null, /*#__PURE__*/_react.default.createElement("p", null, _i18n.i18n.translate('xpack.observability_onboarding.otelLogsPanel.kubernetesApplyCommandPromptLabel', {
      defaultMessage: 'From the directory where the manifest is downloaded, run the following command to install the collector on every node of your cluster:'
    }))), /*#__PURE__*/_react.default.createElement(CopyableCodeBlock, {
      content: `kubectl create secret generic elastic-secret-otel --from-literal=es_endpoint='${setup === null || setup === void 0 ? void 0 : setup.elasticsearchUrl}' --from-literal=es_api_key='${apiKeyData === null || apiKeyData === void 0 ? void 0 : apiKeyData.apiKeyEncoded}'

kubectl apply -f otel-collector-k8s.yml`
    })),
    firstStepTitle: _i18n.i18n.translate('xpack.observability_onboarding.otelLogsPanel.steps.downloadManifest', {
      defaultMessage: 'Download the manifest:'
    }),
    content: `apiVersion: v1
kind: ServiceAccount
metadata:
  name: elastic-otel-collector-agent
  namespace: default
  labels:
    app.kubernetes.io/name: elastic-opentelemetry-collector
    app.kubernetes.io/version: "${agentVersion}"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: elastic-otel-collector-agent
  labels:
    app.kubernetes.io/name: elastic-opentelemetry-collector
    app.kubernetes.io/version: "${agentVersion}"
rules:
  - apiGroups: [""]
    resources: ["pods", "namespaces", "nodes"]
    verbs: ["get", "watch", "list"]
  - apiGroups: ["apps"]
    resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions"]
    resources: ["daemonsets", "deployments", "replicasets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [ "" ]
    resources: [ "nodes/stats" ]
    verbs: [ "get", "watch", "list" ]
  - apiGroups: [ "" ]
    resources: [ "nodes/proxy" ]
    verbs: [ "get" ]
  - apiGroups: [ "" ]
    resources: ["configmaps"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: elastic-otel-collector-agent
  labels:
    app.kubernetes.io/name: elastic-opentelemetry-collector
    app.kubernetes.io/version: "${agentVersion}"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: elastic-otel-collector-agent
subjects:
  - kind: ServiceAccount
    name: elastic-otel-collector-agent
    namespace: default
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: elastic-otel-collector-agent
  namespace: default
  labels:
    app.kubernetes.io/name: elastic-opentelemetry-collector
    app.kubernetes.io/version: "${agentVersion}"
data:
  otel.yaml: |
    exporters:
      debug:
        verbosity: basic
      elasticsearch:
        endpoints: 
        - \${env:ES_ENDPOINT}
        api_key: \${env:ES_API_KEY}
        logs_dynamic_index:
          enabled: true
        mapping:
          mode: ecs
    processors:
      elasticinframetrics:
        add_system_metrics: true
        add_k8s_metrics: true
      resourcedetection/eks:
        detectors: [env, eks]
        timeout: 15s
        override: true
        eks:
          resource_attributes:
            k8s.cluster.name:
              enabled: true
      resourcedetection/gcp:
        detectors: [env, gcp]
        timeout: 2s
        override: false
      resource/k8s:
        attributes:
          - key: service.name
            from_attribute: app.label.component
            action: insert
      attributes/k8s_logs_dataset:
        actions:
          - key: data_stream.dataset
            value: "kubernetes.container_logs"
            action: upsert
      attributes/dataset:
        actions:
          - key: event.dataset
            from_attribute: data_stream.dataset
            action: upsert
      resource/cloud:
        attributes:
          - key: cloud.instance.id
            from_attribute: host.id
            action: insert
      resource/process:
        attributes:
          - key: process.executable.name
            action: delete
          - key: process.executable.path
            action: delete
      resourcedetection/system:
        detectors: ["system", "ec2"]
        system:
          hostname_sources: [ "os" ]
          resource_attributes:
            host.name:
              enabled: true
            host.id:
              enabled: false
            host.arch:
              enabled: true
            host.ip:
              enabled: true
            host.mac:
              enabled: true
            host.cpu.vendor.id:
              enabled: true
            host.cpu.family:
              enabled: true
            host.cpu.model.id:
              enabled: true
            host.cpu.model.name:
              enabled: true
            host.cpu.stepping:
              enabled: true
            host.cpu.cache.l2.size:
              enabled: true
            os.description:
              enabled: true
            os.type:
              enabled: true
        ec2:
          resource_attributes:
            host.name:
              enabled: false
            host.id:
              enabled: true
      k8sattributes:
        filter:
          node_from_env_var: K8S_NODE_NAME
        passthrough: false
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.ip
          - sources:
              - from: resource_attribute
                name: k8s.pod.uid
          - sources:
              - from: connection
        extract:
          metadata:
            - "k8s.namespace.name"
            - "k8s.deployment.name"
            - "k8s.statefulset.name"
            - "k8s.daemonset.name"
            - "k8s.cronjob.name"
            - "k8s.job.name"
            - "k8s.node.name"
            - "k8s.pod.name"
            - "k8s.pod.uid"
            - "k8s.pod.start_time"
          labels:
            - tag_name: app.label.component
              key: app.kubernetes.io/component
              from: pod
    extensions:
      file_storage:
        directory: /var/lib/otelcol
    receivers:
      filelog:
        retry_on_failure:
          enabled: true
        start_at: end
        exclude:
        - /var/log/pods/default_elastic-otel-collector-agent*_*/elastic-opentelemetry-collector/*.log
        include:
        - /var/log/pods/*/*/*.log
        include_file_name: false
        include_file_path: true
        storage: file_storage
        operators:
        - id: container-parser
          type: container
      hostmetrics:
        collection_interval: 10s
        root_path: /hostfs
        scrapers:
          cpu:
            metrics:
              system.cpu.utilization:
                enabled: true
              system.cpu.logical.count:
                enabled: true
          memory:
            metrics:
              system.memory.utilization:
                enabled: true
          process:
            mute_process_exe_error: true
            mute_process_io_error: true
            mute_process_user_error: true
            metrics:
              process.threads:
                enabled: true
              process.open_file_descriptors:
                enabled: true
              process.memory.utilization:
                enabled: true
              process.disk.operations:
                enabled: true
          network:
          processes:
          load:
          disk:
          filesystem:
            exclude_mount_points:
              mount_points:
                - /dev/*
                - /proc/*
                - /sys/*
                - /run/k3s/containerd/*
                - /var/lib/docker/*
                - /var/lib/kubelet/*
                - /snap/*
              match_type: regexp
            exclude_fs_types:
              fs_types:
                - autofs
                - binfmt_misc
                - bpf
                - cgroup2
                - configfs
                - debugfs
                - devpts
                - devtmpfs
                - fusectl
                - hugetlbfs
                - iso9660
                - mqueue
                - nsfs
                - overlay
                - proc
                - procfs
                - pstore
                - rpc_pipefs
                - securityfs
                - selinuxfs
                - squashfs
                - sysfs
                - tracefs
              match_type: strict
      kubeletstats:
        auth_type: serviceAccount
        collection_interval: 20s
        endpoint: \${env:K8S_NODE_NAME}:10250
        node: '\${env:K8S_NODE_NAME}'
        # Required to work for all CSPs without an issue
        insecure_skip_verify: true
        k8s_api_config:
          auth_type: serviceAccount
        metrics:
          k8s.pod.cpu.node.utilization:
            enabled: true
          k8s.container.cpu_limit_utilization:
            enabled: true
          k8s.pod.cpu_limit_utilization:
            enabled: true
          k8s.container.cpu_request_utilization:
            enabled: true
          k8s.container.memory_limit_utilization:
            enabled: true
          k8s.pod.memory_limit_utilization:
            enabled: true
          k8s.container.memory_request_utilization:
            enabled: true
          k8s.node.uptime:
            enabled: true
          k8s.node.cpu.usage:
            enabled: true
          k8s.pod.cpu.usage:
            enabled: true
        extra_metadata_labels:
          - container.id

    service:
      extensions: [file_storage]
      pipelines:
        logs:
          exporters:
          - elasticsearch 
          - debug
          processors:
          - k8sattributes
          - resourcedetection/system
          - resourcedetection/eks
          - resourcedetection/gcp
          - resource/k8s
          - resource/cloud
          - attributes/k8s_logs_dataset
          receivers:
          - filelog
        metrics:
          exporters:
          - debug
          - elasticsearch
          processors:
          - k8sattributes
          - elasticinframetrics
          - resourcedetection/system
          - resourcedetection/eks
          - resourcedetection/gcp
          - resource/k8s
          - resource/cloud
          - attributes/dataset
          - resource/process
          receivers:
          - kubeletstats
          - hostmetrics
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: elastic-otel-collector-agent
  namespace: default
  labels:
    app.kubernetes.io/name: elastic-opentelemetry-collector
    app.kubernetes.io/version: "${agentVersion}"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: elastic-opentelemetry-collector
      app.kubernetes.io/version: "${agentVersion}"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: elastic-opentelemetry-collector
        app.kubernetes.io/version: "${agentVersion}"
    spec:
      serviceAccountName: elastic-otel-collector-agent
      securityContext:
        runAsUser: 0
        runAsGroup: 0
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
        - name: elastic-opentelemetry-collector
          command: [/usr/share/elastic-agent/elastic-agent]
          args: ["otel", "-c", "/etc/elastic-agent/otel.yaml"]
          image: docker.elastic.co/beats/elastic-agent:${agentVersion}
          imagePullPolicy: IfNotPresent
          env:
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: ES_ENDPOINT
              valueFrom:
                secretKeyRef:
                  key: es_endpoint
                  name: elastic-secret-otel
            - name: ES_API_KEY
              valueFrom:
                secretKeyRef:
                  key: es_api_key
                  name: elastic-secret-otel
          volumeMounts:
            - mountPath: /etc/elastic-agent/otel.yaml
              name: opentelemetry-collector-configmap
              readOnly: true
              subPath: otel.yaml
            - name: varlogpods
              mountPath: /var/log/pods
              readOnly: true
            - name: varlibdockercontainers
              mountPath: /var/lib/docker/containers
              readOnly: true
            - name: varlibotelcol
              mountPath: /var/lib/otelcol
            - name: hostfs
              mountPath: /hostfs
              readOnly: true
              mountPropagation: HostToContainer

      volumes:
        - name: opentelemetry-collector-configmap
          configMap:
            name: elastic-otel-collector-agent
            defaultMode: 0640
        - name: varlogpods
          hostPath:
            path: /var/log/pods
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
        - name: varlibotelcol
          hostPath:
            path: /var/lib/otelcol
            type: DirectoryOrCreate
        - name: hostfs
          hostPath:
            path: /`,
    type: 'download',
    fileName: 'otel-collector-k8s.yml'
  }, {
    id: 'linux',
    name: 'Linux',
    firstStepTitle: HOST_COMMAND,
    content: `arch=$(if ([[ $(arch) == "arm" || $(arch) == "aarch64" ]]); then echo "arm64"; else echo $(arch); fi)

curl --output elastic-distro-${agentVersion}-linux-$arch.tar.gz --url https://${AGENT_CDN_BASE_URL}/elastic-agent-${agentVersion}-linux-$arch.tar.gz --proto '=https' --tlsv1.2 -fOL && mkdir -p elastic-distro-${agentVersion}-linux-$arch && tar -xvf elastic-distro-${agentVersion}-linux-$arch.tar.gz -C "elastic-distro-${agentVersion}-linux-$arch" --strip-components=1 && cd elastic-distro-${agentVersion}-linux-$arch 

sudo setcap 'cap_dac_read_search=ep' ./data/elastic-agent-*/elastic-agent
        
rm ./otel.yml && cp ./otel_samples/platformlogs_hostmetrics.yml ./otel.yml && mkdir -p ./data/otelcol && sed -i 's#\\\${env:STORAGE_DIR}#'"$PWD"/data/otelcol'#g' ./otel.yml && sed -i 's#\\\${env:ELASTIC_ENDPOINT}#${setup === null || setup === void 0 ? void 0 : setup.elasticsearchUrl}#g' ./otel.yml && sed -i 's/\\\${env:ELASTIC_API_KEY}/${apiKeyData === null || apiKeyData === void 0 ? void 0 : apiKeyData.apiKeyEncoded}/g' ./otel.yml`,
    start: './otelcol --config otel.yml',
    type: 'copy'
  }, {
    id: 'mac',
    name: 'Mac',
    firstStepTitle: HOST_COMMAND,
    content: `arch=$(if [[ $(arch) == "arm64" ]]; then echo "aarch64"; else echo $(arch); fi)

curl --output elastic-distro-${agentVersion}-darwin-$arch.tar.gz --url https://${AGENT_CDN_BASE_URL}/elastic-agent-${agentVersion}-darwin-$arch.tar.gz --proto '=https' --tlsv1.2 -fOL && mkdir -p "elastic-distro-${agentVersion}-darwin-$arch" && tar -xvf elastic-distro-${agentVersion}-darwin-$arch.tar.gz -C "elastic-distro-${agentVersion}-darwin-$arch" --strip-components=1 && cd elastic-distro-${agentVersion}-darwin-$arch 
      
rm ./otel.yml && cp ./otel_samples/platformlogs_hostmetrics.yml ./otel.yml && mkdir -p ./data/otelcol  && sed -i '' 's#\\\${env:STORAGE_DIR}#'"$PWD"/data/otelcol'#g' ./otel.yml && sed -i '' 's#\\\${env:ELASTIC_ENDPOINT}#${setup === null || setup === void 0 ? void 0 : setup.elasticsearchUrl}#g' ./otel.yml && sed -i '' 's/\\\${env:ELASTIC_API_KEY}/${apiKeyData === null || apiKeyData === void 0 ? void 0 : apiKeyData.apiKeyEncoded}/g' ./otel.yml`,
    start: './otelcol --config otel.yml',
    type: 'copy'
  }];
  const [selectedTab, setSelectedTab] = _react.default.useState(installTabContents[0].id);
  const selectedContent = installTabContents.find(tab => tab.id === selectedTab);
  return /*#__PURE__*/_react.default.createElement(_eui.EuiPanel, {
    hasBorder: true
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiModalHeader, null, /*#__PURE__*/_react.default.createElement(_eui.EuiModalHeaderTitle, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    gutterSize: "l",
    alignItems: "flexStart"
  }, http && /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiPanel, {
    paddingSize: "s"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiIcon, {
    type: http === null || http === void 0 ? void 0 : http.staticAssets.getPluginAssetHref('opentelemetry.svg'),
    size: "xxl"
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: true
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    gutterSize: "m",
    direction: "column"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    gutterSize: "s",
    alignItems: "center"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, _i18n.i18n.translate('xpack.observability_onboarding.otelLogsPanel.otelLogsModalHeaderTitleLabel', {
    defaultMessage: 'OpenTelemetry'
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiBetaBadge, {
    label: _i18n.i18n.translate('xpack.observability_onboarding.otelLogsPanel.techPreviewBadge.label', {
      defaultMessage: 'Technical preview'
    }),
    size: "m",
    color: "hollow",
    tooltipContent: _i18n.i18n.translate('xpack.observability_onboarding.otelLogsPanel.techPreviewBadge.tooltip', {
      defaultMessage: 'This functionality is in technical preview and may be changed or removed completely in a future release. Elastic will work to fix any issues, but features in technical preview are not subject to the support SLA of official GA features.'
    }),
    tooltipPosition: 'right'
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    size: "s",
    color: "subdued"
  }, /*#__PURE__*/_react.default.createElement("p", null, _i18n.i18n.translate('xpack.observability_onboarding.otelLogsPanel.p.collectLogsWithOpenTelemetryLabel', {
    defaultMessage: 'Collect logs and host metrics using the Elastic distribution of the OTel collector.'
  })))))))), /*#__PURE__*/_react.default.createElement(_eui.EuiModalBody, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    direction: "column",
    gutterSize: "none"
  }, /*#__PURE__*/_react.default.createElement(_multi_integration_install_banner.MultiIntegrationInstallBanner, null), error && /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_api_key_banner.ApiKeyBanner, {
    status: apiKeyStatus,
    payload: apiKeyData,
    error: error
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiSteps, {
    steps: [{
      title: _i18n.i18n.translate('xpack.observability_onboarding.otelLogsPanel.steps.platform', {
        defaultMessage: 'Select your platform'
      }),
      children: /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
        direction: "column"
      }, /*#__PURE__*/_react.default.createElement(_eui.EuiButtonGroup, {
        legend: _i18n.i18n.translate('xpack.observability_onboarding.otelLogsPanel.choosePlatform', {
          defaultMessage: 'Choose platform'
        }),
        options: installTabContents.map(({
          id,
          name
        }) => ({
          id,
          label: name
        })),
        type: "single",
        idSelected: selectedTab,
        onChange: id => {
          setSelectedTab(id);
        }
      }), /*#__PURE__*/_react.default.createElement(_eui.EuiText, null, /*#__PURE__*/_react.default.createElement("p", null, selectedContent.firstStepTitle)), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiCodeBlock, {
        language: "sh",
        isCopyable: true,
        overflowHeight: 300
      }, selectedContent.content)), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
        align: "left"
      }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, null, selectedContent.type === 'download' ? /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
        iconType: "download",
        color: "primary",
        href: `data:application/yaml;base64,${Buffer.from(selectedContent.content, 'utf8').toString('base64')}`,
        download: selectedContent.fileName,
        target: "_blank",
        "data-test-subj": "obltOnboardingOtelDownloadConfig"
      }, _i18n.i18n.translate('xpack.observability_onboarding.installOtelCollector.configStep.downloadConfigButton', {
        defaultMessage: 'Download manifest'
      })) : /*#__PURE__*/_react.default.createElement(_eui.EuiCopy, {
        textToCopy: selectedContent.content
      }, copy => /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
        "data-test-subj": "observabilityOnboardingOtelLogsPanelButton",
        iconType: "copyClipboard",
        onClick: copy
      }, _i18n.i18n.translate('xpack.observability_onboarding.installOtelCollector.configStep.copyCommand', {
        defaultMessage: 'Copy to clipboard'
      }))))))
    }, {
      title: _i18n.i18n.translate('xpack.observability_onboarding.otelLogsPanel.steps.start', {
        defaultMessage: 'Start the collector'
      }),
      children: /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
        direction: "column"
      }, /*#__PURE__*/_react.default.createElement(_eui.EuiCallOut, {
        title: _i18n.i18n.translate('xpack.observability_onboarding.otelLogsPanel.limitationTitle', {
          defaultMessage: 'Configuration Information'
        }),
        color: "warning",
        iconType: "iInCircle"
      }, /*#__PURE__*/_react.default.createElement("p", null, _i18n.i18n.translate('xpack.observability_onboarding.otelLogsPanel.historicalDataDescription', {
        defaultMessage: 'New log messages are collected from the setup onward.'
      })), selectedTab !== 'kubernetes' && /*#__PURE__*/_react.default.createElement("p", null, _i18n.i18n.translate('xpack.observability_onboarding.otelLogsPanel.historicalDataDescription2', {
        defaultMessage: 'The default log path is /var/log/*. You can change this path in the otel.yml file if needed.'
      }))), selectedContent.prompt, selectedContent.start && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiText, null, /*#__PURE__*/_react.default.createElement("p", null, _i18n.i18n.translate('xpack.observability_onboarding.otelLogsPanel.p.startTheCollectorLabel', {
        defaultMessage: 'Run the following command to start the collector'
      }))), /*#__PURE__*/_react.default.createElement(CopyableCodeBlock, {
        content: selectedContent.start
      })))
    }, {
      title: 'Visualize your data',
      children: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiText, null, /*#__PURE__*/_react.default.createElement("p", null, _i18n.i18n.translate('xpack.observability_onboarding.otelLogsPanel.waitForTheDataLabel', {
        defaultMessage: 'After running the previous command, come back and view your data.'
      }))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, null), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
        grow: false
      }, /*#__PURE__*/_react.default.createElement(_eui.EuiImage, {
        src: http === null || http === void 0 ? void 0 : http.staticAssets.getPluginAssetHref('waterfall_screen.svg'),
        width: 160,
        alt: "Illustration",
        hasShadow: true
      })), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
        grow: true
      }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
        direction: "column",
        gutterSize: "xs"
      }, (deeplinks === null || deeplinks === void 0 ? void 0 : deeplinks.logs) && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
        grow: false
      }, /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
        size: "s"
      }, _i18n.i18n.translate('xpack.observability_onboarding.otelLogsPanel.viewAndAnalyzeYourTextLabel', {
        defaultMessage: 'View and analyze your logs'
      }))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
        grow: false
      }, /*#__PURE__*/_react.default.createElement(_eui.EuiLink, {
        "data-test-subj": "obltOnboardingExploreLogs",
        href: deeplinks.logs
      }, _i18n.i18n.translate('xpack.observability_onboarding.otelLogsPanel.exploreLogs', {
        defaultMessage: 'Open Logs Explorer'
      })))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
        size: "s"
      }), (deeplinks === null || deeplinks === void 0 ? void 0 : deeplinks.metrics) && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
        grow: false
      }, /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
        size: "s"
      }, _i18n.i18n.translate('xpack.observability_onboarding.otelLogsPanel.viewAndAnalyzeYourMetricsTextLabel', {
        defaultMessage: 'View and analyze your metrics'
      }))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
        grow: false
      }, /*#__PURE__*/_react.default.createElement(_eui.EuiLink, {
        "data-test-subj": "obltOnboardingExploreMetrics",
        href: deeplinks.metrics
      }, _i18n.i18n.translate('xpack.observability_onboarding.otelLogsPanel.exploreMetrics', {
        defaultMessage: 'Open Hosts'
      }))))))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, null), /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
        size: "xs",
        color: "subdued"
      }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
        id: "xpack.observability_onboarding.otelLogsPanel.troubleshooting",
        defaultMessage: "Find more details and troubleshooting solution in our documentation. {link}",
        values: {
          link: /*#__PURE__*/_react.default.createElement(_eui.EuiLink, {
            "data-test-subj": "observabilityOnboardingOtelLogsPanelDocumentationLink",
            href: "https://ela.st/elastic-otel",
            target: "_blank",
            external: true
          }, _i18n.i18n.translate('xpack.observability_onboarding.otelLogsPanel.documentationLink', {
            defaultMessage: 'Open documentation'
          }))
        }
      })))
    }]
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiHorizontalRule, null), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    responsive: false,
    direction: "row",
    alignItems: "center",
    gutterSize: "s",
    wrap: true
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    color: "subdued",
    size: "s"
  }, _i18n.i18n.translate('xpack.observability_onboarding.otelLogsPanel.feedbackButtons.label', {
    defaultMessage: 'Was this helpful or were there any problems?'
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
    iconType: "editorComment",
    "data-test-subj": "observabilityOnboardingOtelLogsPanelGiveFeedbackButton",
    href: feedbackUrl,
    color: "warning",
    target: "_blank"
  }, _i18n.i18n.translate('xpack.observability_onboarding.otelLogsPanel.feedbackButtons.title', {
    defaultMessage: 'Give feedback'
  })))))));
};
exports.OtelLogsPanel = OtelLogsPanel;
function CopyableCodeBlock({
  content
}) {
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiCodeBlock, {
    language: "yaml"
  }, content), /*#__PURE__*/_react.default.createElement(_eui.EuiCopy, {
    textToCopy: content
  }, copy => /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
    "data-test-subj": "observabilityOnboardingCopyableCodeBlockCopyToClipboardButton",
    iconType: "copyClipboard",
    onClick: copy
  }, _i18n.i18n.translate('xpack.observability_onboarding.installOtelCollector.configStep.copyCommand', {
    defaultMessage: 'Copy to clipboard'
  }))));
}