"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AutoDetectPanel = void 0;
var _react = _interopRequireDefault(require("react"));
var _i18n = require("@kbn/i18n");
var _eui = require("@elastic/eui");
var _public = require("@kbn/kibana-react-plugin/public");
var _locators = require("@kbn/deeplinks-observability/locators");
var _deeplinksAnalytics = require("@kbn/deeplinks-analytics");
var _get_auto_detect_command = require("./get_auto_detect_command");
var _use_onboarding_flow = require("./use_onboarding_flow");
var _progress_indicator = require("../shared/progress_indicator");
var _accordion_with_icon = require("../shared/accordion_with_icon");
var _empty_prompt = require("../shared/empty_prompt");
var _copy_to_clipboard_button = require("../shared/copy_to_clipboard_button");
var _locator_button_empty = require("../shared/locator_button_empty");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const AutoDetectPanel = () => {
  const {
    services: {
      http
    }
  } = (0, _public.useKibana)();
  const {
    status,
    data,
    error,
    refetch,
    installedIntegrations
  } = (0, _use_onboarding_flow.useOnboardingFlow)();
  const command = data ? (0, _get_auto_detect_command.getAutoDetectCommand)(data) : undefined;
  const accordionId = (0, _eui.useGeneratedHtmlId)({
    prefix: 'accordion'
  });
  if (error) {
    return /*#__PURE__*/_react.default.createElement(_empty_prompt.EmptyPrompt, {
      error: error,
      onRetryClick: refetch
    });
  }
  const registryIntegrations = installedIntegrations.filter(integration => integration.installSource === 'registry');
  const customIntegrations = installedIntegrations.filter(integration => integration.installSource === 'custom');
  return /*#__PURE__*/_react.default.createElement(_eui.EuiPanel, {
    hasBorder: true,
    paddingSize: "xl"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiSteps, {
    steps: [{
      title: _i18n.i18n.translate('xpack.observability_onboarding.autoDetectPanel.runTheCommandOnLabel', {
        defaultMessage: 'Run the command on your host'
      }),
      status: status === 'notStarted' ? 'current' : 'complete',
      children: command ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiText, null, /*#__PURE__*/_react.default.createElement("p", null, _i18n.i18n.translate('xpack.observability_onboarding.autoDetectPanel.p.wellScanYourHostLabel', {
        defaultMessage: "We'll scan your host for logs and metrics, including:"
      }))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
        size: "s"
      }), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
        gutterSize: "s"
      }, ['Apache', 'Docker', 'Nginx', 'System', 'Custom .log files'].map(item => /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
        key: item,
        grow: false
      }, /*#__PURE__*/_react.default.createElement(_eui.EuiBadge, {
        color: "hollow"
      }, item)))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, null), /*#__PURE__*/_react.default.createElement(_eui.EuiCodeBlock, {
        paddingSize: "m",
        language: "text"
      }, command), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, null), /*#__PURE__*/_react.default.createElement(_copy_to_clipboard_button.CopyToClipboardButton, {
        textToCopy: command,
        fill: status === 'notStarted'
      })) : /*#__PURE__*/_react.default.createElement(_eui.EuiSkeletonText, {
        lines: 6
      })
    }, {
      title: _i18n.i18n.translate('xpack.observability_onboarding.autoDetectPanel.visualizeYourDataLabel', {
        defaultMessage: 'Visualize your data'
      }),
      status: status === 'dataReceived' ? 'complete' : status === 'awaitingData' || status === 'inProgress' ? 'current' : 'incomplete',
      children: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, status === 'dataReceived' ? /*#__PURE__*/_react.default.createElement(_progress_indicator.ProgressIndicator, {
        iconType: "cheer",
        title: _i18n.i18n.translate('xpack.observability_onboarding.autoDetectPanel.yourDataIsReadyToExploreLabel', {
          defaultMessage: 'Your data is ready to explore!'
        }),
        isLoading: false
      }) : status === 'awaitingData' ? /*#__PURE__*/_react.default.createElement(_progress_indicator.ProgressIndicator, {
        title: _i18n.i18n.translate('xpack.observability_onboarding.autoDetectPanel.installingElasticAgentFlexItemLabel', {
          defaultMessage: 'Waiting for data to arrive...'
        })
      }) : status === 'inProgress' ? /*#__PURE__*/_react.default.createElement(_progress_indicator.ProgressIndicator, {
        title: _i18n.i18n.translate('xpack.observability_onboarding.autoDetectPanel.lookingForLogFilesFlexItemLabel', {
          defaultMessage: 'Waiting for installation to complete...'
        })
      }) : null, (status === 'awaitingData' || status === 'dataReceived') && installedIntegrations.length > 0 ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, null), registryIntegrations.map(integration => /*#__PURE__*/_react.default.createElement(_accordion_with_icon.AccordionWithIcon, {
        key: integration.pkgName,
        id: `${accordionId}_${integration.pkgName}`,
        iconType: "desktop",
        title: _i18n.i18n.translate('xpack.observability_onboarding.autoDetectPanel.h3.getStartedWithNginxLabel', {
          defaultMessage: 'Get started with {title} logs',
          values: {
            title: integration.title
          }
        }),
        isDisabled: status !== 'dataReceived',
        initialIsOpen: true
      }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
        responsive: false
      }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
        grow: false
      }, status === 'dataReceived' ? /*#__PURE__*/_react.default.createElement(_eui.EuiImage, {
        src: http.staticAssets.getPluginAssetHref('charts_screen.svg'),
        width: 162,
        height: 117,
        alt: "",
        hasShadow: true
      }) : /*#__PURE__*/_react.default.createElement(_eui.EuiSkeletonRectangle, {
        width: 162,
        height: 117
      })), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement("ul", null, integration.kibanaAssets.filter(asset => asset.type === 'dashboard').map(dashboard => /*#__PURE__*/_react.default.createElement("li", {
        key: dashboard.id
      }, /*#__PURE__*/_react.default.createElement(_locator_button_empty.LocatorButtonEmpty, {
        locator: _deeplinksAnalytics.DASHBOARD_APP_LOCATOR,
        params: {
          dashboardId: dashboard.id
        },
        target: "_blank",
        iconType: "dashboardApp",
        isDisabled: status !== 'dataReceived',
        flush: "left",
        size: "s"
      }, dashboard.attributes.title)))))))), customIntegrations.length > 0 && /*#__PURE__*/_react.default.createElement(_accordion_with_icon.AccordionWithIcon, {
        id: `${accordionId}_custom`,
        iconType: "documents",
        title: _i18n.i18n.translate('xpack.observability_onboarding.autoDetectPanel.h3.getStartedWithlogLabel', {
          defaultMessage: 'Get started with custom .log files'
        }),
        isDisabled: status !== 'dataReceived',
        initialIsOpen: true
      }, /*#__PURE__*/_react.default.createElement("ul", null, customIntegrations.map(integration => integration.dataStreams.map(datastream => /*#__PURE__*/_react.default.createElement("li", {
        key: `${integration.pkgName}/${datastream.dataset}`
      }, /*#__PURE__*/_react.default.createElement(_locator_button_empty.LocatorButtonEmpty, {
        locator: _locators.SINGLE_DATASET_LOCATOR_ID,
        params: {
          integration: integration.pkgName,
          dataset: datastream.dataset
        },
        target: "_blank",
        iconType: "document",
        isDisabled: status !== 'dataReceived',
        flush: "left",
        size: "s"
      }, integration.pkgName))))))) : null)
    }]
  }));
};
exports.AutoDetectPanel = AutoDetectPanel;