"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCustomCardsForCategory = useCustomCardsForCategory;
var _public = require("@kbn/kibana-react-plugin/public");
var _reactRouterDom = require("react-router-dom");
var _reactRouterDomV5Compat = require("react-router-dom-v5-compat");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function toFeaturedCard(name) {
  return {
    type: 'featured',
    name
  };
}
function useCustomCardsForCategory(createCollectionCardHandler, category) {
  var _http$staticAssets$ge, _ref, _http$staticAssets$ge2, _ref2, _getUrlForApp, _http$staticAssets$ge3;
  const history = (0, _reactRouterDom.useHistory)();
  const location = (0, _reactRouterDomV5Compat.useLocation)();
  const {
    services: {
      application,
      http,
      context: {
        isServerless
      }
    }
  } = (0, _public.useKibana)();
  const getUrlForApp = application === null || application === void 0 ? void 0 : application.getUrlForApp;
  const {
    href: systemLogsUrl
  } = (0, _public.reactRouterNavigate)(history, `/systemLogs/${location.search}`);
  const {
    href: customLogsUrl
  } = (0, _public.reactRouterNavigate)(history, `/customLogs/${location.search}`);
  const {
    href: otelLogsUrl
  } = (0, _public.reactRouterNavigate)(history, `/otel-logs/${location.search}`);
  const otelCard = {
    id: 'otel-logs',
    type: 'virtual',
    release: 'preview',
    title: 'OpenTelemetry',
    description: 'Collect Logs and host metrics using the Elastic distribution of the OpenTelemetry Collector',
    name: 'custom-logs-virtual',
    categories: ['observability'],
    icons: [{
      type: 'svg',
      src: (_http$staticAssets$ge = http === null || http === void 0 ? void 0 : http.staticAssets.getPluginAssetHref('opentelemetry.svg')) !== null && _http$staticAssets$ge !== void 0 ? _http$staticAssets$ge : ''
    }],
    url: otelLogsUrl,
    version: '',
    integration: ''
  };
  switch (category) {
    case 'apm':
      return [{
        id: 'apm-virtual',
        type: 'virtual',
        title: 'Elastic APM',
        description: 'Collect distributed traces from your applications with Elastic APM',
        name: 'apm',
        categories: ['observability'],
        icons: [{
          type: 'eui',
          src: 'apmApp'
        }],
        url: (_ref = `${getUrlForApp === null || getUrlForApp === void 0 ? void 0 : getUrlForApp('apm')}/onboarding`) !== null && _ref !== void 0 ? _ref : '',
        version: '',
        integration: ''
      }, {
        id: 'otel-virtual',
        type: 'virtual',
        title: 'OpenTelemetry',
        description: 'Collect distributed traces with OpenTelemetry',
        name: 'otel',
        categories: ['observability'],
        icons: [{
          type: 'svg',
          src: (_http$staticAssets$ge2 = http === null || http === void 0 ? void 0 : http.staticAssets.getPluginAssetHref('opentelemetry.svg')) !== null && _http$staticAssets$ge2 !== void 0 ? _http$staticAssets$ge2 : ''
        }],
        url: (_ref2 = `${getUrlForApp === null || getUrlForApp === void 0 ? void 0 : getUrlForApp('apm')}/onboarding?agent=openTelemetry`) !== null && _ref2 !== void 0 ? _ref2 : '',
        version: '',
        integration: ''
      }, {
        id: 'synthetics-virtual',
        type: 'virtual',
        title: 'Synthetic monitor',
        description: 'Monitor endpoints, pages, and user journeys',
        name: 'synthetics',
        categories: ['observability'],
        icons: [{
          type: 'eui',
          src: 'logoUptime'
        }],
        url: (_getUrlForApp = getUrlForApp === null || getUrlForApp === void 0 ? void 0 : getUrlForApp('synthetics')) !== null && _getUrlForApp !== void 0 ? _getUrlForApp : '',
        version: '',
        integration: ''
      }];
    case 'infra':
      return [toFeaturedCard('kubernetes'), toFeaturedCard('docker'), isServerless ? toFeaturedCard('prometheus') : otelCard, {
        id: 'azure-virtual',
        type: 'virtual',
        title: 'Azure',
        description: 'Collect logs and metrics from Microsoft Azure',
        name: 'azure',
        categories: ['observability'],
        icons: [],
        url: 'https://azure.com',
        version: '',
        integration: '',
        isCollectionCard: true,
        onCardClick: createCollectionCardHandler('azure')
      }, {
        id: 'aws-virtual',
        type: 'virtual',
        title: 'AWS',
        description: 'Collect logs and metrics from Amazon Web Services (AWS)',
        name: 'aws',
        categories: ['observability'],
        icons: [],
        url: 'https://aws.com',
        version: '',
        integration: '',
        isCollectionCard: true,
        onCardClick: createCollectionCardHandler('aws')
      }, {
        id: 'gcp-virtual',
        type: 'virtual',
        title: 'Google Cloud Platform',
        description: 'Collect logs and metrics from Google Cloud Platform',
        name: 'gcp',
        categories: ['observability'],
        icons: [],
        url: '',
        version: '',
        integration: '',
        isCollectionCard: true,
        onCardClick: createCollectionCardHandler('gcp')
      }];
    case 'logs':
      return [{
        id: 'system-logs',
        type: 'virtual',
        title: 'Stream host system logs',
        description: 'Collect system logs from your machine or server',
        name: 'system-logs-virtual',
        categories: ['observability'],
        icons: [{
          type: 'svg',
          src: (_http$staticAssets$ge3 = http === null || http === void 0 ? void 0 : http.staticAssets.getPluginAssetHref('system.svg')) !== null && _http$staticAssets$ge3 !== void 0 ? _http$staticAssets$ge3 : ''
        }],
        url: systemLogsUrl,
        version: '',
        integration: ''
      }, {
        id: 'custom-logs',
        type: 'virtual',
        title: 'Stream log files',
        description: 'Stream any logs into Elastic in a simple way and explore their data',
        name: 'custom-logs-virtual',
        categories: ['observability'],
        icons: [{
          type: 'eui',
          src: 'filebeatApp'
        }],
        url: customLogsUrl,
        version: '',
        integration: ''
      }, isServerless ? toFeaturedCard('nginx') : otelCard, {
        id: 'azure-logs-virtual',
        type: 'virtual',
        title: 'Azure',
        description: 'Collect logs from Microsoft Azure',
        name: 'azure',
        categories: ['observability'],
        icons: [],
        url: 'https://azure.com',
        version: '',
        integration: '',
        isCollectionCard: true,
        onCardClick: createCollectionCardHandler('azure')
      }, {
        id: 'aws-logs-virtual',
        type: 'virtual',
        title: 'AWS',
        description: 'Collect logs from Amazon Web Services (AWS)',
        name: 'aws',
        categories: ['observability'],
        icons: [],
        url: 'https://aws.com',
        version: '',
        integration: '',
        isCollectionCard: true,
        onCardClick: createCollectionCardHandler('aws')
      }, {
        id: 'gcp-logs-virtual',
        type: 'virtual',
        title: 'Google Cloud Platform',
        description: 'Collect logs from Google Cloud Platform',
        name: 'gcp',
        categories: ['observability'],
        icons: [],
        url: '',
        version: '',
        integration: '',
        isCollectionCard: true,
        onCardClick: createCollectionCardHandler('gcp')
      }];
    default:
      return undefined;
  }
}