"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OnboardingFlowForm = void 0;
var _i18n = require("@kbn/i18n");
var _react = _interopRequireWildcard(require("react"));
var _i18nReact = require("@kbn/i18n-react");
var _public = require("@kbn/kibana-react-plugin/public");
var _eui = require("@elastic/eui");
var _reactRouterDomV5Compat = require("react-router-dom-v5-compat");
var _packages_list = require("../packages_list");
var _use_custom_margin = require("../shared/use_custom_margin");
var _use_custom_cards_for_category = require("./use_custom_cards_for_category");
var _use_virtual_search_results = require("./use_virtual_search_results");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const OnboardingFlowForm = () => {
  var _searchParams$get;
  const options = [{
    id: 'logs',
    label: _i18n.i18n.translate('xpack.observability_onboarding.experimentalOnboardingFlow.euiCheckableCard.collectAndAnalyzeMyLabel', {
      defaultMessage: 'Collect and analyze logs'
    }),
    description: _i18n.i18n.translate('xpack.observability_onboarding.onboardingFlowForm.detectPatternsAndOutliersLabel', {
      defaultMessage: 'Detect patterns, gain insights from logs, get alerted when surpassing error thresholds'
    }),
    logos: ['azure', 'aws', 'nginx', 'gcp'],
    showIntegrationsBadge: true
  }, {
    id: 'apm',
    label: _i18n.i18n.translate('xpack.observability_onboarding.experimentalOnboardingFlow.euiCheckableCard.monitorMyApplicationPerformanceLabel', {
      defaultMessage: 'Monitor my application performance'
    }),
    description: _i18n.i18n.translate('xpack.observability_onboarding.onboardingFlowForm.captureAndAnalyzeDistributedLabel', {
      defaultMessage: 'Catch application problems, get alerted on performance issues or SLO breaches, expedite root cause analysis and remediation'
    }),
    logos: ['opentelemetry', 'java', 'javascript', 'dotnet']
  }, {
    id: 'infra',
    label: _i18n.i18n.translate('xpack.observability_onboarding.experimentalOnboardingFlow.euiCheckableCard.monitorMyInfrastructureLabel', {
      defaultMessage: 'Monitor infrastructure'
    }),
    description: _i18n.i18n.translate('xpack.observability_onboarding.onboardingFlowForm.builtOnPowerfulElasticsearchLabel', {
      defaultMessage: 'Check my systemâ€™s health, get alerted on performance issues or SLO breaches, expedite root cause analysis and remediation'
    }),
    logos: ['kubernetes', 'prometheus', 'docker', 'opentelemetry'],
    showIntegrationsBadge: true
  }];
  const customMargin = (0, _use_custom_margin.useCustomMargin)();
  const radioGroupId = (0, _eui.useGeneratedHtmlId)({
    prefix: 'onboardingCategory'
  });
  const [searchParams, setSearchParams] = (0, _reactRouterDomV5Compat.useSearchParams)();
  const suggestedPackagesRef = (0, _react.useRef)(null);
  const searchResultsRef = (0, _react.useRef)(null);
  const [integrationSearch, setIntegrationSearch] = (0, _react.useState)((_searchParams$get = searchParams.get('search')) !== null && _searchParams$get !== void 0 ? _searchParams$get : '');
  const {
    euiTheme
  } = (0, _eui.useEuiTheme)();
  (0, _react.useEffect)(() => {
    var _searchParams$get2;
    const searchParam = (_searchParams$get2 = searchParams.get('search')) !== null && _searchParams$get2 !== void 0 ? _searchParams$get2 : '';
    if (integrationSearch === searchParam) return;
    const entries = Object.fromEntries(searchParams.entries());
    if (integrationSearch) {
      entries.search = integrationSearch;
    } else {
      delete entries.search;
    }
    setSearchParams(entries, {
      replace: true
    });
  }, [integrationSearch, searchParams, setSearchParams]);
  const createCollectionCardHandler = (0, _react.useCallback)(query => () => {
    setIntegrationSearch(query);
    if (searchResultsRef.current) {
      setTimeout(scrollIntoViewWithOffset, 40,
      // Adding slight delay to ensure DOM is updated before calculating scroll position
      searchResultsRef.current, parseInt(euiTheme.size.l, 10));
    }
  }, [] // eslint-disable-line react-hooks/exhaustive-deps
  );
  const customCards = (0, _use_custom_cards_for_category.useCustomCardsForCategory)(createCollectionCardHandler, searchParams.get('category'));
  const virtualSearchResults = (0, _use_virtual_search_results.useVirtualSearchResults)();
  let isSelectingCategoryWithKeyboard = false;
  return /*#__PURE__*/_react.default.createElement(_eui.EuiPanel, {
    hasBorder: true,
    paddingSize: "xl"
  }, /*#__PURE__*/_react.default.createElement(TitleWithIcon, {
    iconType: "createSingleMetricJob",
    title: _i18n.i18n.translate('xpack.observability_onboarding.experimentalOnboardingFlow.strong.startCollectingYourDataLabel', {
      defaultMessage: 'What do you want to monitor?'
    })
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    css: {
      ...customMargin,
      maxWidth: '560px'
    },
    gutterSize: "l",
    direction: "column"
  }, options.map(option => {
    var _option$logos;
    return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
      key: option.id,
      "data-test-subj": `observabilityOnboardingUseCaseCard-${option.id}`
    }, /*#__PURE__*/_react.default.createElement(_eui.EuiCheckableCard, {
      id: `${radioGroupId}_${option.id}`,
      name: radioGroupId,
      label: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
        css: {
          fontWeight: 'bold'
        }
      }, option.label), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
        size: "s"
      }), /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
        color: "subdued",
        size: "s"
      }, option.description), (option.logos || option.showIntegrationsBadge) && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
        size: "m"
      }), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
        gutterSize: "s",
        responsive: false
      }, (_option$logos = option.logos) === null || _option$logos === void 0 ? void 0 : _option$logos.map(logo => /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
        key: logo,
        grow: false
      }, /*#__PURE__*/_react.default.createElement(LogoIcon, {
        logo: logo
      }))), option.showIntegrationsBadge && /*#__PURE__*/_react.default.createElement(_eui.EuiBadge, {
        color: "hollow"
      }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
        defaultMessage: "+ Integrations",
        id: "xpack.observability_onboarding.experimentalOnboardingFlow.form.addIntegrations",
        description: "A badge indicating that the user can add additional observability integrations to their deployment via this option"
      }))))),
      checked: option.id === searchParams.get('category')
      /**
       * onKeyDown and onKeyUp handlers disable
       * scrolling to the category items when user
       * changes the selected category using keyboard,
       * which prevents our custom scroll behavior
       * from conflicting with browser's native one to
       * put keyboard-focused item into the view.
       */,
      onKeyDown: () => isSelectingCategoryWithKeyboard = true,
      onKeyUp: () => isSelectingCategoryWithKeyboard = false,
      onChange: () => {
        setIntegrationSearch('');
        setSearchParams({
          category: option.id
        }, {
          replace: true
        });
      },
      onClick: () => {
        if (!isSelectingCategoryWithKeyboard && suggestedPackagesRef.current) {
          setTimeout(scrollIntoViewWithOffset, 40,
          // Adding slight delay to ensure DOM is updated before calculating scroll position
          suggestedPackagesRef.current, parseInt(euiTheme.size.l, 10));
        }
      }
    }));
  })), /*#__PURE__*/_react.default.createElement("div", {
    hidden: !searchParams.get('category') || !customCards
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, null), /*#__PURE__*/_react.default.createElement("div", {
    ref: suggestedPackagesRef
  }, /*#__PURE__*/_react.default.createElement(TitleWithIcon, {
    iconType: "savedObjectsApp",
    title: _i18n.i18n.translate('xpack.observability_onboarding.experimentalOnboardingFlow.whatTypeOfResourceLabel', {
      defaultMessage: 'What type of resource are you monitoring?'
    })
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  }), /*#__PURE__*/_react.default.createElement(_packages_list.OnboardingFlowPackageList, {
    customCards: customCards,
    flowSearch: integrationSearch,
    flowCategory: searchParams.get('category')
  })), /*#__PURE__*/_react.default.createElement("div", {
    ref: searchResultsRef
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    css: customMargin,
    size: "s",
    color: "subdued"
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.observability_onboarding.experimentalOnboardingFlow.form.searchPromptText",
    defaultMessage: "Not seeing yours? Search through our 130 ways of ingesting data:"
  })), /*#__PURE__*/_react.default.createElement(_packages_list.OnboardingFlowPackageList, {
    showSearchBar: true,
    searchQuery: integrationSearch,
    flowSearch: integrationSearch,
    setSearchQuery: setIntegrationSearch,
    flowCategory: searchParams.get('category'),
    customCards: customCards === null || customCards === void 0 ? void 0 : customCards.filter(
    // Filter out collection cards and regular integrations that show up via search anyway
    card => card.type === 'virtual' && !card.isCollectionCard).concat(virtualSearchResults),
    joinCardLists: true
  }))));
};
exports.OnboardingFlowForm = OnboardingFlowForm;
const TitleWithIcon = ({
  title,
  iconType
}) => /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
  responsive: false,
  gutterSize: "m",
  alignItems: "center"
}, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
  grow: false
}, /*#__PURE__*/_react.default.createElement(_eui.EuiAvatar, {
  size: "l",
  name: title,
  iconType: iconType,
  iconSize: "l",
  color: "subdued"
})), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiTitle, {
  size: "s"
}, /*#__PURE__*/_react.default.createElement("strong", null, title))));
function scrollIntoViewWithOffset(element, offset = 0) {
  // Fixed header in Kibana is different height between serverless and stateful so need to calculate dynamically.
  const fixedHeaders = document.querySelectorAll('#globalHeaderBars [data-fixed-header=true]');
  fixedHeaders.forEach(header => {
    offset += header.getBoundingClientRect().height;
  });
  window.scrollTo({
    behavior: 'smooth',
    top: element.getBoundingClientRect().top - document.body.getBoundingClientRect().top - offset
  });
}
function useIconForLogo(logo) {
  const {
    services: {
      http
    }
  } = (0, _public.useKibana)();
  switch (logo) {
    case 'aws':
      return 'logoAWS';
    case 'azure':
      return 'logoAzure';
    case 'gcp':
      return 'logoGCP';
    case 'kubernetes':
      return 'logoKubernetes';
    case 'nginx':
      return 'logoNginx';
    case 'prometheus':
      return 'logoPrometheus';
    case 'docker':
      return 'logoDocker';
    default:
      return http === null || http === void 0 ? void 0 : http.staticAssets.getPluginAssetHref(`${logo}.svg`);
  }
}
function LogoIcon({
  logo
}) {
  const iconType = useIconForLogo(logo);
  if (iconType) {
    return /*#__PURE__*/_react.default.createElement(_eui.EuiIcon, {
      type: iconType
    });
  }
  return null;
}