"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logsOnboardingRouteRepository = void 0;
var t = _interopRequireWildcard(require("io-ts"));
var _create_observability_onboarding_server_route = require("../create_observability_onboarding_server_route");
var _get_fallback_urls = require("../../lib/get_fallback_urls");
var _get_agent_version = require("../../lib/get_agent_version");
var _has_log_monitoring_privileges = require("./api_key/has_log_monitoring_privileges");
var _state = require("../../lib/state");
var _create_shipper_api_key = require("./api_key/create_shipper_api_key");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const logMonitoringPrivilegesRoute = (0, _create_observability_onboarding_server_route.createObservabilityOnboardingServerRoute)({
  endpoint: 'GET /internal/observability_onboarding/logs/setup/privileges',
  options: {
    tags: []
  },
  handler: async resources => {
    const {
      context
    } = resources;
    const {
      elasticsearch: {
        client
      }
    } = await context.core;
    const hasPrivileges = await (0, _has_log_monitoring_privileges.hasLogMonitoringPrivileges)(client.asCurrentUser);
    return {
      hasPrivileges
    };
  }
});
const installShipperSetupRoute = (0, _create_observability_onboarding_server_route.createObservabilityOnboardingServerRoute)({
  endpoint: 'GET /internal/observability_onboarding/logs/setup/environment',
  options: {
    tags: []
  },
  async handler(resources) {
    var _plugins$cloud, _plugins$cloud2, _plugins$cloud2$setup, _plugins$cloud3, _plugins$cloud3$setup;
    const {
      core,
      plugins,
      kibanaVersion,
      services: {
        esLegacyConfigService
      }
    } = resources;
    const fleetPluginStart = await plugins.fleet.start();
    const elasticAgentVersion = await (0, _get_agent_version.getAgentVersion)(fleetPluginStart, kibanaVersion);
    const kibanaUrl = (0, _get_fallback_urls.getKibanaUrl)(core.setup, (_plugins$cloud = plugins.cloud) === null || _plugins$cloud === void 0 ? void 0 : _plugins$cloud.setup);
    const scriptDownloadUrl = new URL(core.setup.http.staticAssets.getPluginAssetHref('standalone_agent_setup.sh'), kibanaUrl).toString();
    const apiEndpoint = new URL(`${kibanaUrl}/internal/observability_onboarding`).toString();
    const elasticsearchUrl = (_plugins$cloud2 = plugins.cloud) !== null && _plugins$cloud2 !== void 0 && (_plugins$cloud2$setup = _plugins$cloud2.setup) !== null && _plugins$cloud2$setup !== void 0 && _plugins$cloud2$setup.elasticsearchUrl ? [(_plugins$cloud3 = plugins.cloud) === null || _plugins$cloud3 === void 0 ? void 0 : (_plugins$cloud3$setup = _plugins$cloud3.setup) === null || _plugins$cloud3$setup === void 0 ? void 0 : _plugins$cloud3$setup.elasticsearchUrl] : await (0, _get_fallback_urls.getFallbackESUrl)(esLegacyConfigService);
    return {
      apiEndpoint,
      elasticsearchUrl,
      scriptDownloadUrl,
      elasticAgentVersion
    };
  }
});
const createAPIKeyRoute = (0, _create_observability_onboarding_server_route.createObservabilityOnboardingServerRoute)({
  endpoint: 'POST /internal/observability_onboarding/otel/api_key',
  options: {
    tags: []
  },
  params: t.type({}),
  async handler(resources) {
    const {
      context
    } = resources;
    const {
      elasticsearch: {
        client
      }
    } = await context.core;
    const {
      encoded: apiKeyEncoded
    } = await (0, _create_shipper_api_key.createShipperApiKey)(client.asCurrentUser, 'otel logs');
    return {
      apiKeyEncoded
    };
  }
});
const createFlowRoute = (0, _create_observability_onboarding_server_route.createObservabilityOnboardingServerRoute)({
  endpoint: 'POST /internal/observability_onboarding/logs/flow',
  options: {
    tags: []
  },
  params: t.type({
    body: t.intersection([t.type({
      name: t.string
    }), t.type({
      type: t.union([t.literal('logFiles'), t.literal('systemLogs')])
    }), t.partial({
      state: t.record(t.string, t.unknown)
    })])
  }),
  async handler(resources) {
    const {
      context,
      params: {
        body: {
          name,
          type,
          state
        }
      },
      core,
      request
    } = resources;
    const coreStart = await core.start();
    const {
      elasticsearch: {
        client
      }
    } = await context.core;
    const {
      encoded: apiKeyEncoded
    } = await (0, _create_shipper_api_key.createShipperApiKey)(client.asCurrentUser, name);
    const generatedState = type === 'systemLogs' ? {
      namespace: 'default'
    } : state;
    const savedObjectsClient = coreStart.savedObjects.getScopedClient(request);
    const {
      id
    } = await (0, _state.saveObservabilityOnboardingFlow)({
      savedObjectsClient,
      observabilityOnboardingState: {
        type,
        state: generatedState,
        progress: {}
      }
    });
    return {
      apiKeyEncoded,
      onboardingId: id
    };
  }
});
const logsOnboardingRouteRepository = exports.logsOnboardingRouteRepository = {
  ...logMonitoringPrivilegesRoute,
  ...installShipperSetupRoute,
  ...createFlowRoute,
  ...createAPIKeyRoute
};