"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputControlDeprecationBadge = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _public = require("@kbn/embeddable-plugin/public");
var _i18n = require("@kbn/i18n");
var _presentationPublishing = require("@kbn/presentation-publishing");
var _public2 = require("@kbn/visualizations-plugin/public");
var _input_control_vis_type = require("./input_control_vis_type");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

const ACTION_DEPRECATION_BADGE = 'ACTION_INPUT_CONTROL_DEPRECATION_BADGE';
const isApiCompatible = api => Boolean((0, _presentationPublishing.apiCanAccessViewMode)(api) && (0, _public2.apiHasVisualizeConfig)(api));
const compatibilityCheck = api => {
  return isApiCompatible(api) && (0, _presentationPublishing.getInheritedViewMode)(api) === _public.ViewMode.EDIT && api.getVis().type.name === _input_control_vis_type.INPUT_CONTROL_VIS_TYPE;
};
class InputControlDeprecationBadge {
  constructor() {
    (0, _defineProperty2.default)(this, "id", ACTION_DEPRECATION_BADGE);
    (0, _defineProperty2.default)(this, "type", ACTION_DEPRECATION_BADGE);
    (0, _defineProperty2.default)(this, "disabled", true);
  }
  getDisplayName() {
    return _i18n.i18n.translate('inputControl.deprecationBadgeAction.deprecationBadgeLabel', {
      defaultMessage: 'Deprecated'
    });
  }
  getIconType() {
    return 'warning';
  }
  getDisplayNameTooltip() {
    return _i18n.i18n.translate('inputControl.deprecationBadgeAction.deprecationWarningDescription', {
      defaultMessage: 'Input controls are deprecated and will be removed in a future release. Use the new Controls to filter and interact with your dashboard data.'
    });
  }
  async isCompatible({
    embeddable
  }) {
    return compatibilityCheck(embeddable);
  }
  couldBecomeCompatible({
    embeddable
  }) {
    return isApiCompatible(embeddable) && embeddable.getVis().type.name === _input_control_vis_type.INPUT_CONTROL_VIS_TYPE;
  }
  subscribeToCompatibilityChanges({
    embeddable
  }, onChange) {
    var _getViewModeSubject;
    if (!isApiCompatible(embeddable)) return;
    return (_getViewModeSubject = (0, _presentationPublishing.getViewModeSubject)(embeddable)) === null || _getViewModeSubject === void 0 ? void 0 : _getViewModeSubject.subscribe(() => {
      onChange(compatibilityCheck(embeddable), this);
    });
  }
  async execute() {
    // do nothing
    return;
  }
}
exports.InputControlDeprecationBadge = InputControlDeprecationBadge;