"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSearch = void 0;
var _react = require("react");
var _public = require("@kbn/data-plugin/public");
var _search_utils = require("../application/utils/search_utils");
var _common = require("../application/url_state/common");
var _use_aiops_app_context = require("./use_aiops_app_context");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const useSearch = ({
  dataView,
  savedSearch
}, aiopsListState, readOnly = false) => {
  const {
    uiSettings,
    data: {
      query: {
        filterManager
      }
    }
  } = (0, _use_aiops_app_context.useAiopsAppContext)();
  const searchData = (0, _react.useMemo)(() => (0, _search_utils.getEsQueryFromSavedSearch)({
    dataView,
    uiSettings,
    savedSearch,
    filterManager
  }), [dataView, uiSettings, savedSearch, filterManager]);
  return (0, _react.useMemo)(() => {
    if (searchData === undefined || aiopsListState && aiopsListState.searchString !== '') {
      if (aiopsListState !== null && aiopsListState !== void 0 && aiopsListState.filters && readOnly === false) {
        const globalFilters = filterManager === null || filterManager === void 0 ? void 0 : filterManager.getGlobalFilters();
        if (filterManager) filterManager.setFilters(aiopsListState.filters);
        if (globalFilters) filterManager === null || filterManager === void 0 ? void 0 : filterManager.addFilters(globalFilters);
      }

      // In cases where the url state contains only a KQL query and not yet
      // the transformed ES query we regenerate it. This may happen if we restore
      // url state on page load coming from another page like ML's Single Metric Viewer.
      let searchQuery = aiopsListState === null || aiopsListState === void 0 ? void 0 : aiopsListState.searchQuery;
      const query = {
        language: aiopsListState === null || aiopsListState === void 0 ? void 0 : aiopsListState.searchQueryLanguage,
        query: aiopsListState === null || aiopsListState === void 0 ? void 0 : aiopsListState.searchString
      };
      if ((aiopsListState.searchString !== '' || Array.isArray(aiopsListState.filters) && aiopsListState.filters.length > 0) && ((0, _common.isDefaultSearchQuery)(searchQuery) || searchQuery === undefined) && (0, _public.isQuery)(query)) {
        searchQuery = (0, _search_utils.createMergedEsQuery)(query, aiopsListState.filters, dataView, uiSettings);
      }
      return {
        ...((0, _common.isDefaultSearchQuery)(searchQuery) ? {} : {
          searchQuery
        }),
        searchString: aiopsListState === null || aiopsListState === void 0 ? void 0 : aiopsListState.searchString,
        searchQueryLanguage: aiopsListState === null || aiopsListState === void 0 ? void 0 : aiopsListState.searchQueryLanguage
      };
    } else {
      return {
        searchQuery: searchData.searchQuery,
        searchString: searchData.searchString,
        searchQueryLanguage: searchData.queryLanguage
      };
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [JSON.stringify([searchData, aiopsListState])]);
};
exports.useSearch = useSearch;