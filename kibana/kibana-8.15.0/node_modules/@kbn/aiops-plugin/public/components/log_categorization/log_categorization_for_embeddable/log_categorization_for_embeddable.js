"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.LogCategorizationEmbeddable = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _esQuery = require("@kbn/es-query");
var _mlUrlState = require("@kbn/ml-url-state");
var _constants = require("@kbn/aiops-common/constants");
var _react2 = require("@emotion/react");
var _use_table_state = require("@kbn/ml-in-memory-table/hooks/use_table_state");
var _log_pattern_analysis = require("../../../application/url_state/log_pattern_analysis");
var _search_utils = require("../../../application/utils/search_utils");
var _use_data = require("../../../hooks/use_data");
var _use_search = require("../../../hooks/use_search");
var _use_aiops_app_context = require("../../../hooks/use_aiops_app_context");
var _use_categorize_request = require("../use_categorize_request");
var _category_table = require("../category_table");
var _information_text = require("../information_text");
var _loading_categorization = require("../loading_categorization");
var _use_validate_category_field = require("../use_validate_category_field");
var _category_validation_callout = require("../category_validation_callout");
var _use_minimum_time_range = require("./use_minimum_time_range");
var _utils = require("../utils");
var _use_open_in_discover = require("../category_table/use_open_in_discover");
var _discover_tabs = require("./discover_tabs");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const BAR_TARGET = 20;
const LogCategorizationEmbeddable = ({
  input,
  renderViewModeToggle
}) => {
  var _documentStats$docume2, _data$categories$leng, _data$categories;
  const {
    notifications: {
      toasts
    },
    data: {
      query: {
        getState,
        filterManager
      }
    },
    uiSettings,
    embeddingOrigin
  } = (0, _use_aiops_app_context.useAiopsAppContext)();
  const tablePadding = (0, _eui.useEuiPaddingSize)('xs');
  const {
    dataView,
    savedSearch
  } = input;
  const {
    runValidateFieldRequest,
    cancelRequest: cancelValidationRequest
  } = (0, _use_validate_category_field.useValidateFieldRequest)();
  const {
    getMinimumTimeRange,
    cancelRequest: cancelWiderTimeRangeRequest,
    minimumTimeRangeOption,
    setMinimumTimeRangeOption
  } = (0, _use_minimum_time_range.useMinimumTimeRange)();
  const {
    filters,
    query
  } = (0, _react.useMemo)(() => getState(), [getState]);
  const mounted = (0, _react.useRef)(false);
  const {
    runCategorizeRequest,
    cancelRequest: cancelCategorizationRequest,
    randomSampler
  } = (0, _use_categorize_request.useCategorizeRequest)();
  const [stateFromUrl] = (0, _mlUrlState.usePageUrlState)('logCategorization', (0, _log_pattern_analysis.getDefaultLogCategorizationAppState)({
    searchQuery: (0, _search_utils.createMergedEsQuery)(query, filters, dataView, uiSettings)
  }));
  const [highlightedCategory, setHighlightedCategory] = (0, _react.useState)(null);
  const [selectedCategories, setSelectedCategories] = (0, _react.useState)([]);
  const [selectedField, setSelectedField] = (0, _react.useState)(null);
  const [fields, setFields] = (0, _react.useState)([]);
  const [currentDocumentStatsHash, setCurrentDocumentStatsHash] = (0, _react.useState)(null);
  const [previousDocumentStatsHash, setPreviousDocumentStatsHash] = (0, _react.useState)(0);
  const [currentAdditionalConfigsHash, setCurrentAdditionalConfigsHash] = (0, _react.useState)(null);
  const [previousAdditionalConfigsHash, setPreviousAdditionalConfigsHash] = (0, _react.useState)(null);
  const [loading, setLoading] = (0, _react.useState)(null);
  const [eventRate, setEventRate] = (0, _react.useState)([]);
  const [pinnedCategory, setPinnedCategory] = (0, _react.useState)(null);
  const [data, setData] = (0, _react.useState)(null);
  const [fieldValidationResult, setFieldValidationResult] = (0, _react.useState)(null);
  const tableState = (0, _use_table_state.useTableState)([], 'key');
  (0, _react.useEffect)(function initFields() {
    setCurrentDocumentStatsHash(null);
    setSelectedField(null);
    setLoading(null);
    const {
      dataViewFields,
      messageField
    } = (0, _utils.getMessageField)(dataView);
    setFields(dataViewFields);
    setSelectedField(messageField);
  }, [dataView]);
  const cancelRequest = (0, _react.useCallback)(() => {
    cancelWiderTimeRangeRequest();
    cancelValidationRequest();
    cancelCategorizationRequest();
  }, [cancelCategorizationRequest, cancelValidationRequest, cancelWiderTimeRangeRequest]);
  (0, _react.useEffect)(function cancelRequestOnLeave() {
    mounted.current = true;
    return () => {
      mounted.current = false;
      cancelRequest();
    };
  }, [cancelRequest, mounted]);
  const {
    searchQuery
  } = (0, _use_search.useSearch)({
    dataView,
    savedSearch: savedSearch !== null && savedSearch !== void 0 ? savedSearch : null
  }, stateFromUrl, true);
  const {
    documentStats,
    timefilter,
    earliest,
    latest,
    intervalMs,
    forceRefresh
  } = (0, _use_data.useData)(dataView, 'log_categorization', searchQuery, () => {}, undefined, undefined, BAR_TARGET, false);
  const onAddFilter = (0, _react.useCallback)((values, alias) => {
    if (input.switchToDocumentView === undefined) {
      return;
    }
    const filter = (0, _esQuery.buildEmptyFilter)(false, dataView.id);
    if (alias) {
      filter.meta.alias = alias;
    }
    filter.query = values.query;
    input.switchToDocumentView();
    filterManager.addFilters([filter]);
  }, [dataView.id, filterManager, input]);
  const openInDiscover = (0, _use_open_in_discover.useOpenInDiscover)(dataView.id, selectedField !== null && selectedField !== void 0 ? selectedField : undefined, selectedCategories, stateFromUrl, timefilter, false, onAddFilter, undefined);
  (0, _react.useEffect)(function createDocumentStatHash() {
    if (documentStats.documentCountStats === undefined) {
      return;
    }
    const hash = (0, _utils.createDocumentStatsHash)(documentStats);
    if (hash !== previousDocumentStatsHash) {
      setCurrentDocumentStatsHash(hash);
      setData(null);
      setFieldValidationResult(null);
    }
  }, [documentStats, previousDocumentStatsHash]);
  (0, _react.useEffect)(function createAdditionalConfigHash2() {
    if (!(selectedField !== null && selectedField !== void 0 && selectedField.name)) {
      return;
    }
    const hash = (0, _utils.createAdditionalConfigHash)([selectedField.name, minimumTimeRangeOption]);
    if (hash !== previousAdditionalConfigsHash) {
      setCurrentAdditionalConfigsHash(hash);
      setData(null);
      setFieldValidationResult(null);
    }
  }, [minimumTimeRangeOption, previousAdditionalConfigsHash, selectedField]);
  const loadCategories = (0, _react.useCallback)(async () => {
    const {
      getIndexPattern,
      timeFieldName: timeField
    } = dataView;
    const index = getIndexPattern();
    if (loading === true || selectedField === null || timeField === undefined || earliest === undefined || latest === undefined || minimumTimeRangeOption === undefined || mounted.current !== true) {
      return;
    }
    cancelRequest();
    setLoading(true);
    setData(null);
    setFieldValidationResult(null);
    const additionalFilter = {
      from: earliest,
      to: latest
    };
    const runtimeMappings = dataView.getRuntimeMappings();
    try {
      const timeRange = await getMinimumTimeRange(index, timeField, additionalFilter, minimumTimeRangeOption, searchQuery, runtimeMappings);
      if (mounted.current !== true) {
        return;
      }
      const [validationResult, categorizationResult] = await Promise.all([runValidateFieldRequest(index, selectedField.name, timeField, timeRange, searchQuery, runtimeMappings, {
        [_constants.AIOPS_TELEMETRY_ID.AIOPS_ANALYSIS_RUN_ORIGIN]: embeddingOrigin
      }), runCategorizeRequest(index, selectedField.name, timeField, {
        to: timeRange.to,
        from: timeRange.from
      }, searchQuery, runtimeMappings, intervalMs, timeRange.useSubAgg ? additionalFilter : undefined)]);
      if (mounted.current !== true) {
        return;
      }
      setFieldValidationResult(validationResult);
      const {
        categories,
        hasExamples
      } = categorizationResult;
      if (timeRange.useSubAgg) {
        const categoriesInBucket = categorizationResult.categories.map(category => {
          var _category$subFieldCou;
          return {
            ...category,
            count: (_category$subFieldCou = category.subFieldCount) !== null && _category$subFieldCou !== void 0 ? _category$subFieldCou : category.subTimeRangeCount,
            examples: category.subFieldExamples,
            sparkline: category.subFieldSparkline
          };
        }).filter(category => category.count > 0).sort((a, b) => b.count - a.count);
        setData({
          categories: categoriesInBucket,
          displayExamples: hasExamples,
          totalCategories: categories.length
        });
      } else {
        setData({
          categories,
          displayExamples: hasExamples,
          totalCategories: categories.length
        });
      }
    } catch (error) {
      if (error.name === 'AbortError') {
        // ignore error
      } else {
        toasts.addError(error, {
          title: _i18n.i18n.translate('xpack.aiops.logCategorization.errorLoadingCategories', {
            defaultMessage: 'Error loading categories'
          })
        });
      }
    }
    if (mounted.current === true) {
      setLoading(false);
    }
  }, [dataView, loading, selectedField, earliest, latest, minimumTimeRangeOption, cancelRequest, getMinimumTimeRange, searchQuery, runValidateFieldRequest, embeddingOrigin, runCategorizeRequest, intervalMs, toasts]);
  (0, _react.useEffect)(function triggerAnalysis() {
    var _documentStats$docume;
    const buckets = (_documentStats$docume = documentStats.documentCountStats) === null || _documentStats$docume === void 0 ? void 0 : _documentStats$docume.buckets;
    if (buckets === undefined || currentDocumentStatsHash === null) {
      return;
    }
    if (currentDocumentStatsHash !== previousDocumentStatsHash || currentAdditionalConfigsHash !== previousAdditionalConfigsHash && currentDocumentStatsHash !== null) {
      randomSampler.setDocCount(documentStats.totalCount);
      setEventRate(Object.entries(buckets).map(([key, docCount]) => ({
        key: +key,
        docCount
      })));
      loadCategories();
      setPreviousDocumentStatsHash(currentDocumentStatsHash);
      setPreviousAdditionalConfigsHash(currentAdditionalConfigsHash);
    }
  }, [loadCategories, randomSampler, previousDocumentStatsHash, fieldValidationResult, currentDocumentStatsHash, currentAdditionalConfigsHash, (_documentStats$docume2 = documentStats.documentCountStats) === null || _documentStats$docume2 === void 0 ? void 0 : _documentStats$docume2.buckets, documentStats.totalCount, previousAdditionalConfigsHash]);
  (0, _react.useEffect)(function refreshTriggeredFromButton() {
    if (input.lastReloadRequestTime !== undefined) {
      setPreviousDocumentStatsHash(0);
      setPreviousAdditionalConfigsHash(null);
      forceRefresh();
    }
  },
  // eslint-disable-next-line react-hooks/exhaustive-deps
  [input.lastReloadRequestTime]);
  const style = (0, _react2.css)({
    overflowY: 'auto',
    '.kbnDocTableWrapper': {
      overflowX: 'hidden'
    }
  });
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_discover_tabs.DiscoverTabs, {
    data: data,
    fields: fields,
    loadCategories: loadCategories,
    minimumTimeRangeOption: minimumTimeRangeOption,
    openInDiscover: openInDiscover,
    randomSampler: randomSampler,
    selectedCategories: selectedCategories,
    selectedField: selectedField,
    setMinimumTimeRangeOption: setMinimumTimeRangeOption,
    setSelectedField: setSelectedField,
    renderViewModeToggle: renderViewModeToggle,
    dataview: dataView,
    earliest: earliest,
    latest: latest,
    query: searchQuery
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    css: style
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    className: "eui-fullHeight",
    direction: "column",
    gutterSize: "none",
    responsive: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    css: {
      position: 'relative',
      overflowY: 'auto',
      marginLeft: tablePadding
    }
  }, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_category_validation_callout.FieldValidationCallout, {
    validationResults: fieldValidationResult
  }), (loading !== null && loading !== void 0 ? loading : true) === true ? /*#__PURE__*/_react.default.createElement(_loading_categorization.LoadingCategorization, {
    onCancel: cancelRequest
  }) : null, /*#__PURE__*/_react.default.createElement(_information_text.InformationText, {
    loading: loading !== null && loading !== void 0 ? loading : true,
    categoriesLength: (_data$categories$leng = data === null || data === void 0 ? void 0 : (_data$categories = data.categories) === null || _data$categories === void 0 ? void 0 : _data$categories.length) !== null && _data$categories$leng !== void 0 ? _data$categories$leng : null,
    eventRateLength: eventRate.length,
    fields: fields
  }), loading === false && data !== null && data.categories.length > 0 && selectedField !== null ? /*#__PURE__*/_react.default.createElement(_category_table.CategoryTable, {
    categories: data.categories,
    eventRate: eventRate,
    pinnedCategory: pinnedCategory,
    setPinnedCategory: setPinnedCategory,
    highlightedCategory: highlightedCategory,
    setHighlightedCategory: setHighlightedCategory,
    enableRowActions: false,
    displayExamples: data.displayExamples,
    setSelectedCategories: setSelectedCategories,
    openInDiscover: openInDiscover,
    tableState: tableState
  }) : null)))));
};

// eslint-disable-next-line import/no-default-export
exports.LogCategorizationEmbeddable = LogCategorizationEmbeddable;
var _default = exports.default = LogCategorizationEmbeddable;