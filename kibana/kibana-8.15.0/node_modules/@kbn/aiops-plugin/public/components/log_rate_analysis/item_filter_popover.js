"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ItemFilterPopover = void 0;
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@emotion/react");
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _i18nReact = require("@kbn/i18n-react");
var _item_filter_apply_button = require("./item_filter_apply_button");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

// This component is mostly inspired by EUI's Data Grid Column Selector
// https://github.com/elastic/eui/blob/main/src/components/datagrid/controls/column_selector.tsx
const ItemFilterPopover = ({
  dataTestSubj,
  disabled,
  disabledApplyButton,
  disabledApplyTooltipContent,
  helpText,
  itemSearchAriaLabel,
  initialSkippedItems = [],
  popoverButtonTitle,
  selectedItemLimit = 2,
  uniqueItemNames,
  onChange
}) => {
  const euiThemeContext = (0, _eui.useEuiTheme)();
  // Inspired by https://github.com/elastic/eui/blob/main/src/components/datagrid/controls/_data_grid_column_selector.scss
  const itemSelectPopover = (0, _react.useMemo)(() => (0, _react2.css)`
      ${(0, _eui.euiYScrollWithShadows)(euiThemeContext, {})}
      max-height: 400px;
    `, [euiThemeContext]);
  const [isTouched, setIsTouched] = (0, _react.useState)(false);
  const [itemSearchText, setItemSearchText] = (0, _react.useState)('');
  const [skippedItems, setSkippedItems] = (0, _react.useState)(initialSkippedItems);
  const setItemsFilter = (itemNames, checked) => {
    let updatedSkippedItems = [...skippedItems];
    if (!checked) {
      updatedSkippedItems.push(...itemNames);
    } else {
      updatedSkippedItems = skippedItems.filter(d => !itemNames.includes(d));
    }
    // Ensure there are no duplicates
    setSkippedItems([...new Set(updatedSkippedItems)]);
    setIsTouched(true);
  };
  const [isItemSelectionPopoverOpen, setIsItemSelectionPopoverOpen] = (0, _react.useState)(false);
  const onItemSelectionButtonClick = () => setIsItemSelectionPopoverOpen(isOpen => !isOpen);
  const closePopover = () => setIsItemSelectionPopoverOpen(false);
  const filteredUniqueItemNames = (0, _react.useMemo)(() => {
    return uniqueItemNames.filter(d => d.toLowerCase().indexOf(itemSearchText.toLowerCase()) !== -1);
  }, [itemSearchText, uniqueItemNames]);

  // If the supplied list of unique field names changes, do a sanity check to only
  // keep field names in the list of skipped fields that still are in the list of unique fields.
  (0, _react.useEffect)(() => {
    setSkippedItems(previousSkippedItems => previousSkippedItems.filter(d => uniqueItemNames.includes(d)));
  }, [uniqueItemNames]);
  const selectedItemCount = uniqueItemNames.length - skippedItems.length;
  return /*#__PURE__*/_react.default.createElement(_eui.EuiPopover, {
    anchorPosition: "downLeft",
    panelPaddingSize: "s",
    panelStyle: {
      minWidth: '20%'
    },
    button: /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
      "data-test-subj": dataTestSubj,
      onClick: onItemSelectionButtonClick,
      disabled: disabled,
      size: "s",
      iconType: "arrowDown",
      iconSide: "right",
      iconSize: "s",
      color: "text"
    }, popoverButtonTitle),
    isOpen: isItemSelectionPopoverOpen,
    closePopover: closePopover
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiPopoverTitle, null, /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    size: "xs",
    color: "subdued",
    style: {
      maxWidth: '400px'
    }
  }, helpText), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiFieldText, {
    compressed: true,
    placeholder: _i18n.i18n.translate('xpack.aiops.analysis.fieldSelectorPlaceholder', {
      defaultMessage: 'Search'
    }),
    "aria-label": itemSearchAriaLabel,
    value: itemSearchText,
    onChange: e => setItemSearchText(e.currentTarget.value),
    "data-test-subj": "aiopsFieldSelectorSearch"
  })), /*#__PURE__*/_react.default.createElement("div", {
    css: itemSelectPopover,
    "data-test-subj": "aiopsFieldSelectorFieldNameList"
  }, filteredUniqueItemNames.map(fieldName => /*#__PURE__*/_react.default.createElement("div", {
    key: fieldName,
    css: {
      padding: '4px'
    }
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiSwitch, {
    "data-test-subj": `aiopsFieldSelectorFieldNameListItem${!skippedItems.includes(fieldName) ? ' checked' : ''}`,
    className: "euiSwitch--mini",
    compressed: true,
    label: fieldName,
    onChange: e => setItemsFilter([fieldName], e.target.checked),
    checked: !skippedItems.includes(fieldName)
  })))), /*#__PURE__*/_react.default.createElement(_eui.EuiPopoverFooter, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    gutterSize: "s",
    responsive: false,
    justifyContent: "spaceBetween",
    alignItems: "center"
  }, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiButtonEmpty, {
    size: "xs",
    flush: "left",
    onClick: () => setItemsFilter(filteredUniqueItemNames, true),
    disabled: itemSearchText.length > 0 && filteredUniqueItemNames.length === 0,
    "data-test-subj": "aiopsFieldSelectorSelectAllFieldsButton"
  }, itemSearchText.length > 0 ? /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.aiops.logRateAnalysis.page.fieldSelector.selectAllSearchedItems",
    defaultMessage: "Select filtered"
  }) : /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.aiops.logRateAnalysis.page.fieldSelector.selectAllItems",
    defaultMessage: "Select all"
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiButtonEmpty, {
    size: "xs",
    flush: "right",
    onClick: () => setItemsFilter(filteredUniqueItemNames, false),
    disabled: itemSearchText.length > 0 && filteredUniqueItemNames.length === 0,
    "data-test-subj": "aiopsFieldSelectorDeselectAllFieldsButton"
  }, itemSearchText.length > 0 ? /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.aiops.logRateAnalysis.page.fieldSelector.deselectAllSearchedItems",
    defaultMessage: "Deselect filtered"
  }) : /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.aiops.logRateAnalysis.page.fieldSelector.deselectAllItems",
    defaultMessage: "Deselect all"
  })))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_item_filter_apply_button.ItemFilterApplyButton, {
    onClick: () => {
      onChange(skippedItems);
      setItemSearchText('');
      setIsItemSelectionPopoverOpen(false);
      closePopover();
    },
    disabled: disabledApplyButton || selectedItemCount < selectedItemLimit || !isTouched,
    tooltipContent: selectedItemCount < selectedItemLimit ? disabledApplyTooltipContent : undefined
  })))));
};
exports.ItemFilterPopover = ItemFilterPopover;