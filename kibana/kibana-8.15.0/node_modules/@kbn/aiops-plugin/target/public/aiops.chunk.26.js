/*! Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one or more contributor license agreements.
 * Licensed under the Elastic License 2.0; you may not use this file except in compliance with the Elastic License 2.0. */
(window.aiops_bundle_jsonpfunction=window.aiops_bundle_jsonpfunction||[]).push([[26],{154:function(n,e,t){"use strict";t.r(e),t.d(e,"apiCanAddNewPanel",(function(){return o})),t.d(e,"apiHasRuntimeChildState",(function(){return a})),t.d(e,"apiHasSerializedChildState",(function(){return i})),t.d(e,"apiHasSaveNotification",(function(){return l})),t.d(e,"apiCanDuplicatePanels",(function(){return r})),t.d(e,"apiCanExpandPanels",(function(){return u})),t.d(e,"apiIsPresentationContainer",(function(){return s})),t.d(e,"getContainerParentFromAPI",(function(){return f})),t.d(e,"listenForCompatibleApi",(function(){return p})),t.d(e,"combineCompatibleChildrenApis",(function(){return v})),t.d(e,"apiHasSerializableState",(function(){return b})),t.d(e,"tracksOverlays",(function(){return C})),t.d(e,"canTrackContentfulRender",(function(){return O}));const o=n=>"function"==typeof(null==n?void 0:n.addNewPanel),i=n=>Boolean(n&&n.getSerializedStateForChild),a=n=>Boolean(n&&n.getRuntimeStateForChild),l=n=>Boolean(n&&n.saveNotification$),r=n=>Boolean(void 0!==(null==n?void 0:n.duplicatePanel)),u=n=>Boolean(void 0!==(null==n?void 0:n.expandPanel));var c=t(83),d=t(3);const s=n=>Boolean(o(n)&&"function"==typeof(null==n?void 0:n.removePanel)&&"function"==typeof(null==n?void 0:n.replacePanel)&&"function"==typeof(null==n?void 0:n.addNewPanel)&&(null==n?void 0:n.children$)),f=n=>{const e=Object(c.b)(n)?n.parentApi:null;if(e)return s(e)?e:void 0},p=(n,e,t)=>{if(!n||!s(n))return()=>{};let o,i;const a=n.children$.subscribe((a=>{var l,r;null===(l=o)||void 0===l||l();const u=(()=>{for(const n of Object.keys(a)){const t=a[n];if(e(t))return t}if(e(n))return n})(),d=Object(c.c)(u)?u.uuid:null;d!==i&&(i=d,o=null!==(r=t(u))&&void 0!==r?r:void 0)}));return()=>{var n;a.unsubscribe(),null===(n=o)||void 0===n||n()}},v=(n,e,t,o,i)=>n&&s(n)?n.children$.pipe(Object(d.switchMap)((n=>{const a=[];for(const o of Object.values(n))t(o)&&Object(d.isObservable)(o[e])&&a.push(o[e]);return 0===a.length?Object(d.of)(o):Object(d.combineLatest)(a).pipe(Object(d.map)(i||(n=>n.flat().filter((n=>Boolean(n))))))}))):Object(d.of)(),b=n=>Boolean(null==n?void 0:n.serializeState),C=n=>Boolean(n&&n.openOverlay&&n.clearOverlays),O=n=>null!==n&&"object"==typeof n&&"trackContentfulRender"in n}}]);