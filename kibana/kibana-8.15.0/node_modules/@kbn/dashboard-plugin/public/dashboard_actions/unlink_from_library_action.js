"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isApiCompatible = exports.UnlinkFromLibraryAction = exports.ACTION_UNLINK_FROM_LIBRARY = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _public = require("@kbn/ui-actions-plugin/public");
var _presentationPublishing = require("@kbn/presentation-publishing");
var _plugin_services = require("../services/plugin_services");
var _dashboard_actions_strings = require("./_dashboard_actions_strings");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

const ACTION_UNLINK_FROM_LIBRARY = exports.ACTION_UNLINK_FROM_LIBRARY = 'unlinkFromLibrary';
const isApiCompatible = api => {
  var _api$parentApi;
  return Boolean((0, _presentationPublishing.apiCanAccessViewMode)(api) && ((0, _presentationPublishing.apiHasLibraryTransforms)(api) || (0, _presentationPublishing.apiHasInPlaceLibraryTransforms)(api)) && (0, _presentationPublishing.apiHasUniqueId)(api) && (0, _presentationPublishing.apiHasType)(api) && (0, _presentationPublishing.apiHasParentApi)(api) && typeof ((_api$parentApi = api.parentApi) === null || _api$parentApi === void 0 ? void 0 : _api$parentApi.replacePanel) === 'function');
};
exports.isApiCompatible = isApiCompatible;
class UnlinkFromLibraryAction {
  constructor() {
    (0, _defineProperty2.default)(this, "type", ACTION_UNLINK_FROM_LIBRARY);
    (0, _defineProperty2.default)(this, "id", ACTION_UNLINK_FROM_LIBRARY);
    (0, _defineProperty2.default)(this, "order", 15);
    (0, _defineProperty2.default)(this, "toastsService", void 0);
    ({
      notifications: {
        toasts: this.toastsService
      }
    } = _plugin_services.pluginServices.getServices());
  }
  getDisplayName({
    embeddable
  }) {
    if (!isApiCompatible(embeddable)) throw new _public.IncompatibleActionError();
    return _dashboard_actions_strings.dashboardUnlinkFromLibraryActionStrings.getDisplayName();
  }
  getIconType({
    embeddable
  }) {
    if (!isApiCompatible(embeddable)) throw new _public.IncompatibleActionError();
    return 'folderExclamation';
  }
  async canUnlinkFromLibrary(api) {
    if ((0, _presentationPublishing.apiHasLibraryTransforms)(api)) {
      return api.canUnlinkFromLibrary();
    } else if ((0, _presentationPublishing.apiHasInPlaceLibraryTransforms)(api)) {
      const canUnLink = api.canUnlinkFromLibrary ? await api.canUnlinkFromLibrary() : true;
      return canUnLink && Boolean(api.libraryId$.value);
    }
    throw new _public.IncompatibleActionError();
  }
  async isCompatible({
    embeddable
  }) {
    if (!isApiCompatible(embeddable)) {
      // either a an `unlinkFromLibrary` method or a `getByValueState` method is required
      return false;
    }
    return (0, _presentationPublishing.getInheritedViewMode)(embeddable) === 'edit' && (await this.canUnlinkFromLibrary(embeddable));
  }
  async execute({
    embeddable
  }) {
    if (!isApiCompatible(embeddable)) throw new _public.IncompatibleActionError();
    const title = (0, _presentationPublishing.getPanelTitle)(embeddable);
    try {
      if ((0, _presentationPublishing.apiHasLibraryTransforms)(embeddable)) {
        await embeddable.parentApi.replacePanel(embeddable.uuid, {
          panelType: embeddable.type,
          initialState: {
            ...embeddable.getByValueState(),
            title
          }
        });
      } else if ((0, _presentationPublishing.apiHasInPlaceLibraryTransforms)(embeddable)) {
        embeddable.unlinkFromLibrary();
      } else {
        throw new _public.IncompatibleActionError();
      }
      this.toastsService.addSuccess({
        title: _dashboard_actions_strings.dashboardUnlinkFromLibraryActionStrings.getSuccessMessage(title ? `'${title}'` : ''),
        'data-test-subj': 'unlinkPanelSuccess'
      });
    } catch (e) {
      this.toastsService.addDanger({
        title: _dashboard_actions_strings.dashboardUnlinkFromLibraryActionStrings.getFailureMessage(title ? `'${title}'` : ''),
        'data-test-subj': 'unlinkPanelFailure'
      });
    }
  }
}
exports.UnlinkFromLibraryAction = UnlinkFromLibraryAction;