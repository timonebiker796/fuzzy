"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Axes = void 0;
var _react = _interopRequireDefault(require("react"));
var _charts = require("@elastic/charts");
var _common = require("@kbn/charts-plugin/common");
var _kibana_context = require("../../../kibana_context");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

// round to 2dp
function tickFormatter(d) {
  return (Math.round(d * 100) / 100).toString();
}
const Axes = ({
  chartData
}) => {
  const yDomain = getYRange(chartData);
  const {
    services: {
      fieldFormats,
      uiSettings
    }
  } = (0, _kibana_context.useDataVisualizerKibana)();
  const useLegacyTimeAxis = uiSettings.get('visualization:useLegacyTimeAxis', false);
  const xAxisFormatter = fieldFormats.deserialize({
    id: 'date'
  });
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_charts.Axis, {
    id: "bottom",
    position: _charts.Position.Bottom,
    showOverlappingTicks: true,
    tickFormat: value => xAxisFormatter.convert(value),
    labelFormat: useLegacyTimeAxis ? undefined : () => '',
    timeAxisLayerCount: useLegacyTimeAxis ? 0 : 2,
    style: useLegacyTimeAxis ? {} : _common.MULTILAYER_TIME_AXIS_STYLE
  }), /*#__PURE__*/_react.default.createElement(_charts.Axis, {
    id: "left",
    position: _charts.Position.Left,
    tickFormat: tickFormatter,
    domain: yDomain
  }));
};
exports.Axes = Axes;
function getYRange(chartData) {
  const fit = false;
  if (chartData === undefined) {
    return {
      fit,
      min: NaN,
      max: NaN
    };
  }
  if (chartData.length === 0) {
    return {
      min: 0,
      max: 0,
      fit
    };
  }
  let max = Number.MIN_VALUE;
  let min = Number.MAX_VALUE;
  chartData.forEach(r => {
    max = Math.max(r.value, max);
    min = Math.min(r.value, min);
  });
  const padding = (max - min) * 0.1;
  max += padding;
  min -= padding;
  return {
    min,
    max,
    fit
  };
}