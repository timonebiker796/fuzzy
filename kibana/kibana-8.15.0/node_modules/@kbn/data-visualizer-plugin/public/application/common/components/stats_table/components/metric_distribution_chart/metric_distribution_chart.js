"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MetricDistributionChart = void 0;
var _react = _interopRequireDefault(require("react"));
var _i18n = require("@kbn/i18n");
var _charts = require("@elastic/charts");
var _metric_distribution_chart_tooltip_header = require("./metric_distribution_chart_tooltip_header");
var _utils = require("../../../utils");
var _hooks = require("../../hooks");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const SPEC_ID = 'metric_distribution';
const MetricDistributionChart = ({
  width,
  height,
  chartData,
  fieldFormat,
  hideXAxis
}) => {
  // This value is shown to label the y axis values in the tooltip.
  // Ideally we wouldn't show these values at all in the tooltip,
  // but this is not yet possible with Elastic charts.
  const seriesName = _i18n.i18n.translate('xpack.dataVisualizer.dataGrid.field.metricDistributionChart.seriesName', {
    defaultMessage: 'distribution'
  });
  const theme = (0, _hooks.useDataVizChartTheme)();
  const headerFormatter = tooltipData => {
    const xValue = tooltipData.value;
    const chartPoint = chartData.find(data => data.x === xValue);
    return /*#__PURE__*/_react.default.createElement(_metric_distribution_chart_tooltip_header.MetricDistributionChartTooltipHeader, {
      chartPoint: chartPoint,
      maxWidth: width,
      fieldFormat: fieldFormat
    });
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    "data-test-subj": "dataVisualizerFieldDataMetricDistributionChart",
    className: "dataGridChart__histogram"
  }, /*#__PURE__*/_react.default.createElement(_charts.Chart, {
    size: {
      width,
      height
    }
  }, /*#__PURE__*/_react.default.createElement(_charts.Tooltip, {
    headerFormatter: headerFormatter
  }), /*#__PURE__*/_react.default.createElement(_charts.Settings
  // TODO connect to charts.theme service see src/plugins/charts/public/services/theme/README.md
  , {
    baseTheme: _charts.LEGACY_LIGHT_THEME,
    theme: theme,
    locale: _i18n.i18n.getLocale()
  }), /*#__PURE__*/_react.default.createElement(_charts.Axis, {
    id: "bottom",
    position: _charts.Position.Bottom,
    tickFormat: d => (0, _utils.kibanaFieldFormat)(d, fieldFormat),
    hide: hideXAxis === true
  }), /*#__PURE__*/_react.default.createElement(_charts.Axis, {
    id: "left",
    position: _charts.Position.Left,
    tickFormat: d => d.toFixed(3),
    hide: true
  }), /*#__PURE__*/_react.default.createElement(_charts.AreaSeries, {
    id: SPEC_ID,
    name: seriesName,
    xScaleType: _charts.ScaleType.Linear,
    yScaleType: _charts.ScaleType.Linear,
    xAccessor: "x",
    yAccessors: ['y'],
    data: chartData.length > 0 ? chartData : [{
      x: 0,
      y: 0,
      dataMin: 0,
      dataMax: 0,
      percent: 0
    }],
    curve: _charts.CurveType.CURVE_STEP_AFTER
  })));
};
exports.MetricDistributionChart = MetricDistributionChart;