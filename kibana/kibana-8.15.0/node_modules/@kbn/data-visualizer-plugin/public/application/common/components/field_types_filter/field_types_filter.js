"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DataVisualizerFieldTypesFilter = void 0;
var _react = _interopRequireWildcard(require("react"));
var _i18n = require("@kbn/i18n");
var _eui = require("@elastic/eui");
var _fieldUtils = require("@kbn/field-utils");
var _field_types_help_popover = require("./field_types_help_popover");
var _multi_select_picker = require("../multi_select_picker");
var _field_type_icon = require("../field_type_icon");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const DataVisualizerFieldTypesFilter = ({
  fields,
  setVisibleFieldTypes,
  visibleFieldTypes
}) => {
  const fieldNameTitle = (0, _react.useMemo)(() => _i18n.i18n.translate('xpack.dataVisualizer.fieldTypeSelect', {
    defaultMessage: 'Field type'
  }), []);
  const options = (0, _react.useMemo)(() => {
    const fieldTypesTracker = new Set();
    const fieldTypes = [];
    fields.forEach(({
      type
    }) => {
      const label = (0, _fieldUtils.getFieldTypeName)(type);
      if (type !== undefined && !fieldTypesTracker.has(type) && label !== undefined) {
        fieldTypesTracker.add(type);
        fieldTypes.push({
          value: type,
          name: /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
            grow: true
          }, " ", label), type && /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
            grow: false
          }, /*#__PURE__*/_react.default.createElement(_field_type_icon.FieldTypeIcon, {
            type: type,
            tooltipEnabled: false
          })))
        });
      }
    });
    return fieldTypes;
  }, [fields]);
  return /*#__PURE__*/_react.default.createElement(_multi_select_picker.MultiSelectPicker, {
    title: fieldNameTitle,
    options: options,
    onChange: setVisibleFieldTypes,
    checkedOptions: visibleFieldTypes,
    dataTestSubj: 'dataVisualizerFieldTypeSelect',
    postfix: /*#__PURE__*/_react.default.createElement(_field_types_help_popover.FieldTypesHelpPopover, {
      fieldTypes: options.map(f => f.value)
    })
  });
};
exports.DataVisualizerFieldTypesFilter = DataVisualizerFieldTypesFilter;