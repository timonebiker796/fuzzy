"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateApiKey = void 0;
var _searchConnectors = require("@kbn/search-connectors");
var _to_alphanumeric = require("../../../common/utils/to_alphanumeric");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const generateApiKey = async (client, indexName, isNative) => {
  const aclIndexName = `${_searchConnectors.CONNECTORS_ACCESS_CONTROL_INDEX_PREFIX}${indexName}`;
  const apiKeyResult = await client.asCurrentUser.security.createApiKey({
    name: `${indexName}-connector`,
    role_descriptors: {
      [`${(0, _to_alphanumeric.toAlphanumeric)(indexName)}-connector-role`]: {
        cluster: ['monitor', 'manage_connector'],
        index: [{
          names: [indexName, aclIndexName, `${_searchConnectors.CONNECTORS_INDEX}*`],
          privileges: ['all']
        }]
      }
    }
  });
  const connectorResult = await client.asCurrentUser.search({
    index: _searchConnectors.CONNECTORS_INDEX,
    query: {
      term: {
        index_name: indexName
      }
    }
  });
  const connector = connectorResult.hits.hits[0];
  if (connector) {
    var _connector$_source, _connector$_source2;
    const apiKeyFields = isNative ? {
      api_key_id: apiKeyResult.id,
      api_key_secret_id: await storeConnectorSecret(client, apiKeyResult.encoded, ((_connector$_source = connector._source) === null || _connector$_source === void 0 ? void 0 : _connector$_source.api_key_secret_id) || null)
    } : {
      api_key_id: apiKeyResult.id
    };
    if ((_connector$_source2 = connector._source) !== null && _connector$_source2 !== void 0 && _connector$_source2.api_key_id) {
      await client.asCurrentUser.security.invalidateApiKey({
        ids: [connector._source.api_key_id]
      });
    }
    await client.asCurrentUser.index({
      document: {
        ...connector._source,
        ...apiKeyFields
      },
      id: connector._id,
      index: _searchConnectors.CONNECTORS_INDEX
    });
  }
  return apiKeyResult;
};
exports.generateApiKey = generateApiKey;
const storeConnectorSecret = async (client, value, secretId) => {
  if (secretId === null) {
    const connectorSecretResult = await (0, _searchConnectors.createConnectorSecret)(client.asCurrentUser, value);
    return connectorSecretResult.id;
  }
  await (0, _searchConnectors.updateConnectorSecret)(client.asCurrentUser, value, secretId);
  return secretId;
};