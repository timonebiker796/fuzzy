"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SyncsContextMenu = void 0;
var _react = _interopRequireWildcard(require("react"));
var _kea = require("kea");
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _searchConnectors = require("@kbn/search-connectors");
var _api = require("../../../../../../common/types/api");
var _http = require("../../../../shared/http");
var _kibana = require("../../../../shared/kibana");
var _cancel_syncs_api_logic = require("../../../api/connector/cancel_syncs_api_logic");
var _connector_view_logic = require("../../connector_detail/connector_view_logic");
var _index_view_logic = require("../../search_index/index_view_logic");
var _syncs_logic = require("./syncs_logic");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const SyncsContextMenu = ({
  disabled = false
}) => {
  var _connector$configurat;
  const {
    config,
    productFeatures
  } = (0, _kea.useValues)(_kibana.KibanaLogic);
  const {
    ingestionStatus,
    isCanceling,
    isSyncing,
    isWaitingForSync
  } = (0, _kea.useValues)(_index_view_logic.IndexViewLogic);
  const {
    connector,
    hasDocumentLevelSecurityFeature,
    hasIncrementalSyncFeature
  } = (0, _kea.useValues)(_connector_view_logic.ConnectorViewLogic);
  const {
    status
  } = (0, _kea.useValues)(_cancel_syncs_api_logic.CancelSyncsApiLogic);
  const {
    startSync,
    startIncrementalSync,
    startAccessControlSync,
    cancelSyncs
  } = (0, _kea.useActions)(_syncs_logic.SyncsLogic);
  const {
    errorConnectingMessage
  } = (0, _kea.useValues)(_http.HttpLogic);
  const [isPopoverOpen, setPopover] = (0, _react.useState)(false);
  const togglePopover = () => setPopover(!isPopoverOpen);
  const closePopover = () => setPopover(false);
  const getSyncButtonText = () => {
    if (isWaitingForSync) {
      return _i18n.i18n.translate('xpack.enterpriseSearch.content.index.syncButton.waitingForSync.label', {
        defaultMessage: 'Waiting for sync'
      });
    }
    if (isSyncing && (connector === null || connector === void 0 ? void 0 : connector.status) !== _searchConnectors.ConnectorStatus.ERROR) {
      return _i18n.i18n.translate('xpack.enterpriseSearch.content.index.syncButton.syncing.label', {
        defaultMessage: 'Syncing'
      });
    }
    return _i18n.i18n.translate('xpack.enterpriseSearch.content.index.syncButton.label', {
      defaultMessage: 'Sync'
    });
  };
  const syncLoading = (isSyncing || isWaitingForSync) && ingestionStatus !== _searchConnectors.IngestionStatus.ERROR;
  const shouldShowDocumentLevelSecurity = productFeatures.hasDocumentLevelSecurityEnabled && hasDocumentLevelSecurityFeature;
  const shouldShowIncrementalSync = productFeatures.hasIncrementalSyncEnabled && hasIncrementalSyncFeature;
  const isEnterpriseSearchNotAvailable = Boolean(config.host && config.canDeployEntSearch && errorConnectingMessage);
  const isSyncsDisabled = (connector === null || connector === void 0 ? void 0 : connector.is_native) && isEnterpriseSearchNotAvailable || ingestionStatus === _searchConnectors.IngestionStatus.INCOMPLETE || !(connector !== null && connector !== void 0 && connector.index_name);
  const panels = [{
    id: 0,
    items: [...(syncLoading ? [] : [{
      // @ts-ignore - data-* attributes are applied but doesn't exist on types
      'data-telemetry-id': `entSearchContent-connector-header-sync-startSync`,
      'data-test-subj': `entSearchContent-connector-header-sync-startSync`,
      disabled: isSyncsDisabled,
      icon: 'play',
      name: _i18n.i18n.translate('xpack.enterpriseSearch.index.header.more.fullSync', {
        defaultMessage: 'Full Content'
      }),
      onClick: () => {
        closePopover();
        startSync(connector);
      }
    }]), ...(shouldShowIncrementalSync ? [{
      // @ts-ignore - data-* attributes are applied but doesn't exist on types
      'data-telemetry-id': `entSearchContent-connector-header-sync-more-incrementalSync`,
      'data-test-subj': `entSearchContent-connector-header-sync-more-incrementalSync`,
      disabled: isSyncsDisabled,
      icon: 'play',
      name: _i18n.i18n.translate('xpack.enterpriseSearch.index.header.more.incrementalSync', {
        defaultMessage: 'Incremental Content'
      }),
      onClick: () => {
        closePopover();
        startIncrementalSync(connector);
      }
    }] : []), ...(shouldShowDocumentLevelSecurity ? [{
      // @ts-ignore - data-* attributes are applied but doesn't exist on types
      'data-telemetry-id': `entSearchContent-connector-header-sync-more-accessControlSync`,
      'data-test-subj': `entSearchContent-connector-header-sync-more-accessControlSync`,
      disabled: Boolean(isSyncsDisabled || !(connector !== null && connector !== void 0 && (_connector$configurat = connector.configuration.use_document_level_security) !== null && _connector$configurat !== void 0 && _connector$configurat.value)),
      icon: 'play',
      name: _i18n.i18n.translate('xpack.enterpriseSearch.index.header.more.accessControlSync', {
        defaultMessage: 'Access Control'
      }),
      onClick: () => {
        closePopover();
        startAccessControlSync(connector);
      }
    }] : []), {
      // @ts-ignore - data-* attributes are applied but doesn't exist on types
      'data-telemetry-id': `entSearchContent-connector-header-sync-cancelSync`,
      disabled: isCanceling && ingestionStatus !== _searchConnectors.IngestionStatus.ERROR || status === _api.Status.LOADING,
      icon: /*#__PURE__*/_react.default.createElement(_eui.EuiIcon, {
        type: "cross",
        size: "m",
        color: "danger"
      }),
      name: /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
        color: "danger",
        size: "s"
      }, /*#__PURE__*/_react.default.createElement("p", null, _i18n.i18n.translate('xpack.enterpriseSearch.index.header.cancelSyncsTitle', {
        defaultMessage: 'Cancel Syncs'
      }))),
      onClick: () => {
        closePopover();
        cancelSyncs(connector);
      }
    }],
    title: 'Sync'
  }];
  return /*#__PURE__*/_react.default.createElement(_eui.EuiPopover, {
    button: /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
      disabled: disabled,
      "data-test-subj": "enterpriseSearchSyncsContextMenuButton",
      "data-telemetry-id": "entSearchContent-connector-header-sync-openSyncMenu",
      iconType: "arrowDown",
      iconSide: "right",
      onClick: togglePopover,
      fill: true
    }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
      alignItems: "center",
      responsive: false,
      gutterSize: "s"
    }, syncLoading && /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
      grow: false
    }, /*#__PURE__*/_react.default.createElement(_eui.EuiLoadingSpinner, {
      size: "m"
    })), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
      "data-test-subj": "entSearchContent-connector-header-sync-menu"
    }, getSyncButtonText()))),
    isOpen: isPopoverOpen,
    closePopover: closePopover,
    panelPaddingSize: "none",
    anchorPosition: "downCenter"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiContextMenu, {
    initialPanelId: 0,
    panels: panels
  }));
};
exports.SyncsContextMenu = SyncsContextMenu;