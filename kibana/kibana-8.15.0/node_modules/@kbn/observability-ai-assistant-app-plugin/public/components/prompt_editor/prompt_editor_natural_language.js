"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PromptEditorNaturalLanguage = PromptEditorNaturalLanguage;
var _react = _interopRequireWildcard(require("react"));
var _css = require("@emotion/css");
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _public = require("@kbn/observability-ai-assistant-plugin/public");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const inputPopoverClassName = (0, _css.css)`
  max-inline-size: 100%;
`;
const textAreaClassName = (0, _css.css)`
  max-height: 200px;
  width: 100%;
`;
const selectableClassName = (0, _css.css)`
  .euiSelectableListItem__icon {
    display: none;
  }
`;
function PromptEditorNaturalLanguage({
  disabled,
  prompt,
  lastUsedPrompts,
  onChange,
  onChangeHeight,
  onFocus,
  onBlur
}) {
  const textAreaRef = (0, _react.useRef)(null);
  const [isSelectablePopoverOpen, setSelectablePopoverOpen] = (0, _react.useState)(false);
  const handleChange = event => {
    handleResizeTextArea();
    onChange({
      role: _public.MessageRole.User,
      content: event.currentTarget.value
    });
  };
  const handleResizeTextArea = (0, _react.useCallback)(() => {
    if (textAreaRef.current) {
      var _textAreaRef$current;
      textAreaRef.current.style.minHeight = 'auto';
      const cappedHeight = Math.min((_textAreaRef$current = textAreaRef.current) === null || _textAreaRef$current === void 0 ? void 0 : _textAreaRef$current.scrollHeight, 350);
      textAreaRef.current.style.minHeight = cappedHeight + 'px';
      onChangeHeight(cappedHeight);
    }
  }, [onChangeHeight]);
  const handleKeydown = e => {
    // only trigger select when no prompt is available
    if (!prompt && (e.key === 'ArrowUp' || e.key === 'ArrowDown')) {
      e.preventDefault();
      setSelectablePopoverOpen(true);
    }
  };
  const handleSelectOption = (_, __, selectedOption) => {
    onChange({
      role: _public.MessageRole.User,
      content: selectedOption.label
    });
    setSelectablePopoverOpen(false);
  };
  const handleClosePopover = () => {
    setSelectablePopoverOpen(false);
    onFocus();
  };
  (0, _react.useEffect)(() => {
    const textarea = textAreaRef.current;
    if (textarea) {
      textarea.focus();
    }
  }, []);
  (0, _react.useEffect)(() => {
    handleResizeTextArea();
  }, [handleResizeTextArea]);
  (0, _react.useEffect)(() => {
    if (prompt === undefined) {
      handleResizeTextArea();
    }
  }, [handleResizeTextArea, prompt]);
  return /*#__PURE__*/_react.default.createElement(_eui.EuiInputPopover, {
    display: "flex",
    isOpen: isSelectablePopoverOpen,
    closePopover: handleClosePopover,
    className: inputPopoverClassName,
    input: /*#__PURE__*/_react.default.createElement(_eui.EuiTextArea, {
      className: textAreaClassName,
      "data-test-subj": "observabilityAiAssistantChatPromptEditorTextArea",
      disabled: disabled,
      fullWidth: true,
      inputRef: textAreaRef,
      placeholder: _i18n.i18n.translate('xpack.observabilityAiAssistant.prompt.placeholder', {
        defaultMessage: 'Send a message to the Assistant'
      }),
      resize: "vertical",
      rows: 1,
      value: prompt || '',
      onChange: handleChange,
      onFocus: onFocus,
      onKeyDown: handleKeydown,
      onBlur: onBlur
    }),
    panelMinWidth: 300,
    anchorPosition: "downLeft"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiSelectable, {
    "aria-label": _i18n.i18n.translate('xpack.observabilityAiAssistant.promptEditorNaturalLanguage.euiSelectable.selectAnOptionLabel', {
      defaultMessage: 'Select an option'
    }),
    className: selectableClassName,
    options: lastUsedPrompts.map(label => ({
      label
    })),
    searchable: true,
    singleSelection: true,
    onChange: handleSelectOption
  }, list => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, list)));
}