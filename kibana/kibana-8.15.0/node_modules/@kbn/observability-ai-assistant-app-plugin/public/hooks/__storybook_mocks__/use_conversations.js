"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useConversations = useConversations;
var _lodash = require("lodash");
var _builders = require("../../utils/builders");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function useConversations() {
  return [(0, _builders.buildConversation)({
    conversation: {
      id: (0, _lodash.uniqueId)(),
      title: 'Investigation into Cart service degradation',
      last_updated: ''
    }
  }), (0, _builders.buildConversation)({
    conversation: {
      id: (0, _lodash.uniqueId)(),
      title: 'Why is database service responding with errors after I did rm -rf /postgres',
      last_updated: ''
    }
  }), (0, _builders.buildConversation)({
    conversation: {
      id: (0, _lodash.uniqueId)(),
      title: 'Why is database service responding with errors after I did rm -rf /postgres',
      last_updated: ''
    }
  }), (0, _builders.buildConversation)({
    conversation: {
      id: (0, _lodash.uniqueId)(),
      title: 'Why is database service responding with errors after I did rm -rf /postgres',
      last_updated: ''
    }
  }), (0, _builders.buildConversation)({
    conversation: {
      id: (0, _lodash.uniqueId)(),
      title: 'Why is database service responding with errors after I did rm -rf /postgres',
      last_updated: ''
    }
  }), (0, _builders.buildConversation)({
    conversation: {
      id: (0, _lodash.uniqueId)(),
      title: 'Why is database service responding with errors after I did rm -rf /postgres',
      last_updated: ''
    }
  }), (0, _builders.buildConversation)({
    conversation: {
      id: (0, _lodash.uniqueId)(),
      title: 'Why is database service responding with errors after I did rm -rf /postgres',
      last_updated: ''
    }
  })];
}