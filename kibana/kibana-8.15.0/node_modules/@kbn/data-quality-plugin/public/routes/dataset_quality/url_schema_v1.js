"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stateFromUntrustedUrlRT = exports.getUrlValueFromState = exports.getStateFromUrlValue = void 0;
var rt = _interopRequireWildcard(require("io-ts"));
var _deep_compact_object = require("../../../common/utils/deep_compact_object");
var _url_schema = require("../../../common/url_schema");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const getStateFromUrlValue = urlValue => (0, _deep_compact_object.deepCompactObject)({
  table: urlValue.table,
  flyout: getFlyoutFromUrlValue(urlValue.flyout),
  filters: urlValue.filters
});
exports.getStateFromUrlValue = getStateFromUrlValue;
const getUrlValueFromState = state => (0, _deep_compact_object.deepCompactObject)({
  table: state.table,
  flyout: state.flyout,
  filters: state.filters,
  v: 1
});
exports.getUrlValueFromState = getUrlValueFromState;
const stateFromUrlSchemaRT = new rt.Type('stateFromUrlSchemaRT', rt.never.is, (urlSchema, _context) => rt.success(getStateFromUrlValue(urlSchema)), getUrlValueFromState);
const stateFromUntrustedUrlRT = exports.stateFromUntrustedUrlRT = _url_schema.datasetQualityUrlSchemaV1.urlSchemaRT.pipe(stateFromUrlSchemaRT);
const getFlyoutFromUrlValue = flyout => (0, _deep_compact_object.deepCompactObject)({
  ...(flyout ? {
    ...flyout,
    dataset: flyout.dataset ? {
      ...flyout.dataset,
      integration: flyout.dataset.integration ? {
        ...flyout.dataset.integration,
        datasets: {}
      } : undefined
    } : undefined
  } : {})
});