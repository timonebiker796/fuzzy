"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.taskDefinitionSchema = exports.isFailedRunResult = exports.getDeleteTaskRunResult = exports.TaskStatus = exports.TaskPriority = exports.TaskLifecycleResult = void 0;
var _configSchema = require("@kbn/config-schema");
var _lodash = require("lodash");
var _result_type = require("./lib/result_type");
var _intervals = require("./lib/intervals");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
let TaskPriority = exports.TaskPriority = /*#__PURE__*/function (TaskPriority) {
  TaskPriority[TaskPriority["Low"] = 1] = "Low";
  TaskPriority[TaskPriority["Normal"] = 50] = "Normal";
  return TaskPriority;
}({});
/*
 * Type definitions and validations for tasks.
 */
/**
 * Require
 * @desc Create a Subtype of type T `T` such that the property under key `P` becomes required
 * @example
 *    type TaskInstance = {
 *      id?: string;
 *      name: string;
 *    };
 *
 *    // This type is now defined as { id: string; name: string; }
 *    type TaskInstanceWithId = Require<TaskInstance, 'id'>;
 */
/**
 * The run context is passed into a task's run function as its sole argument.
 */
/**
 * The return value of a task's run function should be a promise of RunResult.
 */
const getDeleteTaskRunResult = () => ({
  state: {},
  shouldDeleteTask: true
});
exports.getDeleteTaskRunResult = getDeleteTaskRunResult;
const isFailedRunResult = result => {
  var _error;
  return !!((_error = result === null || result === void 0 ? void 0 : result.error) !== null && _error !== void 0 ? _error : false);
};
exports.isFailedRunResult = isFailedRunResult;
const taskDefinitionSchema = exports.taskDefinitionSchema = _configSchema.schema.object({
  /**
   * A unique identifier for the type of task being defined.
   */
  type: _configSchema.schema.string(),
  /**
   * A brief, human-friendly title for this task.
   */
  title: _configSchema.schema.maybe(_configSchema.schema.string()),
  /**
   * Priority of this task type. Defaults to "NORMAL" if not defined
   */
  priority: _configSchema.schema.maybe(_configSchema.schema.number()),
  /**
   * An optional more detailed description of what this task does.
   */
  description: _configSchema.schema.maybe(_configSchema.schema.string()),
  /**
   * How long, in minutes or seconds, the system should wait for the task to complete
   * before it is considered to be timed out. (e.g. '5m', the default). If
   * the task takes longer than this, Kibana will send it a kill command and
   * the task will be re-attempted.
   */
  timeout: _configSchema.schema.string({
    defaultValue: '5m'
  }),
  /**
   * Up to how many times the task should retry when it fails to run. This will
   * default to the global variable.
   */
  maxAttempts: _configSchema.schema.maybe(_configSchema.schema.number({
    min: 1
  })),
  /**
   * The maximum number tasks of this type that can be run concurrently per Kibana instance.
   * Setting this value will force Task Manager to poll for this task type seperatly from other task types
   * which can add significant load to the ES cluster, so please use this configuration only when absolutly necesery.
   */
  maxConcurrency: _configSchema.schema.maybe(_configSchema.schema.number({
    min: 0
  })),
  stateSchemaByVersion: _configSchema.schema.maybe(_configSchema.schema.recordOf(_configSchema.schema.string(), _configSchema.schema.object({
    schema: _configSchema.schema.any(),
    up: _configSchema.schema.any()
  }))),
  paramsSchema: _configSchema.schema.maybe(_configSchema.schema.any())
}, {
  validate({
    timeout,
    priority
  }) {
    if (!(0, _intervals.isInterval)(timeout) || (0, _result_type.isErr)((0, _result_type.tryAsResult)(() => (0, _intervals.parseIntervalAsMillisecond)(timeout)))) {
      return `Invalid timeout "${timeout}". Timeout must be of the form "{number}{cadance}" where number is an integer. Example: 5m.`;
    }
    if (priority && (!(0, _lodash.isNumber)(priority) || !(priority in TaskPriority))) {
      return `Invalid priority "${priority}". Priority must be one of ${Object.keys(TaskPriority).filter(key => isNaN(Number(key))).map(key => `${key} => ${TaskPriority[key]}`)}`;
    }
  }
});

/**
 * Defines a task which can be scheduled and run by the Kibana
 * task manager.
 */
let TaskStatus = exports.TaskStatus = /*#__PURE__*/function (TaskStatus) {
  TaskStatus["Idle"] = "idle";
  TaskStatus["Claiming"] = "claiming";
  TaskStatus["Running"] = "running";
  TaskStatus["Failed"] = "failed";
  TaskStatus["ShouldDelete"] = "should_delete";
  TaskStatus["Unrecognized"] = "unrecognized";
  TaskStatus["DeadLetter"] = "dead_letter";
  return TaskStatus;
}({});
let TaskLifecycleResult = exports.TaskLifecycleResult = /*#__PURE__*/function (TaskLifecycleResult) {
  TaskLifecycleResult["NotFound"] = "notFound";
  return TaskLifecycleResult;
}({});
/*
 * A task instance represents all of the data required to store, fetch,
 * and execute a task.
 */
/**
 * Support for the depracated interval field, this should be removed in version 8.0.0
 * and marked as a breaking change, ideally nutil then all usage of `interval` will be
 * replaced with use of `schedule`
 */
/**
 * A task instance that has an id.
 */
/**
 * A task instance that has an id and is ready for storage.
 */
/**
 * A task instance that has an id and is ready for storage.
 */