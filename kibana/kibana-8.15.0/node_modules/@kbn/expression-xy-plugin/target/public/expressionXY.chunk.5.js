(window.expressionXY_bundle_jsonpfunction=window.expressionXY_bundle_jsonpfunction||[]).push([[5],{85:function(e,n,i){"use strict";i.r(n),i.d(n,"legendConfigFn",(function(){return t}));var s=i(0),r=i(2);const t=async(e,n)=>{if(n.isInside){if(n.position)throw new Error(s.i18n.translate("expressionXY.reusable.function.legendConfig.errors.positionUsageWithIsInsideError",{defaultMessage:"`position` argument is not applied if `isInside = true`. Please, use `horizontalAlignment` and `verticalAlignment` arguments instead."}));if(void 0!==n.legendSize)throw new Error(s.i18n.translate("expressionXY.reusable.function.legendConfig.errors.legendSizeWithFalsyIsInsideError",{defaultMessage:"`legendSize` argument is not applied if `isInside = false`."}))}if(!n.isInside){if(n.verticalAlignment||n.horizontalAlignment)throw new Error(s.i18n.translate("expressionXY.reusable.function.legendConfig.errors.alignmentUsageWithFalsyIsInsideError",{defaultMessage:"`horizontalAlignment` and `verticalAlignment` arguments are not applied if `isInside = false`. Please, use the `position` argument instead."}));if(void 0!==n.floatingColumns)throw new Error(s.i18n.translate("expressionXY.reusable.function.legendConfig.errors.floatingColumnsWithFalsyIsInsideError",{defaultMessage:"`floatingColumns` arguments are not applied if `isInside = false`."}))}return{type:r.p,...n}}}}]);