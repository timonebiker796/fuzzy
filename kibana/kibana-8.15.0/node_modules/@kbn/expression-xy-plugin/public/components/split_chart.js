"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SplitChart = void 0;
var _react = _interopRequireWildcard(require("react"));
var _charts = require("@elastic/charts");
var _utils = require("@kbn/visualizations-plugin/common/utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

const SPLIT_COLUMN = '__split_column__';
const SPLIT_ROW = '__split_row__';
const SplitChart = ({
  splitColumnAccessor,
  splitRowAccessor,
  columns
}) => {
  const getData = (0, _react.useCallback)((datum, accessor) => {
    const splitColumn = (0, _utils.getColumnByAccessor)(accessor, columns);
    return datum[splitColumn.id];
  }, [columns]);
  return splitColumnAccessor || splitRowAccessor ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, splitColumnAccessor && /*#__PURE__*/_react.default.createElement(_charts.GroupBy, {
    id: SPLIT_COLUMN,
    by: (spec, datum) => getData(datum, splitColumnAccessor),
    sort: _charts.Predicate.DataIndex
  }), splitRowAccessor && /*#__PURE__*/_react.default.createElement(_charts.GroupBy, {
    id: SPLIT_ROW,
    by: (spec, datum) => getData(datum, splitRowAccessor),
    sort: _charts.Predicate.DataIndex
  }), /*#__PURE__*/_react.default.createElement(_charts.SmallMultiples, {
    splitVertically: splitRowAccessor ? SPLIT_ROW : undefined,
    splitHorizontally: splitColumnAccessor ? SPLIT_COLUMN : undefined
  })) : null;
};
exports.SplitChart = SplitChart;