"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ARIA_COLINDEX_ATTRIBUTE", {
  enumerable: true,
  get: function () {
    return _accessibility.ARIA_COLINDEX_ATTRIBUTE;
  }
});
Object.defineProperty(exports, "ARIA_ROWINDEX_ATTRIBUTE", {
  enumerable: true,
  get: function () {
    return _accessibility.ARIA_ROWINDEX_ATTRIBUTE;
  }
});
Object.defineProperty(exports, "DATA_COLINDEX_ATTRIBUTE", {
  enumerable: true,
  get: function () {
    return _accessibility.DATA_COLINDEX_ATTRIBUTE;
  }
});
Object.defineProperty(exports, "DATA_ROWINDEX_ATTRIBUTE", {
  enumerable: true,
  get: function () {
    return _accessibility.DATA_ROWINDEX_ATTRIBUTE;
  }
});
Object.defineProperty(exports, "FIRST_ARIA_INDEX", {
  enumerable: true,
  get: function () {
    return _accessibility.FIRST_ARIA_INDEX;
  }
});
Object.defineProperty(exports, "arrayIndexToAriaIndex", {
  enumerable: true,
  get: function () {
    return _accessibility.arrayIndexToAriaIndex;
  }
});
Object.defineProperty(exports, "elementOrChildrenHasFocus", {
  enumerable: true,
  get: function () {
    return _accessibility.elementOrChildrenHasFocus;
  }
});
Object.defineProperty(exports, "focusColumn", {
  enumerable: true,
  get: function () {
    return _accessibility.focusColumn;
  }
});
Object.defineProperty(exports, "getFocusedAriaColindexCell", {
  enumerable: true,
  get: function () {
    return _accessibility.getFocusedAriaColindexCell;
  }
});
Object.defineProperty(exports, "getFocusedDataColindexCell", {
  enumerable: true,
  get: function () {
    return _accessibility.getFocusedDataColindexCell;
  }
});
Object.defineProperty(exports, "getNotesContainerClassName", {
  enumerable: true,
  get: function () {
    return _accessibility.getNotesContainerClassName;
  }
});
Object.defineProperty(exports, "getRowRendererClassName", {
  enumerable: true,
  get: function () {
    return _accessibility.getRowRendererClassName;
  }
});
Object.defineProperty(exports, "getTableSkipFocus", {
  enumerable: true,
  get: function () {
    return _accessibility.getTableSkipFocus;
  }
});
Object.defineProperty(exports, "handleSkipFocus", {
  enumerable: true,
  get: function () {
    return _accessibility.handleSkipFocus;
  }
});
Object.defineProperty(exports, "isArrowDownOrArrowUp", {
  enumerable: true,
  get: function () {
    return _accessibility.isArrowDownOrArrowUp;
  }
});
Object.defineProperty(exports, "isArrowUp", {
  enumerable: true,
  get: function () {
    return _accessibility.isArrowUp;
  }
});
Object.defineProperty(exports, "isEscape", {
  enumerable: true,
  get: function () {
    return _accessibility.isEscape;
  }
});
Object.defineProperty(exports, "isTab", {
  enumerable: true,
  get: function () {
    return _accessibility.isTab;
  }
});
Object.defineProperty(exports, "onKeyDownFocusHandler", {
  enumerable: true,
  get: function () {
    return _accessibility.onKeyDownFocusHandler;
  }
});
exports.plugin = plugin;
Object.defineProperty(exports, "stopPropagationAndPreventDefault", {
  enumerable: true,
  get: function () {
    return _accessibility.stopPropagationAndPreventDefault;
  }
});
var _plugin = require("./plugin");
var _accessibility = require("../common/utils/accessibility");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

// Careful of exporting anything from this file as any file(s) you export here will cause your page bundle size to increase.
// If you're using functions/types/etc... internally or within integration tests it's best to import directly from their paths
// than expose the functions/types/etc... here. You should _only_ expose functions/types/etc... that need to be shared with other plugins here.

// When you do have to add things here you might want to consider creating a package to share with
// other plugins instead as packages are easier to break down and you do not have to carry the cost of extra plugin weight on
// first download since the other plugins/areas of your code can directly pull from the package in their async imports.
// See: https://docs.elastic.dev/kibana-dev-docs/key-concepts/platform-intro#public-plugin-api

// This exports static code and TypeScript types,
// as well as, Kibana Platform `plugin()` initializer.
function plugin() {
  return new _plugin.TimelinesPlugin();
}