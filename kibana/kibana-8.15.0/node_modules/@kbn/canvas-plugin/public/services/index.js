"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  pluginServices: true,
  useCustomElementService: true,
  useDataViewsService: true,
  useEmbeddablesService: true,
  useExpressionsService: true,
  useFiltersService: true,
  useLabsService: true,
  useNavLinkService: true,
  useNotifyService: true,
  usePlatformService: true,
  useReportingService: true,
  useVisualizationsService: true,
  useWorkpadService: true,
  useUiActionsService: true
};
exports.useWorkpadService = exports.useVisualizationsService = exports.useUiActionsService = exports.useReportingService = exports.usePlatformService = exports.useNotifyService = exports.useNavLinkService = exports.useLabsService = exports.useFiltersService = exports.useExpressionsService = exports.useEmbeddablesService = exports.useDataViewsService = exports.useCustomElementService = exports.pluginServices = void 0;
var _legacy = require("./legacy");
Object.keys(_legacy).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _legacy[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _legacy[key];
    }
  });
});
var _public = require("@kbn/presentation-util-plugin/public");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const pluginServices = exports.pluginServices = new _public.PluginServices();
const useCustomElementService = () => (() => pluginServices.getHooks().customElement.useService())();
exports.useCustomElementService = useCustomElementService;
const useDataViewsService = () => (() => pluginServices.getHooks().dataViews.useService())();
exports.useDataViewsService = useDataViewsService;
const useEmbeddablesService = () => (() => pluginServices.getHooks().embeddables.useService())();
exports.useEmbeddablesService = useEmbeddablesService;
const useExpressionsService = () => (() => pluginServices.getHooks().expressions.useService())();
exports.useExpressionsService = useExpressionsService;
const useFiltersService = () => (() => pluginServices.getHooks().filters.useService())();
exports.useFiltersService = useFiltersService;
const useLabsService = () => (() => pluginServices.getHooks().labs.useService())();
exports.useLabsService = useLabsService;
const useNavLinkService = () => (() => pluginServices.getHooks().navLink.useService())();
exports.useNavLinkService = useNavLinkService;
const useNotifyService = () => (() => pluginServices.getHooks().notify.useService())();
exports.useNotifyService = useNotifyService;
const usePlatformService = () => (() => pluginServices.getHooks().platform.useService())();
exports.usePlatformService = usePlatformService;
const useReportingService = () => (() => pluginServices.getHooks().reporting.useService())();
exports.useReportingService = useReportingService;
const useVisualizationsService = () => (() => pluginServices.getHooks().visualizations.useService())();
exports.useVisualizationsService = useVisualizationsService;
const useWorkpadService = () => (() => pluginServices.getHooks().workpad.useService())();
exports.useWorkpadService = useWorkpadService;
const useUiActionsService = () => (() => pluginServices.getHooks().uiActions.useService())();
exports.useUiActionsService = useUiActionsService;