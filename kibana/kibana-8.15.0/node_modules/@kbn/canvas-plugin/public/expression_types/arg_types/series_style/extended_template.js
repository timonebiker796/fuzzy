"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExtendedTemplate = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _eui = require("@elastic/eui");
var _objectPathImmutable = _interopRequireDefault(require("object-path-immutable"));
var _lodash = require("lodash");
var _i18n = require("../../../../i18n");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const {
  set,
  del
} = _objectPathImmutable.default;
const {
  SeriesStyle: strings
} = _i18n.ArgTypesStrings;
const ExtendedTemplate = props => {
  const {
    typeInstance,
    onValueChange,
    resolved: {
      labels
    },
    argValue
  } = props;
  const chain = (0, _lodash.get)(argValue, 'chain.0', {});
  const chainArgs = (0, _lodash.get)(chain, 'arguments', {});
  const selectedSeries = (0, _lodash.get)(chainArgs, 'label.0', '');
  let name = '';
  if (typeInstance) {
    name = typeInstance.name;
  }
  const fields = (0, _lodash.get)(typeInstance, 'options.include', []);
  const hasPropFields = fields.some(field => ['lines', 'bars', 'points'].indexOf(field) !== -1);
  const handleChange = (argName, ev) => {
    const fn = ev.target.value === '' ? del : set;
    const newValue = fn(argValue, `chain.0.arguments.${argName}`, [ev.target.value]);
    return onValueChange(newValue);
  };

  // TODO: add fill and stack options
  // TODO: add label name auto-complete
  const values = [{
    value: 0,
    text: strings.getNoneOption()
  }, {
    value: 1,
    text: '1'
  }, {
    value: 2,
    text: '2'
  }, {
    value: 3,
    text: '3'
  }, {
    value: 4,
    text: '4'
  }, {
    value: 5,
    text: '5'
  }];
  const labelOptions = [{
    value: '',
    text: strings.getSelectSeriesOption()
  }];
  labels.sort().forEach(val => labelOptions.push({
    value: val,
    text: val
  }));
  return /*#__PURE__*/_react.default.createElement("div", null, name !== 'defaultStyle' && /*#__PURE__*/_react.default.createElement(_react.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    label: strings.getSeriesIdentifierLabel(),
    display: "columnCompressed"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiSelect, {
    compressed: true,
    value: selectedSeries,
    options: labelOptions,
    onChange: ev => handleChange('label', ev)
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  })), hasPropFields && /*#__PURE__*/_react.default.createElement(_react.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    gutterSize: "s"
  }, fields.includes('lines') && /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    label: strings.getLineLabel(),
    display: "rowCompressed"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiSelect, {
    value: (0, _lodash.get)(chainArgs, 'lines.0', 0),
    options: values,
    compressed: true,
    onChange: ev => handleChange('lines', ev)
  }))), fields.includes('bars') && /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    label: strings.getBarLabel(),
    display: "rowCompressed"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiSelect, {
    value: (0, _lodash.get)(chainArgs, 'bars.0', 0),
    options: values,
    compressed: true,
    onChange: ev => handleChange('bars', ev)
  }))), fields.includes('points') && /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    label: strings.getPointLabel(),
    display: "rowCompressed"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiSelect, {
    value: (0, _lodash.get)(chainArgs, 'points.0', 0),
    options: values,
    compressed: true,
    onChange: ev => handleChange('points', ev)
  }))))));
};
exports.ExtendedTemplate = ExtendedTemplate;
ExtendedTemplate.displayName = 'SeriesStyleArgAdvancedInput';
ExtendedTemplate.propTypes = {
  onValueChange: _propTypes.default.func.isRequired,
  argValue: _propTypes.default.any.isRequired,
  typeInstance: _propTypes.default.object,
  resolved: _propTypes.default.shape({
    labels: _propTypes.default.array.isRequired
  }).isRequired
};