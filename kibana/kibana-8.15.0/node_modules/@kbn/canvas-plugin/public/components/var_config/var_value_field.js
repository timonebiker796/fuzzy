"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VarValueField = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const strings = {
  getBooleanOptionsLegend: () => _i18n.i18n.translate('xpack.canvas.varConfigVarValueField.booleanOptionsLegend', {
    defaultMessage: 'Boolean value'
  }),
  getFalseOption: () => _i18n.i18n.translate('xpack.canvas.varConfigVarValueField.falseOption', {
    defaultMessage: 'False'
  }),
  getTrueOption: () => _i18n.i18n.translate('xpack.canvas.varConfigVarValueField.trueOption', {
    defaultMessage: 'True'
  })
};
const VarValueField = ({
  type,
  value,
  onChange
}) => {
  const idPrefix = (0, _eui.htmlIdGenerator)()();
  const options = [{
    id: `${idPrefix}-true`,
    label: strings.getTrueOption()
  }, {
    id: `${idPrefix}-false`,
    label: strings.getFalseOption()
  }];
  const onNumberChange = (0, _react.useCallback)(e => {
    const floatVal = parseFloat(e.target.value);
    const varValue = isNaN(floatVal) ? '' : floatVal;
    onChange(varValue);
  }, [onChange]);
  if (type === 'number') {
    return /*#__PURE__*/_react.default.createElement(_eui.EuiFieldNumber, {
      compressed: true,
      name: "value",
      value: value,
      onChange: onNumberChange
    });
  }
  if (type === 'boolean') {
    return /*#__PURE__*/_react.default.createElement(_eui.EuiButtonGroup, {
      name: "value",
      options: options,
      idSelected: `${idPrefix}-${value}`,
      onChange: id => {
        const val = id.replace(`${idPrefix}-`, '') === 'true';
        onChange(val);
      },
      buttonSize: "compressed",
      isFullWidth: true,
      legend: strings.getBooleanOptionsLegend()
    });
  }
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFieldText, {
    compressed: true,
    name: "value",
    value: String(value),
    onChange: e => onChange(e.target.value)
  });
};
exports.VarValueField = VarValueField;