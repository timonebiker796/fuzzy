"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RoutingLink = exports.RoutingButtonIcon = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _reactRouterDom = require("react-router-dom");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const isModifiedEvent = event => !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
const isLeftClickEvent = event => event.button === 0;
const isTargetBlank = event => {
  const target = event.target.getAttribute('target');
  return target && target !== '_self';
};
const RoutingLink = ({
  to,
  ...rest
}) => {
  const history = (0, _reactRouterDom.useHistory)();
  const onClick = (0, _react.useCallback)(event => {
    if (event.defaultPrevented) {
      return;
    }

    // Let the browser handle links that open new tabs/windows
    if (isModifiedEvent(event) || !isLeftClickEvent(event) || isTargetBlank(event)) {
      return;
    }

    // Prevent regular link behavior, which causes a browser refresh.
    event.preventDefault();

    // Push the route to the history.
    history.push(to);
  }, [history, to]);

  // Generate the correct link href (with basename accounted for)
  const href = history.createHref({
    pathname: to
  });
  const props = {
    ...rest,
    href,
    onClick
  };
  return /*#__PURE__*/_react.default.createElement(_eui.EuiLink, props);
};
exports.RoutingLink = RoutingLink;
const RoutingButtonIcon = ({
  to,
  ...rest
}) => {
  const history = (0, _reactRouterDom.useHistory)();
  const onClick = (0, _react.useCallback)(event => {
    if (event.defaultPrevented) {
      return;
    }

    // Let the browser handle links that open new tabs/windows
    if (isModifiedEvent(event) || !isLeftClickEvent(event) || isTargetBlank(event)) {
      return;
    }

    // Prevent regular link behavior, which causes a browser refresh.
    event.preventDefault();

    // Push the route to the history.
    history.push(to);
  }, [history, to]);

  // Generate the correct link href (with basename accounted for)
  const href = history.createHref({
    pathname: to
  });
  const props = {
    ...rest,
    href,
    onClick
  };
  return /*#__PURE__*/_react.default.createElement(_eui.EuiButtonIcon, props);
};
exports.RoutingButtonIcon = RoutingButtonIcon;