"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FunctionFormContextPending = void 0;
var _react = _interopRequireWildcard(require("react"));
var _usePrevious = _interopRequireDefault(require("react-use/lib/usePrevious"));
var _loading = require("../loading");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const FunctionFormContextPending = props => {
  const {
    contextExpression,
    expressionType,
    context,
    updateContext
  } = props;
  const prevContextExpression = (0, _usePrevious.default)(contextExpression);
  const fetchContext = (0, _react.useCallback)((force = false) => {
    // dispatch context update if none is provided
    if (force || context == null && expressionType.requiresContext) {
      updateContext();
    }
  }, [context, expressionType.requiresContext, updateContext]);
  (0, _react.useEffect)(() => {
    const forceUpdate = expressionType.requiresContext && prevContextExpression !== contextExpression;
    fetchContext(forceUpdate);
  }, [contextExpression, expressionType, fetchContext, prevContextExpression]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "canvasFunctionForm canvasFunctionForm--loading"
  }, /*#__PURE__*/_react.default.createElement(_loading.Loading, null));
};
exports.FunctionFormContextPending = FunctionFormContextPending;