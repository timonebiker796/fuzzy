"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WorkpadHeader = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactRedux = require("react-redux");
var _elements_registry = require("../../lib/elements_registry");
var _app = require("../../state/selectors/app");
var _workpad = require("../../state/selectors/workpad");
var _workpad2 = require("../../state/actions/workpad");
var _elements = require("../../state/actions/elements");
var _workpad_header = require("./workpad_header.component");
var _embeddable_flyout = require("../embeddable_flyout");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

// @ts-expect-error untyped local

// @ts-expect-error untyped local

const mapStateToProps = state => ({
  isWriteable: (0, _workpad.isWriteable)(state) && (0, _app.canUserWrite)(state),
  canUserWrite: (0, _app.canUserWrite)(state),
  selectedPage: (0, _workpad.getSelectedPage)(state),
  pageId: (0, _workpad.getSelectedPage)(state)
});
const mapDispatchToProps = dispatch => ({
  onSetWriteable: isWorkpadWriteable => dispatch((0, _workpad2.setWriteable)(isWorkpadWriteable)),
  addElement: pageId => element => dispatch((0, _elements.addElement)(pageId, element))
});
const mergeProps = (stateProps, dispatchProps, ownProps) => ({
  ...stateProps,
  ...dispatchProps,
  ...ownProps,
  renderEmbedPanel: onClose => /*#__PURE__*/_react.default.createElement(_embeddable_flyout.AddEmbeddablePanel, {
    onClose: onClose
  }),
  addElement: dispatchProps.addElement(stateProps.pageId),
  elements: _elements_registry.elementsRegistry.toJS()
});
const WorkpadHeader = exports.WorkpadHeader = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, mergeProps)(_workpad_header.WorkpadHeader);