"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WorkpadTableTools = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactRedux = require("react-redux");
var _app = require("../../../state/selectors/app");
var _hooks = require("../hooks");
var _hooks2 = require("../../hooks");
var _workpad_table_tools = require("./workpad_table_tools.component");
var _my_workpads = require("./my_workpads");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const WorkpadTableTools = ({
  selectedWorkpadIds
}) => {
  const deleteWorkpads = (0, _hooks.useDeleteWorkpads)();
  const downloadWorkpad = (0, _hooks2.useDownloadWorkpad)();
  const context = (0, _react.useContext)(_my_workpads.WorkpadsContext);
  const {
    canUserWrite
  } = (0, _reactRedux.useSelector)(state => ({
    canUserWrite: (0, _app.canUserWrite)(state)
  }));
  if (context === null || selectedWorkpadIds.length <= 0) {
    return null;
  }
  const {
    workpads,
    setWorkpads
  } = context;
  const onExport = () => selectedWorkpadIds.map(id => downloadWorkpad(id));
  const onDelete = async () => {
    const {
      removedIds
    } = await deleteWorkpads(selectedWorkpadIds);
    setWorkpads(workpads.filter(workpad => !removedIds.includes(workpad.id)));
  };
  return /*#__PURE__*/_react.default.createElement(_workpad_table_tools.WorkpadTableTools, {
    workpads,
    selectedWorkpadIds,
    canUserWrite,
    onDeleteWorkpads: onDelete,
    onExportWorkpads: onExport
  });
};
exports.WorkpadTableTools = WorkpadTableTools;