"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ShardFailureDetails = ShardFailureDetails;
exports.formatKey = formatKey;
exports.formatValueByKey = formatValueByKey;
var _react = _interopRequireDefault(require("react"));
var _i18n = require("@kbn/i18n");
var _eui = require("@elastic/eui");
var _std = require("@kbn/std");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

/**
 * Provides pretty formatting of a given key string
 * e.g. formats "this_key.is_nice" to "This key is nice"
 * @param key
 */
function formatKey(key) {
  const nameCapitalized = key.charAt(0).toUpperCase() + key.slice(1);
  return nameCapitalized.replace(/[\._]/g, ' ');
}
/**
 * Adds a EuiCodeBlock to values of  `script` and `script_stack` key
 * Values of other keys are handled a strings
 * @param value
 * @param key
 */
function formatValueByKey(value, key) {
  if (key === 'script' || key === 'script_stack') {
    const valueScript = Array.isArray(value) ? value.join('\n') : String(value);
    return /*#__PURE__*/_react.default.createElement(_eui.EuiCodeBlock, {
      language: "java",
      paddingSize: "s",
      isCopyable: true
    }, valueScript);
  }
  return /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    size: "xs"
  }, String(value));
}
function ShardFailureDetails({
  failure
}) {
  const flattendReason = (0, _std.getFlattenedObject)(failure.reason);
  const reasonItems = Object.entries(flattendReason).filter(([key]) => key !== 'type').map(([key, value]) => ({
    title: formatKey(key),
    description: formatValueByKey(value, key)
  }));
  const items = [{
    title: _i18n.i18n.translate('inspector.requests.clusters.shards.details.nodeLabel', {
      defaultMessage: 'Node'
    }),
    description: formatValueByKey(failure.node, 'node')
  }, ...reasonItems];
  return /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    size: "xs"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiDescriptionList, {
    type: "responsiveColumn",
    columnWidths: ['30%', '70%'],
    listItems: items,
    compressed: true
  }));
}