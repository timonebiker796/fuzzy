"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bulkPromptsRoute = void 0;
var _moment = _interopRequireDefault(require("moment"));
var _securitysolutionEsUtils = require("@kbn/securitysolution-es-utils");
var _elasticAssistantCommon = require("@kbn/elastic-assistant-common");
var _bulk_crud_prompts_route = require("@kbn/elastic-assistant-common/impl/schemas/prompts/bulk_crud_prompts_route.gen");
var _common = require("@kbn/elastic-assistant-common/impl/schemas/common");
var _constants = require("../../../common/constants");
var _utils = require("../utils");
var _helpers = require("../../ai_assistant_data_clients/prompts/helpers");
var _helpers2 = require("../helpers");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const buildBulkResponse = (response, {
  errors = [],
  updated = [],
  created = [],
  deleted = [],
  skipped = []
}) => {
  const numSucceeded = updated.length + created.length + deleted.length;
  const numSkipped = skipped.length;
  const numFailed = errors.length;
  const summary = {
    failed: numFailed,
    succeeded: numSucceeded,
    skipped: numSkipped,
    total: numSucceeded + numFailed + numSkipped
  };
  const results = {
    updated,
    created,
    deleted,
    skipped
  };
  if (numFailed > 0) {
    return response.custom({
      headers: {
        'content-type': 'application/json'
      },
      body: {
        message: summary.succeeded > 0 ? 'Bulk edit partially failed' : 'Bulk edit failed',
        attributes: {
          errors: errors.map(e => {
            var _e$status;
            return {
              status_code: (_e$status = e.status) !== null && _e$status !== void 0 ? _e$status : 500,
              prompts: [{
                id: e.document.id,
                name: ''
              }],
              message: e.message
            };
          }),
          results,
          summary
        }
      },
      statusCode: 500
    });
  }
  const responseBody = {
    success: true,
    prompts_count: summary.total,
    attributes: {
      results,
      summary
    }
  };
  return response.ok({
    body: responseBody
  });
};
const bulkPromptsRoute = (router, logger) => {
  router.versioned.post({
    access: 'public',
    path: _elasticAssistantCommon.ELASTIC_AI_ASSISTANT_PROMPTS_URL_BULK_ACTION,
    options: {
      tags: ['access:elasticAssistant'],
      timeout: {
        idleSocket: _moment.default.duration(15, 'minutes').asMilliseconds()
      }
    }
  }).addVersion({
    version: _elasticAssistantCommon.API_VERSIONS.public.v1,
    validate: {
      request: {
        body: (0, _common.buildRouteValidationWithZod)(_bulk_crud_prompts_route.PerformBulkActionRequestBody)
      }
    }
  }, async (context, request, response) => {
    var _body$update, _body$create, _body$delete$ids$leng, _body$delete, _body$delete$ids;
    const {
      body
    } = request;
    const assistantResponse = (0, _utils.buildResponse)(response);
    const operationsCount = (body !== null && body !== void 0 && body.update ? (_body$update = body.update) === null || _body$update === void 0 ? void 0 : _body$update.length : 0) + (body !== null && body !== void 0 && body.create ? (_body$create = body.create) === null || _body$create === void 0 ? void 0 : _body$create.length : 0) + (body !== null && body !== void 0 && body.delete ? (_body$delete$ids$leng = (_body$delete = body.delete) === null || _body$delete === void 0 ? void 0 : (_body$delete$ids = _body$delete.ids) === null || _body$delete$ids === void 0 ? void 0 : _body$delete$ids.length) !== null && _body$delete$ids$leng !== void 0 ? _body$delete$ids$leng : 0 : 0);
    if (operationsCount > _constants.PROMPTS_TABLE_MAX_PAGE_SIZE) {
      return assistantResponse.error({
        body: `More than ${_constants.PROMPTS_TABLE_MAX_PAGE_SIZE} ids sent for bulk edit action.`,
        statusCode: 400
      });
    }
    const abortController = new AbortController();

    // subscribing to completed$, because it handles both cases when request was completed and aborted.
    // when route is finished by timeout, aborted$ is not getting fired
    request.events.completed$.subscribe(() => abortController.abort());
    try {
      var _body$create2, _body$delete2, _body$update2;
      const ctx = await context.resolve(['core', 'elasticAssistant', 'licensing']);
      const license = ctx.licensing.license;
      if (!(0, _helpers2.hasAIAssistantLicense)(license)) {
        return response.forbidden({
          body: {
            message: _helpers2.UPGRADE_LICENSE_MESSAGE
          }
        });
      }
      const authenticatedUser = ctx.elasticAssistant.getCurrentUser();
      if (authenticatedUser == null) {
        return assistantResponse.error({
          body: `Authenticated user not found`,
          statusCode: 401
        });
      }
      const dataClient = await ctx.elasticAssistant.getAIAssistantPromptsDataClient();
      if (body.create && body.create.length > 0) {
        const result = await (dataClient === null || dataClient === void 0 ? void 0 : dataClient.findDocuments({
          perPage: 100,
          page: 1,
          filter: `users:{ id: "${authenticatedUser === null || authenticatedUser === void 0 ? void 0 : authenticatedUser.profile_uid}" } AND (${body.create.map(c => `name:${c.name}`).join(' OR ')})`,
          fields: ['name']
        }));
        if ((result === null || result === void 0 ? void 0 : result.data) != null && result.total > 0) {
          return assistantResponse.error({
            statusCode: 409,
            body: `prompt with id: "${result.data.hits.hits.map(c => c._id).join(',')}" already exists`
          });
        }
      }
      const writer = await (dataClient === null || dataClient === void 0 ? void 0 : dataClient.getWriter());
      const changedAt = new Date().toISOString();
      const {
        errors,
        docs_created: docsCreated,
        docs_updated: docsUpdated,
        docs_deleted: docsDeleted
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      } = await writer.bulk({
        documentsToCreate: (_body$create2 = body.create) === null || _body$create2 === void 0 ? void 0 : _body$create2.map(f => (0, _helpers.transformToCreateScheme)(authenticatedUser, changedAt, f)),
        documentsToDelete: (_body$delete2 = body.delete) === null || _body$delete2 === void 0 ? void 0 : _body$delete2.ids,
        documentsToUpdate: (_body$update2 = body.update) === null || _body$update2 === void 0 ? void 0 : _body$update2.map(f => (0, _helpers.transformToUpdateScheme)(authenticatedUser, changedAt, f)),
        getUpdateScript: document => (0, _helpers.getUpdateScript)({
          prompt: document,
          isPatch: true
        }),
        authenticatedUser
      });
      const created = docsCreated.length > 0 ? await (dataClient === null || dataClient === void 0 ? void 0 : dataClient.findDocuments({
        page: 1,
        perPage: 100,
        filter: docsCreated.map(c => `_id:${c}`).join(' OR ')
      })) : undefined;
      return buildBulkResponse(response, {
        updated: docsUpdated ? (0, _helpers.transformESToPrompts)(docsUpdated) : [],
        created: created ? (0, _helpers.transformESSearchToPrompts)(created.data) : [],
        deleted: docsDeleted !== null && docsDeleted !== void 0 ? docsDeleted : [],
        errors
      });
    } catch (err) {
      const error = (0, _securitysolutionEsUtils.transformError)(err);
      return assistantResponse.error({
        body: error.message,
        statusCode: error.statusCode
      });
    }
  });
};
exports.bulkPromptsRoute = bulkPromptsRoute;