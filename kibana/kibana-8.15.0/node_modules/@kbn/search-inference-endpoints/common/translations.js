"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VIEW_YOUR_MODELS_LINK = exports.UNABLE_TO_CREATE_INFERENCE_ENDPOINT = exports.TRAINED_MODELS_STAT_GATHER_FAILED = exports.TASK_TYPE = exports.START_WITH_PREPARED_ENDPOINTS_LABEL = exports.SERVICE_PROVIDER = exports.SEMANTIC_SEARCH_WITH_ELSER_LINK = exports.SEMANTIC_SEARCH_WITH_E5_LINK = exports.MANAGE_INFERENCE_ENDPOINTS_LABEL = exports.LEARN_HOW_TO_CREATE_INFERENCE_ENDPOINTS_LINK = exports.INFERENCE_ENDPOINT_LABEL = exports.INFERENCE_ENDPOINT_ALREADY_EXISTS = exports.FORBIDDEN_TO_ACCESS_TRAINED_MODELS = exports.ERROR_TITLE = exports.ENDPOINT_CREATION_FAILED = exports.ENDPOINT_ADDED_SUCCESS_DESCRIPTION = exports.ENDPOINT_ADDED_SUCCESS = exports.ENDPOINT = exports.ELSER_TITLE = exports.ELSER_DESCRIPTION = exports.E5_TITLE = exports.E5_DESCRIPTION = exports.CREATE_FIRST_INFERENCE_ENDPOINT_DESCRIPTION = exports.CANCEL = void 0;
var _i18n = require("@kbn/i18n");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const INFERENCE_ENDPOINT_LABEL = exports.INFERENCE_ENDPOINT_LABEL = _i18n.i18n.translate('xpack.searchInferenceEndpoints.inferenceEndpointsLabel', {
  defaultMessage: 'Inference Endpoints'
});
const CANCEL = exports.CANCEL = _i18n.i18n.translate('xpack.searchInferenceEndpoints.cancel', {
  defaultMessage: 'Cancel'
});
const MANAGE_INFERENCE_ENDPOINTS_LABEL = exports.MANAGE_INFERENCE_ENDPOINTS_LABEL = _i18n.i18n.translate('xpack.searchInferenceEndpoints.allInferenceEndpoints.description', {
  defaultMessage: 'View and manage your deployed inference endpoints.'
});
const CREATE_FIRST_INFERENCE_ENDPOINT_DESCRIPTION = exports.CREATE_FIRST_INFERENCE_ENDPOINT_DESCRIPTION = _i18n.i18n.translate('xpack.searchInferenceEndpoints.addEmptyPrompt.createFirstInferenceEndpointDescription', {
  defaultMessage: "Inference endpoints enable you to perform inference tasks using NLP models provided by third-party services or Elastic's built-in models like ELSER and E5. Set up tasks such as text embedding, completions, reranking, and more by using the Create Inference API."
});
const START_WITH_PREPARED_ENDPOINTS_LABEL = exports.START_WITH_PREPARED_ENDPOINTS_LABEL = _i18n.i18n.translate('xpack.searchInferenceEndpoints.addEmptyPrompt.startWithPreparedEndpointsLabel', {
  defaultMessage: 'Learn more about built-in NLP models:'
});
const ELSER_TITLE = exports.ELSER_TITLE = _i18n.i18n.translate('xpack.searchInferenceEndpoints.addEmptyPrompt.elserTitle', {
  defaultMessage: 'ELSER'
});
const LEARN_HOW_TO_CREATE_INFERENCE_ENDPOINTS_LINK = exports.LEARN_HOW_TO_CREATE_INFERENCE_ENDPOINTS_LINK = _i18n.i18n.translate('xpack.searchInferenceEndpoints.addEmptyPrompt.learnHowToCreateInferenceEndpoints', {
  defaultMessage: 'Learn how to create inference endpoints'
});
const SEMANTIC_SEARCH_WITH_ELSER_LINK = exports.SEMANTIC_SEARCH_WITH_ELSER_LINK = _i18n.i18n.translate('xpack.searchInferenceEndpoints.addEmptyPrompt.semanticSearchWithElser', {
  defaultMessage: 'Semantic search with ELSER'
});
const SEMANTIC_SEARCH_WITH_E5_LINK = exports.SEMANTIC_SEARCH_WITH_E5_LINK = _i18n.i18n.translate('xpack.searchInferenceEndpoints.addEmptyPrompt.semanticSearchWithE5', {
  defaultMessage: 'Semantic search with E5 Multilingual'
});
const VIEW_YOUR_MODELS_LINK = exports.VIEW_YOUR_MODELS_LINK = _i18n.i18n.translate('xpack.searchInferenceEndpoints.addEmptyPrompt.viewYourModels', {
  defaultMessage: 'View your models'
});
const ELSER_DESCRIPTION = exports.ELSER_DESCRIPTION = _i18n.i18n.translate('xpack.searchInferenceEndpoints.addEmptyPrompt.elserDescription', {
  defaultMessage: "ELSER is Elastic's sparse vector NLP model for semantic search in English."
});
const E5_TITLE = exports.E5_TITLE = _i18n.i18n.translate('xpack.searchInferenceEndpoints.addEmptyPrompt.e5Title', {
  defaultMessage: 'E5 Multilingual'
});
const E5_DESCRIPTION = exports.E5_DESCRIPTION = _i18n.i18n.translate('xpack.searchInferenceEndpoints.addEmptyPrompt.e5Description', {
  defaultMessage: 'E5 is a third-party NLP model that enables you to perform multilingual semantic search by using dense vector representations.'
});
const ERROR_TITLE = exports.ERROR_TITLE = _i18n.i18n.translate('xpack.searchInferenceEndpoints.inferenceId.errorTitle', {
  defaultMessage: 'Error adding inference endpoint'
});
const UNABLE_TO_CREATE_INFERENCE_ENDPOINT = exports.UNABLE_TO_CREATE_INFERENCE_ENDPOINT = _i18n.i18n.translate('xpack.searchInferenceEndpoints.inferenceFlyoutWrapperComponent.unableTocreateInferenceEndpointError', {
  defaultMessage: 'Unable to create an inference endpoint.'
});
const INFERENCE_ENDPOINT_ALREADY_EXISTS = exports.INFERENCE_ENDPOINT_ALREADY_EXISTS = _i18n.i18n.translate('xpack.searchInferenceEndpoints.inferenceFlyoutWrapperComponent.inferenceEndpointAlreadyExistsError', {
  defaultMessage: 'Inference Endpoint id already exists'
});
const FORBIDDEN_TO_ACCESS_TRAINED_MODELS = exports.FORBIDDEN_TO_ACCESS_TRAINED_MODELS = _i18n.i18n.translate('xpack.searchInferenceEndpoints.inferenceFlyoutWrapperComponent.forbiddenToAccessTrainedModelsError', {
  defaultMessage: 'Forbidden to access trained models'
});
const ENDPOINT_ADDED_SUCCESS = exports.ENDPOINT_ADDED_SUCCESS = _i18n.i18n.translate('xpack.searchInferenceEndpoints.actions.endpointAddedSuccess', {
  defaultMessage: 'Endpoint added'
});
const ENDPOINT_CREATION_FAILED = exports.ENDPOINT_CREATION_FAILED = _i18n.i18n.translate('xpack.searchInferenceEndpoints.actions.endpointAddedFailure', {
  defaultMessage: 'Endpoint creation failed'
});
const ENDPOINT_ADDED_SUCCESS_DESCRIPTION = endpointId => _i18n.i18n.translate('xpack.searchInferenceEndpoints.actions.endpointAddedSuccessDescription', {
  defaultMessage: 'The inference endpoint "{endpointId}" was added.',
  values: {
    endpointId
  }
});
exports.ENDPOINT_ADDED_SUCCESS_DESCRIPTION = ENDPOINT_ADDED_SUCCESS_DESCRIPTION;
const ENDPOINT = exports.ENDPOINT = _i18n.i18n.translate('xpack.searchInferenceEndpoints.endpoint', {
  defaultMessage: 'Endpoint'
});
const SERVICE_PROVIDER = exports.SERVICE_PROVIDER = _i18n.i18n.translate('xpack.searchInferenceEndpoints.serviceProvider', {
  defaultMessage: 'Service'
});
const TASK_TYPE = exports.TASK_TYPE = _i18n.i18n.translate('xpack.searchInferenceEndpoints.taskType', {
  defaultMessage: 'Type'
});
const TRAINED_MODELS_STAT_GATHER_FAILED = exports.TRAINED_MODELS_STAT_GATHER_FAILED = _i18n.i18n.translate('xpack.searchInferenceEndpoints.actions.trainedModelsStatGatherFailed', {
  defaultMessage: 'Failed to retrieve trained model statistics'
});