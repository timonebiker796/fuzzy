"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SearchInferenceEndpointsPlugin = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _constants = require("../common/constants");
var _doc_links = require("../common/doc_links");
var _embeddable = require("./embeddable");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } /*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
class SearchInferenceEndpointsPlugin {
  constructor(initializerContext) {
    (0, _defineProperty2.default)(this, "config", void 0);
    this.config = initializerContext.config.get();
  }
  setup(core) {
    var _this$config$ui;
    if (!((_this$config$ui = this.config.ui) !== null && _this$config$ui !== void 0 && _this$config$ui.enabled)) return {};
    core.application.register({
      id: _constants.PLUGIN_ID,
      appRoute: '/app/search_inference_endpoints',
      title: _constants.PLUGIN_NAME,
      async mount({
        element,
        history
      }) {
        const {
          renderApp
        } = await Promise.resolve().then(() => _interopRequireWildcard(require('./application')));
        const [coreStart, depsStart] = await core.getStartServices();
        const startDeps = {
          ...depsStart,
          history
        };
        return renderApp(coreStart, startDeps, element);
      }
    });
    return {};
  }
  start(core, deps) {
    _doc_links.docLinks.setDocLinks(core.docLinks.links);
    return {
      InferenceEdnpointsProvider: (0, _embeddable.getInferenceEndpointsProvider)(core, deps),
      InferenceEndpoints: _embeddable.InferenceEndpoints
    };
  }
  stop() {}
}
exports.SearchInferenceEndpointsPlugin = SearchInferenceEndpointsPlugin;