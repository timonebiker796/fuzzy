"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDeleteEndpoint = void 0;
var _reactQuery = require("@tanstack/react-query");
var _use_kibana = require("./use_kibana");
var i18n = _interopRequireWildcard(require("./translations"));
var _constants = require("../../common/constants");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const useDeleteEndpoint = onSuccess => {
  var _services$notificatio;
  const queryClient = (0, _reactQuery.useQueryClient)();
  const {
    services
  } = (0, _use_kibana.useKibana)();
  const toasts = (_services$notificatio = services.notifications) === null || _services$notificatio === void 0 ? void 0 : _services$notificatio.toasts;
  return (0, _reactQuery.useMutation)(async ({
    type,
    id
  }) => {
    return await services.http.delete(`/internal/inference_endpoint/endpoints/${type}/${id}`);
  }, {
    onSuccess: () => {
      queryClient.invalidateQueries([_constants.INFERENCE_ENDPOINTS_QUERY_KEY]);
      toasts === null || toasts === void 0 ? void 0 : toasts.addSuccess({
        title: i18n.DELETE_SUCCESS
      });
      if (onSuccess) {
        onSuccess();
      }
    },
    onError: error => {
      toasts === null || toasts === void 0 ? void 0 : toasts.addError(new Error(error.body.message), {
        title: i18n.ENDPOINT_DELETION_FAILED,
        toastMessage: error.body.message
      });
    }
  });
};
exports.useDeleteEndpoint = useDeleteEndpoint;