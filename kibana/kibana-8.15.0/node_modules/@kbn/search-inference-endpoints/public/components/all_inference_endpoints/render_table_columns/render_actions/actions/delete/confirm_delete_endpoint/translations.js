"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  DELETE_TITLE: true,
  CONFIRM_DELETE_WARNING: true,
  DELETE_ACTION_LABEL: true
};
exports.DELETE_TITLE = exports.DELETE_ACTION_LABEL = exports.CONFIRM_DELETE_WARNING = void 0;
var _i18n = require("@kbn/i18n");
var _translations = require("../../../../../../../../common/translations");
Object.keys(_translations).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _translations[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _translations[key];
    }
  });
});
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const DELETE_TITLE = exports.DELETE_TITLE = _i18n.i18n.translate('xpack.searchInferenceEndpoints.confirmDeleteEndpoint.title', {
  defaultMessage: 'Delete inference endpoint'
});
const CONFIRM_DELETE_WARNING = exports.CONFIRM_DELETE_WARNING = _i18n.i18n.translate('xpack.searchInferenceEndpoints.confirmDeleteEndpoint.confirmQuestion', {
  defaultMessage: 'Deleting an active endpoint will cause operations targeting associated semantic_text fields and inference pipelines to fail.'
});
const DELETE_ACTION_LABEL = exports.DELETE_ACTION_LABEL = _i18n.i18n.translate('xpack.searchInferenceEndpoints.actions.deleteSingleEndpoint', {
  defaultMessage: 'Delete endpoint'
});