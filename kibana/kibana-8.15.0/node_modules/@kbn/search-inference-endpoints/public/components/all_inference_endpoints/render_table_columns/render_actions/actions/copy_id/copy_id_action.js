"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CopyIDAction = void 0;
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _react = _interopRequireDefault(require("react"));
var _use_kibana = require("../../../../../../hooks/use_kibana");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const CopyIDAction = ({
  inferenceId
}) => {
  const {
    services: {
      notifications
    }
  } = (0, _use_kibana.useKibana)();
  const toasts = notifications === null || notifications === void 0 ? void 0 : notifications.toasts;
  return /*#__PURE__*/_react.default.createElement(_eui.EuiCopy, {
    textToCopy: inferenceId
  }, copy => /*#__PURE__*/_react.default.createElement(_eui.EuiButtonIcon, {
    "aria-label": _i18n.i18n.translate('xpack.searchInferenceEndpoints.actions.copyID', {
      defaultMessage: 'Copy inference endpoint ID {inferenceId}',
      values: {
        inferenceId
      }
    }),
    "data-test-subj": "inference-endpoints-action-copy-id-label",
    iconType: "copyClipboard",
    onClick: () => {
      copy();
      toasts === null || toasts === void 0 ? void 0 : toasts.addSuccess({
        title: _i18n.i18n.translate('xpack.searchInferenceEndpoints.actions.copyIDSuccess', {
          defaultMessage: 'Inference endpoint ID {inferenceId} copied',
          values: {
            inferenceId
          }
        })
      });
    },
    size: "s"
  }));
};
exports.CopyIDAction = CopyIDAction;