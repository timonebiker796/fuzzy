"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeleteAction = void 0;
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _react = _interopRequireWildcard(require("react"));
var _use_delete_endpoint = require("../../../../../../hooks/use_delete_endpoint");
var _confirm_delete_endpoint = require("./confirm_delete_endpoint");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const DeleteAction = ({
  selectedEndpoint
}) => {
  const [isModalVisible, setIsModalVisible] = (0, _react.useState)(false);
  const {
    mutate: deleteEndpoint
  } = (0, _use_delete_endpoint.useDeleteEndpoint)(() => setIsModalVisible(false));
  const onConfirmDeletion = () => {
    if (!selectedEndpoint) {
      return;
    }
    deleteEndpoint({
      type: selectedEndpoint.type,
      id: selectedEndpoint.endpoint.inference_id
    });
  };
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiButtonIcon, {
    "aria-label": _i18n.i18n.translate('xpack.searchInferenceEndpoints.actions.deleteEndpoint', {
      defaultMessage: 'Delete inference endpoint {selectedEndpointName}',
      values: {
        selectedEndpointName: selectedEndpoint === null || selectedEndpoint === void 0 ? void 0 : selectedEndpoint.endpoint.inference_id
      }
    }),
    key: "delete",
    iconType: "trash",
    color: "danger",
    onClick: () => setIsModalVisible(true)
  }), isModalVisible && /*#__PURE__*/_react.default.createElement(_confirm_delete_endpoint.ConfirmDeleteEndpointModal, {
    onCancel: () => setIsModalVisible(false),
    onConfirm: onConfirmDeletion
  }));
};
exports.DeleteAction = DeleteAction;