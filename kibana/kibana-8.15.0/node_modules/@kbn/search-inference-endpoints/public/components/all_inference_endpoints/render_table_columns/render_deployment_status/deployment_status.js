"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeploymentStatus = void 0;
var _react = _interopRequireDefault(require("react"));
var _eui = require("@elastic/eui");
var _types = require("../../types");
var i18n = _interopRequireWildcard(require("./translations"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const DeploymentStatus = ({
  status
}) => {
  if (status === _types.DeploymentStatusEnum.notApplicable || !status) {
    return null;
  }
  let statusColor;
  let type;
  let tooltip;
  switch (status) {
    case _types.DeploymentStatusEnum.deployed:
      statusColor = 'success';
      type = 'dot';
      tooltip = i18n.MODEL_DEPLOYED;
      break;
    case _types.DeploymentStatusEnum.notDeployed:
      statusColor = 'warning';
      type = 'warning';
      tooltip = i18n.MODEL_NOT_DEPLOYED;
      break;
    case _types.DeploymentStatusEnum.notDeployable:
      statusColor = 'danger';
      type = 'dot';
      tooltip = i18n.MODEL_FAILED_TO_BE_DEPLOYED;
  }
  return /*#__PURE__*/_react.default.createElement(_eui.EuiToolTip, {
    content: tooltip
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiIcon, {
    type: type,
    "data-test-subj": `table-column-deployment-${status}`,
    color: statusColor
  }));
};
exports.DeploymentStatus = DeploymentStatus;