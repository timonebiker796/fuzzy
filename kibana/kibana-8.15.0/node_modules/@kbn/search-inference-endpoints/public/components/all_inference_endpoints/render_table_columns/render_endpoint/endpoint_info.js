"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EndpointInfo = void 0;
var _react = _interopRequireDefault(require("react"));
var _mlTrainedModelsUtils = require("@kbn/ml-trained-models-utils");
var _eui = require("@elastic/eui");
var _types = require("../../types");
var _model_badge = require("./model_badge");
var i18n = _interopRequireWildcard(require("./translations"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const EndpointInfo = ({
  endpoint
}) => {
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    gutterSize: "xs",
    direction: "column"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement("strong", null, endpoint.inference_id)), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    css: {
      textWrap: 'wrap'
    }
  }, /*#__PURE__*/_react.default.createElement(EndpointModelInfo, {
    endpoint: endpoint
  })));
};
exports.EndpointInfo = EndpointInfo;
const EndpointModelInfo = ({
  endpoint
}) => {
  var _ELASTIC_MODEL_DEFINI, _ELASTIC_MODEL_DEFINI2;
  const serviceSettings = endpoint.service_settings;
  const modelId = 'model_id' in serviceSettings ? serviceSettings.model_id : 'model' in serviceSettings ? serviceSettings.model : undefined;
  const isEligibleForMITBadge = modelId && ((_ELASTIC_MODEL_DEFINI = _mlTrainedModelsUtils.ELASTIC_MODEL_DEFINITIONS[modelId]) === null || _ELASTIC_MODEL_DEFINI === void 0 ? void 0 : _ELASTIC_MODEL_DEFINI.license) === 'MIT';
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    color: "subdued",
    size: "xs"
  }, modelId && /*#__PURE__*/_react.default.createElement(_model_badge.ModelBadge, {
    model: modelId
  }), isEligibleForMITBadge ? /*#__PURE__*/_react.default.createElement(_eui.EuiBadge, {
    color: "hollow",
    iconType: "popout",
    iconSide: "right",
    href: (_ELASTIC_MODEL_DEFINI2 = _mlTrainedModelsUtils.ELASTIC_MODEL_DEFINITIONS[modelId].licenseUrl) !== null && _ELASTIC_MODEL_DEFINI2 !== void 0 ? _ELASTIC_MODEL_DEFINI2 : '',
    target: "_blank",
    "data-test-subj": 'mit-license-badge'
  }, i18n.MIT_LICENSE) : null, ' ', endpointModelAtrributes(endpoint)));
};
function endpointModelAtrributes(endpoint) {
  switch (endpoint.service) {
    case _types.ServiceProviderKeys.elser:
    case _types.ServiceProviderKeys.elasticsearch:
      return elasticsearchAttributes(endpoint);
    case _types.ServiceProviderKeys.cohere:
      return cohereAttributes(endpoint);
    case _types.ServiceProviderKeys.hugging_face:
      return huggingFaceAttributes(endpoint);
    case _types.ServiceProviderKeys.openai:
      return openAIAttributes(endpoint);
    case _types.ServiceProviderKeys.azureaistudio:
      return azureOpenAIStudioAttributes(endpoint);
    case _types.ServiceProviderKeys.azureopenai:
      return azureOpenAIAttributes(endpoint);
    case _types.ServiceProviderKeys.mistral:
      return mistralAttributes(endpoint);
    case _types.ServiceProviderKeys.googleaistudio:
      return googleAIStudioAttributes(endpoint);
    case _types.ServiceProviderKeys.amazonbedrock:
      return amazonBedrockAttributes(endpoint);
    default:
      return null;
  }
}
function elasticsearchAttributes(endpoint) {
  const serviceSettings = endpoint.service_settings;
  const numAllocations = 'num_allocations' in serviceSettings ? serviceSettings.num_allocations : undefined;
  const numThreads = 'num_threads' in serviceSettings ? serviceSettings.num_threads : undefined;
  return `${numThreads ? i18n.THREADS(numThreads) : ''}${numThreads && numAllocations ? ' | ' : ''}${numAllocations ? i18n.ALLOCATIONS(numAllocations) : ''}`;
}
function cohereAttributes(endpoint) {
  const serviceSettings = endpoint.service_settings;
  const embeddingType = 'embedding_type' in serviceSettings ? serviceSettings.embedding_type : undefined;
  const taskSettings = endpoint.task_settings;
  const inputType = 'input_type' in taskSettings ? taskSettings.input_type : undefined;
  const truncate = 'truncate' in taskSettings ? taskSettings.truncate : undefined;
  return [embeddingType, inputType, truncate && `truncate: ${truncate}`].filter(Boolean).join(', ');
}
function huggingFaceAttributes(endpoint) {
  const serviceSettings = endpoint.service_settings;
  const url = 'url' in serviceSettings ? serviceSettings.url : null;
  return url;
}
function openAIAttributes(endpoint) {
  const serviceSettings = endpoint.service_settings;
  const url = 'url' in serviceSettings ? serviceSettings.url : null;
  return url;
}
function azureOpenAIStudioAttributes(endpoint) {
  const serviceSettings = endpoint.service_settings;
  const provider = 'provider' in serviceSettings ? serviceSettings === null || serviceSettings === void 0 ? void 0 : serviceSettings.provider : undefined;
  const endpointType = 'endpoint_type' in serviceSettings ? serviceSettings.endpoint_type : undefined;
  const target = 'target' in serviceSettings ? serviceSettings.target : undefined;
  return [provider, endpointType, target].filter(Boolean).join(', ');
}
function azureOpenAIAttributes(endpoint) {
  const serviceSettings = endpoint.service_settings;
  const resourceName = 'resource_name' in serviceSettings ? serviceSettings.resource_name : undefined;
  const deploymentId = 'deployment_id' in serviceSettings ? serviceSettings.deployment_id : undefined;
  const apiVersion = 'api_version' in serviceSettings ? serviceSettings.api_version : undefined;
  return [resourceName, deploymentId, apiVersion].filter(Boolean).join(', ');
}
function mistralAttributes(endpoint) {
  const serviceSettings = endpoint.service_settings;
  const maxInputTokens = 'max_input_tokens' in serviceSettings ? serviceSettings.max_input_tokens : undefined;
  const rateLimit = 'rate_limit' in serviceSettings ? serviceSettings.rate_limit.requests_per_minute : undefined;
  return [maxInputTokens && `max_input_tokens: ${maxInputTokens}`, rateLimit && `rate_limit: ${rateLimit}`].filter(Boolean).join(', ');
}
function amazonBedrockAttributes(endpoint) {
  const serviceSettings = endpoint.service_settings;
  const region = 'region' in serviceSettings ? serviceSettings.region : undefined;
  const provider = 'provider' in serviceSettings ? serviceSettings.provider.toLocaleLowerCase() : undefined;
  return [region && `region: ${region}`, provider && `provider: ${provider}`].filter(Boolean).join(', ');
}
function googleAIStudioAttributes(endpoint) {
  const serviceSettings = endpoint.service_settings;
  const rateLimit = 'rate_limit' in serviceSettings ? serviceSettings.rate_limit.requests_per_minute : undefined;
  return rateLimit && `rate_limit: ${rateLimit}`;
}