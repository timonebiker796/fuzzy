"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Plugin = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _i18n = require("@kbn/i18n");
var _rxjs = require("rxjs");
var _public = require("@kbn/core/public");
var _embeddable = require("./components/shared/exploratory_view/embeddable");
var _exploratory_view_url = require("./components/shared/exploratory_view/configurations/exploratory_view_url");
var _get_app_data_view = _interopRequireDefault(require("./utils/observability_data_views/get_app_data_view"));
var _data_handler = require("./data_handler");
var _constants = require("./constants");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } /*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
class Plugin {
  constructor(initContext) {
    (0, _defineProperty2.default)(this, "appUpdater$", new _rxjs.BehaviorSubject(() => ({})));
    (0, _defineProperty2.default)(this, "analyticsService", void 0);
    this.initContext = initContext;
  }
  setup(core, plugins) {
    const appUpdater$ = this.appUpdater$;
    core.application.register({
      appRoute: _constants.APP_ROUTE,
      category: _public.DEFAULT_APP_CATEGORIES.observability,
      euiIconType: 'logoObservability',
      id: 'exploratory-view',
      mount: async params => {
        const {
          renderApp
        } = await Promise.resolve().then(() => _interopRequireWildcard(require('./application')));
        const [coreStart, pluginsStart] = await core.getStartServices();
        return renderApp({
          core: coreStart,
          appMountParameters: params,
          plugins: {
            ...pluginsStart
          },
          usageCollection: plugins.usageCollection,
          isDev: this.initContext.env.mode.dev
        });
      },
      title: _i18n.i18n.translate('xpack.exploratoryView.appTitle', {
        defaultMessage: 'Exploratory View'
      }),
      visibleIn: [],
      updater$: appUpdater$,
      keywords: ['observability', 'monitor', 'logs', 'metrics', 'apm', 'performance', 'trace', 'rum', 'user', 'experience']
    });
    this.analyticsService = core.analytics;
    return {
      register: _data_handler.registerDataHandler
    };
  }
  start(coreStart, pluginsStart) {
    return {
      createExploratoryViewUrl: _exploratory_view_url.createExploratoryViewUrl,
      getAppDataView: (0, _get_app_data_view.default)(pluginsStart.dataViews),
      ExploratoryViewEmbeddable: (0, _embeddable.getExploratoryViewEmbeddable)({
        ...coreStart,
        ...pluginsStart
      }, this.analyticsService)
    };
  }
}
exports.Plugin = Plugin;