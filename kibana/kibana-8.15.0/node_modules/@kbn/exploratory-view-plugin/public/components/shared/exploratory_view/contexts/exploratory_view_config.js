"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExploratoryViewContext = void 0;
exports.ExploratoryViewContextProvider = ExploratoryViewContextProvider;
exports.SELECT_REPORT_TYPE = void 0;
exports.useExploratoryView = useExploratoryView;
var _react = _interopRequireWildcard(require("react"));
var _i18n = require("@kbn/i18n");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const ExploratoryViewContext = exports.ExploratoryViewContext = /*#__PURE__*/(0, _react.createContext)({});
function ExploratoryViewContextProvider({
  children,
  reportTypes,
  dataTypes,
  reportConfigMap,
  setHeaderActionMenu,
  asPanel = true,
  theme$,
  ...startServices
}) {
  const [isEditMode, setIsEditMode] = (0, _react.useState)(false);
  const value = {
    asPanel,
    reportTypes,
    dataTypes,
    reportConfigMap,
    setHeaderActionMenu,
    theme$,
    isEditMode,
    setIsEditMode,
    ...startServices
  };
  return /*#__PURE__*/_react.default.createElement(ExploratoryViewContext.Provider, {
    value: value
  }, children);
}
function useExploratoryView() {
  const context = (0, _react.useContext)(ExploratoryViewContext);
  if (context === undefined) {
    throw new Error('useExploratoryView must be used within a ExploratoryViewContextProvider');
  }
  return context;
}
const SELECT_REPORT_TYPE = exports.SELECT_REPORT_TYPE = _i18n.i18n.translate('xpack.exploratoryView.expView.seriesBuilder.selectReportType', {
  defaultMessage: 'No report type selected'
});