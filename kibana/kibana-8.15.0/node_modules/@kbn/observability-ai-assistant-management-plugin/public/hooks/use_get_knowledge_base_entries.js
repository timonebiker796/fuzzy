"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGetKnowledgeBaseEntries = useGetKnowledgeBaseEntries;
var _reactQuery = require("@tanstack/react-query");
var _constants = require("../constants");
var _use_kibana = require("./use_kibana");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function useGetKnowledgeBaseEntries({
  query,
  sortBy,
  sortDirection
}) {
  const {
    observabilityAIAssistant
  } = (0, _use_kibana.useKibana)().services;
  const observabilityAIAssistantApi = observabilityAIAssistant === null || observabilityAIAssistant === void 0 ? void 0 : observabilityAIAssistant.service.callApi;
  const {
    isLoading,
    isError,
    isSuccess,
    isRefetching,
    data,
    refetch
  } = (0, _reactQuery.useQuery)({
    queryKey: [_constants.REACT_QUERY_KEYS.GET_KB_ENTRIES, query, sortBy, sortDirection],
    queryFn: async ({
      signal
    }) => {
      if (!observabilityAIAssistantApi || !signal) {
        return Promise.reject('Error with observabilityAIAssistantApi: API not found.');
      }
      return observabilityAIAssistantApi(`GET /internal/observability_ai_assistant/kb/entries`, {
        signal,
        params: {
          query: {
            query,
            sortBy,
            sortDirection
          }
        }
      });
    },
    keepPreviousData: true,
    refetchOnWindowFocus: false
  });
  return {
    entries: data === null || data === void 0 ? void 0 : data.entries,
    refetch,
    isLoading,
    isRefetching,
    isSuccess,
    isError
  };
}