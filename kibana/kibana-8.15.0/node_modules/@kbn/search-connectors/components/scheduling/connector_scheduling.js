"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SchedulePanel = exports.ConnectorSchedulingComponent = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _i18nReact = require("@kbn/i18n-react");
var _connectors = require("../../types/connectors");
var _connector_error = require("./connector_error");
var _connector_unconfigured = require("./connector_unconfigured");
var _full_content = require("./full_content");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

const SchedulePanel = ({
  title,
  description,
  children
}) => {
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSplitPanel.Outer, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSplitPanel.Inner, {
    color: "subdued"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiTitle, null, /*#__PURE__*/_react.default.createElement("h2", null, title))), /*#__PURE__*/_react.default.createElement(_eui.EuiSplitPanel.Inner, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    size: "s"
  }, description)), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  }), children)));
};
exports.SchedulePanel = SchedulePanel;
const ConnectorSchedulingComponent = ({
  children,
  connector,
  configurationPathOnClick,
  dataTelemetryIdPrefix,
  hasChanges,
  hasIngestionError,
  hasPlatinumLicense,
  setHasChanges,
  shouldShowAccessControlSync,
  shouldShowIncrementalSync,
  updateConnectorStatus,
  updateScheduling
}) => {
  var _connector$configurat;
  const [hasFullSyncChanges, setHasFullSyncChanges] = (0, _react.useState)(false);
  const [hasAccessSyncChanges, setAccessSyncChanges] = (0, _react.useState)(false);
  const [hasIncrementalSyncChanges, setIncrementalSyncChanges] = (0, _react.useState)(false);
  const isDocumentLevelSecurityDisabled = !((_connector$configurat = connector.configuration.use_document_level_security) !== null && _connector$configurat !== void 0 && _connector$configurat.value);
  const hasSyncStatusChanged = (0, _react.useMemo)(() => {
    return hasFullSyncChanges || hasAccessSyncChanges || hasIncrementalSyncChanges;
  }, [hasFullSyncChanges, hasAccessSyncChanges, hasIncrementalSyncChanges]);
  (0, _react.useEffect)(() => {
    if (hasChanges !== hasSyncStatusChanged) {
      setHasChanges(hasSyncStatusChanged);
    }
  }, [hasSyncStatusChanged, hasChanges, setHasChanges]);
  if (connector.status === _connectors.ConnectorStatus.CREATED || connector.status === _connectors.ConnectorStatus.NEEDS_CONFIGURATION) {
    return /*#__PURE__*/_react.default.createElement(_connector_unconfigured.ConnectorUnconfigured, {
      dataTelemetryIdPrefix: "entSearchContent",
      configurationPathOnClick: configurationPathOnClick
    });
  }
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "l"
  }), hasIngestionError ? /*#__PURE__*/_react.default.createElement(_connector_error.ConnectorError, null) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null), children, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(SchedulePanel, {
    title: _i18n.i18n.translate('searchConnectors.content.indices.connectorScheduling.schedulePanel.contentSync.title', {
      defaultMessage: 'Content sync'
    }),
    description: _i18n.i18n.translate('searchConnectors.content.indices.connectorScheduling.schedulePanel.contentSync.description', {
      defaultMessage: 'Fetch content to create or update your Elasticsearch documents.'
    })
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    direction: "column",
    gutterSize: "m"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_full_content.ConnectorContentScheduling, {
    type: _connectors.SyncJobType.FULL,
    connector: connector,
    setHasChanges: setHasChanges,
    setHasSyncTypeChanges: setHasFullSyncChanges,
    hasSyncTypeChanges: hasFullSyncChanges,
    updateConnectorStatus: updateConnectorStatus,
    updateScheduling: updateScheduling,
    dataTelemetryIdPrefix: dataTelemetryIdPrefix
  })), shouldShowIncrementalSync && /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_full_content.ConnectorContentScheduling, {
    type: _connectors.SyncJobType.INCREMENTAL,
    connector: connector,
    setHasChanges: setHasChanges,
    setHasSyncTypeChanges: setIncrementalSyncChanges,
    hasSyncTypeChanges: hasIncrementalSyncChanges,
    updateConnectorStatus: updateConnectorStatus,
    updateScheduling: updateScheduling,
    dataTelemetryIdPrefix: dataTelemetryIdPrefix
  }))))), shouldShowAccessControlSync && /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    direction: "column"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(SchedulePanel, {
    title: _i18n.i18n.translate('searchConnectors.connectorScheduling.schedulePanel.documentLevelSecurity.title', {
      defaultMessage: 'Document Level Security'
    }),
    description: _i18n.i18n.translate('searchConnectors.connectorScheduling.schedulePanel.documentLevelSecurity.description', {
      defaultMessage: 'Control the documents users can access, based on their permissions and roles. Schedule syncs to keep these access controls up to date.'
    })
  }, /*#__PURE__*/_react.default.createElement(_full_content.ConnectorContentScheduling, {
    type: _connectors.SyncJobType.ACCESS_CONTROL,
    connector: connector,
    hasPlatinumLicense: hasPlatinumLicense,
    setHasChanges: setHasChanges,
    setHasSyncTypeChanges: setAccessSyncChanges,
    hasSyncTypeChanges: hasAccessSyncChanges,
    updateConnectorStatus: updateConnectorStatus,
    updateScheduling: updateScheduling,
    dataTelemetryIdPrefix: dataTelemetryIdPrefix
  }))), isDocumentLevelSecurityDisabled && /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiCallOut, {
    title: _i18n.i18n.translate('searchConnectors.connectorScheduling.schedulePanel.documentLevelSecurity.dlsDisabledCallout.title', {
      defaultMessage: 'Access control syncs not allowed'
    }),
    color: "warning",
    iconType: "iInCircle"
  }, /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "searchConnectors.connectorScheduling.schedulePanel.documentLevelSecurity.dlsDisabledCallout.text",
    defaultMessage: "{link} for this connector to activate these options.",
    values: {
      link: /*#__PURE__*/_react.default.createElement(_eui.EuiLink, {
        onClick: configurationPathOnClick
      }, _i18n.i18n.translate('searchConnectors.connectorScheduling.schedulePanel.documentLevelSecurity.dlsDisabledCallout.link', {
        defaultMessage: 'Enable document level security'
      }))
    }
  }))))))));
};
exports.ConnectorSchedulingComponent = ConnectorSchedulingComponent;