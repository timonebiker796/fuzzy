"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CronHourly = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _i18nReact = require("@kbn/i18n-react");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

const CronHourly = ({
  disabled,
  minute,
  minuteOptions,
  onChange
}) => /*#__PURE__*/_react.default.createElement(_react.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
  label: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "searchConnectors.cronEditor.cronHourly.fieldTimeLabel",
    defaultMessage: "Minute"
  }),
  fullWidth: true,
  "data-test-subj": "cronFrequencyConfiguration"
}, /*#__PURE__*/_react.default.createElement(_eui.EuiSelect, {
  disabled: disabled,
  options: minuteOptions,
  value: minute,
  onChange: e => onChange({
    minute: e.target.value
  }),
  fullWidth: true,
  prepend: _i18n.i18n.translate('searchConnectors.cronEditor.cronHourly.fieldMinute.textAtLabel', {
    defaultMessage: 'At'
  }),
  "data-test-subj": "cronFrequencyHourlyMinuteSelect"
})));
exports.CronHourly = CronHourly;