"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EnterpriseSearchCronEditor = void 0;
var _react = _interopRequireWildcard(require("react"));
var _cron_editor = require("./cron_editor");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

const EnterpriseSearchCronEditor = ({
  disabled,
  onChange,
  scheduling
}) => {
  var _scheduling$interval;
  const [fieldToPreferredValueMap, setFieldToPreferredValueMap] = (0, _react.useState)({});
  const [simpleCron, setSimpleCron] = (0, _react.useState)({
    expression: (_scheduling$interval = scheduling === null || scheduling === void 0 ? void 0 : scheduling.interval) !== null && _scheduling$interval !== void 0 ? _scheduling$interval : '',
    frequency: scheduling !== null && scheduling !== void 0 && scheduling.interval ? cronToFrequency(scheduling.interval) : 'HOUR'
  });
  return /*#__PURE__*/_react.default.createElement(_cron_editor.CronEditor, {
    fieldToPreferredValueMap: fieldToPreferredValueMap,
    cronExpression: simpleCron.expression,
    frequency: simpleCron.frequency,
    disabled: disabled,
    onChange: ({
      cronExpression: expression,
      frequency,
      fieldToPreferredValueMap: newFieldToPreferredValueMap
    }) => {
      setSimpleCron({
        expression,
        frequency
      });
      setFieldToPreferredValueMap(newFieldToPreferredValueMap);
      onChange({
        ...scheduling,
        interval: expression
      });
    },
    frequencyBlockList: ['MINUTE']
  });
};
exports.EnterpriseSearchCronEditor = EnterpriseSearchCronEditor;
function cronToFrequency(cron) {
  const fields = cron.split(' ');
  if (fields.length < 4) {
    return 'YEAR';
  }
  if (fields[1] === '*') {
    return 'MINUTE';
  }
  if (fields[2] === '*') {
    return 'HOUR';
  }
  if (fields[3] === '*') {
    return 'DAY';
  }
  if (fields[4] === '*') {
    return 'WEEK';
  }
  if (fields[4] === '?') {
    return 'MONTH';
  }
  return 'YEAR';
}