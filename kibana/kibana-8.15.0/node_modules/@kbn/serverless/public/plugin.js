"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ServerlessPlugin = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _reactKibanaMount = require("@kbn/react-kibana-mount");
var _reactKibanaContextRender = require("@kbn/react-kibana-context-render");
var _serverlessProjectSwitcher = require("@kbn/serverless-project-switcher");
var _react = _interopRequireDefault(require("react"));
var _reactDom = _interopRequireDefault(require("react-dom"));
var _common = require("../common");
var _navigation = require("./navigation");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

class ServerlessPlugin {
  constructor(initializerContext) {
    (0, _defineProperty2.default)(this, "config", void 0);
    this.initializerContext = initializerContext;
    this.config = this.initializerContext.config.get();
  }
  setup(_core, _dependencies) {
    return {};
  }
  start(core, dependencies) {
    const {
      developer
    } = this.config;
    if (developer && developer.projectSwitcher && developer.projectSwitcher.enabled) {
      const {
        currentType
      } = developer.projectSwitcher;
      core.chrome.navControls.registerRight({
        order: 500,
        mount: target => this.mountProjectSwitcher(target, core, currentType)
      });
    }
    core.chrome.setChromeStyle('project');

    // Casting the "chrome.projects" service to an "internal" type: this is intentional to obscure the property from Typescript.
    const {
      project
    } = core.chrome;
    const {
      cloud
    } = dependencies;
    if (cloud.serverless.projectName) {
      project.setProjectName(cloud.serverless.projectName);
    }
    project.setCloudUrls(cloud);
    const activeNavigationNodes$ = project.getActiveNavigationNodes$();
    const navigationTreeUi$ = project.getNavigationTreeUi$();
    core.chrome.navControls.registerRight({
      order: 1,
      mount: (0, _reactKibanaMount.toMountPoint)( /*#__PURE__*/_react.default.createElement(_reactKibanaContextRender.KibanaRenderContextProvider, {
        i18n: core.i18n,
        theme: core.theme
      }, /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
        href: "https://ela.st/serverless-feedback",
        size: 's',
        color: 'warning',
        iconType: 'popout',
        iconSide: 'right',
        target: '_blank'
      }, _i18n.i18n.translate('xpack.serverless.header.giveFeedbackBtn.label', {
        defaultMessage: 'Give feedback'
      }))), {
        ...core
      })
    });
    return {
      setSideNavComponentDeprecated: sideNavigationComponent => project.setSideNavComponent(sideNavigationComponent),
      initNavigation: (id, navigationTree$, {
        panelContentProvider,
        dataTestSubj
      } = {}) => {
        project.initNavigation(id, navigationTree$);
        project.setSideNavComponent(() => /*#__PURE__*/_react.default.createElement(_navigation.SideNavComponent, {
          navProps: {
            navigationTree$: navigationTreeUi$,
            dataTestSubj,
            panelContentProvider
          },
          deps: {
            core,
            activeNodes$: activeNavigationNodes$
          }
        }));
      },
      setBreadcrumbs: (breadcrumbs, params) => project.setBreadcrumbs(breadcrumbs, params),
      setProjectHome: homeHref => project.setHome(homeHref),
      getNavigationCards: (roleManagementEnabled, extendCardNavDefinitions) => {
        if (!roleManagementEnabled) return extendCardNavDefinitions;
        const manageOrgMembersNavCard = (0, _navigation.generateManageOrgMembersNavCard)(cloud.organizationUrl);
        if (extendCardNavDefinitions) {
          extendCardNavDefinitions[_navigation.manageOrgMembersNavCardName] = manageOrgMembersNavCard;
          return extendCardNavDefinitions;
        }
        return {
          [_navigation.manageOrgMembersNavCardName]: manageOrgMembersNavCard
        };
      }
    };
  }
  stop() {}
  mountProjectSwitcher(targetDomElement, coreStart, currentProjectType) {
    _reactDom.default.render( /*#__PURE__*/_react.default.createElement(_reactKibanaContextRender.KibanaRenderContextProvider, {
      i18n: coreStart.i18n,
      theme: coreStart.theme
    }, /*#__PURE__*/_react.default.createElement(_serverlessProjectSwitcher.ProjectSwitcherKibanaProvider, {
      coreStart,
      projectChangeAPIUrl: _common.API_SWITCH_PROJECT
    }, /*#__PURE__*/_react.default.createElement(_serverlessProjectSwitcher.ProjectSwitcher, {
      currentProjectType
    }))), targetDomElement);
    return () => _reactDom.default.unmountComponentAtNode(targetDomElement);
  }
}
exports.ServerlessPlugin = ServerlessPlugin;