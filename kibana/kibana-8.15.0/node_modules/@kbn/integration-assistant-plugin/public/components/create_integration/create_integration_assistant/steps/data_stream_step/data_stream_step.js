"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputTypeOptions = exports.DataStreamStep = void 0;
var _eui = require("@elastic/eui");
var _react = _interopRequireWildcard(require("react"));
var _state = require("../../state");
var _step_content_wrapper = require("../step_content_wrapper");
var _generation_modal = require("./generation_modal");
var _sample_logs_input = require("./sample_logs_input");
var i18n = _interopRequireWildcard(require("./translations"));
var _use_load_package_names = require("./use_load_package_names");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const InputTypeOptions = exports.InputTypeOptions = [{
  value: 'aws-cloudwatch',
  label: 'AWS Cloudwatch'
}, {
  value: 'aws-s3',
  label: 'AWS S3'
}, {
  value: 'azure-blob-storage',
  label: 'Azure Blob Storage'
}, {
  value: 'azure-eventhub',
  label: 'Azure Event Hub'
}, {
  value: 'cel',
  label: 'Common Expression Language (CEL)'
}, {
  value: 'cloudfoundry',
  label: 'Cloud Foundry'
}, {
  value: 'filestream',
  label: 'File Stream'
}, {
  value: 'gcp-pubsub',
  label: 'GCP Pub/Sub'
}, {
  value: 'gcs',
  label: 'Google Cloud Storage'
}, {
  value: 'http-endpoint',
  label: 'HTTP Endpoint'
}, {
  value: 'journald',
  label: 'Journald'
}, {
  value: 'kafka',
  label: 'Kafka'
}, {
  value: 'tcp',
  label: 'TCP'
}, {
  value: 'udp',
  label: 'UDP'
}];
const isValidName = name => /^[a-z0-9_]+$/.test(name);
const getNameFromTitle = title => title.toLowerCase().replaceAll(/[^a-z0-9]/g, '_');
const DataStreamStep = exports.DataStreamStep = /*#__PURE__*/_react.default.memo(({
  integrationSettings,
  connector,
  isGenerating
}) => {
  var _integrationSettings$, _integrationSettings$2, _integrationSettings$4, _integrationSettings$5;
  const {
    setIntegrationSettings,
    setIsGenerating,
    setStep,
    setResult
  } = (0, _state.useActions)();
  const {
    isLoading: isLoadingPackageNames,
    packageNames
  } = (0, _use_load_package_names.useLoadPackageNames)(); // this is used to avoid duplicate names

  const [name, setName] = (0, _react.useState)((_integrationSettings$ = integrationSettings === null || integrationSettings === void 0 ? void 0 : integrationSettings.name) !== null && _integrationSettings$ !== void 0 ? _integrationSettings$ : '');
  const [dataStreamName, setDataStreamName] = (0, _react.useState)((_integrationSettings$2 = integrationSettings === null || integrationSettings === void 0 ? void 0 : integrationSettings.dataStreamName) !== null && _integrationSettings$2 !== void 0 ? _integrationSettings$2 : '');
  const [invalidFields, setInvalidFields] = (0, _react.useState)({
    name: false,
    dataStreamName: false
  });
  const setIntegrationValues = (0, _react.useCallback)(settings => setIntegrationSettings({
    ...integrationSettings,
    ...settings
  }), [integrationSettings, setIntegrationSettings]);
  const onChange = (0, _react.useMemo)(() => {
    return {
      name: e => {
        const nextName = e.target.value;
        setName(nextName);
        if (!isValidName(nextName) || packageNames !== null && packageNames !== void 0 && packageNames.has(nextName)) {
          setInvalidFields(current => ({
            ...current,
            name: true
          }));
          setIntegrationValues({
            name: undefined
          });
        } else {
          setInvalidFields(current => ({
            ...current,
            name: false
          }));
          setIntegrationValues({
            name: nextName
          });
        }
      },
      dataStreamName: e => {
        const nextDataStreamName = e.target.value;
        setDataStreamName(nextDataStreamName);
        if (!isValidName(nextDataStreamName)) {
          setInvalidFields(current => ({
            ...current,
            dataStreamName: true
          }));
          setIntegrationValues({
            dataStreamName: undefined
          });
        } else {
          setInvalidFields(current => ({
            ...current,
            dataStreamName: false
          }));
          setIntegrationValues({
            dataStreamName: nextDataStreamName
          });
        }
      },
      // inputs without validation
      dataStreamTitle: e => setIntegrationValues({
        dataStreamTitle: e.target.value
      }),
      dataStreamDescription: e => setIntegrationValues({
        dataStreamDescription: e.target.value
      }),
      inputTypes: options => {
        setIntegrationValues({
          inputTypes: options.map(option => option.value)
        });
      }
    };
  }, [setIntegrationValues, setInvalidFields, packageNames]);
  (0, _react.useEffect)(() => {
    // Pre-populates the name from the title set in the previous step.
    // Only executed once when the packageNames are loaded
    if (packageNames != null && (integrationSettings === null || integrationSettings === void 0 ? void 0 : integrationSettings.name) == null && integrationSettings !== null && integrationSettings !== void 0 && integrationSettings.title) {
      const generatedName = getNameFromTitle(integrationSettings.title);
      if (!packageNames.has(generatedName)) {
        setName(generatedName);
        setIntegrationValues({
          name: generatedName
        });
      }
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [packageNames]);
  const onGenerationCompleted = (0, _react.useCallback)(result => {
    if (result) {
      setResult(result);
      setIsGenerating(false);
      setStep(4);
    }
  }, [setResult, setIsGenerating, setStep]);
  const onGenerationClosed = (0, _react.useCallback)(() => {
    setIsGenerating(false); // aborts generation
  }, [setIsGenerating]);
  const nameInputError = (0, _react.useMemo)(() => {
    if (packageNames && name && packageNames.has(name)) {
      return i18n.NAME_ALREADY_EXISTS_ERROR;
    }
  }, [packageNames, name]);
  const selectedInputTypeOptions = (0, _react.useMemo)(() => InputTypeOptions.filter(inputType => {
    var _integrationSettings$3;
    return integrationSettings === null || integrationSettings === void 0 ? void 0 : (_integrationSettings$3 = integrationSettings.inputTypes) === null || _integrationSettings$3 === void 0 ? void 0 : _integrationSettings$3.includes(inputType.value);
  }), [integrationSettings === null || integrationSettings === void 0 ? void 0 : integrationSettings.inputTypes]);
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    direction: "column",
    gutterSize: "l",
    "data-test-subj": "dataStreamStep"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_step_content_wrapper.StepContentWrapper, {
    title: i18n.INTEGRATION_NAME_TITLE,
    subtitle: i18n.INTEGRATION_NAME_DESCRIPTION
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiPanel, {
    hasShadow: false,
    hasBorder: true
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiForm, {
    component: "form",
    fullWidth: true
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    label: i18n.INTEGRATION_NAME_LABEL,
    helpText: !nameInputError && !invalidFields.name ? i18n.NO_SPACES_HELP : undefined,
    isInvalid: !!nameInputError || invalidFields.name,
    error: [nameInputError !== null && nameInputError !== void 0 ? nameInputError : i18n.NO_SPACES_HELP]
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFieldText, {
    name: "name",
    "data-test-subj": "nameInput",
    value: name,
    onChange: onChange.name,
    isInvalid: invalidFields.name,
    isLoading: isLoadingPackageNames,
    disabled: isLoadingPackageNames
  })))))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_step_content_wrapper.StepContentWrapper, {
    title: i18n.DATA_STREAM_TITLE,
    subtitle: i18n.DATA_STREAM_DESCRIPTION
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiPanel, {
    hasShadow: false,
    hasBorder: true
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiForm, {
    component: "form",
    fullWidth: true
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    label: i18n.DATA_STREAM_TITLE_LABEL
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFieldText, {
    name: "dataStreamTitle",
    "data-test-subj": "dataStreamTitleInput",
    value: (_integrationSettings$4 = integrationSettings === null || integrationSettings === void 0 ? void 0 : integrationSettings.dataStreamTitle) !== null && _integrationSettings$4 !== void 0 ? _integrationSettings$4 : '',
    onChange: onChange.dataStreamTitle
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    label: i18n.DATA_STREAM_DESCRIPTION_LABEL
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFieldText, {
    name: "dataStreamDescription",
    "data-test-subj": "dataStreamDescriptionInput",
    value: (_integrationSettings$5 = integrationSettings === null || integrationSettings === void 0 ? void 0 : integrationSettings.dataStreamDescription) !== null && _integrationSettings$5 !== void 0 ? _integrationSettings$5 : '',
    onChange: onChange.dataStreamDescription
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    label: i18n.DATA_STREAM_NAME_LABEL,
    helpText: !invalidFields.dataStreamName ? i18n.NO_SPACES_HELP : undefined,
    isInvalid: invalidFields.dataStreamName,
    error: [i18n.NO_SPACES_HELP]
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFieldText, {
    name: "dataStreamName",
    "data-test-subj": "dataStreamNameInput",
    value: dataStreamName,
    onChange: onChange.dataStreamName,
    isInvalid: invalidFields.dataStreamName
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    label: i18n.DATA_COLLECTION_METHOD_LABEL
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiComboBox, {
    "data-test-subj": "dataCollectionMethodInput",
    options: InputTypeOptions,
    selectedOptions: selectedInputTypeOptions,
    onChange: onChange.inputTypes,
    fullWidth: true
  })), /*#__PURE__*/_react.default.createElement(_sample_logs_input.SampleLogsInput, {
    integrationSettings: integrationSettings
  })))), isGenerating && /*#__PURE__*/_react.default.createElement(_generation_modal.GenerationModal, {
    integrationSettings: integrationSettings,
    connector: connector,
    onComplete: onGenerationCompleted,
    onClose: onGenerationClosed
  })));
});
DataStreamStep.displayName = 'DataStreamStep';