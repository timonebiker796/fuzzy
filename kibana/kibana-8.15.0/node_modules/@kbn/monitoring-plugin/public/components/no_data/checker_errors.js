"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CheckerErrors = CheckerErrors;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _eui = require("@elastic/eui");
var _i18nReact = require("@kbn/i18n-react");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const ErrorList = ({
  errors
}) => {
  const errorsMap = {};
  return errors.filter(err => {
    const {
      statusCode,
      error,
      message
    } = err;
    const key = `${statusCode}${error}${message}`;
    if (!errorsMap[key]) {
      errorsMap[key] = true;
      return true;
    }
  }).map((error, errorIndex) => {
    const {
      message,
      statusCode,
      error: friendlyName
    } = error;
    return /*#__PURE__*/_react.default.createElement(_react.Fragment, {
      key: `checker-error-${errorIndex}`
    }, /*#__PURE__*/_react.default.createElement(_eui.EuiDescriptionListTitle, null, statusCode, " ", friendlyName), /*#__PURE__*/_react.default.createElement(_eui.EuiDescriptionListDescription, null, message));
  });
};
function CheckerErrors(props) {
  if (props.errors === undefined || props.errors.length === 0) {
    return null;
  }
  return /*#__PURE__*/_react.default.createElement(_react.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, null), /*#__PURE__*/_react.default.createElement(_eui.EuiCallOut, {
    title: "Errors found",
    color: "danger",
    className: "eui-textLeft"
  }, /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.monitoring.noData.checkerErrors.checkEsSettingsErrorMessage",
    defaultMessage: "There were some errors encountered in trying to check Elasticsearch settings. You need administrator rights to check the settings and, if needed, to enable the monitoring collection setting."
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiDescriptionList, null, /*#__PURE__*/_react.default.createElement(ErrorList, props))));
}
CheckerErrors.propTypes = {
  errors: _propTypes.default.array
};