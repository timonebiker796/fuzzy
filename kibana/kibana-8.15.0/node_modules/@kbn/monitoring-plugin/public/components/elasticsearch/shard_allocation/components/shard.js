"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Shard = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _lodash = require("lodash");
var _calculate_class = require("../lib/calculate_class");
var _vents = require("../lib/vents");
var _i18n = require("@kbn/i18n");
var _eui = require("@elastic/eui");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function getColor(classes) {
  const classList = classes.split(' ');
  if (classList.includes('emergency')) {
    return 'danger';
  }
  if (classList.includes('unassigned')) {
    if (classList.includes('replica')) {
      return 'warning';
    }
    return 'danger';
  }
  if (classList.includes('relocating')) {
    return 'accent';
  }
  if (classList.includes('initializing')) {
    return 'default';
  }
  if (classList.includes('primary')) {
    return 'primary';
  }
  if (classList.includes('replica')) {
    return 'success';
  }
}
class Shard extends _react.default.Component {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2.default)(this, "state", {
      tooltipVisible: false
    });
    (0, _defineProperty2.default)(this, "generateKey", relocating => {
      const shard = this.props.shard;
      const shardType = (0, _lodash.get)(shard, 'shard.primary', shard.primary) ? 'primary' : 'replica';
      const additionId = (0, _lodash.get)(shard, 'shard.state', shard.state) === 'UNASSIGNED' ? Math.random() : '';
      const node = relocating ? (0, _lodash.get)(shard, 'relocation_node.uuid', shard.relocating_node) : (0, _lodash.get)(shard, 'shard.name', shard.node);
      return shard.index + '.' + node + '.' + shardType + '.' + shard.shard + additionId;
    });
    (0, _defineProperty2.default)(this, "toggle", event => {
      if (this.props.shard.tooltip_message) {
        const action = event.type === 'mouseenter' ? 'show' : 'hide';
        const key = this.generateKey(true);
        this.setState({
          tooltipVisible: action === 'show'
        });
        _vents.vents.trigger(key, action);
      }
    });
  }
  componentDidMount() {
    let key;
    const shard = this.props.shard;
    const self = this;
    if (shard.tooltip_message) {
      key = this.generateKey();
      _vents.vents.on(key, function (action) {
        self.setState({
          tooltipVisible: action === 'show'
        });
      });
    }
  }
  componentWillUnmount() {
    let key;
    const shard = this.props.shard;
    if (shard.tooltip_message) {
      key = this.generateKey();
      _vents.vents.clear(key);
    }
  }
  render() {
    const shard = this.props.shard;
    const classes = (0, _calculate_class.calculateClass)(shard);
    const color = getColor(classes);
    const classification = classes + ' ' + (0, _lodash.get)(shard, 'shard.number', shard.shard);
    let shardUi = /*#__PURE__*/_react.default.createElement(_eui.EuiBadge, {
      color: color
    }, (0, _lodash.get)(shard, 'shard.number', shard.shard));
    const tooltipContent = shard.tooltip_message || _i18n.i18n.translate('xpack.monitoring.elasticsearch.shardAllocation.shardDisplayName', {
      defaultMessage: 'Shard'
    });
    if (this.state.tooltipVisible) {
      shardUi = /*#__PURE__*/_react.default.createElement(_eui.EuiToolTip, {
        content: tooltipContent,
        position: "bottom",
        "data-test-subj": "shardTooltip"
      }, /*#__PURE__*/_react.default.createElement("p", null, shardUi));
    }

    // data attrs for automated testing verification
    return /*#__PURE__*/_react.default.createElement("div", {
      onMouseEnter: this.toggle,
      onMouseLeave: this.toggle,
      className: classes,
      "data-shard-tooltip": tooltipContent,
      "data-shard-classification": classification,
      "data-test-subj": "shardIcon"
    }, shardUi);
  }
}
exports.Shard = Shard;
(0, _defineProperty2.default)(Shard, "displayName", _i18n.i18n.translate('xpack.monitoring.elasticsearch.shardAllocation.shardDisplayName', {
  defaultMessage: 'Shard'
}));