"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.postNodeSetupStatusResponsePayloadRT = exports.postNodeSetupStatusRequestQueryRT = exports.postNodeSetupStatusRequestPayloadRT = exports.postNodeSetupStatusRequestParamsRT = void 0;
var rt = _interopRequireWildcard(require("io-ts"));
var _shared = require("../shared");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const postNodeSetupStatusRequestParamsRT = exports.postNodeSetupStatusRequestParamsRT = rt.type({
  nodeUuid: rt.string
});
const postNodeSetupStatusRequestQueryRT = exports.postNodeSetupStatusRequestQueryRT = rt.partial({
  // This flag is not intended to be used in production. It was introduced
  // as a way to ensure consistent API testing - the typical data source
  // for API tests are archived data, where the cluster configuration and data
  // are consistent from environment to environment. However, this endpoint
  // also attempts to retrieve data from the running stack products (ES and Kibana)
  // which will vary from environment to environment making it difficult
  // to write tests against. Therefore, this flag exists and should only be used
  // in our testing environment.
  skipLiveData: rt.union([_shared.booleanFromStringRT, (0, _shared.createLiteralValueFromUndefinedRT)(false)])
});
const postNodeSetupStatusRequestPayloadRT = exports.postNodeSetupStatusRequestPayloadRT = rt.partial({
  ccs: _shared.ccsRT,
  timeRange: _shared.timeRangeRT
});
const postNodeSetupStatusResponsePayloadRT = exports.postNodeSetupStatusResponsePayloadRT = rt.type({
  // TODO: add payload entries
});