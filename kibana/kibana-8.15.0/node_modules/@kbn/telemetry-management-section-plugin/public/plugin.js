"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TelemetryManagementSectionPlugin = void 0;
var _react = _interopRequireDefault(require("react"));
var _telemetry_management_section_wrapper = require("./components/telemetry_management_section_wrapper");
var _common = require("../common");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

class TelemetryManagementSectionPlugin {
  setup(core, {
    advancedSettings,
    telemetry: {
      telemetryService
    },
    usageCollection
  }) {
    var _usageCollection$comp;
    let docLinksLinks;
    core.getStartServices().then(([{
      docLinks
    }]) => {
      docLinksLinks = docLinks === null || docLinks === void 0 ? void 0 : docLinks.links;
    });
    const ApplicationUsageTrackingProvider = (_usageCollection$comp = usageCollection === null || usageCollection === void 0 ? void 0 : usageCollection.components.ApplicationUsageTrackingProvider) !== null && _usageCollection$comp !== void 0 ? _usageCollection$comp : _react.default.Fragment;
    const queryMatch = query => {
      const searchTerm = query.toLowerCase();
      return telemetryService.getCanChangeOptInStatus() && _common.SEARCH_TERMS.some(term => term.indexOf(searchTerm) >= 0);
    };
    advancedSettings.addGlobalSection(props => {
      return /*#__PURE__*/_react.default.createElement(ApplicationUsageTrackingProvider, null, (0, _telemetry_management_section_wrapper.telemetryManagementSectionWrapper)(telemetryService, docLinksLinks)(props));
    }, queryMatch);
    return {};
  }
  start(core) {}
}
exports.TelemetryManagementSectionPlugin = TelemetryManagementSectionPlugin;