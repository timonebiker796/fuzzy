"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EVENT_ANNOTATION_GROUP_TYPE = exports.AvailableAnnotationIcons = void 0;
Object.defineProperty(exports, "createCopiedAnnotation", {
  enumerable: true,
  get: function () {
    return _util.createCopiedAnnotation;
  }
});
Object.defineProperty(exports, "defaultAnnotationColor", {
  enumerable: true,
  get: function () {
    return _util.defaultAnnotationColor;
  }
});
Object.defineProperty(exports, "defaultAnnotationLabel", {
  enumerable: true,
  get: function () {
    return _util.defaultAnnotationLabel;
  }
});
Object.defineProperty(exports, "defaultAnnotationRangeColor", {
  enumerable: true,
  get: function () {
    return _util.defaultAnnotationRangeColor;
  }
});
Object.defineProperty(exports, "getDefaultManualAnnotation", {
  enumerable: true,
  get: function () {
    return _util.getDefaultManualAnnotation;
  }
});
Object.defineProperty(exports, "getDefaultQueryAnnotation", {
  enumerable: true,
  get: function () {
    return _util.getDefaultQueryAnnotation;
  }
});
Object.defineProperty(exports, "isManualPointAnnotationConfig", {
  enumerable: true,
  get: function () {
    return _util.isManualPointAnnotationConfig;
  }
});
Object.defineProperty(exports, "isQueryAnnotationConfig", {
  enumerable: true,
  get: function () {
    return _util.isQueryAnnotationConfig;
  }
});
Object.defineProperty(exports, "isRangeAnnotationConfig", {
  enumerable: true,
  get: function () {
    return _util.isRangeAnnotationConfig;
  }
});
var _util = require("./util");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

const AvailableAnnotationIcons = exports.AvailableAnnotationIcons = {
  ASTERISK: 'asterisk',
  ALERT: 'alert',
  BELL: 'bell',
  BOLT: 'bolt',
  BUG: 'bug',
  CIRCLE: 'circle',
  EDITOR_COMMENT: 'editorComment',
  FLAG: 'flag',
  HEART: 'heart',
  MAP_MARKER: 'mapMarker',
  PIN_FILLED: 'pinFilled',
  STAR_EMPTY: 'starEmpty',
  STAR_FILLED: 'starFilled',
  TAG: 'tag',
  TRIANGLE: 'triangle'
};
const EVENT_ANNOTATION_GROUP_TYPE = exports.EVENT_ANNOTATION_GROUP_TYPE = 'event-annotation-group';