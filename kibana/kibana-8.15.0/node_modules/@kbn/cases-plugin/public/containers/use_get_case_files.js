"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGetCaseFiles = void 0;
var _sharedUxFileContext = require("@kbn/shared-ux-file-context");
var _reactQuery = require("@tanstack/react-query");
var _files = require("../../common/files");
var _use_cases_toast = require("../common/use_cases_toast");
var _constants = require("./constants");
var i18n = _interopRequireWildcard(require("./translations"));
var _use_cases_context = require("../components/cases_context/use_cases_context");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const useGetCaseFiles = ({
  caseId,
  page,
  perPage,
  searchTerm
}) => {
  const {
    owner
  } = (0, _use_cases_context.useCasesContext)();
  const {
    showErrorToast
  } = (0, _use_cases_toast.useCasesToast)();
  const {
    client: filesClient
  } = (0, _sharedUxFileContext.useFilesContext)();
  return (0, _reactQuery.useQuery)(_constants.casesQueriesKeys.caseFiles(caseId, {
    page,
    perPage,
    searchTerm
  }), () => {
    return filesClient.list({
      kind: (0, _files.constructFileKindIdByOwner)(owner[0]),
      page: page + 1,
      ...(searchTerm && {
        name: `*${searchTerm}*`
      }),
      perPage,
      meta: {
        caseIds: [caseId]
      }
    });
  }, {
    keepPreviousData: true,
    onError: error => {
      showErrorToast(error, {
        title: i18n.ERROR_TITLE
      });
    }
  });
};
exports.useGetCaseFiles = useGetCaseFiles;