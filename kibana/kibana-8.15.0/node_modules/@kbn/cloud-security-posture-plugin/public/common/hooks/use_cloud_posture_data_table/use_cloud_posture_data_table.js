"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCloudPostureDataTable = void 0;
var _react = require("react");
var _use_url_query = require("../use_url_query");
var _use_page_size = require("../use_page_size");
var _utils = require("./utils");
var _constants = require("../../constants");
var _use_base_es_query = require("./use_base_es_query");
var _use_persisted_query = require("./use_persisted_query");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
  Hook for managing common table state and methods for the Cloud Posture DataTable
*/
const useCloudPostureDataTable = ({
  defaultQuery = _utils.getDefaultQuery,
  paginationLocalStorageKey,
  columnsLocalStorageKey,
  nonPersistedFilters
}) => {
  const getPersistedDefaultQuery = (0, _use_persisted_query.usePersistedQuery)(defaultQuery);
  const {
    urlQuery,
    setUrlQuery
  } = (0, _use_url_query.useUrlQuery)(getPersistedDefaultQuery);
  const {
    pageSize,
    setPageSize
  } = (0, _use_page_size.usePageSize)(paginationLocalStorageKey);
  const onChangeItemsPerPage = (0, _react.useCallback)(newPageSize => {
    setPageSize(newPageSize);
    setUrlQuery({
      pageIndex: 0,
      pageSize: newPageSize
    });
  }, [setPageSize, setUrlQuery]);
  const onResetFilters = (0, _react.useCallback)(() => {
    setUrlQuery({
      pageIndex: 0,
      filters: [],
      query: {
        query: '',
        language: 'kuery'
      }
    });
  }, [setUrlQuery]);
  const onChangePage = (0, _react.useCallback)(newPageIndex => {
    setUrlQuery({
      pageIndex: newPageIndex
    });
  }, [setUrlQuery]);
  const onSort = (0, _react.useCallback)(sort => {
    setUrlQuery({
      sort
    });
  }, [setUrlQuery]);
  const setTableOptions = (0, _react.useCallback)(({
    page,
    sort
  }) => {
    setPageSize(page.size);
    setUrlQuery({
      sort,
      pageIndex: page.index
    });
  }, [setUrlQuery, setPageSize]);

  /**
   * Page URL query to ES query
   */
  const baseEsQuery = (0, _use_base_es_query.useBaseEsQuery)({
    filters: urlQuery.filters,
    query: urlQuery.query,
    ...(nonPersistedFilters ? {
      nonPersistedFilters
    } : {})
  });
  const handleUpdateQuery = (0, _react.useCallback)(query => {
    setUrlQuery({
      ...query,
      pageIndex: 0
    });
  }, [setUrlQuery]);
  const getRowsFromPages = data => (data === null || data === void 0 ? void 0 : data.map(({
    page
  }) => {
    return page;
  }).flat()) || [];
  const queryError = baseEsQuery instanceof Error ? baseEsQuery : undefined;
  return {
    setUrlQuery,
    sort: urlQuery.sort,
    filters: urlQuery.filters || [],
    query: baseEsQuery.query ? baseEsQuery.query : {
      bool: {
        must: [],
        filter: [],
        should: [],
        must_not: []
      }
    },
    queryError,
    pageIndex: urlQuery.pageIndex,
    urlQuery,
    setTableOptions,
    handleUpdateQuery,
    pageSize,
    setPageSize,
    onChangeItemsPerPage,
    onChangePage,
    onSort,
    onResetFilters,
    columnsLocalStorageKey: columnsLocalStorageKey || _constants.LOCAL_STORAGE_DATA_TABLE_COLUMNS_KEY,
    getRowsFromPages
  };
};
exports.useCloudPostureDataTable = useCloudPostureDataTable;