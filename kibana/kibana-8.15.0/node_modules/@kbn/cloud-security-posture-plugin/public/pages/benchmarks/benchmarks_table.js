"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ERROR_STATE_TEST_SUBJECT = exports.BenchmarksTable = void 0;
var _eui = require("@elastic/eui");
var _react = _interopRequireWildcard(require("react"));
var _i18n = require("@kbn/i18n");
var _i18nReact = require("@kbn/i18n-react");
var _reactRouterDom = require("react-router-dom");
var _constants = require("../../common/constants");
var _use_navigate_findings = require("../../common/hooks/use_navigate_findings");
var TEST_SUBJ = _interopRequireWildcard(require("./test_subjects"));
var _cloud_posture_page = require("../../components/cloud_posture_page");
var _full_size_centered_page = require("../../components/full_size_centered_page");
var _compliance_score_bar = require("../../components/compliance_score_bar");
var _helpers = require("../../../common/utils/helpers");
var _cis_benchmark_icon = require("../../components/cis_benchmark_icon");
var _constants2 = require("../../common/navigation/constants");
var _use_benchmark_dynamic_values = require("../../common/hooks/use_benchmark_dynamic_values");
var _use_kibana = require("../../common/hooks/use_kibana");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const ERROR_STATE_TEST_SUBJECT = exports.ERROR_STATE_TEST_SUBJECT = 'benchmark_page_error';
const BenchmarkButtonLink = ({
  benchmarkId,
  benchmarkVersion
}) => {
  const {
    application
  } = (0, _use_kibana.useKibana)().services;
  return /*#__PURE__*/_react.default.createElement(_eui.EuiLink, {
    href: application === null || application === void 0 ? void 0 : application.getUrlForApp('security', {
      path: (0, _reactRouterDom.generatePath)(_constants2.benchmarksNavigation.rules.path, {
        benchmarkVersion,
        benchmarkId
      })
    })
  }, (0, _helpers.getBenchmarkCisName)(benchmarkId));
};
const ErrorMessageComponent = error => /*#__PURE__*/_react.default.createElement(_full_size_centered_page.FullSizeCenteredPage, null, /*#__PURE__*/_react.default.createElement(_eui.EuiEmptyPrompt, {
  color: "danger",
  iconType: "warning",
  "data-test-subj": ERROR_STATE_TEST_SUBJECT,
  title: /*#__PURE__*/_react.default.createElement("h2", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.csp.benchmarks.benchmarksTable.errorRenderer.errorTitle",
    defaultMessage: "We couldn't fetch your cloud security posture benchmark data"
  })),
  body: (0, _cloud_posture_page.isCommonError)(error) ? /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.csp.benchmarks.benchmarksTable.errorRenderer.errorDescription",
    defaultMessage: "{error} {statusCode}: {body}",
    values: {
      error: error.body.error,
      statusCode: error.body.statusCode,
      body: error.body.message
    }
  })) : undefined
}));
const getBenchmarkTableColumns = (getBenchmarkDynamicValues, navToFindings) => [{
  field: 'id',
  name: _i18n.i18n.translate('xpack.csp.benchmarks.benchmarksTable.integrationBenchmarkCisName', {
    defaultMessage: 'Benchmark'
  }),
  truncateText: true,
  width: '17.5%',
  sortable: true,
  render: (benchmarkId, benchmark) => /*#__PURE__*/_react.default.createElement(BenchmarkButtonLink, {
    benchmarkId: benchmarkId || '',
    benchmarkVersion: benchmark.version || ''
  }),
  'data-test-subj': TEST_SUBJ.BENCHMARKS_TABLE_COLUMNS.CIS_NAME
}, {
  field: 'version',
  name: _i18n.i18n.translate('xpack.csp.benchmarks.benchmarksTable.integrationBenchmarkVersion', {
    defaultMessage: 'Version'
  }),
  truncateText: true,
  sortable: true,
  width: '17.5%',
  'data-test-subj': TEST_SUBJ.BENCHMARKS_TABLE_COLUMNS.VERSION
}, {
  field: 'id',
  name: _i18n.i18n.translate('xpack.csp.benchmarks.benchmarksTable.applicableTo', {
    defaultMessage: 'Applicable To'
  }),
  truncateText: true,
  width: '30%',
  'data-test-subj': TEST_SUBJ.BENCHMARKS_TABLE_COLUMNS.APPLICABLE_TO,
  render: benchmarkId => {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
      gutterSize: "s",
      alignItems: "center"
    }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
      grow: false
    }, /*#__PURE__*/_react.default.createElement(_cis_benchmark_icon.CISBenchmarkIcon, {
      type: benchmarkId,
      size: 'l'
    })), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
      grow: false
    }, (0, _helpers.getBenchmarkApplicableTo)(benchmarkId))));
  }
}, {
  field: 'evaluation',
  name: _i18n.i18n.translate('xpack.csp.benchmarks.benchmarksTable.evaluated', {
    defaultMessage: 'Evaluated'
  }),
  dataType: 'string',
  truncateText: true,
  width: '17.5%',
  'data-test-subj': TEST_SUBJ.BENCHMARKS_TABLE_COLUMNS.EVALUATED,
  render: (benchmarkEvaluation, benchmark) => {
    const {
      resourceCountLabel,
      integrationLink
    } = getBenchmarkDynamicValues(benchmark.id, benchmarkEvaluation);
    if (benchmarkEvaluation === 0) {
      return /*#__PURE__*/_react.default.createElement(_eui.EuiButtonEmpty, {
        href: integrationLink,
        iconType: "plusInCircle",
        flush: "left"
      }, _i18n.i18n.translate('xpack.csp.benchmarks.benchmarksTable.addIntegrationTitle', {
        defaultMessage: 'Add {resourceCountLabel}',
        values: {
          resourceCountLabel
        }
      }));
    }
    const isKspmBenchmark = ['cis_k8s', 'cis_eks'].includes(benchmark.id);
    const groupByField = isKspmBenchmark ? _constants.FINDINGS_GROUPING_OPTIONS.ORCHESTRATOR_CLUSTER_NAME : _constants.FINDINGS_GROUPING_OPTIONS.CLOUD_ACCOUNT_NAME;
    return /*#__PURE__*/_react.default.createElement(_eui.EuiButtonEmpty, {
      flush: "left",
      onClick: () => {
        navToFindings({
          'rule.benchmark.id': benchmark.id
        }, [groupByField]);
      }
    }, _i18n.i18n.translate('xpack.csp.benchmarks.benchmarksTable.accountsCountTitle', {
      defaultMessage: '{benchmarkEvaluation} {resourceCountLabel}',
      values: {
        benchmarkEvaluation,
        resourceCountLabel
      }
    }));
  }
}, {
  field: 'score',
  name: _i18n.i18n.translate('xpack.csp.benchmarks.benchmarksTable.score', {
    defaultMessage: 'Compliance'
  }),
  dataType: 'string',
  truncateText: true,
  width: '7.5%',
  'data-test-subj': TEST_SUBJ.BENCHMARKS_TABLE_COLUMNS.COMPLIANCE,
  render: data => {
    if (data.totalFindings > 0) return /*#__PURE__*/_react.default.createElement(_compliance_score_bar.ComplianceScoreBar, {
      totalPassed: data === null || data === void 0 ? void 0 : data.totalPassed,
      totalFailed: data === null || data === void 0 ? void 0 : data.totalFailed
    });
    return /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.csp.benchmarks.benchmarksTable.noFindingsScore",
      defaultMessage: "No Findings"
    });
  }
}];
const BenchmarksTable = ({
  benchmarks,
  pageIndex,
  pageSize,
  totalItemCount,
  loading,
  error,
  setQuery,
  noItemsMessage,
  sorting,
  ...rest
}) => {
  const {
    getBenchmarkDynamicValues
  } = (0, _use_benchmark_dynamic_values.useBenchmarkDynamicValues)();
  const navToFindings = (0, _use_navigate_findings.useNavigateFindings)();
  const pagination = {
    pageIndex: Math.max(pageIndex - 1, 0),
    pageSize,
    totalItemCount
  };
  const benchmarksSorted = (0, _react.useMemo)(() => {
    return [...benchmarks].sort((benchmarkDataA, benchmarkDataB) => benchmarkDataA.id.localeCompare(benchmarkDataB.id));
  }, [benchmarks]);
  const onChange = ({
    page
  }) => {
    setQuery({
      page: {
        ...page,
        index: page.index + 1
      }
    });
  };
  if (error) {
    return /*#__PURE__*/_react.default.createElement(ErrorMessageComponent, {
      error: error
    });
  }
  return /*#__PURE__*/_react.default.createElement(_eui.EuiBasicTable, {
    "data-test-subj": rest['data-test-subj'],
    items: benchmarksSorted,
    columns: getBenchmarkTableColumns(getBenchmarkDynamicValues, navToFindings),
    itemId: item => [item.id, item.version].join('/'),
    pagination: pagination,
    onChange: onChange,
    tableLayout: "fixed",
    loading: loading,
    noItemsMessage: noItemsMessage,
    error: error
    /* Disabled Sorting until we have the final Benchmark table */
    // sorting={sorting}
  });
};
exports.BenchmarksTable = BenchmarksTable;