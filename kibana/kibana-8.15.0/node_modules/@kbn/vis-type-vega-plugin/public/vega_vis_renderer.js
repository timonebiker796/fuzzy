"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getVegaVisRenderer = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactDom = require("react-dom");
var _analytics = require("@kbn/analytics");
var _reactKibanaContextRender = require("@kbn/react-kibana-context-render");
var _public = require("@kbn/visualizations-plugin/public");
var _services = require("./services");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } /*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
const LazyVegaVisComponent = /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./async_services'))).then(({
  VegaVisComponent
}) => ({
  default: VegaVisComponent
})));

/** @internal **/
const extractContainerType = context => {
  if (context) {
    var _recursiveGet;
    const recursiveGet = item => {
      if (item.type) {
        return item;
      } else if (item.child) {
        return recursiveGet(item.child);
      }
    };
    return (_recursiveGet = recursiveGet(context)) === null || _recursiveGet === void 0 ? void 0 : _recursiveGet.type;
  }
};
const getVegaVisRenderer = deps => ({
  name: 'vega_vis',
  reuseDomNode: true,
  render: async (domNode, {
    visData
  }, handlers) => {
    handlers.onDestroy(() => {
      (0, _reactDom.unmountComponentAtNode)(domNode);
    });
    const renderComplete = () => {
      const usageCollection = (0, _services.getUsageCollectionStart)();
      const containerType = extractContainerType(handlers.getExecutionContext());
      const visualizationType = 'vega';
      if (usageCollection && containerType) {
        const counterEvents = [`render_${visualizationType}`, visData.useMap ? `render_${visualizationType}_map` : undefined, `render_${visualizationType}_${visData.isVegaLite ? 'lite' : 'normal'}`].filter(Boolean);
        usageCollection.reportUiCounter(containerType, _analytics.METRIC_TYPE.COUNT, counterEvents);
      }
      handlers.done();
    };
    const [startServices] = await deps.core.getStartServices();
    (0, _reactDom.render)( /*#__PURE__*/_react.default.createElement(_reactKibanaContextRender.KibanaRenderContextProvider, startServices, /*#__PURE__*/_react.default.createElement(_public.VisualizationContainer, {
      handlers: handlers
    }, /*#__PURE__*/_react.default.createElement(LazyVegaVisComponent, {
      deps: deps,
      fireEvent: handlers.event,
      renderComplete: renderComplete,
      renderMode: handlers.getRenderMode(),
      visData: visData
    }))), domNode);
  }
});
exports.getVegaVisRenderer = getVegaVisRenderer;