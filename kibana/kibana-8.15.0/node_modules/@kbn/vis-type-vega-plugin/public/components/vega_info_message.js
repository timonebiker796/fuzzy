"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getInfoMessage = void 0;
var _react = _interopRequireWildcard(require("react"));
var _hjson = require("hjson");
var _experimental_map_vis_info = require("./experimental_map_vis_info");
var _deprecated_interval_info = require("./deprecated_interval_info");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

const parseSpec = spec => {
  if (spec) {
    try {
      return (0, _hjson.parse)(spec, {
        legacyRoot: false,
        keepWsc: true
      });
    } catch (e) {
      // spec is invalid
    }
  }
};
const InfoMessage = ({
  spec
}) => {
  const vegaSpec = (0, _react.useMemo)(() => parseSpec(spec), [spec]);
  if (!vegaSpec) {
    return null;
  }
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, (0, _experimental_map_vis_info.shouldShowMapLayerInfo)(vegaSpec) && /*#__PURE__*/_react.default.createElement(_experimental_map_vis_info.ExperimentalMapLayerInfo, null), (0, _deprecated_interval_info.shouldShowDeprecatedHistogramIntervalInfo)(vegaSpec) && /*#__PURE__*/_react.default.createElement(_deprecated_interval_info.DeprecatedHistogramIntervalInfo, null));
};
const getInfoMessage = vis => /*#__PURE__*/_react.default.createElement(InfoMessage, {
  spec: vis.params.spec
});
exports.getInfoMessage = getInfoMessage;