"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runResilientMigrator = runResilientMigrator;
var _next = require("./next");
var _model = require("./model");
var _initial_state = require("./initial_state");
var _migrations_state_action_machine = require("./migrations_state_action_machine");
var _migrations_state_machine_cleanup = require("./migrations_state_machine_cleanup");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

/**
 * To avoid the Elasticsearch-js client aborting our requests before we
 * receive a response from Elasticsearch we choose a requestTimeout that's
 * longer than the DEFAULT_TIMEOUT.
 *
 * This timeout is only really valuable for preventing migrations from being
 * stuck waiting forever for a response when the underlying socket is broken.
 *
 * We also set maxRetries to 0 so that the state action machine can handle all
 * retries. This way we get exponential back-off and logging for failed
 * actions.
 */

/**
 * Migrates the provided indexPrefix index using a resilient algorithm that is
 * completely lock-free so that any failure can always be retried by
 * restarting Kibana.
 */
async function runResilientMigrator({
  client,
  kibanaVersion,
  waitForMigrationCompletion,
  mustRelocateDocuments,
  indexTypes,
  indexTypesMap,
  targetIndexMappings,
  hashToVersionMap,
  logger,
  preMigrationScript,
  readyToReindex,
  doneReindexing,
  updateRelocationAliases,
  transformRawDocs,
  coreMigrationVersionPerType,
  migrationVersionPerType,
  indexPrefix,
  migrationsConfig,
  typeRegistry,
  docLinks,
  esCapabilities
}) {
  const initialState = (0, _initial_state.createInitialState)({
    kibanaVersion,
    waitForMigrationCompletion,
    mustRelocateDocuments,
    indexTypes,
    indexTypesMap,
    hashToVersionMap,
    targetIndexMappings,
    preMigrationScript,
    coreMigrationVersionPerType,
    migrationVersionPerType,
    indexPrefix,
    migrationsConfig,
    typeRegistry,
    docLinks,
    logger,
    esCapabilities
  });
  return (0, _migrations_state_action_machine.migrationStateActionMachine)({
    initialState,
    logger,
    next: (0, _next.next)(client, transformRawDocs, readyToReindex, doneReindexing, updateRelocationAliases),
    model: _model.model,
    abort: async state => {
      // At this point, we could reject this migrator's defers and unblock other migrators
      // but we are going to throw and shutdown Kibana anyway, so there's no real point in it
      await (0, _migrations_state_machine_cleanup.cleanup)(client, state);
    }
  });
}