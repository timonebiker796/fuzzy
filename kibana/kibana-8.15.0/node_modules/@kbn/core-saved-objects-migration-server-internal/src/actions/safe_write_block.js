"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.safeWriteBlock = void 0;
var Either = _interopRequireWildcard(require("fp-ts/lib/Either"));
var TaskEither = _interopRequireWildcard(require("fp-ts/lib/TaskEither"));
var _function = require("fp-ts/lib/function");
var _ = require(".");
var _set_write_block = require("./set_write_block");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

/** @internal */

const safeWriteBlock = ({
  client,
  sourceIndex,
  targetIndex,
  timeout = _.DEFAULT_TIMEOUT
}) => {
  const assertSourceAndTargetDifferTask = TaskEither.fromEither(sourceIndex === targetIndex ? Either.left({
    type: 'source_equals_target',
    index: sourceIndex
  }) : Either.right('source_and_target_differ'));
  return (0, _function.pipe)(assertSourceAndTargetDifferTask, TaskEither.chainW(() => (0, _set_write_block.setWriteBlock)({
    client,
    index: sourceIndex,
    timeout
  })));
};
exports.safeWriteBlock = safeWriteBlock;