"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateMappings = void 0;
var Either = _interopRequireWildcard(require("fp-ts/lib/Either"));
var _catch_retryable_es_client_errors = require("./catch_retryable_es_client_errors");
var _constants = require("./constants");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

/** @internal */

/** @internal */

/**
 * Attempts to update the SO index mappings.
 * Includes an automatic retry mechanism for retriable errors.
 * Returns an 'update_mappings_succeeded' upon success.
 * If changes in the mappings are NOT compatible and the update fails on ES side,
 * this method will return an 'incompatible_mapping_exception'.
 */
const updateMappings = ({
  client,
  index,
  mappings
}) => {
  return () => {
    return client.indices.putMapping({
      index,
      timeout: _constants.DEFAULT_TIMEOUT,
      ...mappings
    }).then(() => Either.right('update_mappings_succeeded')).catch(res => {
      var _res$body, _res$body$error;
      const errorType = res === null || res === void 0 ? void 0 : (_res$body = res.body) === null || _res$body === void 0 ? void 0 : (_res$body$error = _res$body.error) === null || _res$body$error === void 0 ? void 0 : _res$body$error.type;
      // ES throws this exact error when attempting to make incompatible updates to the mappigns
      if ((res === null || res === void 0 ? void 0 : res.statusCode) === 400 && (errorType === 'illegal_argument_exception' || errorType === 'strict_dynamic_mapping_exception' || errorType === 'mapper_parsing_exception')) {
        return Either.left({
          type: 'incompatible_mapping_exception'
        });
      }
      return (0, _catch_retryable_es_client_errors.catchRetryableEsClientErrors)(res);
    });
  };
};
exports.updateMappings = updateMappings;