"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTargetIndex = void 0;
var _lodash = require("lodash");
var Either = _interopRequireWildcard(require("fp-ts/lib/Either"));
var _retry_state = require("../../../model/retry_state");
var _helpers = require("../../../model/helpers");
var _constants = require("../../../common/constants");
var _actions = require("../../actions");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

const createTargetIndex = (state, res, context) => {
  if (Either.isLeft(res)) {
    const left = res.left;
    if ((0, _actions.isTypeof)(left, 'index_not_green_timeout')) {
      // cluster might just be busy so we retry the action for a set number of times.
      const retryErrorMessage = `${left.message} Refer to ${context.migrationDocLinks.repeatedTimeoutRequests} for information on how to resolve the issue.`;
      return (0, _retry_state.delayRetryState)(state, retryErrorMessage, context.maxRetryAttempts);
    } else if ((0, _actions.isTypeof)(left, 'cluster_shard_limit_exceeded')) {
      return {
        ...state,
        controlState: 'FATAL',
        reason: `${_constants.CLUSTER_SHARD_LIMIT_EXCEEDED_REASON} See ${context.migrationDocLinks.clusterShardLimitExceeded}`
      };
    } else {
      return (0, _helpers.throwBadResponse)(state, left);
    }
  }
  const currentIndexMeta = (0, _lodash.cloneDeep)(state.indexMappings._meta);
  return {
    ...state,
    controlState: 'INDEX_STATE_UPDATE_DONE',
    previousMappings: state.indexMappings,
    currentIndexMeta,
    aliases: [],
    aliasActions: [],
    skipDocumentMigration: true,
    previousAlgorithm: 'zdt'
  };
};
exports.createTargetIndex = createTargetIndex;