"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useActions = void 0;
var _react = _interopRequireDefault(require("react"));
var _action_reauthorize = require("../action_reauthorize");
var _action_clone = require("../action_clone");
var _action_delete = require("../action_delete");
var _action_discover = require("../action_discover");
var _edit_transform = require("../../../edit_transform");
var _action_edit = require("../action_edit");
var _action_reset = require("../action_reset");
var _action_schedule_now = require("../action_schedule_now");
var _action_start = require("../action_start");
var _action_stop = require("../action_stop");
var _action_create_alert = require("../action_create_alert");
var _stop_action_modal = require("../action_stop/stop_action_modal");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const useActions = ({
  forceDisable,
  transformNodes
}) => {
  const cloneAction = (0, _action_clone.useCloneAction)(forceDisable, transformNodes);
  const deleteAction = (0, _action_delete.useDeleteAction)(forceDisable);
  const discoverAction = (0, _action_discover.useDiscoverAction)(forceDisable);
  const editAction = (0, _action_edit.useEditAction)(forceDisable, transformNodes);
  const reauthorizeAction = (0, _action_reauthorize.useReauthorizeAction)(forceDisable, transformNodes);
  const resetAction = (0, _action_reset.useResetAction)(forceDisable);
  const scheduleNowAction = (0, _action_schedule_now.useScheduleNowAction)(forceDisable, transformNodes);
  const startAction = (0, _action_start.useStartAction)(forceDisable, transformNodes);
  const stopAction = (0, _action_stop.useStopAction)(forceDisable);
  const createAlertRuleAction = (0, _action_create_alert.useCreateAlertRuleAction)(forceDisable);
  return {
    modals: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, resetAction.isModalVisible && /*#__PURE__*/_react.default.createElement(_action_reset.ResetActionModal, resetAction), startAction.isModalVisible && /*#__PURE__*/_react.default.createElement(_action_start.StartActionModal, startAction), stopAction.isModalVisible && /*#__PURE__*/_react.default.createElement(_stop_action_modal.StopActionModal, stopAction), reauthorizeAction.isModalVisible && /*#__PURE__*/_react.default.createElement(_action_reauthorize.ReauthorizeActionModal, reauthorizeAction), /*#__PURE__*/_react.default.createElement(_edit_transform.EditTransformFlyout, editAction), deleteAction.isModalVisible && /*#__PURE__*/_react.default.createElement(_action_delete.DeleteActionModal, deleteAction)),
    actions: [discoverAction.action, createAlertRuleAction.action, scheduleNowAction.action, startAction.action, stopAction.action, editAction.action, cloneAction.action, deleteAction.action, reauthorizeAction.action, resetAction.action]
  };
};
exports.useActions = useActions;