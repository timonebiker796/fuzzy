"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAlertRuleManageContext = exports.TransformAlertFlyoutWrapper = exports.TransformAlertFlyout = exports.AlertRulesManageContext = void 0;
exports.useAlertRuleFlyout = useAlertRuleFlyout;
var _react = _interopRequireWildcard(require("react"));
var _lodash = require("lodash");
var _rxjs = require("rxjs");
var _useObservable = _interopRequireDefault(require("react-use/lib/useObservable"));
var _app_dependencies = require("../app/app_dependencies");
var _common = require("../../common");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const TransformAlertFlyout = ({
  initialAlert,
  ruleParams,
  onCloseFlyout,
  onSave
}) => {
  const {
    triggersActionsUi
  } = (0, _app_dependencies.useAppDependencies)();
  const AlertFlyout = (0, _react.useMemo)(() => {
    if (!triggersActionsUi) return;
    const commonProps = {
      onClose: () => {
        onCloseFlyout();
      },
      onSave: async () => {
        if (onSave) {
          onSave();
        }
      }
    };
    if (initialAlert) {
      return triggersActionsUi.getEditRuleFlyout({
        ...commonProps,
        initialRule: {
          ...initialAlert,
          ruleTypeId: initialAlert.alertTypeId
        }
      });
    }
    return triggersActionsUi.getAddRuleFlyout({
      ...commonProps,
      consumer: 'stackAlerts',
      canChangeTrigger: false,
      ruleTypeId: _common.TRANSFORM_RULE_TYPE.TRANSFORM_HEALTH,
      metadata: {},
      initialValues: {
        params: ruleParams
      }
    });
    // deps on id to avoid re-rendering on auto-refresh
  }, [triggersActionsUi, initialAlert, ruleParams, onCloseFlyout, onSave]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, AlertFlyout);
};
exports.TransformAlertFlyout = TransformAlertFlyout;
const getAlertRuleManageContext = exports.getAlertRuleManageContext = (0, _lodash.memoize)(function () {
  const ruleState$ = new _rxjs.BehaviorSubject({
    editAlertRule: null,
    createAlertRule: null
  });
  return {
    editAlertRule$: ruleState$.pipe((0, _rxjs.pluck)('editAlertRule')),
    createAlertRule$: ruleState$.pipe((0, _rxjs.pluck)('createAlertRule')),
    setEditAlertRule: initialRule => {
      ruleState$.next({
        createAlertRule: null,
        editAlertRule: initialRule
      });
    },
    setCreateAlertRule: transformId => {
      ruleState$.next({
        createAlertRule: {
          includeTransforms: [transformId]
        },
        editAlertRule: null
      });
    },
    hideAlertFlyout: () => {
      ruleState$.next({
        createAlertRule: null,
        editAlertRule: null
      });
    }
  };
});
const AlertRulesManageContext = exports.AlertRulesManageContext = /*#__PURE__*/(0, _react.createContext)(getAlertRuleManageContext());
function useAlertRuleFlyout() {
  return (0, _react.useContext)(AlertRulesManageContext);
}
const TransformAlertFlyoutWrapper = () => {
  const {
    editAlertRule$,
    createAlertRule$,
    hideAlertFlyout
  } = useAlertRuleFlyout();
  const editAlertRule = (0, _useObservable.default)(editAlertRule$);
  const createAlertRule = (0, _useObservable.default)(createAlertRule$);
  return editAlertRule || createAlertRule ? /*#__PURE__*/_react.default.createElement(TransformAlertFlyout, {
    initialAlert: editAlertRule,
    ruleParams: createAlertRule,
    onCloseFlyout: hideAlertFlyout
  }) : null;
};
exports.TransformAlertFlyoutWrapper = TransformAlertFlyoutWrapper;