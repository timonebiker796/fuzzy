"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LabelsPanel = LabelsPanel;
var _react = _interopRequireDefault(require("react"));
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _i18nReact = require("@kbn/i18n-react");
var _public = require("@kbn/vis-default-editor-plugin/public");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

function LabelsPanel({
  stateParams,
  setValue,
  setGaugeValue
}) {
  return /*#__PURE__*/_react.default.createElement(_eui.EuiPanel, {
    paddingSize: "s"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiTitle, {
    size: "xs"
  }, /*#__PURE__*/_react.default.createElement("h3", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "visTypeGauge.controls.gaugeOptions.labelsTitle",
    defaultMessage: "Labels"
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  }), /*#__PURE__*/_react.default.createElement(_public.SwitchOption, {
    label: _i18n.i18n.translate('visTypeGauge.controls.gaugeOptions.showLabelsLabel', {
      defaultMessage: 'Show labels'
    }),
    paramName: "show",
    value: stateParams.gauge.labels.show,
    setValue: (paramName, value) => setGaugeValue('labels', {
      ...stateParams.gauge.labels,
      [paramName]: value
    })
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  }), /*#__PURE__*/_react.default.createElement(_public.TextInputOption, {
    disabled: !stateParams.gauge.labels.show,
    label: _i18n.i18n.translate('visTypeGauge.controls.gaugeOptions.subTextLabel', {
      defaultMessage: 'Sub label'
    }),
    paramName: "subText",
    value: stateParams.gauge.style.subText,
    setValue: (paramName, value) => setGaugeValue('style', {
      ...stateParams.gauge.style,
      [paramName]: value
    })
  }));
}