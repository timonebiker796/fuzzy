"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.settingsRt = exports.serviceRt = exports.agentConfigurationIntakeRt = void 0;
var t = _interopRequireWildcard(require("io-ts"));
var _setting_definitions = require("../setting_definitions");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

// retrieve validation from config definitions settings and validate on the server
const knownSettings = _setting_definitions.settingDefinitions.reduce((acc, {
  key,
  validation
}) => {
  acc[key] = validation;
  return acc;
}, {});
const serviceRt = exports.serviceRt = t.partial({
  name: t.string,
  environment: t.string
});
const settingsRt = exports.settingsRt = t.intersection([t.record(t.string, t.string), t.partial(knownSettings)]);
const agentConfigurationIntakeRt = exports.agentConfigurationIntakeRt = t.intersection([t.partial({
  agent_name: t.string
}), t.type({
  service: serviceRt,
  settings: settingsRt
})]);