"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTransactionErrorRateChartPreview = getTransactionErrorRateChartPreview;
var _server = require("@kbn/observability-plugin/server");
var _ruleDataUtils = require("@kbn/rule-data-utils");
var _apm = require("../../../../../common/es_fields/apm");
var _environment_query = require("../../../../../common/utils/environment_query");
var _transactions = require("../../../../lib/helpers/transactions");
var _event_outcome = require("../../../../../common/event_outcome");
var _get_groupby_terms = require("../utils/get_groupby_terms");
var _get_all_groupby_fields = require("../../../../../common/rules/get_all_groupby_fields");
var _get_filtered_series_for_preview_chart = require("../utils/get_filtered_series_for_preview_chart");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

async function getTransactionErrorRateChartPreview({
  config,
  apmEventClient,
  alertParams
}) {
  var _searchConfiguration$;
  const {
    serviceName,
    environment,
    transactionType,
    interval,
    start,
    end,
    transactionName,
    groupBy: groupByFields,
    searchConfiguration
  } = alertParams;
  const searchAggregatedTransactions = await (0, _transactions.getSearchTransactionsEvents)({
    config,
    apmEventClient,
    kuery: ''
  });
  const allGroupByFields = (0, _get_all_groupby_fields.getAllGroupByFields)(_ruleDataUtils.ApmRuleType.TransactionErrorRate, groupByFields);
  const termFilterQuery = !searchConfiguration ? [...(0, _server.termQuery)(_apm.SERVICE_NAME, serviceName, {
    queryEmptyString: false
  }), ...(0, _server.termQuery)(_apm.TRANSACTION_TYPE, transactionType, {
    queryEmptyString: false
  }), ...(0, _server.termQuery)(_apm.TRANSACTION_NAME, transactionName, {
    queryEmptyString: false
  }), ...(0, _environment_query.environmentQuery)(environment)] : [];
  const params = {
    apm: {
      events: [(0, _transactions.getProcessorEventForTransactions)(searchAggregatedTransactions)]
    },
    body: {
      track_total_hits: false,
      size: 0,
      query: {
        bool: {
          filter: [...termFilterQuery, ...(0, _server.getParsedFilterQuery)(searchConfiguration === null || searchConfiguration === void 0 ? void 0 : (_searchConfiguration$ = searchConfiguration.query) === null || _searchConfiguration$ === void 0 ? void 0 : _searchConfiguration$.query), ...(0, _server.rangeQuery)(start, end), ...(0, _transactions.getBackwardCompatibleDocumentTypeFilter)(searchAggregatedTransactions), {
            terms: {
              [_apm.EVENT_OUTCOME]: [_event_outcome.EventOutcome.failure, _event_outcome.EventOutcome.success]
            }
          }]
        }
      },
      aggs: {
        series: {
          multi_terms: {
            terms: (0, _get_groupby_terms.getGroupByTerms)(allGroupByFields),
            size: 1000,
            order: {
              _count: 'desc'
            }
          },
          aggs: {
            timeseries: {
              date_histogram: {
                field: '@timestamp',
                fixed_interval: interval,
                extended_bounds: {
                  min: start,
                  max: end
                }
              },
              aggs: {
                outcomes: {
                  terms: {
                    field: _apm.EVENT_OUTCOME
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  const resp = await apmEventClient.search('get_transaction_error_rate_chart_preview', params);
  if (!resp.aggregations) {
    return {
      series: [],
      totalGroups: 0
    };
  }
  const seriesDataMap = resp.aggregations.series.buckets.reduce((acc, bucket) => {
    const bucketKey = bucket.key.join('_');
    bucket.timeseries.buckets.forEach(timeseriesBucket => {
      const x = timeseriesBucket.key;
      const y = calculateErrorRate(timeseriesBucket.outcomes.buckets);
      if (acc[bucketKey]) {
        acc[bucketKey].push({
          x,
          y
        });
      } else {
        acc[bucketKey] = [{
          x,
          y
        }];
      }
    });
    return acc;
  }, {});
  const series = Object.keys(seriesDataMap).map(key => ({
    name: key,
    data: seriesDataMap[key]
  }));
  const filteredSeries = (0, _get_filtered_series_for_preview_chart.getFilteredBarSeries)(series);
  return {
    series: filteredSeries,
    totalGroups: series.length
  };
}
const calculateErrorRate = buckets => {
  var _buckets$find$doc_cou, _buckets$find, _buckets$find$doc_cou2, _buckets$find2;
  const failed = (_buckets$find$doc_cou = (_buckets$find = buckets.find(outcomeBucket => outcomeBucket.key === _event_outcome.EventOutcome.failure)) === null || _buckets$find === void 0 ? void 0 : _buckets$find.doc_count) !== null && _buckets$find$doc_cou !== void 0 ? _buckets$find$doc_cou : 0;
  const succesful = (_buckets$find$doc_cou2 = (_buckets$find2 = buckets.find(outcomeBucket => outcomeBucket.key === _event_outcome.EventOutcome.success)) === null || _buckets$find2 === void 0 ? void 0 : _buckets$find2.doc_count) !== null && _buckets$find$doc_cou2 !== void 0 ? _buckets$find$doc_cou2 : 0;
  return failed / (failed + succesful) * 100;
};