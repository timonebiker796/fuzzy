"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnnotationsContext = void 0;
exports.AnnotationsContextProvider = AnnotationsContextProvider;
var _react = _interopRequireWildcard(require("react"));
var _use_fetcher = require("../../hooks/use_fetcher");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const AnnotationsContext = exports.AnnotationsContext = /*#__PURE__*/(0, _react.createContext)({
  annotations: []
});
const INITIAL_STATE = {
  annotations: []
};
function AnnotationsContextProvider({
  children,
  serviceName,
  environment,
  start,
  end
}) {
  const {
    data = INITIAL_STATE
  } = (0, _use_fetcher.useFetcher)(callApmApi => {
    if (start && end && serviceName) {
      return callApmApi('GET /api/apm/services/{serviceName}/annotation/search 2023-10-31', {
        params: {
          path: {
            serviceName
          },
          query: {
            environment,
            start,
            end
          }
        }
      });
    }
  }, [environment, start, end, serviceName]);
  return /*#__PURE__*/_react.default.createElement(AnnotationsContext.Provider, {
    value: data,
    children: children
  });
}