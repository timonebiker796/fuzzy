"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProfilingTopNFunctions = ProfilingTopNFunctions;
var _eui = require("@elastic/eui");
var _public = require("@kbn/observability-shared-plugin/public");
var _react = _interopRequireDefault(require("react"));
var _use_fetcher = require("../../../../hooks/use_fetcher");
var _use_time_range = require("../../../../hooks/use_time_range");
var _top_functions_link = require("./top_functions_link");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function ProfilingTopNFunctions({
  serviceName,
  rangeFrom,
  rangeTo,
  kuery,
  transactionName,
  transactionType,
  environment
}) {
  const {
    start,
    end
  } = (0, _use_time_range.useTimeRange)({
    rangeFrom,
    rangeTo
  });
  const {
    data,
    status
  } = (0, _use_fetcher.useFetcher)(callApmApi => {
    if (transactionType) {
      return callApmApi('GET /internal/apm/services/{serviceName}/profiling/functions', {
        params: {
          path: {
            serviceName
          },
          query: {
            start,
            end,
            kuery,
            transactionName,
            startIndex: 0,
            endIndex: 10,
            transactionType,
            environment
          }
        }
      });
    }
  }, [serviceName, start, end, kuery, transactionName, transactionType, environment]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_top_functions_link.ProfilingTopNFunctionsLink, {
    kuery: kuery,
    rangeFrom: rangeFrom,
    rangeTo: rangeTo,
    justifyContent: "flexEnd"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, null), /*#__PURE__*/_react.default.createElement(_public.EmbeddableFunctions, {
    data: data,
    isLoading: (0, _use_fetcher.isPending)(status),
    rangeFrom: new Date(start).valueOf(),
    rangeTo: new Date(end).valueOf()
  }));
}