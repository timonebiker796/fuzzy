"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormRowSelect = FormRowSelect;
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function FormRowSelect({
  title,
  description,
  fieldLabel,
  isLoading,
  options,
  isDisabled,
  onChange,
  value,
  dataTestSubj
}) {
  const selectedOptions = (0, _react.useMemo)(() => {
    const optionFound = options === null || options === void 0 ? void 0 : options.find(option => option.value === value);
    return optionFound ? [optionFound] : undefined;
  }, [options, value]);
  const handleOnChange = nextSelectedOptions => {
    const [selectedOption] = nextSelectedOptions;
    onChange(selectedOption.value);
  };
  return /*#__PURE__*/_react.default.createElement(_eui.EuiDescribedFormGroup, {
    fullWidth: true,
    title: /*#__PURE__*/_react.default.createElement("h3", null, title),
    description: description
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    label: fieldLabel
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiComboBox, {
    isClearable: false,
    isLoading: isLoading,
    singleSelection: {
      asPlainText: true
    },
    options: options,
    isDisabled: isDisabled,
    selectedOptions: selectedOptions,
    onChange: handleOnChange,
    placeholder: _i18n.i18n.translate('xpack.apm.agentConfig.servicePage.environment.placeholder', {
      defaultMessage: 'Select Option'
    }),
    "data-test-subj": dataTestSubj
  })));
}