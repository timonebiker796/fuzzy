"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.latencyCorrelationsTab = void 0;
var _react = _interopRequireDefault(require("react"));
var _i18n = require("@kbn/i18n");
var _public = require("@kbn/observability-shared-plugin/public");
var _license_check = require("../../../../common/license_check");
var _use_license_context = require("../../../context/license/use_license_context");
var _license_prompt = require("../../shared/license_prompt");
var _latency_correlations = require("../correlations/latency_correlations");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function LatencyCorrelationsTab({
  onFilter
}) {
  const license = (0, _use_license_context.useLicenseContext)();
  const hasActivePlatinumLicense = (0, _license_check.isActivePlatinumLicense)(license);
  const metric = {
    app: 'apm',
    metric: hasActivePlatinumLicense ? 'correlations_tab_view' : 'correlations_license_prompt',
    metricType: _public.METRIC_TYPE.COUNT
  };
  (0, _public.useTrackMetric)(metric);
  (0, _public.useTrackMetric)({
    ...metric,
    delay: 15000
  });
  return hasActivePlatinumLicense ? /*#__PURE__*/_react.default.createElement(_latency_correlations.LatencyCorrelations, {
    onFilter: onFilter
  }) : /*#__PURE__*/_react.default.createElement(_license_prompt.LicensePrompt, {
    text: _i18n.i18n.translate('xpack.apm.latencyCorrelations.licenseCheckText', {
      defaultMessage: `To use latency correlations, you must be subscribed to an Elastic Platinum license. With it, you'll be able to discover which fields are correlated with poor performance.`
    })
  });
}
const latencyCorrelationsTab = exports.latencyCorrelationsTab = {
  dataTestSubj: 'apmLatencyCorrelationsTabButton',
  key: 'latencyCorrelations',
  label: _i18n.i18n.translate('xpack.apm.transactionDetails.tabs.latencyLabel', {
    defaultMessage: 'Latency correlations'
  }),
  component: LatencyCorrelationsTab
};