"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WaterfallItem = WaterfallItem;
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _react = _interopRequireWildcard(require("react"));
var _common = require("@kbn/kibana-react-plugin/common");
var _use_theme = require("../../../../../../hooks/use_theme");
var _agent_name = require("../../../../../../../common/agent_name");
var _apm = require("../../../../../../../common/es_fields/apm");
var _formatters = require("../../../../../../../common/utils/formatters");
var _truncate_with_tooltip = require("../../../../../shared/truncate_with_tooltip");
var _sync_badge = require("./badge/sync_badge");
var _span_links_badge = require("./badge/span_links_badge");
var _cold_start_badge = require("./badge/cold_start_badge");
var _failure_badge = require("./failure_badge");
var _use_apm_router = require("../../../../../../hooks/use_apm_router");
var _use_apm_params = require("../../../../../../hooks/use_apm_params");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const Container = _common.euiStyled.div`
  position: relative;
  display: block;
  user-select: none;
  padding-top: ${({
  theme
}) => theme.eui.euiSizeS};
  padding-bottom: ${({
  theme
}) => theme.eui.euiSizeM};
  margin-right: ${props => props.timelineMargins.right}px;
  margin-left: ${props => props.hasToggle ? props.timelineMargins.left - 30 // fix margin if there is a toggle
: props.timelineMargins.left}px ;
  background-color: ${({
  isSelected,
  theme
}) => isSelected ? theme.eui.euiColorLightestShade : 'initial'};
  cursor: pointer;

  &:hover {
    background-color: ${({
  theme
}) => theme.eui.euiColorLightestShade};
  }
`;
const ItemBar = _common.euiStyled.div`
  box-sizing: border-box;
  position: relative;
  height: ${({
  theme
}) => theme.eui.euiSize};
  min-width: 2px;
  background-color: ${props => props.color};
`;
const ItemText = _common.euiStyled.span`
  position: absolute;
  right: 0;
  display: flex;
  align-items: center;
  height: ${({
  theme
}) => theme.eui.euiSizeL};
  max-width: 100%;

  /* add margin to all direct descendants */
  & > * {
    margin-right: ${({
  theme
}) => theme.eui.euiSizeS};
    white-space: nowrap;
  }
`;
const CriticalPathItemBar = _common.euiStyled.div`
  box-sizing: border-box;
  position: relative;
  height: ${({
  theme
}) => theme.eui.euiSizeS};
  top : ${({
  theme
}) => theme.eui.euiSizeS};
  min-width: 2px;
  background-color: transparent;
  display: flex;
  flex-direction: row;
`;
const CriticalPathItemSegment = _common.euiStyled.div`
  box-sizing: border-box;
  position: absolute;
  height: ${({
  theme
}) => theme.eui.euiSizeS};
  left: ${props => props.left * 100}%;
  width: ${props => props.width * 100}%;
  min-width: 2px;
  background-color: ${props => props.color};
`;
function PrefixIcon({
  item
}) {
  switch (item.docType) {
    case 'span':
      {
        const spanType = item.doc.span.type || '';

        // icon for database spans
        const isDbType = spanType.startsWith('db');
        if (isDbType) {
          return /*#__PURE__*/_react.default.createElement(_eui.EuiIcon, {
            type: "database"
          });
        }

        // omit icon for other spans
        return null;
      }
    case 'transaction':
      {
        // icon for RUM agent transactions
        if ((0, _agent_name.isRumAgentName)(item.doc.agent.name)) {
          return /*#__PURE__*/_react.default.createElement(_eui.EuiIcon, {
            type: "globe"
          });
        }

        // icon for other transactions
        return /*#__PURE__*/_react.default.createElement(_eui.EuiIcon, {
          type: "merge"
        });
      }
    default:
      return null;
  }
}
function SpanActionToolTip({
  item,
  children
}) {
  if ((item === null || item === void 0 ? void 0 : item.docType) === 'span') {
    return /*#__PURE__*/_react.default.createElement(_eui.EuiToolTip, {
      content: `${item.doc.span.subtype}.${item.doc.span.action}`
    }, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, children));
  }
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, children);
}
function Duration({
  item
}) {
  return /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    color: "subdued",
    size: "xs"
  }, (0, _formatters.asDuration)(item.duration));
}
function HttpStatusCode({
  item
}) {
  // http status code for transactions of type 'request'
  const httpStatusCode = item.docType === 'transaction' && item.doc.transaction.type === 'request' ? item.doc.transaction.result : undefined;
  if (!httpStatusCode) {
    return null;
  }
  return /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    size: "xs"
  }, httpStatusCode);
}
function NameLabel({
  item
}) {
  switch (item.docType) {
    case 'span':
      let name = item.doc.span.name;
      if (item.doc.span.composite) {
        const compositePrefix = item.doc.span.composite.compression_strategy === 'exact_match' ? 'x' : '';
        name = `${item.doc.span.composite.count}${compositePrefix} ${name}`;
      }
      return /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
        style: {
          overflow: 'hidden'
        },
        size: "s"
      }, /*#__PURE__*/_react.default.createElement(_truncate_with_tooltip.TruncateWithTooltip, {
        content: name,
        text: name
      }));
    case 'transaction':
      return /*#__PURE__*/_react.default.createElement(_eui.EuiTitle, {
        size: "xxs"
      }, /*#__PURE__*/_react.default.createElement("h5", null, item.doc.transaction.name));
  }
}
function WaterfallItem({
  timelineMargins,
  totalDuration,
  item,
  hasToggle,
  color,
  isSelected,
  errorCount,
  marginLeftLevel,
  onClick,
  segments
}) {
  var _item$doc$faas;
  const [widthFactor, setWidthFactor] = (0, _react.useState)(1);
  const waterfallItemRef = (0, _react.useRef)(null);
  (0, _react.useEffect)(() => {
    if (waterfallItemRef !== null && waterfallItemRef !== void 0 && waterfallItemRef.current && marginLeftLevel) {
      setWidthFactor(1 + marginLeftLevel / waterfallItemRef.current.offsetWidth);
    }
  }, [marginLeftLevel]);
  if (!totalDuration) {
    return null;
  }
  const width = item.duration / totalDuration * widthFactor * 100;
  const left = ((item.offset + item.skew) / totalDuration * widthFactor - widthFactor + 1) * 100;
  const isCompositeSpan = item.docType === 'span' && item.doc.span.composite;
  const itemBarStyle = getItemBarStyle(item, color, width, left);
  const isServerlessColdstart = item.docType === 'transaction' && ((_item$doc$faas = item.doc.faas) === null || _item$doc$faas === void 0 ? void 0 : _item$doc$faas.coldstart);
  const waterfallItemFlyoutTab = 'metadata';
  return /*#__PURE__*/_react.default.createElement(Container, {
    ref: waterfallItemRef,
    type: item.docType,
    timelineMargins: timelineMargins,
    isSelected: isSelected,
    hasToggle: hasToggle,
    onClick: e => {
      e.stopPropagation();
      onClick(waterfallItemFlyoutTab);
    }
  }, /*#__PURE__*/_react.default.createElement(ItemBar // using inline styles instead of props to avoid generating a css class for each item
  , {
    style: itemBarStyle,
    color: isCompositeSpan ? 'transparent' : color,
    type: item.docType
  }, segments !== null && segments !== void 0 && segments.length ? /*#__PURE__*/_react.default.createElement(CriticalPathItemBar, null, segments === null || segments === void 0 ? void 0 : segments.map(segment => /*#__PURE__*/_react.default.createElement(CriticalPathItemSegment, {
    key: segment.id,
    color: segment.color,
    left: segment.left,
    width: segment.width
  }))) : null), /*#__PURE__*/_react.default.createElement(ItemText // using inline styles instead of props to avoid generating a css class for each item
  , {
    style: {
      minWidth: `${Math.max(100 - left, 0)}%`
    }
  }, /*#__PURE__*/_react.default.createElement(SpanActionToolTip, {
    item: item
  }, /*#__PURE__*/_react.default.createElement(PrefixIcon, {
    item: item
  })), /*#__PURE__*/_react.default.createElement(HttpStatusCode, {
    item: item
  }), /*#__PURE__*/_react.default.createElement(NameLabel, {
    item: item
  }), /*#__PURE__*/_react.default.createElement(Duration, {
    item: item
  }), /*#__PURE__*/_react.default.createElement(RelatedErrors, {
    item: item,
    errorCount: errorCount
  }), item.docType === 'span' && /*#__PURE__*/_react.default.createElement(_sync_badge.SyncBadge, {
    sync: item.doc.span.sync,
    agentName: item.doc.agent.name
  }), /*#__PURE__*/_react.default.createElement(_span_links_badge.SpanLinksBadge, {
    linkedParents: item.spanLinksCount.linkedParents,
    linkedChildren: item.spanLinksCount.linkedChildren,
    id: item.id,
    onClick: onClick
  }), isServerlessColdstart && /*#__PURE__*/_react.default.createElement(_cold_start_badge.ColdStartBadge, null)));
}
function RelatedErrors({
  item,
  errorCount
}) {
  var _item$doc$transaction, _item$doc$event;
  const apmRouter = (0, _use_apm_router.useApmRouter)();
  const theme = (0, _use_theme.useTheme)();
  const {
    query
  } = (0, _use_apm_params.useAnyOfApmParams)('/services/{serviceName}/transactions/view', '/mobile-services/{serviceName}/transactions/view', '/traces/explorer', '/dependencies/operation');
  let kuery = `${_apm.TRACE_ID} : "${item.doc.trace.id}"`;
  if ((_item$doc$transaction = item.doc.transaction) !== null && _item$doc$transaction !== void 0 && _item$doc$transaction.id) {
    var _item$doc$transaction2;
    kuery += ` and ${_apm.TRANSACTION_ID} : "${(_item$doc$transaction2 = item.doc.transaction) === null || _item$doc$transaction2 === void 0 ? void 0 : _item$doc$transaction2.id}"`;
  }
  const mobileHref = apmRouter.link(`/mobile-services/{serviceName}/errors-and-crashes`, {
    path: {
      serviceName: item.doc.service.name
    },
    query: {
      ...query,
      serviceGroup: '',
      kuery
    }
  });
  const href = apmRouter.link(`/services/{serviceName}/errors`, {
    path: {
      serviceName: item.doc.service.name
    },
    query: {
      ...query,
      serviceGroup: '',
      kuery
    }
  });
  if (errorCount > 0) {
    return (
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/click-events-have-key-events
      _react.default.createElement("div", {
        onClick: e => e.stopPropagation()
      }, /*#__PURE__*/_react.default.createElement(_eui.EuiBadge, {
        href: (0, _agent_name.isMobileAgentName)(item.doc.agent.name) ? mobileHref : href,
        color: theme.eui.euiColorDanger,
        iconType: "arrowRight"
      }, _i18n.i18n.translate('xpack.apm.waterfall.errorCount', {
        defaultMessage: '{errorCount, plural, one {View related error} other {View # related errors}}',
        values: {
          errorCount
        }
      })))
    );
  }
  return /*#__PURE__*/_react.default.createElement(_failure_badge.FailureBadge, {
    outcome: (_item$doc$event = item.doc.event) === null || _item$doc$event === void 0 ? void 0 : _item$doc$event.outcome
  });
}
function getItemBarStyle(item, color, width, left) {
  let itemBarStyle = {
    left: `${left}%`,
    width: `${width}%`
  };
  if (item.docType === 'span' && item.doc.span.composite) {
    const percNumItems = 100.0 / item.doc.span.composite.count;
    const spanSumRatio = item.doc.span.composite.sum.us / item.doc.span.duration.us;
    const percDuration = percNumItems * spanSumRatio;
    itemBarStyle = {
      ...itemBarStyle,
      ...{
        backgroundImage: `repeating-linear-gradient(90deg, ${color},` + ` ${color} max(${percDuration}%,3px),` + ` transparent max(${percDuration}%,3px),` + ` transparent max(${percNumItems}%,max(${percDuration}%,3px) + 3px))`
      }
    };
  }
  return itemBarStyle;
}