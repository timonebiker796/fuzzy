"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MobileErrorsOverview = MobileErrorsOverview;
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _lodash = require("lodash");
var _react = _interopRequireDefault(require("react"));
var _uuid = require("uuid");
var _use_apm_service_context = require("../../../../context/apm_service/use_apm_service_context");
var _chart_pointer_event_context = require("../../../../context/chart_pointer_event/chart_pointer_event_context");
var _use_apm_params = require("../../../../hooks/use_apm_params");
var _use_error_group_distribution_fetcher = require("../../../../hooks/use_error_group_distribution_fetcher");
var _use_fetcher = require("../../../../hooks/use_fetcher");
var _use_time_range = require("../../../../hooks/use_time_range");
var _get_comparison_options = require("../../../shared/time_comparison/get_comparison_options");
var _mobile_http_error_rate = require("../charts/mobile_http_error_rate");
var _distribution = require("../errors_and_crashes_group_details/shared/distribution");
var _error_group_list = require("./error_group_list");
var _mobile_errors_and_crashes_treemap = require("../charts/mobile_errors_and_crashes_treemap");
var _get_kuery_with_mobile_filters = require("../../../../../common/utils/get_kuery_with_mobile_filters");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const INITIAL_STATE_MAIN_STATISTICS = {
  mobileErrorGroupMainStatistics: [],
  requestId: undefined,
  currentPageGroupIds: []
};
const INITIAL_STATE_DETAILED_STATISTICS = {
  currentPeriod: {},
  previousPeriod: {}
};
function MobileErrorsOverview() {
  const {
    serviceName
  } = (0, _use_apm_service_context.useApmServiceContext)();
  const {
    query: {
      environment,
      kuery,
      sortField = 'occurrences',
      sortDirection = 'desc',
      rangeFrom,
      rangeTo,
      offset,
      comparisonEnabled,
      page = 0,
      pageSize = 25,
      device,
      osVersion,
      appVersion,
      netConnectionType
    }
  } = (0, _use_apm_params.useApmParams)('/mobile-services/{serviceName}/errors-and-crashes');
  const kueryWithMobileFilters = (0, _get_kuery_with_mobile_filters.getKueryWithMobileFilters)({
    device,
    osVersion,
    appVersion,
    netConnectionType,
    kuery
  });
  const {
    start,
    end
  } = (0, _use_time_range.useTimeRange)({
    rangeFrom,
    rangeTo
  });
  const {
    errorDistributionData,
    errorDistributionStatus: status
  } = (0, _use_error_group_distribution_fetcher.useErrorGroupDistributionFetcher)({
    serviceName,
    groupId: undefined,
    environment,
    kuery: kueryWithMobileFilters
  });
  const {
    data: errorGroupListData = INITIAL_STATE_MAIN_STATISTICS,
    status: errorGroupListDataStatus
  } = (0, _use_fetcher.useFetcher)(callApmApi => {
    const normalizedSortDirection = sortDirection === 'asc' ? 'asc' : 'desc';
    if (start && end) {
      return callApmApi('GET /internal/apm/mobile-services/{serviceName}/errors/groups/main_statistics', {
        params: {
          path: {
            serviceName
          },
          query: {
            environment,
            kuery: kueryWithMobileFilters,
            start,
            end,
            sortField,
            sortDirection: normalizedSortDirection
          }
        }
      }).then(response => {
        const currentPageGroupIds = (0, _lodash.orderBy)(response.errorGroups, sortField, sortDirection).slice(page * pageSize, (page + 1) * pageSize).map(({
          groupId
        }) => groupId).sort();
        return {
          // Everytime the main statistics is refetched, updates the requestId making the comparison API to be refetched.
          requestId: (0, _uuid.v4)(),
          mobileErrorGroupMainStatistics: response.errorGroups,
          currentPageGroupIds
        };
      });
    }
  }, [environment, kueryWithMobileFilters, serviceName, start, end, sortField, sortDirection, page, pageSize]);
  const {
    requestId,
    mobileErrorGroupMainStatistics,
    currentPageGroupIds
  } = errorGroupListData;
  const {
    data: mobileErrorGroupDetailedStatistics = INITIAL_STATE_DETAILED_STATISTICS,
    status: mobileErrorGroupDetailedStatisticsStatus
  } = (0, _use_fetcher.useFetcher)(callApmApi => {
    if (requestId && currentPageGroupIds.length && start && end) {
      return callApmApi('POST /internal/apm/mobile-services/{serviceName}/errors/groups/detailed_statistics', {
        params: {
          path: {
            serviceName
          },
          query: {
            environment,
            kuery: kueryWithMobileFilters,
            start,
            end,
            numBuckets: 20,
            offset: comparisonEnabled && (0, _get_comparison_options.isTimeComparison)(offset) ? offset : undefined
          },
          body: {
            groupIds: JSON.stringify(currentPageGroupIds)
          }
        }
      });
    }
  },
  // only fetches agg results when requestId changes
  // eslint-disable-next-line react-hooks/exhaustive-deps
  [requestId], {
    preservePreviousData: false
  });
  const kueryForTreemap = (0, _get_kuery_with_mobile_filters.getKueryWithMobileErrorFilter)({
    kuery: kueryWithMobileFilters,
    groupId: undefined
  });
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    direction: "column",
    gutterSize: "s"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    direction: "row",
    gutterSize: "s"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    direction: "column",
    gutterSize: "s"
  }, /*#__PURE__*/_react.default.createElement(_chart_pointer_event_context.ChartPointerEventContextProvider, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_distribution.ErrorDistribution, {
    fetchStatus: status,
    distribution: errorDistributionData,
    height: 150,
    title: _i18n.i18n.translate('xpack.apm.serviceDetails.metrics.errorRateChart.title', {
      defaultMessage: 'Error rate'
    }),
    tip: _i18n.i18n.translate('xpack.apm.serviceDetails.metrics.errorRateChart.tip', {
      defaultMessage: `Error rate is measured in transactions per minute.`
    })
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_mobile_http_error_rate.HttpErrorRateChart, {
    height: 150,
    kuery: kueryWithMobileFilters,
    serviceName: serviceName,
    comparisonEnabled: comparisonEnabled,
    start: start,
    end: end,
    offset: offset,
    environment: environment
  }))))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_mobile_errors_and_crashes_treemap.MobileErrorsAndCrashesTreemap, {
    serviceName: serviceName,
    kuery: kueryForTreemap,
    environment: environment,
    start: start,
    end: end
  })))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiPanel, {
    hasBorder: true
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiTitle, {
    size: "xs"
  }, /*#__PURE__*/_react.default.createElement("h3", null, _i18n.i18n.translate('xpack.apm.serviceDetails.metrics.errorsList.title', {
    defaultMessage: 'Errors'
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  }), /*#__PURE__*/_react.default.createElement(_error_group_list.MobileErrorGroupList, {
    mainStatistics: mobileErrorGroupMainStatistics,
    serviceName: serviceName,
    detailedStatisticsLoading: (0, _use_fetcher.isPending)(mobileErrorGroupDetailedStatisticsStatus),
    detailedStatistics: mobileErrorGroupDetailedStatistics,
    comparisonEnabled: comparisonEnabled,
    initialSortField: sortField,
    initialSortDirection: sortDirection,
    isLoading: errorGroupListDataStatus === _use_fetcher.FETCH_STATUS.LOADING
  }))));
}