"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InstanceActionsMenu = InstanceActionsMenu;
var _eui = require("@elastic/eui");
var _react = _interopRequireDefault(require("react"));
var _reactRouterDom = require("react-router-dom");
var _public = require("@kbn/observability-shared-plugin/public");
var _locators = require("@kbn/deeplinks-observability/locators");
var _common = require("@kbn/logs-shared-plugin/common");
var _agent_name = require("../../../../../../common/agent_name");
var _apm = require("../../../../../../common/es_fields/apm");
var _use_apm_plugin_context = require("../../../../../context/apm_plugin/use_apm_plugin_context");
var _use_fetcher = require("../../../../../hooks/use_fetcher");
var _utils = require("../../../../shared/kuery_bar/utils");
var _metric_overview_link = require("../../../../shared/links/apm/metric_overview_link");
var _service_node_metric_overview_link = require("../../../../shared/links/apm/service_node_metric_overview_link");
var _use_instance_details_fetcher = require("../use_instance_details_fetcher");
var _menu_sections = require("./menu_sections");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const POPOVER_WIDTH = '305px';
function InstanceActionsMenu({
  serviceName,
  serviceNodeName,
  kuery,
  onClose
}) {
  var _data$agent;
  const {
    core,
    share
  } = (0, _use_apm_plugin_context.useApmPluginContext)();
  const {
    data,
    status
  } = (0, _use_instance_details_fetcher.useInstanceDetailsFetcher)({
    serviceName,
    serviceNodeName
  });
  const serviceNodeMetricOverviewHref = (0, _service_node_metric_overview_link.useServiceNodeMetricOverviewHref)({
    serviceName,
    serviceNodeName
  });
  const metricOverviewHref = (0, _metric_overview_link.useMetricOverviewHref)(serviceName);
  const history = (0, _reactRouterDom.useHistory)();
  const allDatasetsLocator = share.url.locators.get(_locators.ALL_DATASETS_LOCATOR_ID);
  const {
    nodeLogsLocator
  } = (0, _common.getLogsLocatorsFromUrlService)(share.url);
  if ((0, _use_fetcher.isPending)(status)) {
    return /*#__PURE__*/_react.default.createElement("div", {
      style: {
        width: POPOVER_WIDTH,
        display: 'flex',
        justifyContent: 'center'
      }
    }, /*#__PURE__*/_react.default.createElement(_eui.EuiLoadingSpinner, null));
  }
  if (!data) {
    return null;
  }
  const handleFilterByInstanceClick = () => {
    onClose();
    (0, _utils.pushNewItemToKueryBar)({
      kuery,
      history,
      key: _apm.SERVICE_NODE_NAME,
      value: serviceNodeName
    });
  };
  const metricsHref = (0, _agent_name.isJavaAgentName)((_data$agent = data.agent) === null || _data$agent === void 0 ? void 0 : _data$agent.name) ? serviceNodeMetricOverviewHref : metricOverviewHref;
  const sections = (0, _menu_sections.getMenuSections)({
    instanceDetails: data,
    basePath: core.http.basePath,
    onFilterByInstanceClick: handleFilterByInstanceClick,
    metricsHref,
    allDatasetsLocator,
    nodeLogsLocator
  });
  return /*#__PURE__*/_react.default.createElement("div", {
    style: {
      width: POPOVER_WIDTH
    }
  }, sections.map((section, idx) => {
    const isLastSection = idx !== sections.length - 1;
    return /*#__PURE__*/_react.default.createElement("div", {
      key: idx
    }, section.map(item => /*#__PURE__*/_react.default.createElement(_public.Section, {
      key: item.key
    }, item.title && /*#__PURE__*/_react.default.createElement(_public.SectionTitle, null, item.title), item.subtitle && /*#__PURE__*/_react.default.createElement(_public.SectionSubtitle, null, item.subtitle), /*#__PURE__*/_react.default.createElement(_public.SectionLinks, null, item.actions.map(action => /*#__PURE__*/_react.default.createElement(_public.SectionLink, {
      key: action.key,
      label: action.label,
      href: action.href,
      onClick: action.onClick,
      color: "primary"
    }))))), isLastSection && /*#__PURE__*/_react.default.createElement(_public.ActionMenuDivider, null));
  }));
}