"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onboarding = void 0;
var t = _interopRequireWildcard(require("io-ts"));
var _react = _interopRequireDefault(require("react"));
var _onboarding = require("../../app/onboarding");
var _instruction_variants = require("../../app/onboarding/instruction_variants");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const onboarding = exports.onboarding = {
  '/onboarding': {
    element: /*#__PURE__*/_react.default.createElement(_onboarding.Onboarding, null),
    params: t.partial({
      query: t.partial({
        agent: t.union([t.literal(_instruction_variants.INSTRUCTION_VARIANT.NODE), t.literal(_instruction_variants.INSTRUCTION_VARIANT.DJANGO), t.literal(_instruction_variants.INSTRUCTION_VARIANT.FLASK), t.literal(_instruction_variants.INSTRUCTION_VARIANT.RAILS), t.literal(_instruction_variants.INSTRUCTION_VARIANT.RACK), t.literal(_instruction_variants.INSTRUCTION_VARIANT.GO), t.literal(_instruction_variants.INSTRUCTION_VARIANT.JAVA), t.literal(_instruction_variants.INSTRUCTION_VARIANT.DOTNET), t.literal(_instruction_variants.INSTRUCTION_VARIANT.PHP), t.literal(_instruction_variants.INSTRUCTION_VARIANT.OPEN_TELEMETRY)])
      })
    })
  }
};