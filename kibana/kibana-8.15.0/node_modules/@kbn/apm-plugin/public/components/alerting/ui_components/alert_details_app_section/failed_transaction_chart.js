"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _chromaJs = _interopRequireDefault(require("chroma-js"));
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _public = require("@kbn/data-plugin/public");
var _observabilityAlertDetails = require("@kbn/observability-alert-details");
var _public2 = require("@kbn/kibana-react-plugin/public");
var _constants = require("./constants");
var _use_fetcher = require("../../../../hooks/use_fetcher");
var _get_timeseries_color = _interopRequireWildcard(require("../../../shared/charts/helper/get_timeseries_color"));
var get_timeseries_color = _get_timeseries_color;
var _failed_transaction_rate_chart = require("../../../shared/charts/failed_transaction_rate_chart");
var _timeseries_chart = require("../../../shared/charts/timeseries_chart");
var _helpers = require("./helpers");
var _use_preferred_data_source_and_bucket_size = require("../../../../hooks/use_preferred_data_source_and_bucket_size");
var _document_type = require("../../../../../common/document_type");
var _transaction_type_select = require("./transaction_type_select");
var _view_in_apm_button = require("./view_in_apm_button");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
/* Error Rate */

const INITIAL_STATE_ERROR_RATE = {
  currentPeriod: {
    timeseries: [],
    average: null
  },
  previousPeriod: {
    timeseries: [],
    average: null
  }
};
function FailedTransactionChart({
  transactionType,
  transactionTypes,
  setTransactionType,
  transactionName,
  serviceName,
  environment,
  start,
  end,
  comparisonChartTheme,
  timeZone,
  kuery = '',
  filters,
  alertStart,
  alertEnd
}) {
  const {
    euiTheme
  } = (0, _eui.useEuiTheme)();
  const {
    services: {
      uiSettings
    }
  } = (0, _public2.useKibana)();
  const {
    currentPeriodColor: currentPeriodColorErrorRate
  } = get_timeseries_color.getTimeSeriesColor(_get_timeseries_color.ChartType.FAILED_TRANSACTION_RATE);
  const preferred = (0, _use_preferred_data_source_and_bucket_size.usePreferredDataSourceAndBucketSize)({
    start,
    end,
    kuery,
    numBuckets: 100,
    type: transactionName ? _document_type.ApmDocumentType.TransactionMetric : _document_type.ApmDocumentType.ServiceTransactionMetric
  });
  const {
    data: dataErrorRate = INITIAL_STATE_ERROR_RATE,
    status
  } = (0, _use_fetcher.useFetcher)(callApmApi => {
    if (transactionType && serviceName && start && end && preferred) {
      return callApmApi('GET /internal/apm/services/{serviceName}/transactions/charts/error_rate', {
        params: {
          path: {
            serviceName
          },
          query: {
            environment,
            kuery,
            filters: filters ? JSON.stringify(filters) : undefined,
            start,
            end,
            transactionType,
            transactionName,
            documentType: preferred.source.documentType,
            rollupInterval: preferred.source.rollupInterval,
            bucketSizeInSeconds: preferred.bucketSizeInSeconds
          }
        }
      });
    }
  }, [environment, serviceName, start, end, transactionType, transactionName, preferred, kuery, filters]);
  const timeseriesErrorRate = [{
    data: dataErrorRate.currentPeriod.timeseries,
    type: 'linemark',
    color: currentPeriodColorErrorRate,
    title: _i18n.i18n.translate('xpack.apm.errorRate.chart.errorRate', {
      defaultMessage: 'Failed transaction rate (avg.)'
    })
  }];
  const showTransactionTypeSelect = setTransactionType && transactionTypes;
  const getFailedTransactionChartAdditionalData = () => {
    if (alertStart) {
      return [/*#__PURE__*/_react.default.createElement(_observabilityAlertDetails.AlertActiveTimeRangeAnnotation, {
        alertStart: alertStart,
        alertEnd: alertEnd,
        color: (0, _chromaJs.default)((0, _eui.transparentize)('#F04E981A', 0.2)).hex().toUpperCase(),
        id: 'alertActiveRect',
        key: 'alertActiveRect'
      }), /*#__PURE__*/_react.default.createElement(_observabilityAlertDetails.AlertAnnotation, {
        key: 'alertAnnotationStart',
        id: 'alertAnnotationStart',
        alertStart: alertStart,
        color: euiTheme.colors.danger,
        dateFormat: uiSettings && uiSettings.get(_public.UI_SETTINGS.DATE_FORMAT) || _constants.DEFAULT_DATE_FORMAT
      })];
    }
  };
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiPanel, {
    hasBorder: true
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    alignItems: "center",
    gutterSize: "s",
    responsive: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiTitle, {
    size: "xs"
  }, /*#__PURE__*/_react.default.createElement("h2", null, _i18n.i18n.translate('xpack.apm.errorRate', {
    defaultMessage: 'Failed transaction rate'
  })))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiIconTip, {
    content: _failed_transaction_rate_chart.errorRateI18n,
    position: "right"
  })), showTransactionTypeSelect && /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_transaction_type_select.TransactionTypeSelect, {
    transactionType: transactionType,
    transactionTypes: transactionTypes,
    onChange: setTransactionType
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    justifyContent: "flexEnd",
    gutterSize: "s"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_view_in_apm_button.ViewInAPMButton, {
    serviceName: serviceName,
    environment: environment,
    from: start,
    to: end,
    kuery: kuery,
    transactionName: transactionName,
    transactionType: transactionType
  }))))), /*#__PURE__*/_react.default.createElement(_timeseries_chart.TimeseriesChart, {
    id: "errorRate",
    height: 200,
    showAnnotations: true,
    annotations: getFailedTransactionChartAdditionalData(),
    fetchStatus: status,
    timeseries: timeseriesErrorRate,
    yLabelFormat: _helpers.yLabelFormat,
    yDomain: {
      min: 0,
      max: 1
    },
    comparisonEnabled: false,
    customTheme: comparisonChartTheme,
    timeZone: timeZone
  })));
}

// eslint-disable-next-line import/no-default-export
var _default = exports.default = FailedTransactionChart;
module.exports = exports.default;