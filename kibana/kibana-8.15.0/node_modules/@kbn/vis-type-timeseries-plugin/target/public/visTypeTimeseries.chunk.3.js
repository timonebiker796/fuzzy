(window.visTypeTimeseries_bundle_jsonpfunction=window.visTypeTimeseries_bundle_jsonpfunction||[]).push([[3],{217:function(n,e,t){"use strict";t.r(e),t.d(e,"convertTSVBtoLensConfiguration",(function(){return i}));var o=t(5);const i=async(n,e)=>{var i;if(n.params.isModelInvalid)return null;const r=await(n=>{var e;const i={[o.e.TIMESERIES]:async()=>{const{convertToLens:n}=await Promise.all([t.e(0),t.e(2),t.e(12)]).then(t.bind(null,176));return n},[o.e.TOP_N]:async()=>{const{convertToLens:n}=await Promise.all([t.e(0),t.e(2),t.e(13)]).then(t.bind(null,177));return n},[o.e.METRIC]:async()=>{const{convertToLens:n}=await Promise.all([t.e(0),t.e(2),t.e(16)]).then(t.bind(null,178));return n},[o.e.GAUGE]:async()=>{const{convertToLens:n}=await Promise.all([t.e(0),t.e(2),t.e(15)]).then(t.bind(null,179));return n},[o.e.TABLE]:async()=>{const{convertToLens:n}=await Promise.all([t.e(0),t.e(2),t.e(17)]).then(t.bind(null,212));return n}};return null===(e=i[n])||void 0===e?void 0:e.call(i)})(n.params.type);return null!==(i=await(null==r?void 0:r(n,e)))&&void 0!==i?i:null}}}]);