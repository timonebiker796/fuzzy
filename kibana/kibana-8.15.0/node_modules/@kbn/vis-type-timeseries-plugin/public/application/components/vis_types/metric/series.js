"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MetricSeries = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _i18nReact = require("@kbn/i18n-react");
var _eui = require("@elastic/eui");
var _color_picker = require("../../color_picker");
var _add_delete_buttons = require("../../add_delete_buttons");
var _series_config = require("../../series_config");
var _common = require("../../../styles/common.styles");
var _split = require("../../split");
var _series_drag_handler = require("../../series_drag_handler");
var _create_text_handler = require("../../lib/create_text_handler");
var _aggs = require("../../aggs/aggs");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

function MetricSeriesUi(props) {
  const {
    panel,
    fields,
    name,
    onAdd,
    onChange,
    onDelete,
    disableDelete,
    disableAdd,
    selectedTab,
    visible,
    intl,
    uiRestrictions
  } = props;
  const {
    euiTheme
  } = (0, _eui.useEuiTheme)();
  const defaults = {
    label: ''
  };
  const model = {
    ...defaults,
    ...props.model
  };
  const handleChange = (0, _create_text_handler.createTextHandler)(onChange);
  let caretIcon = 'arrowDown';
  if (!visible) caretIcon = 'arrowRight';
  let body = null;
  if (visible) {
    let seriesBody;
    if (selectedTab === 'metrics') {
      seriesBody = /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_aggs.Aggs, {
        onChange: props.onChange,
        fields: fields,
        panel: panel,
        model: model,
        name: name,
        uiRestrictions: uiRestrictions,
        dragHandleProps: props.dragHandleProps
      }), /*#__PURE__*/_react.default.createElement("div", {
        css: [(0, _common.tsvbEditorRowStyles)(euiTheme), (0, _common.aggRowSplitStyles)(euiTheme)]
      }, /*#__PURE__*/_react.default.createElement(_split.Split, {
        onChange: props.onChange,
        fields: fields,
        panel: panel,
        model: model,
        uiRestrictions: uiRestrictions
      })));
    } else {
      seriesBody = /*#__PURE__*/_react.default.createElement(_series_config.SeriesConfig, {
        panel: panel,
        fields: props.fields,
        model: props.model,
        onChange: props.onChange,
        indexPatternForQuery: props.indexPatternForQuery
      });
    }
    body = /*#__PURE__*/_react.default.createElement("div", {
      className: "tvbSeries__body"
    }, /*#__PURE__*/_react.default.createElement(_eui.EuiTabs, {
      size: "s"
    }, /*#__PURE__*/_react.default.createElement(_eui.EuiTab, {
      isSelected: selectedTab === 'metrics',
      onClick: () => props.switchTab('metrics')
    }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "visTypeTimeseries.metric.dataTab.metricsButtonLabel",
      defaultMessage: "Metrics"
    })), /*#__PURE__*/_react.default.createElement(_eui.EuiTab, {
      "data-test-subj": "seriesOptions",
      isSelected: selectedTab === 'options',
      onClick: () => props.switchTab('options')
    }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "visTypeTimeseries.metric.optionsTab.optionsButtonLabel",
      defaultMessage: "Options"
    }))), seriesBody);
  }
  let colorPicker;
  if (props.colorPicker) {
    colorPicker = /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
      grow: false
    }, /*#__PURE__*/_react.default.createElement(_color_picker.ColorPicker, {
      disableTrash: true,
      onChange: props.onChange,
      name: "color",
      value: model.color
    }));
  }
  return /*#__PURE__*/_react.default.createElement("div", {
    className: `${props.className}`,
    style: props.style
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    responsive: false,
    gutterSize: "s",
    alignItems: "center"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiButtonIcon, {
    iconType: caretIcon,
    color: "text",
    onClick: props.toggleVisible,
    "aria-label": intl.formatMessage({
      id: 'visTypeTimeseries.metric.editor.toggleEditorAriaLabel',
      defaultMessage: 'Toggle series editor'
    }),
    "aria-expanded": props.visible
  })), colorPicker, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFieldText, {
    fullWidth: true,
    onChange: handleChange('label'),
    placeholder: intl.formatMessage({
      id: 'visTypeTimeseries.metric.editor.labelPlaceholder',
      defaultMessage: 'Label'
    }),
    value: model.label
  })), /*#__PURE__*/_react.default.createElement(_series_drag_handler.SeriesDragHandler, {
    dragHandleProps: props.dragHandleProps,
    hideDragHandler: props.disableDelete
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_add_delete_buttons.AddDeleteButtons, {
    addTooltip: intl.formatMessage({
      id: 'visTypeTimeseries.metric.editor.addSeriesTooltip',
      defaultMessage: 'Add Series'
    }),
    deleteTooltip: intl.formatMessage({
      id: 'visTypeTimeseries.metric.editor.deleteSeriesTooltip',
      defaultMessage: 'Delete Series'
    }),
    cloneTooltip: intl.formatMessage({
      id: 'visTypeTimeseries.metric.editor.cloneSeriesTooltip',
      defaultMessage: 'Clone Series'
    }),
    onDelete: onDelete,
    onClone: props.onClone,
    onAdd: onAdd,
    togglePanelActivation: props.togglePanelActivation,
    isPanelActive: !model.hidden,
    disableDelete: disableDelete,
    disableAdd: disableAdd,
    responsive: false
  }))), body);
}
MetricSeriesUi.propTypes = {
  className: _propTypes.default.string,
  colorPicker: _propTypes.default.bool,
  disableAdd: _propTypes.default.bool,
  disableDelete: _propTypes.default.bool,
  fields: _propTypes.default.object,
  name: _propTypes.default.string,
  onAdd: _propTypes.default.func,
  onChange: _propTypes.default.func,
  onClone: _propTypes.default.func,
  onDelete: _propTypes.default.func,
  model: _propTypes.default.object,
  panel: _propTypes.default.object,
  selectedTab: _propTypes.default.string,
  style: _propTypes.default.object,
  switchTab: _propTypes.default.func,
  toggleVisible: _propTypes.default.func,
  visible: _propTypes.default.bool,
  togglePanelActivation: _propTypes.default.func,
  uiRestrictions: _propTypes.default.object,
  dragHandleProps: _propTypes.default.object,
  indexPatternForQuery: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string])
};
const MetricSeries = exports.MetricSeries = (0, _i18nReact.injectI18n)(MetricSeriesUi);