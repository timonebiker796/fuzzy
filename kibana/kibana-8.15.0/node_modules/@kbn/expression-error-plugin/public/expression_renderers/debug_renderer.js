"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDebugRenderer = exports.debugRendererFactory = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactDom = require("react-dom");
var _i18n = require("@kbn/i18n");
var _public = require("@kbn/presentation-util-plugin/public");
var _reactKibanaContextTheme = require("@kbn/react-kibana-context-theme");
var _sharedUxErrorBoundary = require("@kbn/shared-ux-error-boundary");
var _common = require("@kbn/presentation-util-plugin/common");
var _common2 = require("../../common");
var _components = require("../components");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

const Debug = (0, _public.withSuspense)(_components.LazyDebugRenderComponent);
const strings = {
  getDisplayName: () => _i18n.i18n.translate('expressionError.renderer.debug.displayName', {
    defaultMessage: 'Debug'
  }),
  getHelpDescription: () => _i18n.i18n.translate('expressionError.renderer.debug.helpDescription', {
    defaultMessage: 'Render debug output as formatted {JSON}',
    values: {
      JSON: _common2.JSON
    }
  })
};
const getDebugRenderer = (theme$ = _common.defaultTheme$) => () => ({
  name: 'debug',
  displayName: strings.getDisplayName(),
  help: strings.getHelpDescription(),
  reuseDomNode: true,
  render(domNode, config, handlers) {
    handlers.onDestroy(() => (0, _reactDom.unmountComponentAtNode)(domNode));
    (0, _reactDom.render)( /*#__PURE__*/_react.default.createElement(_sharedUxErrorBoundary.KibanaErrorBoundaryProvider, {
      analytics: undefined
    }, /*#__PURE__*/_react.default.createElement(_sharedUxErrorBoundary.KibanaErrorBoundary, null, /*#__PURE__*/_react.default.createElement(_reactKibanaContextTheme.KibanaThemeProvider, {
      theme: {
        theme$
      }
    }, /*#__PURE__*/_react.default.createElement(Debug, {
      parentNode: domNode,
      payload: config,
      onLoaded: handlers.done
    })))), domNode);
  }
});
exports.getDebugRenderer = getDebugRenderer;
const debugRendererFactory = core => getDebugRenderer(core.theme.theme$);
exports.debugRendererFactory = debugRendererFactory;