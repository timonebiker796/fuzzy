"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerProductFeatures = exports.getSecurityProductTier = void 0;
var _keys = require("@kbn/security-solution-features/keys");
var _cases_product_features_config = require("./cases_product_features_config");
var _security_product_features_config = require("./security_product_features_config");
var _assistant_product_features_config = require("./assistant_product_features_config");
var _enable_rule_actions = require("../rules/enable_rule_actions");
var _product = require("../../common/product");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const registerProductFeatures = (pluginsSetup, enabledProductFeatureKeys, config) => {
  var _pluginsSetup$integra;
  // securitySolutionEss plugin should always be disabled when securitySolutionServerless is enabled.
  // This check is an additional layer of security to prevent double registrations when
  // `plugins.forceEnableAllPlugins` flag is enabled. Should never happen in real scenarios.
  const shouldRegister = pluginsSetup.securitySolutionEss == null;
  if (!shouldRegister) {
    return;
  }

  // register product features for the main security solution product features service
  pluginsSetup.securitySolution.setProductFeaturesConfigurator({
    security: (0, _security_product_features_config.getSecurityProductFeaturesConfigurator)(enabledProductFeatureKeys, config.experimentalFeatures),
    cases: (0, _cases_product_features_config.getCasesProductFeaturesConfigurator)(enabledProductFeatureKeys),
    securityAssistant: (0, _assistant_product_features_config.getSecurityAssistantProductFeaturesConfigurator)(enabledProductFeatureKeys)
  });

  // enable rule actions based on the enabled product features
  (0, _enable_rule_actions.enableRuleActions)({
    actions: pluginsSetup.actions,
    productFeatureKeys: enabledProductFeatureKeys
  });

  // set availability for the integration assistant plugin based on the product features
  (_pluginsSetup$integra = pluginsSetup.integrationAssistant) === null || _pluginsSetup$integra === void 0 ? void 0 : _pluginsSetup$integra.setIsAvailable(enabledProductFeatureKeys.includes(_keys.ProductFeatureKey.integrationAssistant));
};

/**
 * Get the security product tier from the security product type in the config
 */
exports.registerProductFeatures = registerProductFeatures;
const getSecurityProductTier = (config, logger) => {
  const securityProductType = config.productTypes.find(productType => productType.product_line === _product.ProductLine.security);
  const tier = securityProductType ? securityProductType.product_tier : 'none';
  if (tier === 'none') {
    logger.error(`Failed to fetch security product tier, config: ${JSON.stringify(config)}`);
  }
  return tier;
};
exports.getSecurityProductTier = getSecurityProductTier;