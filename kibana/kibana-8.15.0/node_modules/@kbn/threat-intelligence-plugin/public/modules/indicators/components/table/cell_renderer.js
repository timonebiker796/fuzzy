"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cellRendererFactory = void 0;
var _react = _interopRequireWildcard(require("react"));
var _uiTheme = require("@kbn/ui-theme");
var _public = require("@kbn/kibana-react-plugin/public");
var _styles = require("./styles");
var _field_value = require("../common/field_value");
var _use_table_context = require("../../hooks/use_table_context");
var _actions_row_cell = require("./actions_row_cell");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const cellRendererFactory = from => {
  return ({
    rowIndex,
    columnId,
    setCellProps
  }) => {
    const styles = (0, _styles.useStyles)();
    const indicatorsTableContext = (0, _react.useContext)(_use_table_context.IndicatorsTableContext);
    if (!indicatorsTableContext) {
      throw new Error('this can only be used inside indicators table');
    }
    const darkMode = (0, _public.useDarkMode)();
    const {
      indicators,
      expanded
    } = indicatorsTableContext;
    const indicator = indicators[rowIndex - from];
    (0, _react.useEffect)(() => {
      if (expanded && indicator && expanded._id === indicator._id) {
        setCellProps({
          style: {
            backgroundColor: darkMode ? _uiTheme.euiDarkVars.euiColorHighlight : _uiTheme.euiLightVars.euiColorHighlight
          }
        });
      } else {
        setCellProps({
          style: undefined
        });
      }
    }, [darkMode, expanded, indicator, setCellProps]);
    if (!indicator) {
      return null;
    }
    const renderContent = columnId === 'Actions' ? /*#__PURE__*/_react.default.createElement(_actions_row_cell.ActionsRowCell, {
      indicator: indicator
    }) : /*#__PURE__*/_react.default.createElement(_field_value.IndicatorFieldValue, {
      indicator: indicator,
      field: columnId
    });
    return /*#__PURE__*/_react.default.createElement("div", {
      css: styles.tableCell
    }, renderContent);
  };
};
exports.cellRendererFactory = cellRendererFactory;