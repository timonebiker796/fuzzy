"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HighlightedValuesTable = void 0;
var _react = _interopRequireWildcard(require("react"));
var _indicator = require("../../../../../common/types/indicator");
var _unwrap_value = require("../../utils/unwrap_value");
var _fields_table = require("./fields_table");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/**
 * Pick indicator fields starting with the indicator type
 */
const byIndicatorType = indicatorType => field => field.startsWith(`threat.indicator.${indicatorType}`) || ['threat.indicator.reference', 'threat.indicator.description', 'threat.software.alias', 'threat.indicator.confidence', 'threat.tactic.name', 'threat.tactic.reference'].includes(field);
/**
 * Displays highlighted indicator values based on indicator type
 */
const HighlightedValuesTable = ({
  indicator,
  'data-test-subj': dataTestSubj
}) => {
  const indicatorType = (0, _unwrap_value.unwrapValue)(indicator, _indicator.RawIndicatorFieldId.Type);
  const highlightedFields = (0, _react.useMemo)(() => Object.keys(indicator.fields).filter(byIndicatorType(indicatorType || '')), [indicator.fields, indicatorType]);
  return /*#__PURE__*/_react.default.createElement(_fields_table.IndicatorFieldsTable, {
    search: false,
    indicator: indicator,
    fields: highlightedFields,
    "data-test-subj": dataTestSubj
  });
};
exports.HighlightedValuesTable = HighlightedValuesTable;