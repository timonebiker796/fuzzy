"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.App = App;
require("./app.scss");
var _react = _interopRequireWildcard(require("react"));
var _public = require("@kbn/expressions-plugin/public");
var _common = require("../../common");
var _screenshot_mode_context = require("./screenshot_mode_context");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function App() {
  const elementRef = (0, _react.useRef)(null);
  const screenshotMode = (0, _react.useContext)(_screenshot_mode_context.ScreenshotModeContext);
  const expression = (0, _react.useMemo)(() => {
    var _screenshotMode$getSc;
    return (_screenshotMode$getSc = screenshotMode === null || screenshotMode === void 0 ? void 0 : screenshotMode.getScreenshotContext(_common.SCREENSHOTTING_EXPRESSION)) !== null && _screenshotMode$getSc !== void 0 ? _screenshotMode$getSc : '';
  }, [screenshotMode]);
  const context = (0, _react.useMemo)(() => screenshotMode === null || screenshotMode === void 0 ? void 0 : screenshotMode.getScreenshotContext(_common.SCREENSHOTTING_EXPRESSION_INPUT), [screenshotMode]);
  const {
    error,
    isEmpty
  } = (0, _public.useExpressionRenderer)(elementRef, {
    expression,
    context
  });
  return /*#__PURE__*/_react.default.createElement("div", {
    "data-shared-item": !isEmpty || !error || null,
    "data-render-error": !isEmpty && error ? error.message : null,
    ref: elementRef,
    className: "scrExpression",
    style: {
      background: 'white',
      width: '100vw',
      height: '100vh'
    }
  });
}