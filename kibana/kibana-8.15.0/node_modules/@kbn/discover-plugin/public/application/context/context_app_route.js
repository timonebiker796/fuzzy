"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContextAppRoute = ContextAppRoute;
var _react = _interopRequireWildcard(require("react"));
var _reactRouterDom = require("react-router-dom");
var _eui = require("@elastic/eui");
var _i18nReact = require("@kbn/i18n-react");
var _context_app = require("./context_app");
var _loading_indicator = require("../../components/common/loading_indicator");
var _use_data_view = require("../../hooks/use_data_view");
var _use_discover_services = require("../../hooks/use_discover_services");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

function ContextAppRoute() {
  const scopedHistory = (0, _use_discover_services.useDiscoverServices)().getScopedHistory();
  const locationState = (0, _react.useMemo)(() => scopedHistory === null || scopedHistory === void 0 ? void 0 : scopedHistory.location.state, [scopedHistory === null || scopedHistory === void 0 ? void 0 : scopedHistory.location.state]);

  /**
   * Updates history state when gets undefined.
   * Should be removed once url state will be deleted from context page.
   */
  (0, _react.useEffect)(() => {
    const unlisten = scopedHistory === null || scopedHistory === void 0 ? void 0 : scopedHistory.listen(location => {
      const currentState = location.state;
      if (!(currentState !== null && currentState !== void 0 && currentState.referrer) && locationState) {
        const newLocation = {
          ...location,
          state: {
            ...currentState,
            ...locationState
          }
        };
        scopedHistory.replace(newLocation);
      }
    });
    return () => unlisten === null || unlisten === void 0 ? void 0 : unlisten();
  }, [locationState, scopedHistory]);
  const {
    dataViewId: encodedDataViewId,
    id
  } = (0, _reactRouterDom.useParams)();
  const dataViewId = decodeURIComponent(encodedDataViewId);
  const anchorId = decodeURIComponent(id);
  const {
    dataView,
    error
  } = (0, _use_data_view.useDataView)({
    index: (locationState === null || locationState === void 0 ? void 0 : locationState.dataViewSpec) || dataViewId
  });
  if (error) {
    return /*#__PURE__*/_react.default.createElement(_eui.EuiEmptyPrompt, {
      iconType: "warning",
      iconColor: "danger",
      title: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
        id: "discover.contextViewRoute.errorTitle",
        defaultMessage: "An error occurred"
      }),
      body: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
        id: "discover.contextViewRoute.errorMessage",
        defaultMessage: "No matching data view for id {dataViewId}",
        values: {
          dataViewId
        }
      })
    });
  }
  if (!dataView) {
    return /*#__PURE__*/_react.default.createElement(_loading_indicator.LoadingIndicator, null);
  }
  return /*#__PURE__*/_react.default.createElement(_context_app.ContextApp, {
    anchorId: anchorId,
    dataView: dataView,
    referrer: locationState === null || locationState === void 0 ? void 0 : locationState.referrer
  });
}