"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PatternAnalysisTable = void 0;
var _react = _interopRequireWildcard(require("react"));
var _analytics = require("@kbn/analytics");
var _lodash = require("lodash");
var _use_discover_services = require("../../../../hooks/use_discover_services");
var _constants = require("./constants");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

const PatternAnalysisTable = props => {
  const [lastReloadRequestTime, setLastReloadRequestTime] = (0, _react.useState)(undefined);
  const services = (0, _use_discover_services.useDiscoverServices)();
  const aiopsService = services.aiops;
  const {
    trackUiMetric,
    stateContainer
  } = props;
  (0, _react.useEffect)(() => {
    const refetch = stateContainer === null || stateContainer === void 0 ? void 0 : stateContainer.dataState.refetch$.subscribe(() => {
      setLastReloadRequestTime(Date.now());
    });
    return () => {
      refetch === null || refetch === void 0 ? void 0 : refetch.unsubscribe();
    };
  }, [stateContainer]);
  (0, _react.useEffect)(() => {
    // Track should only be called once when component is loaded
    if (aiopsService) {
      trackUiMetric === null || trackUiMetric === void 0 ? void 0 : trackUiMetric(_analytics.METRIC_TYPE.LOADED, _constants.PATTERN_ANALYSIS_LOADED);
    }
  }, [aiopsService, trackUiMetric]);
  const patternAnalysisComponentProps = (0, _react.useMemo)(() => ({
    input: Object.assign({}, (0, _lodash.pick)(props, ['dataView', 'savedSearch', 'query', 'filters', 'switchToDocumentView']), {
      lastReloadRequestTime
    }),
    renderViewModeToggle: props.renderViewModeToggle
  }), [lastReloadRequestTime, props]);
  if (!aiopsService) {
    return null;
  }
  return /*#__PURE__*/_react.default.createElement(aiopsService.PatternAnalysisComponent, {
    props: patternAnalysisComponentProps,
    deps: services,
    embeddingOrigin: "discover"
  });
};
exports.PatternAnalysisTable = PatternAnalysisTable;