"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProfilesManager = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _esQuery = require("@kbn/es-query");
var _lodash = require("lodash");
var _rxjs = require("rxjs");
var _data_sources = require("../../common/data_sources");
var _add_log = require("../utils/add_log");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

class ProfilesManager {
  constructor(rootProfileService, dataSourceProfileService, documentProfileService) {
    (0, _defineProperty2.default)(this, "rootContext$", void 0);
    (0, _defineProperty2.default)(this, "dataSourceContext$", void 0);
    (0, _defineProperty2.default)(this, "prevRootProfileParams", void 0);
    (0, _defineProperty2.default)(this, "prevDataSourceProfileParams", void 0);
    (0, _defineProperty2.default)(this, "rootProfileAbortController", void 0);
    (0, _defineProperty2.default)(this, "dataSourceProfileAbortController", void 0);
    this.rootProfileService = rootProfileService;
    this.dataSourceProfileService = dataSourceProfileService;
    this.documentProfileService = documentProfileService;
    this.rootContext$ = new _rxjs.BehaviorSubject(rootProfileService.defaultContext);
    this.dataSourceContext$ = new _rxjs.BehaviorSubject(dataSourceProfileService.defaultContext);
  }
  async resolveRootProfile(params) {
    var _this$rootProfileAbor;
    const serializedParams = serializeRootProfileParams(params);
    if ((0, _lodash.isEqual)(this.prevRootProfileParams, serializedParams)) {
      return;
    }
    const abortController = new AbortController();
    (_this$rootProfileAbor = this.rootProfileAbortController) === null || _this$rootProfileAbor === void 0 ? void 0 : _this$rootProfileAbor.abort();
    this.rootProfileAbortController = abortController;
    let context = this.rootProfileService.defaultContext;
    try {
      context = await this.rootProfileService.resolve(params);
    } catch (e) {
      logResolutionError(ContextType.Root, serializedParams, e);
    }
    if (abortController.signal.aborted) {
      return;
    }
    this.rootContext$.next(context);
    this.prevRootProfileParams = serializedParams;
  }
  async resolveDataSourceProfile(params) {
    var _this$dataSourceProfi;
    const serializedParams = serializeDataSourceProfileParams(params);
    if ((0, _lodash.isEqual)(this.prevDataSourceProfileParams, serializedParams)) {
      return;
    }
    const abortController = new AbortController();
    (_this$dataSourceProfi = this.dataSourceProfileAbortController) === null || _this$dataSourceProfi === void 0 ? void 0 : _this$dataSourceProfi.abort();
    this.dataSourceProfileAbortController = abortController;
    let context = this.dataSourceProfileService.defaultContext;
    try {
      context = await this.dataSourceProfileService.resolve(params);
    } catch (e) {
      logResolutionError(ContextType.DataSource, serializedParams, e);
    }
    if (abortController.signal.aborted) {
      return;
    }
    this.dataSourceContext$.next(context);
    this.prevDataSourceProfileParams = serializedParams;
  }
  resolveDocumentProfile(params) {
    let context;
    return new Proxy(params.record, {
      has: (target, prop) => prop === 'context' || Reflect.has(target, prop),
      get: (target, prop, receiver) => {
        if (prop !== 'context') {
          return Reflect.get(target, prop, receiver);
        }
        if (!context) {
          try {
            context = this.documentProfileService.resolve(params);
          } catch (e) {
            logResolutionError(ContextType.Document, {
              recordId: params.record.id
            }, e);
            context = this.documentProfileService.defaultContext;
          }
        }
        return context;
      }
    });
  }
  getProfiles({
    record
  } = {}) {
    return [this.rootProfileService.getProfile(this.rootContext$.getValue()), this.dataSourceProfileService.getProfile(this.dataSourceContext$.getValue()), this.documentProfileService.getProfile(recordHasContext(record) ? record.context : this.documentProfileService.defaultContext)];
  }
  getProfiles$(options = {}) {
    return (0, _rxjs.combineLatest)([this.rootContext$, this.dataSourceContext$]).pipe((0, _rxjs.map)(() => this.getProfiles(options)));
  }
}
exports.ProfilesManager = ProfilesManager;
const serializeRootProfileParams = params => {
  return {
    solutionNavId: params.solutionNavId
  };
};
const serializeDataSourceProfileParams = params => {
  return {
    dataViewId: (0, _data_sources.isDataSourceType)(params.dataSource, _data_sources.DataSourceType.DataView) ? params.dataSource.dataViewId : undefined,
    esqlQuery: (0, _data_sources.isDataSourceType)(params.dataSource, _data_sources.DataSourceType.Esql) && (0, _esQuery.isOfAggregateQueryType)(params.query) ? params.query.esql : undefined
  };
};
const recordHasContext = record => {
  return Boolean(record && 'context' in record);
};
var ContextType = /*#__PURE__*/function (ContextType) {
  ContextType["Root"] = "root";
  ContextType["DataSource"] = "data source";
  ContextType["Document"] = "document";
  return ContextType;
}(ContextType || {});
const logResolutionError = (profileType, params, error) => {
  (0, _add_log.addLog)(`[ProfilesManager] ${profileType} context resolution failed with params: ${JSON.stringify(params, null, 2)}`, error);
};