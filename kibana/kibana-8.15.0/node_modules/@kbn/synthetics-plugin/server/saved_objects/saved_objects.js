"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.savedObjectsAdapter = exports.registerUptimeSavedObjects = void 0;
var _server = require("@kbn/core/server");
var _synthetics_settings = require("./synthetics_settings");
var _synthetics_param = require("./synthetics_param");
var _private_locations = require("./private_locations");
var _settings = require("../constants/settings");
var _synthetics_monitor = require("./synthetics_monitor");
var _service_api_key = require("./service_api_key");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const registerUptimeSavedObjects = (savedObjectsService, encryptedSavedObjects) => {
  savedObjectsService.registerType(_private_locations.PRIVATE_LOCATIONS_SAVED_OBJECT_TYPE);
  savedObjectsService.registerType((0, _synthetics_monitor.getSyntheticsMonitorSavedObjectType)(encryptedSavedObjects));
  savedObjectsService.registerType(_service_api_key.syntheticsServiceApiKey);
  savedObjectsService.registerType(_synthetics_param.syntheticsParamSavedObjectType);
  savedObjectsService.registerType(_synthetics_settings.syntheticsSettings);
  encryptedSavedObjects.registerType({
    type: _service_api_key.syntheticsServiceApiKey.name,
    attributesToEncrypt: new Set(['apiKey']),
    attributesToIncludeInAAD: new Set(['id', 'name'])
  });
  encryptedSavedObjects.registerType(_synthetics_monitor.SYNTHETICS_MONITOR_ENCRYPTED_TYPE);
  encryptedSavedObjects.registerType(_synthetics_param.SYNTHETICS_SECRET_ENCRYPTED_TYPE);
};
exports.registerUptimeSavedObjects = registerUptimeSavedObjects;
const savedObjectsAdapter = exports.savedObjectsAdapter = {
  getSyntheticsDynamicSettings: async client => {
    try {
      var _obj$attributes;
      const obj = await client.get(_synthetics_settings.syntheticsSettingsObjectType, _synthetics_settings.syntheticsSettingsObjectId);
      return (_obj$attributes = obj === null || obj === void 0 ? void 0 : obj.attributes) !== null && _obj$attributes !== void 0 ? _obj$attributes : _settings.DYNAMIC_SETTINGS_DEFAULT_ATTRIBUTES;
    } catch (getErr) {
      if (_server.SavedObjectsErrorHelpers.isNotFoundError(getErr)) {
        // If the object doesn't exist, check to see if uptime settings exist
        return getUptimeDynamicSettings(client);
      }
      throw getErr;
    }
  },
  setSyntheticsDynamicSettings: async (client, settings) => {
    const settingsObject = await client.create(_synthetics_settings.syntheticsSettingsObjectType, settings, {
      id: _synthetics_settings.syntheticsSettingsObjectId,
      overwrite: true
    });
    return settingsObject.attributes;
  }
};
const getUptimeDynamicSettings = async client => {
  try {
    var _obj$attributes2;
    const obj = await client.get(_synthetics_settings.uptimeSettingsObjectType, _synthetics_settings.uptimeSettingsObjectId);
    return (_obj$attributes2 = obj === null || obj === void 0 ? void 0 : obj.attributes) !== null && _obj$attributes2 !== void 0 ? _obj$attributes2 : _settings.DYNAMIC_SETTINGS_DEFAULT_ATTRIBUTES;
  } catch (getErr) {
    return _settings.DYNAMIC_SETTINGS_DEFAULT_ATTRIBUTES;
  }
};