"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MonitorTestRunsSparkline = void 0;
var _react = _interopRequireWildcard(require("react"));
var _public = require("@kbn/kibana-react-plugin/public");
var _public2 = require("@kbn/observability-shared-plugin/public");
var _hooks = require("../../../../hooks");
var labels = _interopRequireWildcard(require("../labels"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const MonitorTestRunsSparkline = ({
  monitorIds
}) => {
  const {
    exploratoryView: {
      ExploratoryViewEmbeddable
    }
  } = (0, _public.useKibana)().services;
  const theme = (0, _public2.useTheme)();
  const {
    from,
    to
  } = (0, _hooks.useRefreshedRange)(30, 'days');
  const attributes = (0, _react.useMemo)(() => {
    return [{
      seriesType: 'area',
      time: {
        from,
        to
      },
      reportDefinitions: {
        'monitor.id': monitorIds.length > 0 ? monitorIds : ['false-monitor-id'] // Show no data when monitorIds is empty
      },
      dataType: 'synthetics',
      selectedMetricField: 'total_test_runs',
      filters: [],
      name: labels.TEST_RUNS_LABEL,
      color: theme.eui.euiColorVis1,
      operationType: 'count'
    }];
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [from, JSON.stringify({
    ids: [...monitorIds].sort()
  }), theme.eui.euiColorVis1, to]);
  return /*#__PURE__*/_react.default.createElement(ExploratoryViewEmbeddable, {
    id: "monitor-test-runs-sparkline",
    reportType: "kpi-over-time",
    axisTitlesVisibility: {
      x: false,
      yRight: false,
      yLeft: false
    },
    legendIsVisible: false,
    hideTicks: true,
    attributes: attributes,
    customHeight: '68px'
  });
};
exports.MonitorTestRunsSparkline = MonitorTestRunsSparkline;