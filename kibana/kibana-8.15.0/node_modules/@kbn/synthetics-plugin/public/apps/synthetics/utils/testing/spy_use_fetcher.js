"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.spyOnUseFetcher = spyOnUseFetcher;
var observabilitySharedPublic = _interopRequireWildcard(require("@kbn/observability-shared-plugin/public"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

jest.mock('@kbn/observability-shared-plugin/public', () => {
  const originalModule = jest.requireActual('@kbn/observability-shared-plugin/public');
  return {
    ...originalModule,
    useFetcher: jest.fn().mockReturnValue({
      data: null,
      status: 'success'
    }),
    useTrackPageview: jest.fn()
  };
});
function spyOnUseFetcher(payload, status = observabilitySharedPublic.FETCH_STATUS.SUCCESS) {
  return jest.spyOn(observabilitySharedPublic, 'useFetcher').mockReturnValue({
    status,
    data: payload,
    refetch: () => null
  });
}