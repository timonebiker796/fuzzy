"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProjectAPIKeys = void 0;
var _react = _interopRequireWildcard(require("react"));
var _public = require("@kbn/kibana-react-plugin/public");
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _public2 = require("@kbn/observability-shared-plugin/public");
var _help_commands = require("./help_commands");
var _monitor_detail_flyout = require("../../monitors_page/overview/overview/monitor_detail_flyout");
var _api = require("../../../state/monitor_management/api");
var _api_key_btn = require("./api_key_btn");
var _hooks = require("../../../hooks");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const syntheticsTestRunDocsLink = 'https://www.elastic.co/guide/en/observability/current/synthetic-run-tests.html';
const ProjectAPIKeys = () => {
  var _kServices$fleet, _useKibana$services$a, _useKibana$services, _useKibana$services$a2, _kServices$notificati2, _useKibana$services2, _useKibana$services2$;
  const {
    loading: enablementLoading,
    canManageApiKeys
  } = (0, _hooks.useEnablement)();
  const [apiKey, setApiKey] = (0, _react.useState)(undefined);
  const [loadAPIKey, setLoadAPIKey] = (0, _react.useState)(false);
  const [accessToElasticManagedLocations, setAccessToElasticManagedLocations] = (0, _react.useState)(true);
  const kServices = (0, _public.useKibana)().services;
  const canSaveIntegrations = !!(kServices !== null && kServices !== void 0 && (_kServices$fleet = kServices.fleet) !== null && _kServices$fleet !== void 0 && _kServices$fleet.authz.integrations.writeIntegrationPolicies);
  const canUsePublicLocations = (_useKibana$services$a = (_useKibana$services = (0, _public.useKibana)().services) === null || _useKibana$services === void 0 ? void 0 : (_useKibana$services$a2 = _useKibana$services.application) === null || _useKibana$services$a2 === void 0 ? void 0 : _useKibana$services$a2.capabilities.uptime.elasticManagedLocationsEnabled) !== null && _useKibana$services$a !== void 0 ? _useKibana$services$a : true;
  const {
    data,
    loading,
    error
  } = (0, _public2.useFetcher)(async () => {
    if (loadAPIKey) {
      return (0, _api.fetchProjectAPIKey)(accessToElasticManagedLocations && Boolean(canUsePublicLocations));
    }
    return null;
    // FIXME: Dario thinks there is a better way to do this but
    // he's getting tired and maybe the Synthetics folks can fix it
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [loadAPIKey, canUsePublicLocations]);
  (0, _react.useEffect)(() => {
    if (data !== null && data !== void 0 && data.apiKey) {
      setApiKey(data === null || data === void 0 ? void 0 : data.apiKey.encoded);
    }
    setLoadAPIKey(false);
  }, [data]);
  (0, _react.useEffect)(() => {
    if (error) {
      var _kServices$notificati, _requestError$body;
      const requestError = error;
      kServices === null || kServices === void 0 ? void 0 : (_kServices$notificati = kServices.notifications) === null || _kServices$notificati === void 0 ? void 0 : _kServices$notificati.toasts.addError(error, {
        title: _i18n.i18n.translate('xpack.synthetics.createApiKey.error', {
          defaultMessage: 'Error'
        }),
        toastMessage: requestError === null || requestError === void 0 ? void 0 : (_requestError$body = requestError.body) === null || _requestError$body === void 0 ? void 0 : _requestError$body.message
      });
    }
  }, [error, kServices === null || kServices === void 0 ? void 0 : (_kServices$notificati2 = kServices.notifications) === null || _kServices$notificati2 === void 0 ? void 0 : _kServices$notificati2.toasts]);
  const canSave = !!((_useKibana$services2 = (0, _public.useKibana)().services) !== null && _useKibana$services2 !== void 0 && (_useKibana$services2$ = _useKibana$services2.application) !== null && _useKibana$services2$ !== void 0 && _useKibana$services2$.capabilities.uptime.save);
  if (enablementLoading) {
    return /*#__PURE__*/_react.default.createElement(_monitor_detail_flyout.LoadingState, null);
  }
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiEmptyPrompt, {
    style: {
      maxWidth: '50%'
    },
    title: /*#__PURE__*/_react.default.createElement("h2", null, GET_API_KEY_GENERATE),
    body: canSave && canManageApiKeys ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiText, null, GET_API_KEY_LABEL_DESCRIPTION, ' ', !canSaveIntegrations ? `${API_KEY_DISCLAIMER} ` : '', /*#__PURE__*/_react.default.createElement(_eui.EuiLink, {
      "data-test-subj": "syntheticsProjectAPIKeysLink",
      href: syntheticsTestRunDocsLink,
      external: true,
      target: "_blank"
    }, LEARN_MORE_LABEL)), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, null), /*#__PURE__*/_react.default.createElement(_eui.EuiSwitch, {
      label: _i18n.i18n.translate('xpack.synthetics.features.elasticManagedLocations', {
        defaultMessage: 'Elastic managed locations enabled'
      }),
      checked: accessToElasticManagedLocations && Boolean(canUsePublicLocations),
      onChange: () => {
        setAccessToElasticManagedLocations(!accessToElasticManagedLocations);
      },
      disabled: !canUsePublicLocations
    })) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiText, null, GET_API_KEY_REDUCED_PERMISSIONS_LABEL, ' ', /*#__PURE__*/_react.default.createElement(_eui.EuiLink, {
      "data-test-subj": "syntheticsProjectAPIKeysLink",
      href: syntheticsTestRunDocsLink,
      external: true,
      target: "_blank"
    }, LEARN_MORE_LABEL))),
    actions: /*#__PURE__*/_react.default.createElement(_api_key_btn.ApiKeyBtn, {
      loading: loading,
      setLoadAPIKey: setLoadAPIKey,
      apiKey: apiKey,
      isDisabled: !canSave || !canManageApiKeys
    })
  }), apiKey && /*#__PURE__*/_react.default.createElement(_help_commands.HelpCommands, {
    apiKey: apiKey
  }));
};
exports.ProjectAPIKeys = ProjectAPIKeys;
const LEARN_MORE_LABEL = _i18n.i18n.translate('xpack.synthetics.monitorManagement.learnMore.label', {
  defaultMessage: 'Learn more'
});
const GET_API_KEY_GENERATE = _i18n.i18n.translate('xpack.synthetics.monitorManagement.getProjectAPIKeyLabel.generate', {
  defaultMessage: 'Generate Project API Key'
});
const GET_API_KEY_LABEL_DESCRIPTION = _i18n.i18n.translate('xpack.synthetics.monitorManagement.getAPIKeyLabel.description', {
  defaultMessage: 'Use an API key to push monitors remotely from a CLI or CD pipeline.'
});
const API_KEY_DISCLAIMER = _i18n.i18n.translate('xpack.synthetics.monitorManagement.getAPIKeyLabel.disclaimer', {
  defaultMessage: 'Please note: In order to use push monitors using private testing locations, you must generate this API key with a user who has Fleet and Integrations write permissions.'
});
const GET_API_KEY_REDUCED_PERMISSIONS_LABEL = _i18n.i18n.translate('xpack.synthetics.monitorManagement.getAPIKeyReducedPermissions.description', {
  defaultMessage: 'Use an API key to push monitors remotely from a CLI or CD pipeline. To generate an API key, you must have permissions to manage API keys and Uptime write access. Please contact your administrator.'
});