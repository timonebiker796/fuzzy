"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  agentPoliciesReducer: true
};
exports.agentPoliciesReducer = void 0;
var _toolkit = require("@reduxjs/toolkit");
var _actions = require("./actions");
Object.keys(_actions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _actions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _actions[key];
    }
  });
});
var _effects = require("./effects");
Object.keys(_effects).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _effects[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _effects[key];
    }
  });
});
var _selectors = require("./selectors");
Object.keys(_selectors).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _selectors[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _selectors[key];
    }
  });
});
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const initialState = {
  data: null,
  loading: false,
  error: null,
  isManageFlyoutOpen: false,
  isAddingNewPrivateLocation: false
};
const agentPoliciesReducer = exports.agentPoliciesReducer = (0, _toolkit.createReducer)(initialState, builder => {
  builder.addCase(_actions.getAgentPoliciesAction.get, state => {
    state.loading = true;
  }).addCase(_actions.getAgentPoliciesAction.success, (state, action) => {
    state.data = action.payload;
    state.loading = false;
  }).addCase(_actions.getAgentPoliciesAction.fail, (state, action) => {
    state.error = action.payload;
    state.loading = false;
  }).addCase(_actions.getPrivateLocationsAction.get, state => {
    state.fetchLoading = true;
  }).addCase(_actions.getPrivateLocationsAction.success, (state, action) => {
    state.privateLocations = action.payload;
    state.fetchLoading = false;
  }).addCase(_actions.getPrivateLocationsAction.fail, (state, action) => {
    state.error = action.payload;
    state.fetchLoading = false;
  }).addCase(_actions.setAddingNewPrivateLocation, (state, action) => {
    state.isAddingNewPrivateLocation = action.payload;
  });
});