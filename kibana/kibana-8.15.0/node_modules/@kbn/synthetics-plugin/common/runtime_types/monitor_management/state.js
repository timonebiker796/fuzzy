"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MonitorManagementEnablementResultCodec = exports.FetchMonitorOverviewQueryArgsCodec = exports.FetchMonitorManagementListQueryArgsCodec = void 0;
var t = _interopRequireWildcard(require("io-ts"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const FetchMonitorManagementListQueryArgsCodec = exports.FetchMonitorManagementListQueryArgsCodec = t.partial({
  page: t.number,
  perPage: t.number,
  sortField: t.string,
  sortOrder: t.union([t.literal('desc'), t.literal('asc')]),
  query: t.string,
  searchFields: t.array(t.string),
  tags: t.array(t.string),
  locations: t.array(t.string),
  monitorTypes: t.array(t.string),
  projects: t.array(t.string),
  schedules: t.array(t.string),
  monitorQueryIds: t.array(t.string)
});
const FetchMonitorOverviewQueryArgsCodec = exports.FetchMonitorOverviewQueryArgsCodec = t.partial({
  query: t.string,
  searchFields: t.array(t.string),
  tags: t.array(t.string),
  locations: t.array(t.string),
  projects: t.array(t.string),
  schedules: t.array(t.string),
  monitorTypes: t.array(t.string),
  sortField: t.string,
  sortOrder: t.string
});
const MonitorManagementEnablementResultCodec = exports.MonitorManagementEnablementResultCodec = t.type({
  isEnabled: t.boolean,
  canEnable: t.boolean,
  canManageApiKeys: t.boolean,
  areApiKeysEnabled: t.boolean,
  isValidApiKey: t.boolean,
  isServiceAllowed: t.boolean
});