(window.uiActionsEnhanced_bundle_jsonpfunction=window.uiActionsEnhanced_bundle_jsonpfunction||[]).push([[5],{73:function(e,r,t){"use strict";t.r(r),t.d(r,"handlebars",(function(){return g}));var n=t(72),i=t(19),o=t(20),s=t.n(o),l=t(21),a=t.n(l),u=t(22),c=t.n(u),p=t(6);const g=n.default.create();function f(e,r){return(...t)=>{const{hash:n}=t.slice(-1)[0],i=Object.keys(n).length>0,o=t.length>1;if(i&&o)throw new Error(`[${e}]: both value list and hash are not supported`);if(i){if(Object.values(n).some((e=>void 0===e)))throw new Error(`[${e}]: unknown variable`);return r(n)}{const n=t.slice(0,-1);if(n.some((e=>void 0===e)))throw new Error(`[${e}]: unknown variable`);if(0===n.length)throw new Error(`[${e}]: unknown variable`);return 1===n.length?r(n[0]):r(n)}}}g.registerHelper("json",f("json",JSON.stringify)),g.registerHelper("rison",f("rison",(e=>Object(i.encode)(e)))),g.registerHelper("date",((...e)=>{const r=e.slice(0,-1),{hash:t}=e.slice(-1)[0];let n,[i,o]=r;if(void 0===i)throw new Error("[date]: unknown variable");if("string"==typeof i){if(n=s.a.parse(i,{roundUp:!0===t.roundUp}),!n||!n.isValid()){const e=Number(i);Number.isNaN(e)||(n=a()(e))}}else n=a()(i);return n&&n.isValid()?o?n.format(o):n.toISOString():i})),g.registerHelper("formatNumber",((e,r)=>{if(!r||"string"!=typeof r)throw new Error("[formatNumber]: pattern string is required");const t=Number(e);return null==e||Number.isNaN(t)?e:c()(t).format(r)})),g.registerHelper("lowercase",(e=>String(e).toLowerCase())),g.registerHelper("uppercase",(e=>String(e).toUpperCase())),g.registerHelper("trim",(e=>String(e).trim())),g.registerHelper("trimLeft",(e=>String(e).trimLeft())),g.registerHelper("trimRight",(e=>String(e).trimRight())),g.registerHelper("left",((e,r)=>{if("number"!=typeof r)throw new Error('[left]: expected "number of characters to extract" to be a number');return String(e).slice(0,r)})),g.registerHelper("right",((e,r)=>{if("number"!=typeof r)throw new Error('[left]: expected "number of characters to extract" to be a number');return String(e).slice(-r)})),g.registerHelper("mid",((e,r,t)=>{if("number"!=typeof r)throw new Error('[left]: expected "start" to be a number');if("number"!=typeof t)throw new Error('[left]: expected "length" to be a number');return String(e).substr(r,t)})),g.registerHelper("concat",((...e)=>e.slice(0,-1).join(""))),g.registerHelper("split",((...e)=>{const[r,t]=e.slice(0,-1);if("string"!=typeof t)throw new Error('[split] "splitter" expected to be a string');return String(r).split(t)})),g.registerHelper("replace",((...e)=>{const[r,t,n]=e.slice(0,-1);if("string"!=typeof t||"string"!=typeof n)throw new Error('[replace]: "searchString" and "valueString" parameters expected to be strings, but not a string or missing');return String(r).split(t).join(n)})),g.registerHelper("encodeURIComponent",(e=>{const r=String(e);return encodeURIComponent(r)})),g.registerHelper("encodeURIQuery",(e=>{const r=String(e);return p.url.encodeUriQuery(r)}))}}]);