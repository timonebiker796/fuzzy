"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClearControlAction = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _eui = require("@elastic/eui");
var _presentationContainers = require("@kbn/presentation-containers");
var _presentationPublishing = require("@kbn/presentation-publishing");
var _public = require("@kbn/ui-actions-plugin/public");
var _ = require(".");
var _types = require("../../types");
var _control_group_strings = require("../control_group_strings");
var _types2 = require("../types");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

const isApiCompatible = api => Boolean((0, _presentationPublishing.apiHasType)(api) && (0, _presentationPublishing.apiHasUniqueId)(api) && (0, _types.isClearableControl)(api) && (0, _presentationPublishing.apiHasParentApi)(api) && (0, _presentationPublishing.apiCanAccessViewMode)(api.parentApi) && (0, _presentationPublishing.apiIsOfType)(api.parentApi, _types2.CONTROL_GROUP_TYPE) && (0, _presentationContainers.apiIsPresentationContainer)(api.parentApi));
class ClearControlAction {
  constructor() {
    (0, _defineProperty2.default)(this, "type", _.ACTION_CLEAR_CONTROL);
    (0, _defineProperty2.default)(this, "id", _.ACTION_CLEAR_CONTROL);
    (0, _defineProperty2.default)(this, "order", 1);
    (0, _defineProperty2.default)(this, "MenuItem", ({
      context
    }) => {
      if (!isApiCompatible(context.embeddable)) throw new _public.IncompatibleActionError();
      return /*#__PURE__*/_react.default.createElement(_eui.EuiToolTip, {
        content: this.getDisplayName(context)
      }, /*#__PURE__*/_react.default.createElement(_eui.EuiButtonIcon, {
        "data-test-subj": `control-action-${context.embeddable.uuid}-erase`,
        "aria-label": this.getDisplayName(context),
        iconType: this.getIconType(context),
        onClick: event => {
          event.target.blur();
          this.execute(context);
        },
        color: "text"
      }));
    });
  }
  getDisplayName({
    embeddable
  }) {
    if (!isApiCompatible(embeddable)) throw new _public.IncompatibleActionError();
    return _control_group_strings.ControlGroupStrings.floatingActions.getClearButtonTitle();
  }
  getIconType({
    embeddable
  }) {
    if (!isApiCompatible(embeddable)) throw new _public.IncompatibleActionError();
    return 'eraser';
  }
  async isCompatible({
    embeddable
  }) {
    return isApiCompatible(embeddable);
  }
  async execute({
    embeddable
  }) {
    if (!isApiCompatible(embeddable)) throw new _public.IncompatibleActionError();
    embeddable.clearSelections();
  }
}
exports.ClearControlAction = ClearControlAction;