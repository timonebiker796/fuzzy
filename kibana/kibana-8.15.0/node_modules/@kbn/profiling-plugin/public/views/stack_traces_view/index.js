"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StackTracesView = StackTracesView;
var _react = _interopRequireDefault(require("react"));
var _topn = require("../../../common/topn");
var _use_profiling_dependencies = require("../../components/contexts/profiling_dependencies/use_profiling_dependencies");
var _profiling_app_page_template = require("../../components/profiling_app_page_template");
var _stack_traces = require("../../components/stack_traces");
var _use_profiling_params = require("../../hooks/use_profiling_params");
var _use_profiling_router = require("../../hooks/use_profiling_router");
var _use_profiling_route_path = require("../../hooks/use_profiling_route_path");
var _use_time_range = require("../../hooks/use_time_range");
var _use_time_range_async = require("../../hooks/use_time_range_async");
var _route_breadcrumb = require("../../routing/route_breadcrumb");
var _get_stack_traces_tabs = require("./get_stack_traces_tabs");
var _utils = require("./utils");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function StackTracesView() {
  const routePath = (0, _use_profiling_route_path.useProfilingRoutePath)();
  const profilingRouter = (0, _use_profiling_router.useProfilingRouter)();
  const {
    path,
    query,
    path: {
      topNType
    },
    query: {
      rangeFrom,
      rangeTo,
      kuery,
      displayAs,
      limit: limitFromQueryParams
    }
  } = (0, _use_profiling_params.useProfilingParams)('/stacktraces/{topNType}');
  const limit = limitFromQueryParams || 10;
  const tabs = (0, _get_stack_traces_tabs.getStackTracesTabs)({
    path,
    query,
    profilingRouter
  });
  const selectedTab = tabs.find(tab => tab.isSelected);
  const {
    services: {
      fetchTopN
    }
  } = (0, _use_profiling_dependencies.useProfilingDependencies)();
  const timeRange = (0, _use_time_range.useTimeRange)({
    rangeFrom,
    rangeTo
  });
  const state = (0, _use_time_range_async.useTimeRangeAsync)(({
    http
  }) => {
    if (!topNType) {
      return Promise.resolve({
        charts: [],
        metadata: {}
      });
    }
    return fetchTopN({
      http,
      type: topNType,
      timeFrom: timeRange.inSeconds.start,
      timeTo: timeRange.inSeconds.end,
      kuery
    }).then(_topn.groupSamplesByCategory);
  }, [topNType, timeRange.inSeconds.start, timeRange.inSeconds.end, fetchTopN, kuery]);
  function onChartClick(category) {
    profilingRouter.push('/stacktraces/{topNType}', (0, _utils.getTracesViewRouteParams)({
      query,
      topNType: path.topNType,
      category
    }));
  }
  return /*#__PURE__*/_react.default.createElement(_route_breadcrumb.RouteBreadcrumb, {
    title: (selectedTab === null || selectedTab === void 0 ? void 0 : selectedTab.label) || '',
    href: (selectedTab === null || selectedTab === void 0 ? void 0 : selectedTab.href) || ''
  }, /*#__PURE__*/_react.default.createElement(_profiling_app_page_template.ProfilingAppPageTemplate, {
    tabs: tabs
  }, /*#__PURE__*/_react.default.createElement(_stack_traces.StackTraces, {
    type: topNType,
    state: state,
    displayOption: displayAs,
    limit: limit,
    onChartClick: onChartClick,
    onChangeDisplayOption: nextValue => {
      profilingRouter.push(routePath, {
        path,
        query: {
          ...query,
          displayAs: nextValue
        }
      });
    },
    onStackedBarChartBrushEnd: nextRange => {
      profilingRouter.push(routePath, {
        path,
        query: {
          ...query,
          rangeFrom: nextRange.rangeFrom,
          rangeTo: nextRange.rangeTo
        }
      });
    },
    onShowMoreClick: () => {
      profilingRouter.push(routePath, {
        path,
        query: {
          ...query,
          limit: limit + 10
        }
      });
    }
  })));
}