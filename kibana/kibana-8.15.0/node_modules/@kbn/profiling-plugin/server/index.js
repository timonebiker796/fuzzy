"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.config = void 0;
exports.plugin = plugin;
var _configSchema = require("@kbn/config-schema");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } /*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
/**
 * These properties are used to create both the Collector and the Symbolizer integrations
 * when Universal Profiling is initialized.
 * As of now Universal Profiling is only available on Elastic Cloud, so
 * Elastic Cloud will fill these properties up and pass it to Kibana.
 * Note that the list of config options does not encompass all the avaiable entries
 * offered by the integrations pacakges, but are limited to the ones that
 * Cloud will make use of.
 */
const packageInputSchema = _configSchema.schema.object({
  host: _configSchema.schema.maybe(_configSchema.schema.string()),
  telemetry: _configSchema.schema.maybe(_configSchema.schema.boolean()),
  tls_enabled: _configSchema.schema.maybe(_configSchema.schema.boolean()),
  tls_supported_protocols: _configSchema.schema.maybe(_configSchema.schema.arrayOf(_configSchema.schema.string())),
  tls_certificate_path: _configSchema.schema.maybe(_configSchema.schema.string()),
  tls_key_path: _configSchema.schema.maybe(_configSchema.schema.string())
});
const configSchema = _configSchema.schema.object({
  enabled: _configSchema.schema.boolean({
    defaultValue: false
  }),
  symbolizer: _configSchema.schema.maybe(packageInputSchema),
  collector: _configSchema.schema.maybe(packageInputSchema),
  elasticsearch: _configSchema.schema.conditional(_configSchema.schema.contextRef('dist'), _configSchema.schema.literal(true), _configSchema.schema.never(), _configSchema.schema.maybe(_configSchema.schema.object({
    hosts: _configSchema.schema.string(),
    username: _configSchema.schema.string(),
    password: _configSchema.schema.string()
  })))
});
// plugin config
const config = exports.config = {
  schema: configSchema
};

//  This exports static code and TypeScript types,
//  as well as, Kibana Platform `plugin()` initializer.

async function plugin(initializerContext) {
  const {
    ProfilingPlugin
  } = await Promise.resolve().then(() => _interopRequireWildcard(require('./plugin')));
  return new ProfilingPlugin(initializerContext);
}