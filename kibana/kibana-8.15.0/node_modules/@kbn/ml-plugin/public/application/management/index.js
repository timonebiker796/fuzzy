"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerManagementSection = registerManagementSection;
var _i18n = require("@kbn/i18n");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } /*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
function registerManagementSection(management, core, deps, isServerless, mlFeatures) {
  const appName = _i18n.i18n.translate('xpack.ml.management.jobsListTitle', {
    defaultMessage: 'Machine Learning'
  });
  return management.sections.section.insightsAndAlerting.registerApp({
    id: 'jobsListLink',
    title: appName,
    order: 4,
    async mount(params) {
      const [{
        chrome
      }] = await core.getStartServices();
      const {
        docTitle
      } = chrome;
      docTitle.change(appName);
      const {
        mountApp
      } = await Promise.resolve().then(() => _interopRequireWildcard(require('./jobs_list')));
      const unmountAppCallback = await mountApp(core, params, deps, isServerless, mlFeatures);
      return () => {
        docTitle.reset();
        unmountAppCallback();
      };
    }
  });
}