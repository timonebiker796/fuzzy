"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScopeSection = ScopeSection;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _eui = require("@elastic/eui");
var _scope_expression = require("./scope_expression");
var _check_capabilities = require("../../capabilities/check_capabilities");
var _utils = require("./utils");
var _i18nReact = require("@kbn/i18n-react");
var _locator = require("../../../../common/constants/locator");
var _kibana = require("../../contexts/kibana");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * React component for rendering the form fields for editing the scope section of a rule.
 */

function NoFilterListsCallOut() {
  const mlLocator = (0, _kibana.useMlLocator)();
  const navigateToPath = (0, _kibana.useNavigateToPath)();
  const redirectToFilterManagementPage = async () => {
    const path = await mlLocator.getUrl({
      page: _locator.ML_PAGES.FILTER_LISTS_MANAGE
    });
    await navigateToPath(path, true);
  };
  return /*#__PURE__*/_react.default.createElement(_eui.EuiCallOut, {
    title: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.ml.ruleEditor.scopeSection.noFilterListsConfiguredTitle",
      defaultMessage: "No filter lists configured"
    }),
    iconType: "gear"
  }, /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.ml.ruleEditor.scopeSection.createFilterListsDescription",
    defaultMessage: "To configure scope, you must first use the\xA0{filterListsLink} settings page to create the list of values you want to include or exclude in the job rule.",
    values: {
      filterListsLink: /*#__PURE__*/_react.default.createElement(_eui.EuiLink, {
        onClick: redirectToFilterManagementPage
      }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
        id: "xpack.ml.ruleEditor.scopeSection.createFilterListsDescription.filterListsLinkText",
        defaultMessage: "Filter Lists"
      }))
    }
  })));
}
function NoPermissionCallOut() {
  return /*#__PURE__*/_react.default.createElement(_eui.EuiCallOut, {
    title: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.ml.ruleEditor.scopeSection.noPermissionToViewFilterListsTitle",
      defaultMessage: "You do not have permission to view filter lists"
    }),
    iconType: "gear"
  });
}
function ScopeSection({
  isEnabled,
  onEnabledChange,
  partitioningFieldNames,
  filterListIds,
  scope,
  updateScope
}) {
  const canGetFilters = (0, _check_capabilities.checkPermission)('canGetFilters');
  if (partitioningFieldNames === null || partitioningFieldNames.length === 0) {
    return null;
  }
  let content;
  if (filterListIds.length > 0) {
    content = partitioningFieldNames.map((fieldName, index) => {
      let filterValues;
      if (scope !== undefined && scope[fieldName] !== undefined) {
        filterValues = scope[fieldName];
      } else {
        filterValues = (0, _utils.getScopeFieldDefaults)(filterListIds);
      }
      return /*#__PURE__*/_react.default.createElement(_scope_expression.ScopeExpression, {
        key: index,
        fieldName: fieldName,
        filterId: filterValues.filter_id,
        filterType: filterValues.filter_type,
        enabled: filterValues.enabled,
        filterListIds: filterListIds,
        updateScope: updateScope
      });
    });
  } else if (canGetFilters === false) {
    content = /*#__PURE__*/_react.default.createElement(NoPermissionCallOut, null);
  } else {
    content = /*#__PURE__*/_react.default.createElement(NoFilterListsCallOut, null);
  }
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiTitle, null, /*#__PURE__*/_react.default.createElement("h2", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.ml.ruleEditor.scopeSection.scopeTitle",
    defaultMessage: "Scope"
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiCheckbox, {
    id: "enable_scope_checkbox",
    label: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.ml.ruleEditor.scopeSection.addFilterListLabel",
      defaultMessage: "Add a filter list to limit where the job rule applies."
    }),
    checked: isEnabled,
    onChange: onEnabledChange
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  }), isEnabled && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, content), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "xxl"
  }));
}
ScopeSection.propTypes = {
  isEnabled: _propTypes.default.bool.isRequired,
  onEnabledChange: _propTypes.default.func.isRequired,
  partitioningFieldNames: _propTypes.default.array.isRequired,
  filterListIds: _propTypes.default.array.isRequired,
  scope: _propTypes.default.object,
  updateScope: _propTypes.default.func.isRequired
};