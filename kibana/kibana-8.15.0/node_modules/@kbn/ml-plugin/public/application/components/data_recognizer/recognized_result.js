"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RecognizedResult = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _eui = require("@elastic/eui");
var _link_card = require("../link_card");
var _kibana = require("../../contexts/kibana");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const RecognizedResult = ({
  config,
  indexPattern,
  savedSearch
}) => {
  const {
    services: {
      http: {
        basePath
      }
    }
  } = (0, _kibana.useMlKibana)();
  const id = savedSearch === null ? `index=${indexPattern.id}` : `savedSearchId=${savedSearch.id}`;
  const href = `${basePath.get()}/app/ml/jobs/new_job/recognize?id=${config.id}&${id}`;
  let logo = null;
  // if a logo is available, use that, otherwise display the id
  // the logo should be a base64 encoded image or an eui icon
  if (config.logo && config.logo.icon) {
    logo = /*#__PURE__*/_react.default.createElement(_eui.EuiIcon, {
      type: config.logo.icon,
      size: "xl"
    });
  } else if (config.logo && config.logo.src) {
    logo = /*#__PURE__*/_react.default.createElement("img", {
      alt: "",
      src: config.logo.src
    });
  } else {
    logo = /*#__PURE__*/_react.default.createElement("h3", {
      className: "euiTitle euiTitle--small"
    }, config.id);
  }
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_link_card.LinkCard, {
    "data-test-subj": `mlRecognizerCard ${config.id}`,
    href: href,
    title: config.title,
    description: config.description,
    icon: logo
  }));
};
exports.RecognizedResult = RecognizedResult;
RecognizedResult.propTypes = {
  config: _propTypes.default.object,
  indexPattern: _propTypes.default.object,
  savedSearch: _propTypes.default.object
};