"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimeSeriesExplorerControls = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _i18nReact = require("@kbn/i18n-react");
var _public = require("@kbn/presentation-util-plugin/public");
var _mlDatePicker = require("@kbn/ml-date-picker");
var _kibana = require("../../../contexts/kibana");
var _use_cases_modal = require("../../../contexts/kibana/use_cases_modal");
var _get_default_panel_title = require("../../../../embeddables/single_metric_viewer/get_default_panel_title");
var _constants = require("../../../../embeddables/constants");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const SavedObjectSaveModalDashboard = (0, _public.withSuspense)(_public.LazySavedObjectSaveModalDashboard);
function getDefaultEmbeddablePanelConfig(jobId, queryString) {
  return {
    title: (0, _get_default_panel_title.getDefaultSingleMetricViewerPanelTitle)(jobId).concat(queryString ? `- ${queryString}` : ''),
    id: (0, _eui.htmlIdGenerator)()()
  };
}
const TimeSeriesExplorerControls = ({
  selectedDetectorIndex,
  selectedEntities,
  selectedJobId,
  showAnnotations,
  showAnnotationsCheckbox,
  showForecast,
  showForecastCheckbox,
  showModelBounds,
  showModelBoundsCheckbox,
  onShowAnnotationsChange,
  onShowModelBoundsChange,
  onShowForecastChange
}) => {
  var _capabilities$dashboa, _capabilities$dashboa2;
  const [isMenuOpen, setIsMenuOpen] = (0, _react.useState)(false);
  const [createInDashboard, setCreateInDashboard] = (0, _react.useState)(false);
  const {
    services: {
      application: {
        capabilities
      },
      cases,
      embeddable
    }
  } = (0, _kibana.useMlKibana)();
  const globalTimeRange = (0, _mlDatePicker.useTimeRangeUpdates)(true);
  const canEditDashboards = (_capabilities$dashboa = (_capabilities$dashboa2 = capabilities.dashboard) === null || _capabilities$dashboa2 === void 0 ? void 0 : _capabilities$dashboa2.createNew) !== null && _capabilities$dashboa !== void 0 ? _capabilities$dashboa : false;
  const closePopoverOnAction = (0, _react.useCallback)(actionCallback => {
    return () => {
      setIsMenuOpen(false);
      actionCallback();
    };
  }, [setIsMenuOpen]);
  const openCasesModalCallback = (0, _use_cases_modal.useCasesModal)(_constants.ANOMALY_SINGLE_METRIC_VIEWER_EMBEDDABLE_TYPE);
  const menuPanels = [{
    id: 0,
    items: [{
      name: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
        id: "xpack.ml.timeseriesExplorer.addToDashboardLabel",
        defaultMessage: "Add to dashboard"
      }),
      onClick: closePopoverOnAction(() => {
        setCreateInDashboard(true);
      })
    }]
  }];
  const casesPrivileges = cases === null || cases === void 0 ? void 0 : cases.helpers.canUseCases();
  if (!!(casesPrivileges !== null && casesPrivileges !== void 0 && casesPrivileges.create) || !!(casesPrivileges !== null && casesPrivileges !== void 0 && casesPrivileges.update)) {
    menuPanels[0].items.push({
      name: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
        id: "xpack.ml.timeseriesExplorer.addToCaseLabel",
        defaultMessage: "Add to case"
      }),
      onClick: closePopoverOnAction(() => {
        openCasesModalCallback({
          jobIds: [selectedJobId],
          selectedDetectorIndex,
          selectedEntities,
          timeRange: globalTimeRange
        });
      })
    });
  }
  const onSaveCallback = (0, _react.useCallback)(({
    dashboardId,
    newTitle,
    newDescription
  }) => {
    const stateTransfer = embeddable.getStateTransfer();
    const config = getDefaultEmbeddablePanelConfig(selectedJobId);
    const embeddableInput = {
      id: config.id,
      title: newTitle,
      description: newDescription,
      jobIds: [selectedJobId],
      selectedDetectorIndex,
      selectedEntities
    };
    const state = {
      input: embeddableInput,
      type: _constants.ANOMALY_SINGLE_METRIC_VIEWER_EMBEDDABLE_TYPE
    };
    const path = dashboardId === 'new' ? '#/create' : `#/view/${dashboardId}`;
    stateTransfer.navigateToWithEmbeddablePackage('dashboards', {
      state,
      path
    });
  }, [embeddable, selectedJobId, selectedDetectorIndex, selectedEntities]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    style: {
      float: 'right'
    },
    alignItems: "center"
  }, showModelBoundsCheckbox && /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiCheckbox, {
    id: "toggleModelBoundsCheckbox",
    label: _i18n.i18n.translate('xpack.ml.timeSeriesExplorer.showModelBoundsLabel', {
      defaultMessage: 'show model bounds'
    }),
    checked: showModelBounds,
    onChange: onShowModelBoundsChange
  })), showAnnotationsCheckbox && /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiCheckbox, {
    id: "toggleAnnotationsCheckbox",
    label: _i18n.i18n.translate('xpack.ml.timeSeriesExplorer.annotationsLabel', {
      defaultMessage: 'annotations'
    }),
    checked: showAnnotations,
    onChange: onShowAnnotationsChange
  })), showForecastCheckbox && /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiCheckbox, {
    id: "toggleShowForecastCheckbox",
    label: /*#__PURE__*/_react.default.createElement("span", {
      "data-test-subj": 'mlForecastCheckbox'
    }, _i18n.i18n.translate('xpack.ml.timeSeriesExplorer.showForecastLabel', {
      defaultMessage: 'show forecast'
    })),
    checked: showForecast,
    onChange: onShowForecastChange
  })), canEditDashboards ? /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false,
    css: {
      marginLeft: 'auto !important',
      alignSelf: 'baseline'
    }
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiPopover, {
    button: /*#__PURE__*/_react.default.createElement(_eui.EuiButtonIcon, {
      size: "s",
      "aria-label": _i18n.i18n.translate('xpack.ml.explorer.swimlaneActions', {
        defaultMessage: 'Actions'
      }),
      color: "text",
      iconType: "boxesHorizontal",
      onClick: setIsMenuOpen.bind(null, !isMenuOpen),
      "data-test-subj": "mlAnomalyTimelinePanelMenu"
    }),
    isOpen: isMenuOpen,
    closePopover: setIsMenuOpen.bind(null, false),
    panelPaddingSize: "none",
    anchorPosition: "downLeft"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiContextMenu, {
    initialPanelId: 0,
    panels: menuPanels
  }))) : null), createInDashboard ? /*#__PURE__*/_react.default.createElement(SavedObjectSaveModalDashboard, {
    canSaveByReference: false,
    objectType: _i18n.i18n.translate('xpack.ml.cases.singleMetricViewer.displayName', {
      defaultMessage: 'Single Metric Viewer'
    }),
    documentInfo: {
      title: (0, _get_default_panel_title.getDefaultSingleMetricViewerPanelTitle)(selectedJobId)
    },
    onClose: () => setCreateInDashboard(false),
    onSave: onSaveCallback
  }) : null);
};
exports.TimeSeriesExplorerControls = TimeSeriesExplorerControls;