"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RunControls = RunControls;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _eui = require("@elastic/eui");
var _states = require("../../../../../common/constants/states");
var _forecasting_modal = require("./forecasting_modal");
var _forecast_progress = require("./forecast_progress");
var _check_ml_nodes = require("../../../ml_nodes_check/check_ml_nodes");
var _check_capabilities = require("../../../capabilities/check_capabilities");
var _i18n = require("@kbn/i18n");
var _i18nReact = require("@kbn/i18n-react");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * Renders the controls used for running a forecast.
 */

function getRunInputDisabledState(job, isForecastRequested) {
  // Disable the 'run forecast' text field and button if any of the conditions are met:
  // - No ML nodes are available
  // - No canForecastJob permission
  // - Job is not in an OPENED or CLOSED state
  // - A new forecast has been requested
  if ((0, _check_ml_nodes.currentMlNodesAvailable)() === false) {
    return {
      isDisabled: true,
      isDisabledToolTipText: _i18n.i18n.translate('xpack.ml.timeSeriesExplorer.runControls.noMLNodesAvailableTooltip', {
        defaultMessage: 'There are no ML nodes available.'
      })
    };
  }

  // TODO - use simpler interface to permission checking once it has been refactored.
  if ((0, _check_capabilities.checkPermission)('canForecastJob') === false) {
    return {
      isDisabled: true,
      isDisabledToolTipText: (0, _check_capabilities.createPermissionFailureMessage)('canForecastJob')
    };
  }
  if (job.state !== _states.JOB_STATE.OPENED && job.state !== _states.JOB_STATE.CLOSED) {
    return {
      isDisabled: true,
      isDisabledToolTipText: _i18n.i18n.translate('xpack.ml.timeSeriesExplorer.runControls.forecastsCanNotBeRunOnJobsTooltip', {
        defaultMessage: 'Forecasts cannot be run on {jobState} jobs',
        values: {
          jobState: job.state
        }
      })
    };
  }
  return {
    isDisabled: isForecastRequested
  };
}
function RunControls({
  job,
  newForecastDuration,
  isNewForecastDurationValid,
  newForecastDurationErrors,
  onNewForecastDurationChange,
  runForecast,
  isForecastRequested,
  forecastProgress,
  jobOpeningState,
  jobClosingState
}) {
  const disabledState = getRunInputDisabledState(job, isForecastRequested);
  const durationInput = /*#__PURE__*/_react.default.createElement(_eui.EuiFieldText, {
    name: "forecastDuration",
    value: newForecastDuration,
    disabled: disabledState.isDisabled,
    isInvalid: !isNewForecastDurationValid,
    onChange: onNewForecastDurationChange,
    fullWidth: true
  });
  const runButton = /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
    onClick: runForecast,
    isDisabled: disabledState.isDisabled || !isNewForecastDurationValid,
    "data-test-subj": "mlModalForecastButtonRun"
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.ml.timeSeriesExplorer.runControls.runButtonLabel",
    defaultMessage: "Run"
  }));
  return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_eui.EuiText, null, /*#__PURE__*/_react.default.createElement("h3", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.ml.timeSeriesExplorer.runControls.runNewForecastTitle",
    defaultMessage: "Run a new forecast"
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiForm, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    label: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.ml.timeSeriesExplorer.runControls.durationLabel",
      defaultMessage: "Duration"
    }),
    fullWidth: true,
    isInvalid: !isNewForecastDurationValid,
    error: newForecastDurationErrors,
    helpText: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.ml.timeSeriesExplorer.runControls.forecastMaximumLengthHelpText",
      defaultMessage: "Length of forecast, up to a maximum of {maximumForecastDurationDays} days. Use s for seconds, m for minutes, h for hours, d for days, w for weeks.",
      values: {
        maximumForecastDurationDays: _forecasting_modal.FORECAST_DURATION_MAX_DAYS
      }
    })
  }, disabledState.isDisabledToolTipText === undefined ? durationInput : /*#__PURE__*/_react.default.createElement(_eui.EuiToolTip, {
    position: "right",
    content: disabledState.isDisabledToolTipText
  }, durationInput))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    hasEmptyLabelSpace: true
  }, disabledState.isDisabledToolTipText === undefined ? runButton : /*#__PURE__*/_react.default.createElement(_eui.EuiToolTip, {
    position: "left",
    content: disabledState.isDisabledToolTipText
  }, runButton))))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  }), isForecastRequested === true && /*#__PURE__*/_react.default.createElement(_forecast_progress.ForecastProgress, {
    forecastProgress: forecastProgress,
    jobOpeningState: jobOpeningState,
    jobClosingState: jobClosingState
  }));
}
RunControls.propType = {
  job: _propTypes.default.object,
  newForecastDuration: _propTypes.default.string,
  isNewForecastDurationValid: _propTypes.default.bool,
  newForecastDurationErrors: _propTypes.default.array,
  onNewForecastDurationChange: _propTypes.default.func.isRequired,
  runForecast: _propTypes.default.func.isRequired,
  isForecastRequested: _propTypes.default.bool,
  forecastProgress: _propTypes.default.number,
  jobOpeningState: _propTypes.default.number,
  jobClosingState: _propTypes.default.number
};