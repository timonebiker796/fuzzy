"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dataFrameAnalyticsApiProvider = void 0;
exports.useDataFrameAnalyticsApiService = useDataFrameAnalyticsApiService;
var _react = require("react");
var _app = require("../../../../common/constants/app");
var _kibana = require("../../contexts/kibana");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const dataFrameAnalyticsApiProvider = httpService => ({
  getDataFrameAnalytics(analyticsId, excludeGenerated, size) {
    const analyticsIdString = analyticsId !== undefined ? `/${analyticsId}` : '';
    return httpService.http({
      path: `${_app.ML_INTERNAL_BASE_PATH}/data_frame/analytics${analyticsIdString}`,
      method: 'GET',
      ...(excludeGenerated ? {
        query: {
          excludeGenerated,
          size
        }
      } : {}),
      version: '1'
    });
  },
  getDataFrameAnalyticsStats(analyticsId) {
    if (analyticsId !== undefined) {
      return httpService.http({
        path: `${_app.ML_INTERNAL_BASE_PATH}/data_frame/analytics/${analyticsId}/_stats`,
        method: 'GET',
        version: '1'
      });
    }
    return httpService.http({
      path: `${_app.ML_INTERNAL_BASE_PATH}/data_frame/analytics/_stats`,
      method: 'GET',
      version: '1'
    });
  },
  createDataFrameAnalytics(analyticsId, analyticsConfig, createDataView = false, timeFieldName) {
    const body = JSON.stringify(analyticsConfig);
    return httpService.http({
      path: `${_app.ML_INTERNAL_BASE_PATH}/data_frame/analytics/${analyticsId}`,
      method: 'PUT',
      query: {
        createDataView,
        timeFieldName
      },
      body,
      version: '1'
    });
  },
  updateDataFrameAnalytics(analyticsId, updateConfig) {
    const body = JSON.stringify(updateConfig);
    return httpService.http({
      path: `${_app.ML_INTERNAL_BASE_PATH}/data_frame/analytics/${analyticsId}/_update`,
      method: 'POST',
      body,
      version: '1'
    });
  },
  getDataFrameAnalyticsMap(id, treatAsRoot, type) {
    const idString = id !== undefined ? `/${id}` : '';
    return httpService.http({
      path: `${_app.ML_INTERNAL_BASE_PATH}/data_frame/analytics/map${idString}`,
      method: 'GET',
      query: {
        treatAsRoot,
        type
      },
      version: '1'
    });
  },
  jobsExist(analyticsIds, allSpaces = false) {
    const body = JSON.stringify({
      analyticsIds,
      allSpaces
    });
    return httpService.http({
      path: `${_app.ML_INTERNAL_BASE_PATH}/data_frame/analytics/jobs_exist`,
      method: 'POST',
      body,
      version: '1'
    });
  },
  evaluateDataFrameAnalytics(evaluateConfig) {
    const body = JSON.stringify(evaluateConfig);
    return httpService.http({
      path: `${_app.ML_INTERNAL_BASE_PATH}/data_frame/_evaluate`,
      method: 'POST',
      body,
      version: '1'
    });
  },
  explainDataFrameAnalytics(jobConfig) {
    const body = JSON.stringify(jobConfig);
    return httpService.http({
      path: `${_app.ML_INTERNAL_BASE_PATH}/data_frame/analytics/_explain`,
      method: 'POST',
      body,
      version: '1'
    });
  },
  deleteDataFrameAnalytics(analyticsId, force = true) {
    return httpService.http({
      path: `${_app.ML_INTERNAL_BASE_PATH}/data_frame/analytics/${analyticsId}`,
      query: {
        force
      },
      method: 'DELETE',
      version: '1'
    });
  },
  deleteDataFrameAnalyticsAndDestIndex(analyticsId, deleteDestIndex, deleteDestDataView, force = true) {
    return httpService.http({
      path: `${_app.ML_INTERNAL_BASE_PATH}/data_frame/analytics/${analyticsId}`,
      query: {
        deleteDestIndex,
        deleteDestDataView,
        force
      },
      method: 'DELETE',
      version: '1'
    });
  },
  startDataFrameAnalytics(analyticsId) {
    return httpService.http({
      path: `${_app.ML_INTERNAL_BASE_PATH}/data_frame/analytics/${analyticsId}/_start`,
      method: 'POST',
      version: '1'
    });
  },
  stopDataFrameAnalytics(analyticsId, force = false) {
    return httpService.http({
      path: `${_app.ML_INTERNAL_BASE_PATH}/data_frame/analytics/${analyticsId}/_stop`,
      method: 'POST',
      query: {
        force
      },
      version: '1'
    });
  },
  getAnalyticsAuditMessages(analyticsId) {
    return httpService.http({
      path: `${_app.ML_INTERNAL_BASE_PATH}/data_frame/analytics/${analyticsId}/messages`,
      method: 'GET',
      version: '1'
    });
  },
  validateDataFrameAnalytics(analyticsConfig) {
    const body = JSON.stringify(analyticsConfig);
    return httpService.http({
      path: `${_app.ML_INTERNAL_BASE_PATH}/data_frame/analytics/validate`,
      method: 'POST',
      body,
      version: '1'
    });
  },
  newJobCapsAnalytics(indexPatternTitle, isRollup = false) {
    const query = isRollup === true ? {
      rollup: true
    } : {};
    return httpService.http({
      path: `${_app.ML_INTERNAL_BASE_PATH}/data_frame/analytics/new_job_caps/${indexPatternTitle}`,
      method: 'GET',
      query,
      version: '1'
    });
  }
});
exports.dataFrameAnalyticsApiProvider = dataFrameAnalyticsApiProvider;
/**
 * Hooks for accessing {@link DataFrameAnalyticsApiService} in React components.
 */
function useDataFrameAnalyticsApiService() {
  const {
    services: {
      mlServices: {
        httpService
      }
    }
  } = (0, _kibana.useMlKibana)();
  return (0, _react.useMemo)(() => dataFrameAnalyticsApiProvider(httpService), [httpService]);
}