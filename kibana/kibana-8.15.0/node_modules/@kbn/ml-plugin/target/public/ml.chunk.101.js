/*! Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one or more contributor license agreements.
 * Licensed under the Elastic License 2.0; you may not use this file except in compliance with the Elastic License 2.0. */
(window.ml_bundle_jsonpfunction=window.ml_bundle_jsonpfunction||[]).push([[101],{856:function(e,t,n){"use strict";n.r(t),n.d(t,"getChoroplethAnomaliesLayer",(function(){return d})),n.d(t,"AnomaliesMap",(function(){return y}));var o=n(2),i=n.n(o),a=n(15),l=n(5),s=n(25),r=n(78),u=n(67),c=n(10),m=n(6);function p(e,t){const n={};for(let o=0;o<e.length;o++){const i=e[o],a=i.entityValue;i.jobId===t&&(void 0===n[a]?n[a]={count:1,entityValue:a,max_severity:Math.floor(i.severity)}:(n[a].count+=1,i.severity>n[a].max_severity&&(n[a].max_severity=Math.floor(i.severity))))}return Object.values(n)}const d=(e,{layerId:t,field:n,jobId:o})=>({id:Object(s.htmlIdGenerator)()(),label:l.i18n.translate("xpack.ml.explorer.anomaliesMap.anomaliesCount",{defaultMessage:"Anomalies count: {jobId}",values:{jobId:o}}),joins:[{leftField:n,right:{id:"anomaly_count",type:r.SOURCE_TYPES.TABLE_SOURCE,__rows:p(e,o),__columns:[{name:"entityValue",type:"string"},{name:"count",type:"number"},{name:"max_severity",type:"number"}],term:"entityValue"}}],sourceDescriptor:{type:"EMS_FILE",id:t},style:{type:"VECTOR",properties:{icon:{type:r.STYLE_TYPE.STATIC,options:{value:"marker"}},fillColor:{type:r.STYLE_TYPE.DYNAMIC,options:{color:"Blue to Red",colorCategory:"palette_0",fieldMetaOptions:{isEnabled:!0,sigma:3},type:r.COLOR_MAP_TYPE.ORDINAL,field:{name:"count",origin:r.FIELD_ORIGIN.JOIN},useCustomColorRamp:!1}},lineColor:{type:r.STYLE_TYPE.DYNAMIC,options:{fieldMetaOptions:{isEnabled:!0}}},lineWidth:{type:r.STYLE_TYPE.STATIC,options:{size:1}}},isTimeAware:!0},visible:!1,type:r.LAYER_TYPE.GEOJSON_VECTOR}),y=({anomalies:e,jobIds:t})=>{const[n,l]=Object(o.useState)(),{services:{maps:p}}=Object(c.d)(),y=Object(o.useCallback)((async()=>{if(!p)return;const n=await Promise.all(t.map((async t=>{const n=new Set;let o;for(let i=0;i<e.length&&(t===e[i].jobId&&""!==e[i].entityValue&&void 0!==e[i].entityValue&&""!==e[i].entityName&&void 0!==e[i].entityName&&(n.add(e[i].entityValue),o||(o=e[i].entityName)),3!==n.size);i++);const i=await p.suggestEMSTermJoinConfig({sampleValues:Array.from(n),sampleValuesColumnName:o||""});return i?{jobId:t,...i}:i})));l(n.filter(u.a))}),[...t]);Object(o.useEffect)((function(){e&&e.length>0&&y()}),[...t]);const j=Object(o.useMemo)((()=>null!=n&&n.length?n.map((t=>d(e,t)),[]):[]),[n,e]),b=j.filter((e=>{var t,n;return(Array.isArray(e.joins)?null===(t=e.joins[0])||void 0===t||null===(n=t.right)||void 0===n?void 0:n.__rows:[]).length}));return b.length>0&&(b[0].visible=!0),0===(null==n?void 0:n.length)||0===b.length?null:Object(m.jsx)(i.a.Fragment,null,Object(m.jsx)(s.EuiPanel,{"data-test-subj":"mlAnomaliesMapContainer",hasShadow:!1,hasBorder:!0},Object(m.jsx)(s.EuiAccordion,{id:"mlAnomalyExplorerAnomaliesMapAccordionId",initialIsOpen:!0,buttonContent:Object(m.jsx)(s.EuiTitle,{size:"xs"},Object(m.jsx)("h2",null,Object(m.jsx)(a.FormattedMessage,{id:"xpack.ml.explorer.mapTitle",defaultMessage:"Anomaly count by location {infoTooltip}",values:{infoTooltip:Object(m.jsx)(s.EuiIconTip,{content:"Map colors indicate the number of anomalies in each area.",position:"top",type:"iInCircle"})}})))},Object(m.jsx)("div",{"data-test-subj":"mlAnomalyExplorerAnomaliesMap",style:{width:"100%",height:300}},p&&Object(m.jsx)(p.Map,{layerList:j,hideFilterActions:!0,mapSettings:{initialLocation:r.INITIAL_LOCATION.AUTO_FIT_TO_BOUNDS,autoFitToDataBounds:!0}})))),Object(m.jsx)(s.EuiSpacer,{size:"m"}))}}}]);