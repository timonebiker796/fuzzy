/*! Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one or more contributor license agreements.
 * Licensed under the Elastic License 2.0; you may not use this file except in compliance with the Elastic License 2.0. */
(window.ml_bundle_jsonpfunction=window.ml_bundle_jsonpfunction||[]).push([[70],{120:function(e,t,n){e.exports=n(57)(4)},347:function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"c",(function(){return d})),n.d(t,"b",(function(){return c}));var l=n(8),a=n(67),o=n(123),s=n(40);const r=60;function i(e){return function(e,t){var n,l;const s=Math.ceil(null!==(n=Object(o.v)(e.map((e=>e.analysis_config.bucket_span))))&&void 0!==n?n:0),i=Math.ceil(null!==(l=Object(o.v)(t.map((e=>e.query_delay)).filter(a.a)))&&void 0!==l?l:0),d=Math.max(2*r,2*s)+i+1;return`${Math.ceil(d/60)}m`}(e,e.map((e=>e.datafeed_config)))}function d(e){const t=Object(s.a)(e.analysis_config.bucket_span);if(null===t)throw new Error("Unable to resolve a bucket span length");return Math.ceil(r/t.asSeconds())}const u=["datafeed","mml","delayedData","errorMessages"];function c(e){var t,n,a,o,s,r,i,d,c,m,b,y,p,g;const v={datafeed:{enabled:null===(t=null==e||null===(n=e.datafeed)||void 0===n?void 0:n.enabled)||void 0===t||t},mml:{enabled:null===(a=null==e||null===(o=e.mml)||void 0===o?void 0:o.enabled)||void 0===a||a},delayedData:{enabled:null===(s=null==e||null===(r=e.delayedData)||void 0===r?void 0:r.enabled)||void 0===s||s,docsCount:null!==(i=null==e||null===(d=e.delayedData)||void 0===d?void 0:d.docsCount)&&void 0!==i?i:1,timeInterval:null!==(c=null==e||null===(m=e.delayedData)||void 0===m?void 0:m.timeInterval)&&void 0!==c?c:null},behindRealtime:{enabled:null===(b=null==e||null===(y=e.behindRealtime)||void 0===y?void 0:y.enabled)||void 0===b||b},errorMessages:{enabled:null===(p=null==e||null===(g=e.errorMessages)||void 0===g?void 0:g.enabled)||void 0===p||p}};return Object(l.pick)(v,u)}},348:function(e,t,n){"use strict";n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return s}));var l=n(577),a=n(32);const o=Object(a.g)(),s=Object(l.a)({min:1,integerOnly:!0})},577:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var l=n(8),a=n(37);function o(e){if(void 0!==(null==e?void 0:e.min)&&void 0!==e.max&&e.min>e.max)throw new Error("Invalid validator conditions");return Object(l.memoize)((t=>{const n={};return void 0!==(null==e?void 0:e.min)&&t<e.min&&(n.min=!0),void 0!==(null==e?void 0:e.max)&&t>e.max&&(n.max=!0),null!=e&&e.integerOnly&&!Number.isInteger(t)&&(n.integerOnly=!0),Object(a.a)(n)?n:null}))}},879:function(e,t,n){"use strict";n.r(t),n.d(t,"registerMlAlerts",(function(){return y})),n.d(t,"registerNavigation",(function(){return p}));var l=n(13),a=n(0),o=n(55),s=n(2),r=n(5),i=n(347),d=n(348),u=n(120),c=n.n(u),m=n(59),b=n(6);function y(e,t,a,o){!function(e,t,l){const a=Object(s.lazy)((()=>n.e(53).then(n.bind(null,875))));e.ruleTypeRegistry.register({id:m.ML_ALERT_TYPES.ANOMALY_DETECTION,description:r.i18n.translate("xpack.ml.alertTypes.anomalyDetection.description",{defaultMessage:"Alert when anomaly detection jobs results match the condition."}),iconClass:"bell",documentationUrl:e=>e.links.ml.alertingRules,ruleParamsExpression:e=>Object(b.jsx)(a,c()({},e,{getStartServices:t,mlCapabilities:l})),validate:e=>{var t,n,l,a,o,s,i,u;const c={errors:{jobSelection:new Array,severity:new Array,resultType:new Array,topNBuckets:new Array,lookbackInterval:new Array}};return null!==(t=e.jobSelection)&&void 0!==t&&null!==(n=t.jobIds)&&void 0!==n&&n.length||null!==(l=e.jobSelection)&&void 0!==l&&null!==(a=l.groupIds)&&void 0!==a&&a.length||c.errors.jobSelection.push(r.i18n.translate("xpack.ml.alertTypes.anomalyDetection.jobSelection.errorMessage",{defaultMessage:"Job selection is required"})),(Array.isArray(null===(o=e.jobSelection)||void 0===o?void 0:o.groupIds)&&(null===(s=e.jobSelection)||void 0===s?void 0:s.groupIds.length)>0||Array.isArray(null===(i=e.jobSelection)||void 0===i?void 0:i.jobIds)&&(null===(u=e.jobSelection)||void 0===u?void 0:u.jobIds.length)>1)&&c.errors.jobSelection.push(r.i18n.translate("xpack.ml.alertTypes.anomalyDetection.singleJobSelection.errorMessage",{defaultMessage:"Only one job per rule is allowed"})),void 0===e.severity&&c.errors.severity.push(r.i18n.translate("xpack.ml.alertTypes.anomalyDetection.severity.errorMessage",{defaultMessage:"Anomaly severity is required"})),void 0===e.resultType&&c.errors.resultType.push(r.i18n.translate("xpack.ml.alertTypes.anomalyDetection.resultType.errorMessage",{defaultMessage:"Result type is required"})),e.lookbackInterval&&Object(d.a)(e.lookbackInterval)&&c.errors.lookbackInterval.push(r.i18n.translate("xpack.ml.alertTypes.anomalyDetection.lookbackInterval.errorMessage",{defaultMessage:"Lookback interval is invalid"})),"number"==typeof e.topNBuckets&&Object(d.b)(e.topNBuckets)&&c.errors.topNBuckets.push(r.i18n.translate("xpack.ml.alertTypes.anomalyDetection.topNBuckets.errorMessage",{defaultMessage:"Number of buckets is invalid"})),c},requiresAppContext:!1,defaultActionMessage:r.i18n.translate("xpack.ml.alertTypes.anomalyDetection.defaultActionMessage",{defaultMessage:"['{{rule.name}}'] Elastic Stack Machine Learning Alert:\n- Job IDs: '{{context.jobIds}}'\n- Time: '{{context.timestampIso8601}}'\n- Anomaly score: '{{context.score}}'\n\n'{{context.message}}'\n\n'{{#context.topInfluencers.length}}'\n  Top influencers:\n  '{{#context.topInfluencers}}'\n    '{{influencer_field_name}}' = '{{influencer_field_value}}' ['{{score}}']\n  '{{/context.topInfluencers}}'\n'{{/context.topInfluencers.length}}'\n\n'{{#context.topRecords.length}}'\n  Top records:\n  '{{#context.topRecords}}'\n    '{{function}}'('{{field_name}}') '{{by_field_value}}''{{over_field_value}}''{{partition_field_value}}' ['{{score}}']. Typical: '{{typical}}', Actual: '{{actual}}'\n  '{{/context.topRecords}}'\n'{{/context.topRecords.length}}'\n\n'{{! Replace kibanaBaseUrl if not configured in Kibana }}'\n[Open in Anomaly Explorer]('{{{kibanaBaseUrl}}}{{{context.anomalyExplorerUrl}}'})\n"})})}(e,t,a),function(e,t){e.ruleTypeRegistry.register({id:l.g.AD_JOBS_HEALTH,description:r.i18n.translate("xpack.ml.alertTypes.jobsHealthAlertingRule.description",{defaultMessage:"Alert when anomaly detection jobs experience operational issues. Enable suitable alerts for critically important jobs."}),iconClass:"bell",documentationUrl:e=>e.links.ml.alertingRules,ruleParamsExpression:Object(s.lazy)((()=>n.e(64).then(n.bind(null,887)))),validate:e=>{var t,n,l,a;const o={errors:{includeJobs:new Array,testsConfig:new Array,delayedData:new Array}};null!==(t=e.includeJobs)&&void 0!==t&&null!==(n=t.jobIds)&&void 0!==n&&n.length||null!==(l=e.includeJobs)&&void 0!==l&&null!==(a=l.groupIds)&&void 0!==a&&a.length||o.errors.includeJobs.push(r.i18n.translate("xpack.ml.alertTypes.jobsHealthAlertingRule.includeJobs.errorMessage",{defaultMessage:"Job selection is required"}));const s=Object(i.b)(e.testsConfig);return Object.values(s).every((e=>!1===(null==e?void 0:e.enabled)))&&o.errors.testsConfig.push(r.i18n.translate("xpack.ml.alertTypes.jobsHealthAlertingRule.testsConfig.errorMessage",{defaultMessage:"At least one health check must be enabled."})),s.delayedData.timeInterval&&Object(d.a)(s.delayedData.timeInterval)&&o.errors.delayedData.push(r.i18n.translate("xpack.ml.alertTypes.jobsHealthAlertingRule.testsConfig.delayedData.timeIntervalErrorMessage",{defaultMessage:"Invalid time interval"})),0===s.delayedData.docsCount&&o.errors.delayedData.push(r.i18n.translate("xpack.ml.alertTypes.jobsHealthAlertingRule.testsConfig.delayedData.docsCountErrorMessage",{defaultMessage:"Invalid number of documents"})),o},requiresAppContext:!1,defaultActionMessage:r.i18n.translate("xpack.ml.alertTypes.jobsHealthAlertingRule.defaultActionMessage",{defaultMessage:"['{{rule.name}}'] Anomaly detection jobs health check result:\n'{{context.message}}'\n'{{#context.results}}'\n  Job ID: '{{job_id}}'\n  '{{#datafeed_id}}'Datafeed ID: '{{datafeed_id}}'\n  '{{/datafeed_id}}{{#datafeed_state}}'Datafeed state: '{{datafeed_state}}'\n  '{{/datafeed_state}}{{#memory_status}}'Memory status: '{{memory_status}}'\n  '{{/memory_status}}{{#model_bytes}}'Model size: '{{model_bytes}}'\n  '{{/model_bytes}}{{#model_bytes_memory_limit}}'Model memory limit: '{{model_bytes_memory_limit}}'\n  '{{/model_bytes_memory_limit}}{{#peak_model_bytes}}'Peak model bytes: '{{peak_model_bytes}}'\n  '{{/peak_model_bytes}}{{#model_bytes_exceeded}}'Model exceeded: '{{model_bytes_exceeded}}'\n  '{{/model_bytes_exceeded}}{{#log_time}}'Memory logging time: '{{log_time}}'\n  '{{/log_time}}{{#failed_category_count}}'Failed category count: '{{failed_category_count}}'\n  '{{/failed_category_count}}{{#annotation}}'Annotation: '{{annotation}}'\n  '{{/annotation}}{{#missed_docs_count}}'Number of missed documents: '{{missed_docs_count}}'\n  '{{/missed_docs_count}}{{#end_timestamp}}'Latest finalized bucket with missing docs: '{{end_timestamp}}'\n  '{{/end_timestamp}}{{#errors}}'Error message: '{{message}} {{/errors}}'\n'{{/context.results}}'\n"})})}(e),o&&p(o),Promise.all([t(),n.e(63).then(n.bind(null,849))]).then((([[t,n],{registerAlertsTableConfiguration:l}])=>{l(e,n.fieldFormats)}))}function p(e){e.registerNavigation(a.g,l.g.ANOMALY_DETECTION,(e=>{var t,n;const l=e.params,s=[...new Set([...null!==(t=l.jobSelection.jobIds)&&void 0!==t?t:[],...null!==(n=l.jobSelection.groupIds)&&void 0!==n?n:[]])];return Object(o.d)(a.b,{jobIds:s})}))}}}]);