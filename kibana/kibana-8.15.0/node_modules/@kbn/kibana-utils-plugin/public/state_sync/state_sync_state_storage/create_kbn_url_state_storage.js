"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createKbnUrlStateStorage = void 0;
var _rxjs = require("rxjs");
var _lodash = require("lodash");
var _url = require("../../state_management/url");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

/**
 * KbnUrlStateStorage is a state storage for {@link syncState} utility which:
 *
 * 1. Keeps state in sync with the URL.
 * 2. Serializes data and stores it in the URL in one of the supported formats:
 *   * Rison encoded.
 *   * Hashed URL: In URL we store only the hash from the serialized state, but the state itself is stored in sessionStorage. See Kibana's `state:storeInSessionStorage` advanced option for more context.
 * 3. Takes care of listening to the URL updates and notifies state about the updates.
 * 4. Takes care of batching URL updates to prevent redundant browser history records.
 *
 * {@link https://github.com/elastic/kibana/blob/main/src/plugins/kibana_utils/docs/state_sync/storages/kbn_url_storage.md | Refer to this guide for more info}
 * @public
 */

/**
 * Creates {@link IKbnUrlStateStorage} state storage
 * @returns - {@link IKbnUrlStateStorage}
 * @public
 */
const createKbnUrlStateStorage = ({
  useHash = false,
  useHashQuery = true,
  history,
  onGetError,
  onSetError
} = {
  useHash: false,
  useHashQuery: true
}) => {
  const url = (0, _url.createKbnUrlControls)(history);
  const onGetErrorThrottled = onGetError ? (0, _lodash.throttle)(e => onGetError(e), 100) : undefined;
  return {
    set: (key, state, {
      replace = false
    } = {
      replace: false
    }) => {
      // syncState() utils doesn't wait for this promise
      return url.updateAsync(currentUrl => {
        try {
          return (0, _url.setStateToKbnUrl)(key, state, {
            useHash,
            storeInHashQuery: useHashQuery
          }, currentUrl);
        } catch (error) {
          if (onSetError) onSetError(error);
        }
      }, replace);
    },
    get: key => {
      // if there is a pending url update, then state will be extracted from that pending url,
      // otherwise current url will be used to retrieve state from
      try {
        return (0, _url.getStateFromKbnUrl)(key, url.getPendingUrl(), {
          getFromHashQuery: useHashQuery
        });
      } catch (e) {
        if (onGetErrorThrottled) onGetErrorThrottled(e);
        return null;
      }
    },
    change$: key => new _rxjs.Observable(observer => {
      const unlisten = url.listen(() => {
        observer.next();
      });
      return () => {
        unlisten();
      };
    }).pipe((0, _rxjs.map)(() => (0, _url.getStateFromKbnUrl)(key, history === null || history === void 0 ? void 0 : history.createHref(history.location), {
      getFromHashQuery: useHashQuery
    })), (0, _rxjs.catchError)(error => {
      if (onGetErrorThrottled) onGetErrorThrottled(error);
      return (0, _rxjs.of)(null);
    }), (0, _rxjs.share)()),
    cancel() {
      url.cancel();
    },
    kbnUrlControls: url
  };
};
exports.createKbnUrlStateStorage = createKbnUrlStateStorage;