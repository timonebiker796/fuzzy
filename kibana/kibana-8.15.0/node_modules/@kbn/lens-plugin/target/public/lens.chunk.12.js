/*! Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one or more contributor license agreements.
 * Licensed under the Elastic License 2.0; you may not use this file except in compliance with the Elastic License 2.0. */
(window.lens_bundle_jsonpfunction=window.lens_bundle_jsonpfunction||[]).push([[12],{100:function(n,a,e){"use strict";e.d(a,"a",(function(){return u}));var t=e(98);function u(n,a){const e=null==n?void 0:n.columns.find((n=>n.id===a||Object(t.a)(n.id)===a));return"number"===(null==e?void 0:e.meta.type)}},127:function(n,a,e){"use strict";e.d(a,"c",(function(){return s})),e.d(a,"b",(function(){return o})),e.d(a,"d",(function(){return r})),e.d(a,"a",(function(){return c}));var t=e(0),u=e(98),l=e(100);function s(n,a,e){var t;const u=Object(l.a)(e,n)&&(null==a?void 0:a.summaryRow)||"none";return{summaryRow:u,summaryLabel:null!==(t=null==a?void 0:a.summaryLabel)&&void 0!==t?t:o(u)}}function o(n){return r().find((({value:a})=>n===a)).label}function r(){return[{value:"none",label:t.i18n.translate("xpack.lens.table.summaryRow.none",{defaultMessage:"None"}),"data-test-subj":"lns-datatable-summary-none"},{value:"count",label:t.i18n.translate("xpack.lens.table.summaryRow.count",{defaultMessage:"Value count"}),"data-test-subj":"lns-datatable-summary-count"},{value:"sum",label:t.i18n.translate("xpack.lens.table.summaryRow.sum",{defaultMessage:"Sum"}),"data-test-subj":"lns-datatable-summary-sum"},{value:"avg",label:t.i18n.translate("xpack.lens.table.summaryRow.average",{defaultMessage:"Average"}),"data-test-subj":"lns-datatable-summary-avg"},{value:"min",label:t.i18n.translate("xpack.lens.table.summaryRow.minimum",{defaultMessage:"Minimum"}),"data-test-subj":"lns-datatable-summary-min"},{value:"max",label:t.i18n.translate("xpack.lens.table.summaryRow.maximum",{defaultMessage:"Maximum"}),"data-test-subj":"lns-datatable-summary-max"}]}function c(n,a,e,t){const l=function(n,a,e){const t=e.filter((n=>null!=n[a])).flatMap((n=>n[a])),u=t.length,l=t.reduce(((n,a)=>n+a),0);switch(n){case"sum":return l;case"count":return u;case"avg":return l/u;case"min":return Math.min(...t);case"max":return Math.max(...t);default:throw Error("No summary function found")}}(n.summaryRow,n.columnId,a.rows);return"count"===n.summaryRow?t.convert(l):e[Object(u.a)(n.columnId)].convert(l)}},670:function(n,a,e){"use strict";e.r(a),e.d(a,"datatableFn",(function(){return r}));var t=e(44),u=e(0),l=e(64),s=e(98),o=e(127);const r=n=>async(a,e,r)=>{var c,m;if(null!=r&&null!==(c=r.inspectorAdapters)&&void 0!==c&&c.tables){r.inspectorAdapters.tables.reset(),r.inspectorAdapters.tables.allowCsvExport=!0;const n=Object(l.prepareLogTable)(a,[[e.columns.map((n=>n.columnId)),u.i18n.translate("xpack.lens.datatable.column.help",{defaultMessage:"Datatable column"})]],!0);r.inspectorAdapters.tables.logDatatable("default",n)}let i;const d={},f=await n(r);a.columns.forEach((n=>{var a;d[n.id]=f(null===(a=n.meta)||void 0===a?void 0:a.params)})),e.columns.some((n=>n.isTransposed))&&(i=Object(t.cloneDeep)(a),Object(s.b)(e,a,d));const b=e.columns.filter((n=>n.summaryRow));for(const n of b)n.summaryRowValue=Object(o.a)(n,a,d,f({id:"number"}));return{type:"render",as:"lens_datatable_renderer",value:{data:a,untransposedData:i,args:{...e,title:null!==(m=r.variables.embeddableTitle)&&void 0!==m?m:e.title}}}}},98:function(n,a,e){"use strict";e.d(a,"a",(function(){return s})),e.d(a,"b",(function(){return o}));const t="---",u="â€º";function l(n,a){return`${n}${t}${a}`}function s(n){if(n.includes(t)){const a=n.split(t);return a[a.length-1]}return n}function o(n,a,e){n.columns.filter((n=>n.isTransposed)).reverse().forEach((({columnId:t})=>{const s=a.columns.findIndex((n=>n.id===t)),o=a.columns[s],r=e[o.id],{uniqueValues:c,uniqueRawValues:m}=function(n,a,e){const t=new Map;n.rows.forEach((n=>{const u=n[e];t.set(a.convert(n[e]),u)}));return{uniqueValues:[...t.keys()],uniqueRawValues:[...t.values()]}}(a,r,t),i=n.columns.filter((n=>n.transposable)),d=n.columns.filter((n=>!n.transposable&&n.columnId!==t));a.columns.splice(s,1),function(n,a,e,t,s,o,r){!function(n,a,e){var t;n.columns=[...a],null===(t=e[0])||void 0===t||t.forEach(((a,t)=>{e.forEach((a=>{n.columns.push(a[t])}))}))}(n,a,e.map((n=>{const a=t.columns.find((a=>a.id===n.columnId)),e=s.map((e=>({...a,id:l(e,n.columnId),name:`${e} ${u} ${a.name}`})));return t.columns.splice(t.columns.findIndex((a=>a.id===n.columnId)),1,...e),s.map(((e,t)=>({...n,columnId:l(e,n.columnId),originalColumnId:n.originalColumnId||n.columnId,originalName:n.originalName||a.name,bucketValues:[...n.bucketValues||[],{originalBucketColumn:r,value:o[t]}]})))})))}(n,d,i,a,c,m,o),function(n,a,e,t,u,s){const o=function(n,a,e){const t={};return n.rows.forEach((n=>{const u=a.map((a=>e[a.columnId].convert(n[a.columnId]))).join(",");t[u]||(t[u]=[]),t[u].push(n)})),t}(n,a,e);n.rows=function(n,a,e,t,u){return Object.values(n).map((n=>{const s={};return a.forEach((a=>{s[a.columnId]=n[0][a.columnId]})),n.forEach((n=>{const a=e.convert(n[t]);u.forEach((e=>{s[l(a,e.columnId)]=n[e.columnId]}))})),s}))}(o,a,t,u,s)}(a,d,e,r,t,i)}))}}}]);