"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EmbeddableFactory = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _i18n = require("@kbn/i18n");
var _public = require("@kbn/embeddable-plugin/public");
var _constants = require("../../common/constants");
var _embeddable_factory = require("../../common/embeddable_factory");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } /*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
class EmbeddableFactory {
  constructor(getStartServices) {
    (0, _defineProperty2.default)(this, "type", _constants.DOC_TYPE);
    (0, _defineProperty2.default)(this, "savedObjectMetaData", {
      name: _i18n.i18n.translate('xpack.lens.lensSavedObjectLabel', {
        defaultMessage: 'Lens Visualization'
      }),
      type: _constants.DOC_TYPE,
      getIconForSavedObject: () => 'lensApp'
    });
    (0, _defineProperty2.default)(this, "isEditable", async () => {
      var _capabilities$dashboa;
      const {
        capabilities
      } = await this.getStartServices();
      return Boolean(capabilities.visualize.save || ((_capabilities$dashboa = capabilities.dashboard) === null || _capabilities$dashboa === void 0 ? void 0 : _capabilities$dashboa.showWriteControls));
    });
    (0, _defineProperty2.default)(this, "createFromSavedObject", async (savedObjectId, input, parent) => {
      if (!input.savedObjectId) {
        input.savedObjectId = savedObjectId;
      }
      return this.create(input, parent);
    });
    (0, _defineProperty2.default)(this, "extract", _embeddable_factory.extract);
    (0, _defineProperty2.default)(this, "inject", _embeddable_factory.inject);
    this.getStartServices = getStartServices;
  }
  canCreateNew() {
    return false;
  }
  getDisplayName() {
    return _i18n.i18n.translate('xpack.lens.embeddableDisplayName', {
      defaultMessage: 'Lens'
    });
  }
  async create(input, parent) {
    try {
      var _capabilities$dashboa2;
      const {
        data,
        timefilter,
        expressionRenderer,
        documentToExpression,
        injectFilterReferences,
        visualizationMap,
        datasourceMap,
        uiActions,
        coreHttp,
        coreStart,
        attributeService,
        dataViews,
        capabilities,
        usageCollection,
        inspector,
        spaces,
        uiSettings
      } = await this.getStartServices();
      const {
        Embeddable
      } = await Promise.resolve().then(() => _interopRequireWildcard(require('../async_services')));
      return new Embeddable({
        attributeService,
        data,
        dataViews,
        timefilter,
        inspector,
        expressionRenderer,
        basePath: coreHttp.basePath,
        getTrigger: uiActions === null || uiActions === void 0 ? void 0 : uiActions.getTrigger,
        getTriggerCompatibleActions: uiActions === null || uiActions === void 0 ? void 0 : uiActions.getTriggerCompatibleActions,
        documentToExpression,
        injectFilterReferences,
        visualizationMap,
        datasourceMap,
        capabilities: {
          canSaveDashboards: Boolean((_capabilities$dashboa2 = capabilities.dashboard) === null || _capabilities$dashboa2 === void 0 ? void 0 : _capabilities$dashboa2.showWriteControls),
          canSaveVisualizations: Boolean(capabilities.visualize.save),
          canOpenVisualizations: Boolean(capabilities.visualize.show),
          navLinks: capabilities.navLinks,
          discover: capabilities.discover
        },
        coreStart,
        usageCollection,
        spaces,
        uiSettings
      }, input, parent);
    } catch (e) {
      return new _public.ErrorEmbeddable(e, input, parent);
    }
  }
}
exports.EmbeddableFactory = EmbeddableFactory;