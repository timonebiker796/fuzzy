"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PalettePicker = PalettePicker;
var _react = _interopRequireDefault(require("react"));
var _coloring = require("@kbn/coloring");
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function PalettePicker({
  palettes,
  activePalette,
  setPalette
}) {
  const paletteName = (0, _coloring.getActivePaletteName)(activePalette === null || activePalette === void 0 ? void 0 : activePalette.name);
  const palettesToShow = palettes.getAll().filter(({
    internal
  }) => !internal).map(({
    id,
    title,
    getCategoricalColors
  }) => {
    return {
      value: id,
      title,
      type: 'fixed',
      palette: getCategoricalColors(10, id === paletteName ? activePalette === null || activePalette === void 0 ? void 0 : activePalette.params : undefined)
    };
  });
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    fullWidth: true,
    label: _i18n.i18n.translate('xpack.lens.palettePicker.label', {
      defaultMessage: 'Palette'
    })
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiColorPalettePicker, {
    fullWidth: true,
    "data-test-subj": "lns-palettePicker",
    palettes: palettesToShow,
    onChange: newPalette => {
      setPalette({
        type: 'palette',
        name: newPalette
      });
    },
    valueOfSelected: paletteName,
    selectionDisplay: 'palette'
  }));
}