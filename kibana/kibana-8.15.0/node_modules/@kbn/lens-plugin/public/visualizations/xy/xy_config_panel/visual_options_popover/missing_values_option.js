"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MissingValuesOptions = void 0;
var _react = _interopRequireDefault(require("react"));
var _i18n = require("@kbn/i18n");
var _eui = require("@elastic/eui");
var _fitting_function_definitions = require("./fitting_function_definitions");
var _end_value_definitions = require("./end_value_definitions");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const MissingValuesOptions = ({
  onFittingFnChange,
  fittingFunction,
  emphasizeFitting,
  onEmphasizeFittingChange,
  onEndValueChange,
  endValue,
  isFittingEnabled = true
}) => {
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, isFittingEnabled && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    display: "columnCompressed",
    label: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, _i18n.i18n.translate('xpack.lens.xyChart.missingValuesLabel', {
      defaultMessage: 'Missing values'
    }), ' ', /*#__PURE__*/_react.default.createElement(_eui.EuiIconTip, {
      color: "subdued",
      content: _i18n.i18n.translate('xpack.lens.xyChart.missingValuesLabelHelpText', {
        defaultMessage: `By default, area and line charts hide the gaps in the data. To fill the gap, make a selection.`
      }),
      iconProps: {
        className: 'eui-alignTop'
      },
      position: "top",
      size: "s",
      type: "questionInCircle"
    }))
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiSuperSelect, {
    "data-test-subj": "lnsMissingValuesSelect",
    compressed: true,
    options: _fitting_function_definitions.fittingFunctionDefinitions.map(({
      id,
      title,
      description
    }) => {
      return {
        value: id,
        dropdownDisplay: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("strong", null, title), /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
          size: "xs",
          color: "subdued"
        }, /*#__PURE__*/_react.default.createElement("p", null, description))),
        inputDisplay: title
      };
    }),
    valueOfSelected: fittingFunction || 'None',
    onChange: value => onFittingFnChange(value),
    itemLayoutAlign: "top",
    hasDividers: true
  })), fittingFunction && fittingFunction !== 'None' && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    display: "columnCompressed",
    label: _i18n.i18n.translate('xpack.lens.xyChart.endValuesLabel', {
      defaultMessage: 'End values'
    })
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiSuperSelect, {
    "data-test-subj": "lnsEndValuesSelect",
    compressed: true,
    options: _end_value_definitions.endValueDefinitions.map(({
      id,
      title,
      description
    }) => {
      return {
        value: id,
        dropdownDisplay: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("strong", null, title), /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
          size: "xs",
          color: "subdued"
        }, /*#__PURE__*/_react.default.createElement("p", null, description))),
        inputDisplay: title
      };
    }),
    valueOfSelected: endValue || 'None',
    onChange: value => onEndValueChange(value),
    itemLayoutAlign: "top",
    hasDividers: true
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    label: _i18n.i18n.translate('xpack.lens.xyChart.missingValuesStyle', {
      defaultMessage: 'Show as dotted line'
    }),
    display: "columnCompressedSwitch"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiSwitch, {
    showLabel: false,
    label: _i18n.i18n.translate('xpack.lens.xyChart.missingValuesStyle', {
      defaultMessage: 'Show as dotted line'
    }),
    checked: !emphasizeFitting,
    onChange: () => {
      onEmphasizeFittingChange(!emphasizeFitting);
    },
    compressed: true
  })))));
};
exports.MissingValuesOptions = MissingValuesOptions;