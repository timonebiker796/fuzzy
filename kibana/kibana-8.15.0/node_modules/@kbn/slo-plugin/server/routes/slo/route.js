"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSloRouteRepository = void 0;
var _elasticsearch = require("@elastic/elasticsearch");
var _boom = require("@hapi/boom");
var _sloSchema = require("@kbn/slo-schema");
var _get_overview = require("@kbn/slo-schema/src/rest_specs/routes/get_overview");
var _get_slos_overview = require("../../services/get_slos_overview");
var _services = require("../../services");
var _find_slo_definitions = require("../../services/find_slo_definitions");
var _get_burn_rates = require("../../services/get_burn_rates");
var _get_diagnosis = require("../../services/get_diagnosis");
var _get_preview_data = require("../../services/get_preview_data");
var _get_slo_instances = require("../../services/get_slo_instances");
var _get_slo_suggestions = require("../../services/get_slo_suggestions");
var _historical_summary_client = require("../../services/historical_summary_client");
var _manage_slo = require("../../services/manage_slo");
var _reset_slo = require("../../services/reset_slo");
var _slo_definition_client = require("../../services/slo_definition_client");
var _slo_settings = require("../../services/slo_settings");
var _summary_search_client = require("../../services/summary_search_client");
var _summary_transform_generator = require("../../services/summary_transform_generator/summary_transform_generator");
var _transform_generators = require("../../services/transform_generators");
var _create_slo_server_route = require("../create_slo_server_route");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const transformGenerators = {
  'sli.apm.transactionDuration': new _transform_generators.ApmTransactionDurationTransformGenerator(),
  'sli.apm.transactionErrorRate': new _transform_generators.ApmTransactionErrorRateTransformGenerator(),
  'sli.synthetics.availability': new _transform_generators.SyntheticsAvailabilityTransformGenerator(),
  'sli.kql.custom': new _transform_generators.KQLCustomTransformGenerator(),
  'sli.metric.custom': new _transform_generators.MetricCustomTransformGenerator(),
  'sli.histogram.custom': new _transform_generators.HistogramTransformGenerator(),
  'sli.metric.timeslice': new _transform_generators.TimesliceMetricTransformGenerator()
};
const assertPlatinumLicense = async context => {
  const licensing = await context.licensing;
  const hasCorrectLicense = licensing.license.hasAtLeast('platinum');
  if (!hasCorrectLicense) {
    throw (0, _boom.forbidden)('Platinum license or higher is needed to make use of this feature.');
  }
};
const createSLORoute = (0, _create_slo_server_route.createSloServerRoute)({
  endpoint: 'POST /api/observability/slos 2023-10-31',
  options: {
    tags: ['access:slo_write'],
    access: 'public'
  },
  params: _sloSchema.createSLOParamsSchema,
  handler: async ({
    context,
    params,
    logger,
    dependencies,
    request
  }) => {
    var _await$spaces$spacesS, _await$spaces$spacesS2, _spaces$spacesService;
    await assertPlatinumLicense(context);
    const spaces = await dependencies.getSpacesStart();
    const dataViews = await dependencies.getDataViewsStart();
    const spaceId = (_await$spaces$spacesS = (_await$spaces$spacesS2 = await (spaces === null || spaces === void 0 ? void 0 : (_spaces$spacesService = spaces.spacesService) === null || _spaces$spacesService === void 0 ? void 0 : _spaces$spacesService.getActiveSpace(request))) === null || _await$spaces$spacesS2 === void 0 ? void 0 : _await$spaces$spacesS2.id) !== null && _await$spaces$spacesS !== void 0 ? _await$spaces$spacesS : 'default';
    const esClient = (await context.core).elasticsearch.client.asCurrentUser;
    const basePath = dependencies.pluginsSetup.core.http.basePath;
    const soClient = (await context.core).savedObjects.client;
    const repository = new _services.KibanaSavedObjectsSLORepository(soClient, logger);
    const dataViewsService = await dataViews.dataViewsServiceFactory(soClient, esClient);
    const transformManager = new _services.DefaultTransformManager(transformGenerators, esClient, logger, spaceId, dataViewsService);
    const summaryTransformManager = new _services.DefaultSummaryTransformManager(new _summary_transform_generator.DefaultSummaryTransformGenerator(), esClient, logger);
    const createSLO = new _services.CreateSLO(esClient, repository, transformManager, summaryTransformManager, logger, spaceId, basePath);
    const response = await createSLO.execute(params.body);
    return response;
  }
});
const inspectSLORoute = (0, _create_slo_server_route.createSloServerRoute)({
  endpoint: 'POST /internal/api/observability/slos/_inspect 2023-10-31',
  options: {
    tags: ['access:slo_write'],
    access: 'public'
  },
  params: _sloSchema.createSLOParamsSchema,
  handler: async ({
    context,
    params,
    logger,
    dependencies,
    request
  }) => {
    var _await$spaces$spacesS3, _await$spaces$spacesS4, _spaces$spacesService2;
    await assertPlatinumLicense(context);
    const spaces = await dependencies.getSpacesStart();
    const dataViews = await dependencies.getDataViewsStart();
    const spaceId = (_await$spaces$spacesS3 = (_await$spaces$spacesS4 = await (spaces === null || spaces === void 0 ? void 0 : (_spaces$spacesService2 = spaces.spacesService) === null || _spaces$spacesService2 === void 0 ? void 0 : _spaces$spacesService2.getActiveSpace(request))) === null || _await$spaces$spacesS4 === void 0 ? void 0 : _await$spaces$spacesS4.id) !== null && _await$spaces$spacesS3 !== void 0 ? _await$spaces$spacesS3 : 'default';
    const basePath = dependencies.pluginsSetup.core.http.basePath;
    const esClient = (await context.core).elasticsearch.client.asCurrentUser;
    const soClient = (await context.core).savedObjects.client;
    const repository = new _services.KibanaSavedObjectsSLORepository(soClient, logger);
    const dataViewsService = await dataViews.dataViewsServiceFactory(soClient, esClient);
    const transformManager = new _services.DefaultTransformManager(transformGenerators, esClient, logger, spaceId, dataViewsService);
    const summaryTransformManager = new _services.DefaultSummaryTransformManager(new _summary_transform_generator.DefaultSummaryTransformGenerator(), esClient, logger);
    const createSLO = new _services.CreateSLO(esClient, repository, transformManager, summaryTransformManager, logger, spaceId, basePath);
    return createSLO.inspect(params.body);
  }
});
const updateSLORoute = (0, _create_slo_server_route.createSloServerRoute)({
  endpoint: 'PUT /api/observability/slos/{id} 2023-10-31',
  options: {
    tags: ['access:slo_write'],
    access: 'public'
  },
  params: _sloSchema.updateSLOParamsSchema,
  handler: async ({
    context,
    request,
    params,
    logger,
    dependencies
  }) => {
    var _await$spaces$spacesS5, _await$spaces$spacesS6, _spaces$spacesService3;
    await assertPlatinumLicense(context);
    const spaces = await dependencies.getSpacesStart();
    const spaceId = (_await$spaces$spacesS5 = (_await$spaces$spacesS6 = await (spaces === null || spaces === void 0 ? void 0 : (_spaces$spacesService3 = spaces.spacesService) === null || _spaces$spacesService3 === void 0 ? void 0 : _spaces$spacesService3.getActiveSpace(request))) === null || _await$spaces$spacesS6 === void 0 ? void 0 : _await$spaces$spacesS6.id) !== null && _await$spaces$spacesS5 !== void 0 ? _await$spaces$spacesS5 : 'default';
    const dataViews = await dependencies.getDataViewsStart();
    const basePath = dependencies.pluginsSetup.core.http.basePath;
    const esClient = (await context.core).elasticsearch.client.asCurrentUser;
    const soClient = (await context.core).savedObjects.client;
    const dataViewsService = await dataViews.dataViewsServiceFactory(soClient, esClient);
    const repository = new _services.KibanaSavedObjectsSLORepository(soClient, logger);
    const transformManager = new _services.DefaultTransformManager(transformGenerators, esClient, logger, spaceId, dataViewsService);
    const summaryTransformManager = new _services.DefaultSummaryTransformManager(new _summary_transform_generator.DefaultSummaryTransformGenerator(), esClient, logger);
    const updateSLO = new _services.UpdateSLO(repository, transformManager, summaryTransformManager, esClient, logger, spaceId, basePath);
    const response = await updateSLO.execute(params.path.id, params.body);
    return response;
  }
});
const deleteSLORoute = (0, _create_slo_server_route.createSloServerRoute)({
  endpoint: 'DELETE /api/observability/slos/{id} 2023-10-31',
  options: {
    tags: ['access:slo_write'],
    access: 'public'
  },
  params: _sloSchema.deleteSLOParamsSchema,
  handler: async ({
    request,
    context,
    params,
    logger,
    dependencies
  }) => {
    var _await$spaces$spacesS7, _await$spaces$spacesS8, _spaces$spacesService4;
    await assertPlatinumLicense(context);
    const spaces = await dependencies.getSpacesStart();
    const spaceId = (_await$spaces$spacesS7 = (_await$spaces$spacesS8 = await (spaces === null || spaces === void 0 ? void 0 : (_spaces$spacesService4 = spaces.spacesService) === null || _spaces$spacesService4 === void 0 ? void 0 : _spaces$spacesService4.getActiveSpace(request))) === null || _await$spaces$spacesS8 === void 0 ? void 0 : _await$spaces$spacesS8.id) !== null && _await$spaces$spacesS7 !== void 0 ? _await$spaces$spacesS7 : 'default';
    const dataViews = await dependencies.getDataViewsStart();
    const esClient = (await context.core).elasticsearch.client.asCurrentUser;
    const soClient = (await context.core).savedObjects.client;
    const rulesClient = await dependencies.getRulesClientWithRequest(request);
    const dataViewsService = await dataViews.dataViewsServiceFactory(soClient, esClient);
    const repository = new _services.KibanaSavedObjectsSLORepository(soClient, logger);
    const transformManager = new _services.DefaultTransformManager(transformGenerators, esClient, logger, spaceId, dataViewsService);
    const summaryTransformManager = new _services.DefaultSummaryTransformManager(new _summary_transform_generator.DefaultSummaryTransformGenerator(), esClient, logger);
    const deleteSLO = new _services.DeleteSLO(repository, transformManager, summaryTransformManager, esClient, rulesClient);
    await deleteSLO.execute(params.path.id);
  }
});
const getSLORoute = (0, _create_slo_server_route.createSloServerRoute)({
  endpoint: 'GET /api/observability/slos/{id} 2023-10-31',
  options: {
    tags: ['access:slo_read'],
    access: 'public'
  },
  params: _sloSchema.getSLOParamsSchema,
  handler: async ({
    request,
    context,
    params,
    logger,
    dependencies
  }) => {
    var _await$spaces$spacesS9, _await$spaces$spacesS10, _spaces$spacesService5;
    await assertPlatinumLicense(context);
    const spaces = await dependencies.getSpacesStart();
    const spaceId = (_await$spaces$spacesS9 = (_await$spaces$spacesS10 = await (spaces === null || spaces === void 0 ? void 0 : (_spaces$spacesService5 = spaces.spacesService) === null || _spaces$spacesService5 === void 0 ? void 0 : _spaces$spacesService5.getActiveSpace(request))) === null || _await$spaces$spacesS10 === void 0 ? void 0 : _await$spaces$spacesS10.id) !== null && _await$spaces$spacesS9 !== void 0 ? _await$spaces$spacesS9 : 'default';
    const soClient = (await context.core).savedObjects.client;
    const esClient = (await context.core).elasticsearch.client.asCurrentUser;
    const repository = new _services.KibanaSavedObjectsSLORepository(soClient, logger);
    const burnRatesClient = new _services.DefaultBurnRatesClient(esClient);
    const summaryClient = new _services.DefaultSummaryClient(esClient, burnRatesClient);
    const defintionClient = new _slo_definition_client.SloDefinitionClient(repository, esClient, logger);
    const getSLO = new _services.GetSLO(defintionClient, summaryClient);
    return await getSLO.execute(params.path.id, spaceId, params.query);
  }
});
const enableSLORoute = (0, _create_slo_server_route.createSloServerRoute)({
  endpoint: 'POST /api/observability/slos/{id}/enable 2023-10-31',
  options: {
    tags: ['access:slo_write'],
    access: 'public'
  },
  params: _sloSchema.manageSLOParamsSchema,
  handler: async ({
    request,
    context,
    params,
    logger,
    dependencies
  }) => {
    var _await$spaces$spacesS11, _await$spaces$spacesS12, _spaces$spacesService6;
    await assertPlatinumLicense(context);
    const spaces = await dependencies.getSpacesStart();
    const spaceId = (_await$spaces$spacesS11 = (_await$spaces$spacesS12 = await (spaces === null || spaces === void 0 ? void 0 : (_spaces$spacesService6 = spaces.spacesService) === null || _spaces$spacesService6 === void 0 ? void 0 : _spaces$spacesService6.getActiveSpace(request))) === null || _await$spaces$spacesS12 === void 0 ? void 0 : _await$spaces$spacesS12.id) !== null && _await$spaces$spacesS11 !== void 0 ? _await$spaces$spacesS11 : 'default';
    const dataViews = await dependencies.getDataViewsStart();
    const soClient = (await context.core).savedObjects.client;
    const esClient = (await context.core).elasticsearch.client.asCurrentUser;
    const dataViewsService = await dataViews.dataViewsServiceFactory(soClient, esClient);
    const repository = new _services.KibanaSavedObjectsSLORepository(soClient, logger);
    const transformManager = new _services.DefaultTransformManager(transformGenerators, esClient, logger, spaceId, dataViewsService);
    const summaryTransformManager = new _services.DefaultSummaryTransformManager(new _summary_transform_generator.DefaultSummaryTransformGenerator(), esClient, logger);
    const manageSLO = new _manage_slo.ManageSLO(repository, transformManager, summaryTransformManager);
    const response = await manageSLO.enable(params.path.id);
    return response;
  }
});
const disableSLORoute = (0, _create_slo_server_route.createSloServerRoute)({
  endpoint: 'POST /api/observability/slos/{id}/disable 2023-10-31',
  options: {
    tags: ['access:slo_write'],
    access: 'public'
  },
  params: _sloSchema.manageSLOParamsSchema,
  handler: async ({
    request,
    context,
    params,
    logger,
    dependencies
  }) => {
    var _await$spaces$spacesS13, _await$spaces$spacesS14, _spaces$spacesService7;
    await assertPlatinumLicense(context);
    const spaces = await dependencies.getSpacesStart();
    const spaceId = (_await$spaces$spacesS13 = (_await$spaces$spacesS14 = await (spaces === null || spaces === void 0 ? void 0 : (_spaces$spacesService7 = spaces.spacesService) === null || _spaces$spacesService7 === void 0 ? void 0 : _spaces$spacesService7.getActiveSpace(request))) === null || _await$spaces$spacesS14 === void 0 ? void 0 : _await$spaces$spacesS14.id) !== null && _await$spaces$spacesS13 !== void 0 ? _await$spaces$spacesS13 : 'default';
    const dataViews = await dependencies.getDataViewsStart();
    const soClient = (await context.core).savedObjects.client;
    const esClient = (await context.core).elasticsearch.client.asCurrentUser;
    const dataViewsService = await dataViews.dataViewsServiceFactory(soClient, esClient);
    const repository = new _services.KibanaSavedObjectsSLORepository(soClient, logger);
    const transformManager = new _services.DefaultTransformManager(transformGenerators, esClient, logger, spaceId, dataViewsService);
    const summaryTransformManager = new _services.DefaultSummaryTransformManager(new _summary_transform_generator.DefaultSummaryTransformGenerator(), esClient, logger);
    const manageSLO = new _manage_slo.ManageSLO(repository, transformManager, summaryTransformManager);
    const response = await manageSLO.disable(params.path.id);
    return response;
  }
});
const resetSLORoute = (0, _create_slo_server_route.createSloServerRoute)({
  endpoint: 'POST /api/observability/slos/{id}/_reset 2023-10-31',
  options: {
    tags: ['access:slo_write'],
    access: 'public'
  },
  params: _sloSchema.resetSLOParamsSchema,
  handler: async ({
    context,
    request,
    params,
    logger,
    dependencies
  }) => {
    var _await$spaces$spacesS15, _await$spaces$spacesS16, _spaces$spacesService8;
    await assertPlatinumLicense(context);
    const spaces = await dependencies.getSpacesStart();
    const dataViews = await dependencies.getDataViewsStart();
    const spaceId = (_await$spaces$spacesS15 = (_await$spaces$spacesS16 = await (spaces === null || spaces === void 0 ? void 0 : (_spaces$spacesService8 = spaces.spacesService) === null || _spaces$spacesService8 === void 0 ? void 0 : _spaces$spacesService8.getActiveSpace(request))) === null || _await$spaces$spacesS16 === void 0 ? void 0 : _await$spaces$spacesS16.id) !== null && _await$spaces$spacesS15 !== void 0 ? _await$spaces$spacesS15 : 'default';
    const soClient = (await context.core).savedObjects.client;
    const esClient = (await context.core).elasticsearch.client.asCurrentUser;
    const basePath = dependencies.pluginsSetup.core.http.basePath;
    const dataViewsService = await dataViews.dataViewsServiceFactory(soClient, esClient);
    const repository = new _services.KibanaSavedObjectsSLORepository(soClient, logger);
    const transformManager = new _services.DefaultTransformManager(transformGenerators, esClient, logger, spaceId, dataViewsService);
    const summaryTransformManager = new _services.DefaultSummaryTransformManager(new _summary_transform_generator.DefaultSummaryTransformGenerator(), esClient, logger);
    const resetSLO = new _reset_slo.ResetSLO(esClient, repository, transformManager, summaryTransformManager, logger, spaceId, basePath);
    const response = await resetSLO.execute(params.path.id);
    return response;
  }
});
const findSLORoute = (0, _create_slo_server_route.createSloServerRoute)({
  endpoint: 'GET /api/observability/slos 2023-10-31',
  options: {
    tags: ['access:slo_read'],
    access: 'public'
  },
  params: _sloSchema.findSLOParamsSchema,
  handler: async ({
    context,
    request,
    params,
    logger,
    dependencies
  }) => {
    var _await$spaces$spacesS17, _await$spaces$spacesS18, _spaces$spacesService9, _params$query;
    await assertPlatinumLicense(context);
    const spaces = await dependencies.getSpacesStart();
    const spaceId = (_await$spaces$spacesS17 = (_await$spaces$spacesS18 = await (spaces === null || spaces === void 0 ? void 0 : (_spaces$spacesService9 = spaces.spacesService) === null || _spaces$spacesService9 === void 0 ? void 0 : _spaces$spacesService9.getActiveSpace(request))) === null || _await$spaces$spacesS18 === void 0 ? void 0 : _await$spaces$spacesS18.id) !== null && _await$spaces$spacesS17 !== void 0 ? _await$spaces$spacesS17 : 'default';
    const soClient = (await context.core).savedObjects.client;
    const esClient = (await context.core).elasticsearch.client.asCurrentUser;
    const repository = new _services.KibanaSavedObjectsSLORepository(soClient, logger);
    const summarySearchClient = new _summary_search_client.DefaultSummarySearchClient(esClient, soClient, logger, spaceId);
    const findSLO = new _services.FindSLO(repository, summarySearchClient);
    return await findSLO.execute((_params$query = params === null || params === void 0 ? void 0 : params.query) !== null && _params$query !== void 0 ? _params$query : {});
  }
});
const findSLOGroupsRoute = (0, _create_slo_server_route.createSloServerRoute)({
  endpoint: 'GET /internal/api/observability/slos/_groups',
  options: {
    tags: ['access:slo_read'],
    access: 'internal'
  },
  params: _sloSchema.findSLOGroupsParamsSchema,
  handler: async ({
    context,
    request,
    params,
    logger,
    dependencies
  }) => {
    var _await$spaces$spacesS19, _await$spaces$spacesS20, _params$query2;
    await assertPlatinumLicense(context);
    const spaces = await dependencies.getSpacesStart();
    const spaceId = (_await$spaces$spacesS19 = (_await$spaces$spacesS20 = await (spaces === null || spaces === void 0 ? void 0 : spaces.spacesService.getActiveSpace(request))) === null || _await$spaces$spacesS20 === void 0 ? void 0 : _await$spaces$spacesS20.id) !== null && _await$spaces$spacesS19 !== void 0 ? _await$spaces$spacesS19 : 'default';
    const soClient = (await context.core).savedObjects.client;
    const coreContext = context.core;
    const esClient = (await coreContext).elasticsearch.client.asCurrentUser;
    const findSLOGroups = new _services.FindSLOGroups(esClient, soClient, logger, spaceId);
    const response = await findSLOGroups.execute((_params$query2 = params === null || params === void 0 ? void 0 : params.query) !== null && _params$query2 !== void 0 ? _params$query2 : {});
    return response;
  }
});
const getSLOSuggestionsRoute = (0, _create_slo_server_route.createSloServerRoute)({
  endpoint: 'GET /internal/api/observability/slos/suggestions',
  options: {
    tags: ['access:slo_read'],
    access: 'internal'
  },
  handler: async ({
    context
  }) => {
    await assertPlatinumLicense(context);
    const soClient = (await context.core).savedObjects.client;
    const getSLOSuggestions = new _get_slo_suggestions.GetSLOSuggestions(soClient);
    return await getSLOSuggestions.execute();
  }
});
const deleteSloInstancesRoute = (0, _create_slo_server_route.createSloServerRoute)({
  endpoint: 'POST /api/observability/slos/_delete_instances 2023-10-31',
  options: {
    tags: ['access:slo_write']
  },
  params: _sloSchema.deleteSLOInstancesParamsSchema,
  handler: async ({
    context,
    params
  }) => {
    await assertPlatinumLicense(context);
    const esClient = (await context.core).elasticsearch.client.asCurrentUser;
    const deleteSloInstances = new _services.DeleteSLOInstances(esClient);
    await deleteSloInstances.execute(params.body);
  }
});
const findSloDefinitionsRoute = (0, _create_slo_server_route.createSloServerRoute)({
  endpoint: 'GET /api/observability/slos/_definitions 2023-10-31',
  options: {
    tags: ['access:slo_read']
  },
  params: _sloSchema.findSloDefinitionsParamsSchema,
  handler: async ({
    context,
    params,
    logger
  }) => {
    var _params$query3;
    await assertPlatinumLicense(context);
    const soClient = (await context.core).savedObjects.client;
    const repository = new _services.KibanaSavedObjectsSLORepository(soClient, logger);
    const findSloDefinitions = new _find_slo_definitions.FindSLODefinitions(repository);
    const response = await findSloDefinitions.execute((_params$query3 = params === null || params === void 0 ? void 0 : params.query) !== null && _params$query3 !== void 0 ? _params$query3 : {});
    return response;
  }
});
const fetchHistoricalSummary = (0, _create_slo_server_route.createSloServerRoute)({
  endpoint: 'POST /internal/observability/slos/_historical_summary',
  options: {
    tags: ['access:slo_read']
  },
  params: _sloSchema.fetchHistoricalSummaryParamsSchema,
  handler: async ({
    context,
    params,
    logger
  }) => {
    await assertPlatinumLicense(context);
    const esClient = (await context.core).elasticsearch.client.asCurrentUser;
    const historicalSummaryClient = new _historical_summary_client.DefaultHistoricalSummaryClient(esClient);
    const historicalSummary = await historicalSummaryClient.fetch(params.body);
    return _sloSchema.fetchHistoricalSummaryResponseSchema.encode(historicalSummary);
  }
});
const getSLOInstancesRoute = (0, _create_slo_server_route.createSloServerRoute)({
  endpoint: 'GET /internal/observability/slos/{id}/_instances',
  options: {
    tags: ['access:slo_read'],
    access: 'internal'
  },
  params: _sloSchema.getSLOInstancesParamsSchema,
  handler: async ({
    context,
    params,
    logger
  }) => {
    await assertPlatinumLicense(context);
    const soClient = (await context.core).savedObjects.client;
    const esClient = (await context.core).elasticsearch.client.asCurrentUser;
    const repository = new _services.KibanaSavedObjectsSLORepository(soClient, logger);
    const getSLOInstances = new _get_slo_instances.GetSLOInstances(repository, esClient);
    const response = await getSLOInstances.execute(params.path.id);
    return response;
  }
});
const getDiagnosisRoute = (0, _create_slo_server_route.createSloServerRoute)({
  endpoint: 'GET /internal/observability/slos/_diagnosis',
  options: {
    tags: [],
    access: 'internal'
  },
  params: undefined,
  handler: async ({
    context
  }) => {
    const esClient = (await context.core).elasticsearch.client.asCurrentUser;
    const licensing = await context.licensing;
    try {
      const response = await (0, _get_diagnosis.getGlobalDiagnosis)(esClient, licensing);
      return response;
    } catch (error) {
      if (error instanceof _elasticsearch.errors.ResponseError && error.statusCode === 403) {
        throw (0, _boom.forbidden)('Insufficient Elasticsearch cluster permissions to access feature.');
      }
      throw (0, _boom.failedDependency)(error);
    }
  }
});
const fetchSloHealthRoute = (0, _create_slo_server_route.createSloServerRoute)({
  endpoint: 'POST /internal/observability/slos/_health',
  options: {
    tags: ['access:slo_read'],
    access: 'internal'
  },
  params: _sloSchema.fetchSLOHealthParamsSchema,
  handler: async ({
    context,
    params,
    logger
  }) => {
    await assertPlatinumLicense(context);
    const soClient = (await context.core).savedObjects.client;
    const esClient = (await context.core).elasticsearch.client.asCurrentUser;
    const repository = new _services.KibanaSavedObjectsSLORepository(soClient, logger);
    const getSLOHealth = new _services.GetSLOHealth(esClient, repository);
    return await getSLOHealth.execute(params.body);
  }
});
const getSloBurnRates = (0, _create_slo_server_route.createSloServerRoute)({
  endpoint: 'POST /internal/observability/slos/{id}/_burn_rates',
  options: {
    tags: ['access:slo_read'],
    access: 'internal'
  },
  params: _sloSchema.getSLOBurnRatesParamsSchema,
  handler: async ({
    request,
    context,
    params,
    logger,
    dependencies
  }) => {
    var _await$spaces$spacesS21, _await$spaces$spacesS22;
    await assertPlatinumLicense(context);
    const spaces = await dependencies.getSpacesStart();
    const spaceId = (_await$spaces$spacesS21 = (_await$spaces$spacesS22 = await (spaces === null || spaces === void 0 ? void 0 : spaces.spacesService.getActiveSpace(request))) === null || _await$spaces$spacesS22 === void 0 ? void 0 : _await$spaces$spacesS22.id) !== null && _await$spaces$spacesS21 !== void 0 ? _await$spaces$spacesS21 : 'default';
    const esClient = (await context.core).elasticsearch.client.asCurrentUser;
    const soClient = (await context.core).savedObjects.client;
    const {
      instanceId,
      windows,
      remoteName
    } = params.body;
    return await (0, _get_burn_rates.getBurnRates)({
      instanceId,
      spaceId,
      windows,
      remoteName,
      sloId: params.path.id,
      services: {
        soClient,
        esClient,
        logger
      }
    });
  }
});
const getPreviewData = (0, _create_slo_server_route.createSloServerRoute)({
  endpoint: 'POST /internal/observability/slos/_preview',
  options: {
    tags: ['access:slo_read'],
    access: 'internal'
  },
  params: _sloSchema.getPreviewDataParamsSchema,
  handler: async ({
    request,
    context,
    params,
    dependencies
  }) => {
    var _await$spaces$spacesS23, _await$spaces$spacesS24, _spaces$spacesService10;
    await assertPlatinumLicense(context);
    const spaces = await dependencies.getSpacesStart();
    const spaceId = (_await$spaces$spacesS23 = (_await$spaces$spacesS24 = await (spaces === null || spaces === void 0 ? void 0 : (_spaces$spacesService10 = spaces.spacesService) === null || _spaces$spacesService10 === void 0 ? void 0 : _spaces$spacesService10.getActiveSpace(request))) === null || _await$spaces$spacesS24 === void 0 ? void 0 : _await$spaces$spacesS24.id) !== null && _await$spaces$spacesS23 !== void 0 ? _await$spaces$spacesS23 : 'default';
    const dataViews = await dependencies.getDataViewsStart();
    const esClient = (await context.core).elasticsearch.client.asCurrentUser;
    const soClient = (await context.core).savedObjects.client;
    const dataViewsService = await dataViews.dataViewsServiceFactory(soClient, esClient);
    const service = new _get_preview_data.GetPreviewData(esClient, spaceId, dataViewsService);
    return await service.execute(params.body);
  }
});
const getSloSettingsRoute = (0, _create_slo_server_route.createSloServerRoute)({
  endpoint: 'GET /internal/slo/settings',
  options: {
    tags: ['access:slo_read'],
    access: 'internal'
  },
  handler: async ({
    context
  }) => {
    await assertPlatinumLicense(context);
    const soClient = (await context.core).savedObjects.client;
    return await (0, _slo_settings.getSloSettings)(soClient);
  }
});
const putSloSettings = isServerless => (0, _create_slo_server_route.createSloServerRoute)({
  endpoint: 'PUT /internal/slo/settings',
  options: {
    tags: ['access:slo_write'],
    access: 'internal'
  },
  params: isServerless ? _sloSchema.putSLOServerlessSettingsParamsSchema : _sloSchema.putSLOSettingsParamsSchema,
  handler: async ({
    context,
    params
  }) => {
    await assertPlatinumLicense(context);
    const soClient = (await context.core).savedObjects.client;
    return await (0, _slo_settings.storeSloSettings)(soClient, params.body);
  }
});
const getSLOsOverview = (0, _create_slo_server_route.createSloServerRoute)({
  endpoint: 'GET /internal/observability/slos/overview',
  options: {
    tags: ['access:slo_read'],
    access: 'internal'
  },
  params: _get_overview.getOverviewParamsSchema,
  handler: async ({
    context,
    params,
    request,
    logger,
    dependencies
  }) => {
    var _await$spaces$spacesS25, _await$spaces$spacesS26, _spaces$spacesService11, _params$query4;
    await assertPlatinumLicense(context);
    const soClient = (await context.core).savedObjects.client;
    const esClient = (await context.core).elasticsearch.client.asCurrentUser;
    const racClient = await dependencies.getRacClientWithRequest(request);
    const spaces = await dependencies.getSpacesStart();
    const spaceId = (_await$spaces$spacesS25 = (_await$spaces$spacesS26 = await (spaces === null || spaces === void 0 ? void 0 : (_spaces$spacesService11 = spaces.spacesService) === null || _spaces$spacesService11 === void 0 ? void 0 : _spaces$spacesService11.getActiveSpace(request))) === null || _await$spaces$spacesS26 === void 0 ? void 0 : _await$spaces$spacesS26.id) !== null && _await$spaces$spacesS25 !== void 0 ? _await$spaces$spacesS25 : 'default';
    const rulesClient = await dependencies.getRulesClientWithRequest(request);
    const slosOverview = new _get_slos_overview.GetSLOsOverview(soClient, esClient, spaceId, logger, rulesClient, racClient);
    return await slosOverview.execute((_params$query4 = params === null || params === void 0 ? void 0 : params.query) !== null && _params$query4 !== void 0 ? _params$query4 : {});
  }
});
const getSloRouteRepository = isServerless => {
  return {
    ...fetchSloHealthRoute,
    ...getSloSettingsRoute,
    ...putSloSettings(isServerless),
    ...createSLORoute,
    ...inspectSLORoute,
    ...deleteSLORoute,
    ...deleteSloInstancesRoute,
    ...disableSLORoute,
    ...enableSLORoute,
    ...fetchHistoricalSummary,
    ...findSloDefinitionsRoute,
    ...findSLORoute,
    ...getSLORoute,
    ...updateSLORoute,
    ...getDiagnosisRoute,
    ...getSloBurnRates,
    ...getPreviewData,
    ...getSLOInstancesRoute,
    ...resetSLORoute,
    ...findSLOGroupsRoute,
    ...getSLOSuggestionsRoute,
    ...getSLOsOverview
  };
};
exports.getSloRouteRepository = getSloRouteRepository;