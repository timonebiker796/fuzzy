/*! Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one or more contributor license agreements.
 * Licensed under the Elastic License 2.0; you may not use this file except in compliance with the Elastic License 2.0. */
(window.slo_bundle_jsonpfunction=window.slo_bundle_jsonpfunction||[]).push([[28],{374:function(e,a,t){"use strict";t.r(a),t.d(a,"loadFieldStats",(function(){return _}));var s=t(10),o=t(52),n=t.n(o),i=t(356),l=t(125),r=t(138);function u({dataViewPattern:e,timeFieldName:a,fromDate:t,toDate:s,dslQuery:o,runtimeMappings:n,aggs:i,fields:l,size:r}){const u=a?[{range:{[a]:{gte:t,lte:s,format:"strict_date_optional_time"}}},o]:[o];return 1===(null==l?void 0:l.length)&&u.push({exists:l[0]}),{index:e,body:{query:{bool:{filter:u}},aggs:i,fields:l,runtime_mappings:n,_source:(null==l||!l.length)&&void 0},track_total_hits:!0,size:null!=r?r:0}}async function m(e,a,t=!0){const s=g(a),o={min_value:{min:{field:a.name}},max_value:{max:{field:a.name}},sample_count:{value_count:{...s}}},n={sample:{sampler:{shard_size:r.d},aggs:{...o}}},i={sample:{sampler:{shard_size:r.d},aggs:{...o,top_values:{terms:{...s,size:r.b}}}}},l=await e({aggs:t?i:n}),u=l.aggregations.sample.min_value.value,m=l.aggregations.sample.max_value.value,c="top_values"in l.aggregations.sample?l.aggregations.sample.top_values:{buckets:[],sum_other_doc_count:0},_={buckets:c.buckets.map((e=>({count:e.doc_count,key:e.key})))};let f=(m-u)/10;if(Number.isInteger(u)&&Number.isInteger(m)&&(f=Math.ceil(f)),0===f)return{totalDocuments:d(l),sampledValues:p(_,c.sum_other_doc_count)||l.aggregations.sample.sample_count.value,sampledDocuments:l.aggregations.sample.doc_count,topValues:_,histogram:t?{buckets:[]}:{buckets:[{count:l.aggregations.sample.doc_count,key:u}]}};const h={sample:{sampler:{shard_size:r.d},aggs:{histo:{histogram:{field:a.name,interval:f}}}}},v=await e({aggs:h});return{totalDocuments:d(l),sampledDocuments:l.aggregations.sample.doc_count,sampledValues:p(_,c.sum_other_doc_count)||l.aggregations.sample.sample_count.value,histogram:{buckets:v.aggregations.sample.histo.buckets.map((e=>({count:e.doc_count,key:e.key})))},topValues:_}}async function c(e,a,t,s){try{const o=g(a),n={size:r.e,fields:[o]},l=await e(n),u=Object(i.a)({values:Object(i.b)(l.hits.hits,a,t),field:a,count:r.a,isTextBased:!1},s);return{totalDocuments:d(l),sampledDocuments:u.sampledDocuments,sampledValues:u.sampledValues,topValues:{buckets:u.buckets,areExamples:!0}}}catch(e){return console.error(e),{}}}function g(e){return e.scripted?{script:{lang:e.lang,source:e.script}}:{field:e.name}}const d=e=>{var a,t;return null!==(a=null!==(t=e.hits.total.value)&&void 0!==t?t:e.hits.total)&&void 0!==a?a:0};function p(e,a){var t;return((null==e||null===(t=e.buckets)||void 0===t?void 0:t.reduce(((e,a)=>a.count+e),0))||0)+(a||0)}const _=async({services:e,dataView:a,field:t,fromDate:o,toDate:i,dslQuery:_,size:f,abortController:h})=>{const{data:v}=e;try{if(null==a||!a.id||null==t||!t.type)return{};const e=async e=>(await Object(s.lastValueFrom)(v.search.search({params:u({dataViewPattern:a.title,timeFieldName:a.timeFieldName,fromDate:o,toDate:i,dslQuery:_,runtimeMappings:a.getRuntimeMappings(),...e})},{abortSignal:null==h?void 0:h.signal}))).rawResponse;return await async function({searchHandler:e,dataView:a,field:t,fromDate:s,toDate:o,size:i}){return t.aggregatable?"geo_point"===t.type||"geo_shape"===t.type?await async function(e,a,t){try{const s=t.getFormatterForField(a);return await c(e,a,t,s)}catch(e){return console.error(e),{}}}(e,t,a):Object(l.a)(t,!1)?"histogram"===t.type?await m(e,t,!1):Object(l.c)(t,!1)?await async function(e,a){const t={sample:{sampler:{shard_size:r.d},aggs:{min_max_summary:{filter:{exists:{field:a.name}},aggs:{min:{min:{field:a.name}},max:{max:{field:a.name}}}}}}},s=await e({aggs:t}),o=s.aggregations.sample.min_max_summary.min.value,n=s.aggregations.sample.min_max_summary.max.value,i=s.aggregations.sample.doc_count;return{totalDocuments:d(s),sampledDocuments:i,sampledValues:i,numberSummary:{minValue:o,maxValue:n}}}(e,t):"number"===t.type?await m(e,t):"date"===t.type?await async function(e,a,t){const s=n.a.parse(t.fromDate),o=n.a.parse(t.toDate);if(!s)throw Error("Invalid fromDate value");if(!o)throw Error("Invalid toDate value");const i=Math.round((o.valueOf()-s.valueOf())/10);if(i<1)return{totalDocuments:0,histogram:{buckets:[]}};const l=`${i}ms`,r={histo:{date_histogram:{...g(a),fixed_interval:l}}},u=await e({aggs:r});return{totalDocuments:d(u),histogram:{buckets:u.aggregations.histo.buckets.map((e=>({count:e.doc_count,key:e.key})))}}}(e,t,{fromDate:s,toDate:o}):await async function(e,a,t=r.b){const s=g(a),o={sample:{sampler:{shard_size:r.d},aggs:{sample_count:{value_count:{...s}},top_values:{terms:{...s,size:t,shard_size:t<=10?25:void 0}}}}},n=await e({aggs:o}),i={buckets:n.aggregations.sample.top_values.buckets.map((e=>({count:e.doc_count,key:e.key})))};return{totalDocuments:d(n),sampledDocuments:n.aggregations.sample.doc_count,sampledValues:p(i,n.aggregations.sample.top_values.sum_other_doc_count)||n.aggregations.sample.sample_count.value,topValues:i}}(e,t,i):{}:Object(l.b)(t,!1)?await c(e,t,a):{}}({searchHandler:e,dataView:a,field:t,fromDate:o,toDate:i,size:f})}catch(e){throw new Error("Could not provide field stats",{cause:e})}}}}]);