"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SloDetailsPage = SloDetailsPage;
var _eui = require("@elastic/eui");
var _ebtTools = require("@kbn/ebt-tools");
var _i18n = require("@kbn/i18n");
var _public = require("@kbn/observability-shared-plugin/public");
var _reactQuery = require("@tanstack/react-query");
var _dedent = _interopRequireDefault(require("dedent"));
var _react = _interopRequireWildcard(require("react"));
var _reactRouterDom = require("react-router-dom");
var _paths = require("../../../common/locators/paths");
var _header_menu = require("../../components/header_menu/header_menu");
var _auto_refresh_button = require("../../components/slo/auto_refresh_button");
var _use_auto_refresh_storage = require("../../components/slo/auto_refresh_button/hooks/use_auto_refresh_storage");
var _use_fetch_slo_details = require("../../hooks/use_fetch_slo_details");
var _use_license = require("../../hooks/use_license");
var _use_permissions = require("../../hooks/use_permissions");
var _use_plugin_context = require("../../hooks/use_plugin_context");
var _kibana_react = require("../../utils/kibana_react");
var _ = _interopRequireDefault(require("../404"));
var _header_control = require("./components/header_control");
var _header_title = require("./components/header_title");
var _slo_details = require("./components/slo_details");
var _use_get_query_params = require("./hooks/use_get_query_params");
var _use_selected_tab = require("./hooks/use_selected_tab");
var _use_slo_details_tabs = require("./hooks/use_slo_details_tabs");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function SloDetailsPage() {
  var _slo$name;
  const {
    onPageReady
  } = (0, _ebtTools.usePerformanceContext)();
  const {
    application: {
      navigateToUrl
    },
    http: {
      basePath
    },
    observabilityAIAssistant
  } = (0, _kibana_react.useKibana)().services;
  const {
    ObservabilityPageTemplate
  } = (0, _use_plugin_context.usePluginContext)();
  const {
    hasAtLeast
  } = (0, _use_license.useLicense)();
  const hasRightLicense = hasAtLeast('platinum');
  const {
    data: permissions
  } = (0, _use_permissions.usePermissions)();
  const {
    sloId
  } = (0, _reactRouterDom.useParams)();
  const {
    instanceId: sloInstanceId,
    remoteName
  } = (0, _use_get_query_params.useGetQueryParams)();
  const {
    storeAutoRefreshState,
    getAutoRefreshState
  } = (0, _use_auto_refresh_storage.useAutoRefreshStorage)();
  const [isAutoRefreshing, setIsAutoRefreshing] = (0, _react.useState)(getAutoRefreshState());
  const {
    isLoading,
    data: slo
  } = (0, _use_fetch_slo_details.useFetchSloDetails)({
    sloId,
    remoteName,
    instanceId: sloInstanceId,
    shouldRefetch: isAutoRefreshing
  });
  const isDeleting = Boolean((0, _reactQuery.useIsMutating)(['deleteSlo']));
  const {
    selectedTabId
  } = (0, _use_selected_tab.useSelectedTab)();
  const {
    tabs
  } = (0, _use_slo_details_tabs.useSloDetailsTabs)({
    slo,
    isAutoRefreshing,
    selectedTabId
  });
  (0, _react.useEffect)(() => {
    if (!slo || !observabilityAIAssistant) {
      return;
    }
    return observabilityAIAssistant.service.setScreenContext({
      screenDescription: (0, _dedent.default)(`
        The user is looking at the detail page for the following SLO

        Name: ${slo.name}.
        Id: ${slo.id}
        Instance Id: ${slo.instanceId}
        Description: ${slo.description}
        Observed value: ${slo.summary.sliValue}
        Error budget remaining: ${slo.summary.errorBudget.remaining}
        Status: ${slo.summary.status}
      `),
      data: [{
        name: 'slo',
        description: 'The SLO and its metadata',
        value: slo
      }]
    });
  }, [observabilityAIAssistant, slo]);
  (0, _react.useEffect)(() => {
    if (hasRightLicense === false || (permissions === null || permissions === void 0 ? void 0 : permissions.hasAllReadRequested) === false) {
      navigateToUrl(basePath.prepend(_paths.paths.slosWelcome));
    }
  }, [hasRightLicense, permissions, navigateToUrl, basePath]);
  (0, _react.useEffect)(() => {
    if (!isLoading && slo !== undefined) {
      onPageReady();
    }
  }, [onPageReady, slo, isLoading]);
  (0, _public.useBreadcrumbs)(getBreadcrumbs(basePath, slo));
  const isSloNotFound = !isLoading && slo === undefined;
  if (isSloNotFound) {
    return /*#__PURE__*/_react.default.createElement(_.default, null);
  }
  const isPerformingAction = isLoading || isDeleting;
  const handleToggleAutoRefresh = () => {
    setIsAutoRefreshing(!isAutoRefreshing);
    storeAutoRefreshState(!isAutoRefreshing);
  };
  return /*#__PURE__*/_react.default.createElement(ObservabilityPageTemplate, {
    pageHeader: {
      pageTitle: (_slo$name = slo === null || slo === void 0 ? void 0 : slo.name) !== null && _slo$name !== void 0 ? _slo$name : /*#__PURE__*/_react.default.createElement(_eui.EuiSkeletonText, {
        lines: 1
      }),
      children: /*#__PURE__*/_react.default.createElement(_header_title.HeaderTitle, {
        isLoading: isPerformingAction,
        slo: slo
      }),
      rightSideItems: [/*#__PURE__*/_react.default.createElement(_header_control.HeaderControl, {
        isLoading: isPerformingAction,
        slo: slo
      }), /*#__PURE__*/_react.default.createElement(_auto_refresh_button.AutoRefreshButton, {
        disabled: isPerformingAction,
        isAutoRefreshing: isAutoRefreshing,
        onClick: handleToggleAutoRefresh
      })],
      tabs
    },
    "data-test-subj": "sloDetailsPage"
  }, /*#__PURE__*/_react.default.createElement(_header_menu.HeaderMenu, null), isLoading && /*#__PURE__*/_react.default.createElement(_eui.EuiLoadingSpinner, {
    "data-test-subj": "sloDetailsLoading"
  }), !isLoading && /*#__PURE__*/_react.default.createElement(_slo_details.SloDetails, {
    slo: slo,
    isAutoRefreshing: isAutoRefreshing,
    selectedTabId: selectedTabId
  }));
}
function getBreadcrumbs(basePath, slo) {
  var _slo$name2;
  return [{
    href: basePath.prepend(_paths.paths.slos),
    text: _i18n.i18n.translate('xpack.slo.breadcrumbs.slosLinkText', {
      defaultMessage: 'SLOs'
    }),
    deepLinkId: 'slo'
  }, {
    text: (_slo$name2 = slo === null || slo === void 0 ? void 0 : slo.name) !== null && _slo$name2 !== void 0 ? _slo$name2 : _i18n.i18n.translate('xpack.slo.breadcrumbs.sloDetailsLinkText', {
      defaultMessage: 'Details'
    })
  }];
}