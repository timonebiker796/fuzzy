"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SLO_LIST_SEARCH_URL_STORAGE_KEY = exports.DEFAULT_STATE = void 0;
exports.useUrlSearchState = useUrlSearchState;
var _public = require("@kbn/kibana-utils-plugin/public");
var _deepmerge = _interopRequireDefault(require("deepmerge"));
var _reactRouterDom = require("react-router-dom");
var _react = require("react");
var _constants = require("../../../../common/constants");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const SLO_LIST_SEARCH_URL_STORAGE_KEY = exports.SLO_LIST_SEARCH_URL_STORAGE_KEY = 'search';
const DEFAULT_STATE = exports.DEFAULT_STATE = {
  kqlQuery: '',
  page: 0,
  perPage: _constants.DEFAULT_SLO_PAGE_SIZE,
  sort: {
    by: 'status',
    direction: 'desc'
  },
  view: 'cardView',
  groupBy: 'ungrouped',
  filters: [],
  lastRefresh: 0
};
function useUrlSearchState() {
  const [state, setState] = (0, _react.useState)(DEFAULT_STATE);
  const history = (0, _reactRouterDom.useHistory)();
  const urlStateStorage = (0, _react.useRef)((0, _public.createKbnUrlStateStorage)({
    history,
    useHash: false,
    useHashQuery: false
  }));
  (0, _react.useEffect)(() => {
    var _urlStateStorage$curr, _urlStateStorage$curr2, _urlStateStorage$curr3;
    const sub = (_urlStateStorage$curr = urlStateStorage.current) === null || _urlStateStorage$curr === void 0 ? void 0 : _urlStateStorage$curr.change$(SLO_LIST_SEARCH_URL_STORAGE_KEY).subscribe(newSearchState => {
      if (newSearchState) {
        setState(newSearchState);
      }
    });
    setState((_urlStateStorage$curr2 = (_urlStateStorage$curr3 = urlStateStorage.current) === null || _urlStateStorage$curr3 === void 0 ? void 0 : _urlStateStorage$curr3.get(SLO_LIST_SEARCH_URL_STORAGE_KEY)) !== null && _urlStateStorage$curr2 !== void 0 ? _urlStateStorage$curr2 : DEFAULT_STATE);
    return () => {
      sub === null || sub === void 0 ? void 0 : sub.unsubscribe();
    };
  }, [urlStateStorage]);
  const onStateChange = (0, _react.useCallback)(newState => {
    var _urlStateStorage$curr4;
    const updatedState = {
      ...state,
      page: 0,
      ...newState
    };
    setState(stateN => updatedState);
    (_urlStateStorage$curr4 = urlStateStorage.current) === null || _urlStateStorage$curr4 === void 0 ? void 0 : _urlStateStorage$curr4.set(SLO_LIST_SEARCH_URL_STORAGE_KEY, updatedState, {
      replace: true
    });
  }, [state]);
  return {
    state: (0, _deepmerge.default)(DEFAULT_STATE, state),
    onStateChange
  };
}