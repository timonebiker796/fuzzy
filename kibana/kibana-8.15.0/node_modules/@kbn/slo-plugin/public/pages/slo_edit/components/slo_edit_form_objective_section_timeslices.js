"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SloEditFormObjectiveSectionTimeslices = SloEditFormObjectiveSectionTimeslices;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _react = _interopRequireDefault(require("react"));
var _reactHookForm = require("react-hook-form");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function SloEditFormObjectiveSectionTimeslices() {
  const {
    control,
    getFieldState,
    watch
  } = (0, _reactHookForm.useFormContext)();
  const indicator = watch('indicator.type');
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    isInvalid: getFieldState('objective.timesliceTarget').invalid,
    label: /*#__PURE__*/_react.default.createElement("span", null, _i18n.i18n.translate('xpack.slo.sloEdit.timeSliceTarget.label', {
      defaultMessage: 'Timeslice target (%)'
    }), ' ', /*#__PURE__*/_react.default.createElement(_eui.EuiIconTip, {
      content: _i18n.i18n.translate('xpack.slo.sloEdit.timeSliceTarget.tooltip', {
        defaultMessage: 'The individual time slices target used to determine whether the slice is good or bad.'
      }),
      position: "top"
    }))
  }, /*#__PURE__*/_react.default.createElement(_reactHookForm.Controller, {
    name: "objective.timesliceTarget",
    control: control,
    defaultValue: 95,
    rules: {
      required: true,
      min: 0,
      max: 100
    },
    render: ({
      field: {
        ref,
        onChange,
        ...field
      },
      fieldState
    }) => /*#__PURE__*/_react.default.createElement(_eui.EuiFieldNumber, (0, _extends2.default)({}, field, {
      required: true,
      disabled: indicator === 'sli.metric.timeslice',
      isInvalid: fieldState.invalid,
      value: field.value,
      "data-test-subj": "sloFormObjectiveTimesliceTargetInput",
      min: 0,
      max: 100,
      step: 0.001,
      onChange: event => onChange(event.target.value)
    }))
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    isInvalid: getFieldState('objective.timesliceWindow').invalid,
    label: /*#__PURE__*/_react.default.createElement("span", null, _i18n.i18n.translate('xpack.slo.sloEdit.timesliceWindow.label', {
      defaultMessage: 'Timeslice window (in minutes)'
    }), ' ', /*#__PURE__*/_react.default.createElement(_eui.EuiIconTip, {
      content: _i18n.i18n.translate('xpack.slo.sloEdit.timesliceWindow.tooltip', {
        defaultMessage: 'The time slice window size used to evaluate the data from.'
      }),
      position: "top"
    }))
  }, /*#__PURE__*/_react.default.createElement(_reactHookForm.Controller, {
    name: "objective.timesliceWindow",
    defaultValue: "1",
    control: control,
    rules: {
      required: true,
      min: 1,
      max: 120
    },
    render: ({
      field: {
        ref,
        onChange,
        ...field
      },
      fieldState
    }) => /*#__PURE__*/_react.default.createElement(_eui.EuiFieldNumber, (0, _extends2.default)({}, field, {
      isInvalid: fieldState.invalid,
      required: true,
      "data-test-subj": "sloFormObjectiveTimesliceWindowInput",
      value: field.value,
      min: 1,
      max: 120,
      step: 1,
      onChange: event => onChange(String(parseInt(event.target.value, 10)))
    }))
  }))));
}