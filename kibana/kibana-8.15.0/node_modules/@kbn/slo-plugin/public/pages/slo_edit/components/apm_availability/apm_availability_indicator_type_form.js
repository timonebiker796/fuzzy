"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApmAvailabilityIndicatorTypeForm = ApmAvailabilityIndicatorTypeForm;
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _react = _interopRequireWildcard(require("react"));
var _reactHookForm = require("react-hook-form");
var _index_selection = require("../custom_common/index_selection");
var _use_create_data_view = require("../../../../hooks/use_create_data_view");
var _group_by_field = require("../common/group_by_field");
var _use_fetch_apm_indices = require("../../../../hooks/use_fetch_apm_indices");
var _field_selector = require("../apm_common/field_selector");
var _data_preview_chart = require("../common/data_preview_chart");
var _query_builder = require("../common/query_builder");
var _format_filters = require("../../helpers/format_filters");
var _get_group_by_cardinality_filters = require("../apm_common/get_group_by_cardinality_filters");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function ApmAvailabilityIndicatorTypeForm() {
  const {
    watch,
    setValue
  } = (0, _reactHookForm.useFormContext)();
  const {
    data: apmIndex
  } = (0, _use_fetch_apm_indices.useFetchApmIndex)();
  const dataViewId = watch(_index_selection.DATA_VIEW_FIELD);
  const [serviceName = '', environment = '', transactionType = '', transactionName = '', globalFilters] = watch(['indicator.params.service', 'indicator.params.environment', 'indicator.params.transactionType', 'indicator.params.transactionName', 'indicator.params.filter']);
  const indicatorParamsFilters = (0, _get_group_by_cardinality_filters.getGroupByCardinalityFilters)({
    serviceName,
    environment,
    transactionType,
    transactionName
  });
  const allFilters = (0, _format_filters.formatAllFilters)(globalFilters, indicatorParamsFilters);
  (0, _react.useEffect)(() => {
    if (apmIndex !== '') {
      setValue('indicator.params.index', apmIndex);
    }
  }, [setValue, apmIndex]);
  const {
    dataView,
    loading: isIndexFieldsLoading
  } = (0, _use_create_data_view.useCreateDataView)({
    indexPatternString: apmIndex,
    dataViewId
  });
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    direction: "column",
    gutterSize: "l"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    direction: "row",
    gutterSize: "l"
  }, /*#__PURE__*/_react.default.createElement(_field_selector.FieldSelector, {
    allowAllOption: false,
    label: _i18n.i18n.translate('xpack.slo.sloEdit.apmAvailability.serviceName', {
      defaultMessage: 'Service name'
    }),
    placeholder: _i18n.i18n.translate('xpack.slo.sloEdit.apmAvailability.serviceName.placeholder', {
      defaultMessage: 'Select the APM service'
    }),
    fieldName: "service.name",
    name: "indicator.params.service",
    dataTestSubj: "apmAvailabilityServiceSelector",
    tooltip: /*#__PURE__*/_react.default.createElement(_eui.EuiIconTip, {
      content: _i18n.i18n.translate('xpack.slo.sloEdit.apm.serviceName.tooltip', {
        defaultMessage: 'This is the APM service monitored by this SLO.'
      }),
      position: "top"
    })
  }), /*#__PURE__*/_react.default.createElement(_field_selector.FieldSelector, {
    label: _i18n.i18n.translate('xpack.slo.sloEdit.apmAvailability.serviceEnvironment', {
      defaultMessage: 'Service environment'
    }),
    placeholder: _i18n.i18n.translate('xpack.slo.sloEdit.apmAvailability.serviceEnvironment.placeholder', {
      defaultMessage: 'Select the environment'
    }),
    fieldName: "service.environment",
    name: "indicator.params.environment",
    dataTestSubj: "apmAvailabilityEnvironmentSelector"
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    direction: "row",
    gutterSize: "l"
  }, /*#__PURE__*/_react.default.createElement(_field_selector.FieldSelector, {
    label: _i18n.i18n.translate('xpack.slo.sloEdit.apmAvailability.transactionType', {
      defaultMessage: 'Transaction type'
    }),
    placeholder: _i18n.i18n.translate('xpack.slo.sloEdit.apmAvailability.transactionType.placeholder', {
      defaultMessage: 'Select the transaction type'
    }),
    fieldName: "transaction.type",
    name: "indicator.params.transactionType",
    dataTestSubj: "apmAvailabilityTransactionTypeSelector"
  }), /*#__PURE__*/_react.default.createElement(_field_selector.FieldSelector, {
    label: _i18n.i18n.translate('xpack.slo.sloEdit.apmAvailability.transactionName', {
      defaultMessage: 'Transaction name'
    }),
    placeholder: _i18n.i18n.translate('xpack.slo.sloEdit.apmAvailability.transactionName.placeholder', {
      defaultMessage: 'Select the transaction name'
    }),
    fieldName: "transaction.name",
    name: "indicator.params.transactionName",
    dataTestSubj: "apmAvailabilityTransactionNameSelector"
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    direction: "row",
    gutterSize: "l"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_query_builder.QueryBuilder, {
    dataTestSubj: "apmLatencyFilterInput",
    dataView: dataView,
    label: _i18n.i18n.translate('xpack.slo.sloEdit.apmLatency.filter', {
      defaultMessage: 'Query filter'
    }),
    name: "indicator.params.filter",
    placeholder: _i18n.i18n.translate('xpack.slo.sloEdit.apmLatency.filter.placeholder', {
      defaultMessage: 'Custom filter to apply on the index'
    }),
    tooltip: /*#__PURE__*/_react.default.createElement(_eui.EuiIconTip, {
      content: _i18n.i18n.translate('xpack.slo.sloEdit.apm.filter.tooltip', {
        defaultMessage: 'This KQL query is used to filter the APM metrics on some relevant criteria for this SLO.'
      }),
      position: "top"
    })
  }))), /*#__PURE__*/_react.default.createElement(_group_by_field.GroupByField, {
    dataView: dataView,
    isLoading: isIndexFieldsLoading,
    filters: allFilters
  }), /*#__PURE__*/_react.default.createElement(_data_preview_chart.DataPreviewChart, null));
}