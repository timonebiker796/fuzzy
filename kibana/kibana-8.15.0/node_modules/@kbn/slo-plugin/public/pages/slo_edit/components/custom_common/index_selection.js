"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DATA_VIEW_FIELD = void 0;
exports.IndexSelection = IndexSelection;
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _react = _interopRequireWildcard(require("react"));
var _reactHookForm = require("react-hook-form");
var _public = require("@kbn/unified-search-plugin/public");
var _use_adhoc_data_views = require("./use_adhoc_data_views");
var _kibana_react = require("../../../../utils/kibana_react");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const DATA_VIEW_FIELD = exports.DATA_VIEW_FIELD = 'indicator.params.dataViewId';
const INDEX_FIELD = 'indicator.params.index';
const TIMESTAMP_FIELD = 'indicator.params.timestampField';
function IndexSelection({
  selectedDataView
}) {
  const {
    control,
    getFieldState,
    setValue,
    watch
  } = (0, _reactHookForm.useFormContext)();
  const {
    dataViews: dataViewsService,
    dataViewFieldEditor
  } = (0, _kibana_react.useKibana)().services;
  const {
    dataViewEditor
  } = (0, _kibana_react.useKibana)().services;
  const currentIndexPattern = watch(INDEX_FIELD);
  const currentDataViewId = watch(DATA_VIEW_FIELD);
  const {
    dataViewsList,
    isDataViewsLoading,
    adHocDataViews,
    setAdHocDataViews,
    refetch
  } = (0, _use_adhoc_data_views.useAdhocDataViews)({
    currentIndexPattern
  });
  (0, _react.useEffect)(() => {
    const indPatternId = (0, _use_adhoc_data_views.getDataViewPattern)({
      byPatten: currentIndexPattern,
      dataViewsList,
      adHocDataViews
    });
    if (!currentDataViewId && currentIndexPattern && !isDataViewsLoading && indPatternId) {
      setValue(DATA_VIEW_FIELD, indPatternId);
    }
  }, [adHocDataViews, currentDataViewId, currentIndexPattern, dataViewsList, isDataViewsLoading, setValue]);
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    label: INDEX_LABEL,
    isInvalid: getFieldState(INDEX_FIELD).invalid
  }, /*#__PURE__*/_react.default.createElement(_reactHookForm.Controller, {
    defaultValue: "",
    name: DATA_VIEW_FIELD,
    control: control,
    rules: {
      required: !Boolean(currentIndexPattern)
    },
    render: ({
      field,
      fieldState
    }) => {
      var _field$value;
      return /*#__PURE__*/_react.default.createElement(_public.DataViewPicker, {
        adHocDataViews: adHocDataViews,
        trigger: {
          label: currentIndexPattern || SELECT_DATA_VIEW,
          fullWidth: true,
          color: fieldState.invalid ? 'danger' : 'text',
          isLoading: isDataViewsLoading,
          'data-test-subj': 'indexSelection'
        },
        onChangeDataView: newId => {
          setValue(INDEX_FIELD, (0, _use_adhoc_data_views.getDataViewPattern)({
            byId: newId,
            adHocDataViews,
            dataViewsList
          }));
          field.onChange(newId);
          dataViewsService.get(newId).then(dataView => {
            if (dataView.timeFieldName) {
              setValue(TIMESTAMP_FIELD, dataView.timeFieldName);
            }
          });
        },
        onAddField: currentDataViewId && selectedDataView ? () => {
          dataViewFieldEditor.openEditor({
            ctx: {
              dataView: selectedDataView
            },
            onSave: () => {}
          });
        } : undefined,
        currentDataViewId: (_field$value = field.value) !== null && _field$value !== void 0 ? _field$value : (0, _use_adhoc_data_views.getDataViewPattern)({
          byPatten: currentIndexPattern,
          dataViewsList,
          adHocDataViews
        }),
        onDataViewCreated: () => {
          dataViewEditor.openEditor({
            allowAdHocDataView: true,
            onSave: dataView => {
              if (!dataView.isPersisted()) {
                setAdHocDataViews([...adHocDataViews, dataView]);
                field.onChange(dataView.id);
                setValue(INDEX_FIELD, dataView.getIndexPattern());
              } else {
                refetch();
                field.onChange(dataView.id);
                setValue(INDEX_FIELD, dataView.getIndexPattern());
              }
              if (dataView.timeFieldName) {
                setValue(TIMESTAMP_FIELD, dataView.timeFieldName);
              }
            }
          });
        }
      });
    }
  }));
}
const SELECT_DATA_VIEW = _i18n.i18n.translate('xpack.slo.sloEdit.customKql.dataViewSelection.label', {
  defaultMessage: 'Select a Data view'
});
const INDEX_LABEL = _i18n.i18n.translate('xpack.slo.sloEdit.customKql.indexSelection.label', {
  defaultMessage: 'Index'
});