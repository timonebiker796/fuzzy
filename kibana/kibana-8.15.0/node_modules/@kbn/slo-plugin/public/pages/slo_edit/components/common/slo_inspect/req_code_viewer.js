"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RequestCodeViewer = RequestCodeViewer;
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _monaco = require("@kbn/monaco");
var _react = _interopRequireWildcard(require("react"));
var _codeEditor = require("@kbn/code-editor");
var _lzString = require("lz-string");
var _kibana_react = require("../../../../../utils/kibana_react");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/* eslint-disable @elastic/eui/href-or-on-click */

const copyToClipboardLabel = _i18n.i18n.translate('xpack.slo.requests.copyToClipboardLabel', {
  defaultMessage: 'Copy to clipboard'
});
function RequestCodeViewer({
  value
}) {
  var _locators$get;
  const {
    application: {
      navigateToUrl
    },
    share: {
      url: {
        locators
      }
    }
  } = (0, _kibana_react.useKibana)().services;

  // "Open in Console" button
  const devToolsDataUri = (0, _lzString.compressToEncodedURIComponent)(value);
  const consoleHref = (_locators$get = locators.get('CONSOLE_APP_LOCATOR')) === null || _locators$get === void 0 ? void 0 : _locators$get.useUrl({
    loadFrom: `data:text/plain,${devToolsDataUri}`
  });
  const handleDevToolsLinkClick = (0, _react.useCallback)(() => consoleHref && navigateToUrl && navigateToUrl(consoleHref), [consoleHref, navigateToUrl]);
  const actions = [];
  actions.push({
    name: 'openInConsole',
    action: /*#__PURE__*/_react.default.createElement(_eui.EuiButtonEmpty, {
      size: "xs",
      flush: "right",
      iconType: "wrench",
      href: consoleHref,
      onClick: handleDevToolsLinkClick,
      "data-test-subj": "inspectorRequestOpenInConsoleButton"
    }, openInConsoleLabel)
  });
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    direction: "column",
    gutterSize: "s",
    wrap: false,
    responsive: false,
    css: {
      height: 800
    }
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    justifyContent: "flexEnd",
    gutterSize: "m",
    wrap: true
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_eui.EuiCopy, {
    textToCopy: value
  }, copy => /*#__PURE__*/_react.default.createElement(_eui.EuiButtonEmpty, {
    size: "xs",
    flush: "right",
    iconType: "copyClipboard",
    onClick: copy,
    "data-test-subj": "inspectorRequestCopyClipboardButton"
  }, copyToClipboardLabel)))), !!actions && actions.map(item => /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false,
    key: item.name
  }, /*#__PURE__*/_react.default.createElement("div", null, item.action))))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: true,
    "data-test-subj": "inspectorRequestCodeViewerContainer"
  }, /*#__PURE__*/_react.default.createElement(_codeEditor.CodeEditor, {
    languageId: _monaco.XJsonLang.ID,
    value: value,
    options: {
      readOnly: true,
      lineNumbers: 'off',
      fontSize: 12,
      minimap: {
        enabled: false
      },
      folding: true,
      scrollBeyondLastLine: false,
      wordWrap: 'on',
      wrappingIndent: 'indent',
      automaticLayout: true
    }
  })));
}
const openInConsoleLabel = _i18n.i18n.translate('xpack.slo.requests.openInConsoleLabel', {
  defaultMessage: 'Open in Console'
});