"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DataPreviewChart = DataPreviewChart;
var _charts = require("@elastic/charts");
var _eui = require("@elastic/eui");
var _numeral = _interopRequireDefault(require("@elastic/numeral"));
var _i18n = require("@kbn/i18n");
var _i18nReact = require("@kbn/i18n-react");
var _lodash = require("lodash");
var _moment = _interopRequireDefault(require("moment"));
var _react = _interopRequireWildcard(require("react"));
var _reactHookForm = require("react-hook-form");
var _kibana_react = require("../../../../utils/kibana_react");
var _good_bad_events_chart = require("../../../slos/components/common/good_bad_events_chart");
var _use_preview = require("../../hooks/use_preview");
var _use_section_form_validation = require("../../hooks/use_section_form_validation");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function DataPreviewChart({
  formatPattern,
  threshold,
  thresholdDirection,
  thresholdColor,
  thresholdMessage,
  ignoreMoreThan100,
  label,
  useGoodBadEventsChart,
  range
}) {
  const {
    watch,
    getFieldState,
    formState,
    getValues
  } = (0, _reactHookForm.useFormContext)();
  const {
    charts,
    uiSettings
  } = (0, _kibana_react.useKibana)().services;
  const {
    isIndicatorSectionValid
  } = (0, _use_section_form_validation.useSectionFormValidation)({
    getFieldState,
    getValues,
    formState,
    watch
  });
  const [defaultRange, _] = (0, _react.useState)({
    from: (0, _moment.default)().subtract(1, 'hour').toDate(),
    to: new Date()
  });
  const indicator = watch('indicator');
  const {
    data: previewData,
    isLoading: isPreviewLoading,
    isSuccess,
    isError
  } = (0, _use_preview.useDebouncedGetPreviewData)(isIndicatorSectionValid, indicator, range !== null && range !== void 0 ? range : defaultRange);
  const isMoreThan100 = !ignoreMoreThan100 && (previewData === null || previewData === void 0 ? void 0 : previewData.find(row => row.sliValue && row.sliValue > 1)) != null;
  const baseTheme = charts.theme.useChartsBaseTheme();
  const dateFormat = uiSettings.get('dateFormat');
  const numberFormat = formatPattern != null ? formatPattern : uiSettings.get('format:percent:defaultPattern');

  // map values to row.sliValue and filter out no data values
  const values = (previewData || []).map(row => row.sliValue);
  const maxValue = (0, _lodash.max)(values);
  const minValue = (0, _lodash.min)(values);
  const domain = {
    fit: true,
    min: threshold != null && minValue != null && threshold < minValue ? threshold : minValue || NaN,
    max: threshold != null && maxValue != null && threshold > maxValue ? threshold : maxValue || NaN
  };
  const title = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiTitle, {
    size: "xs"
  }, /*#__PURE__*/_react.default.createElement("h3", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.slo.sloEdit.dataPreviewChart.panelLabel",
    defaultMessage: "SLI preview"
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  }));
  if (!isIndicatorSectionValid) {
    return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, title, /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
      fullWidth: true
    }, /*#__PURE__*/_react.default.createElement(_eui.EuiPanel, {
      hasBorder: true,
      hasShadow: false,
      style: {
        minHeight: 194
      }
    }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
      justifyContent: "center",
      alignItems: "center",
      style: {
        minHeight: 160
      }
    }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
      grow: false
    }, _i18n.i18n.translate('xpack.slo.sloEdit.dataPreviewChart.explanationMessage', {
      defaultMessage: 'Fill the indicator fields to see visualisation of the current metrics'
    }))))));
  }
  const annotation = threshold != null && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_charts.LineAnnotation, {
    id: "thresholdAnnotation",
    domainType: _charts.AnnotationDomainType.YDomain,
    dataValues: [{
      dataValue: threshold
    }],
    style: {
      line: {
        strokeWidth: 2,
        stroke: thresholdColor || '#000',
        opacity: 1
      }
    }
  }), /*#__PURE__*/_react.default.createElement(_charts.RectAnnotation, {
    dataValues: [{
      coordinates: thresholdDirection === 'above' ? {
        y0: threshold,
        y1: maxValue
      } : {
        y0: minValue,
        y1: threshold
      },
      details: thresholdMessage
    }],
    id: "thresholdShade",
    style: {
      fill: thresholdColor || '#000',
      opacity: 0.1
    }
  }));
  const columns = [{
    id: 'color',
    type: 'color'
  }, {
    id: 'label',
    type: 'custom',
    truncate: true,
    cell: ({
      label: cellLabel
    }) => /*#__PURE__*/_react.default.createElement("span", {
      className: "echTooltip__label"
    }, cellLabel),
    style: {
      textAlign: 'left'
    }
  }, {
    id: 'value',
    type: 'custom',
    cell: ({
      formattedValue
    }) => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("span", {
      className: "echTooltip__value",
      dir: "ltr"
    }, formattedValue)),
    style: {
      textAlign: 'right'
    }
  }];
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, title, isMoreThan100 && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "xs"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiCallOut, {
    size: "s",
    color: "warning",
    title: _i18n.i18n.translate('xpack.slo.sloEdit.dataPreviewChart.moreThan100', {
      defaultMessage: 'Some of the SLI values are more than 100%. That means good query is returning more results than total query.'
    }),
    iconType: "warning"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "xs"
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    fullWidth: true
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiPanel, {
    hasBorder: true,
    hasShadow: false,
    style: {
      minHeight: 194
    }
  }, (isPreviewLoading || isError) && /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    justifyContent: "center",
    alignItems: "center",
    style: {
      height: 160
    }
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, isPreviewLoading && /*#__PURE__*/_react.default.createElement(_eui.EuiLoadingChart, {
    size: "m",
    mono: true
  }), isError && /*#__PURE__*/_react.default.createElement("span", null, _i18n.i18n.translate('xpack.slo.sloEdit.dataPreviewChart.errorMessage', {
    defaultMessage: 'The current indicator settings are invalid'
  })))), isSuccess && useGoodBadEventsChart && /*#__PURE__*/_react.default.createElement(_good_bad_events_chart.GoodBadEventsChart, {
    data: previewData || [],
    bottomTitle: label || DEFAULT_LABEL,
    isLoading: isPreviewLoading,
    annotation: annotation
  }), isSuccess && !useGoodBadEventsChart && /*#__PURE__*/_react.default.createElement(_charts.Chart, {
    size: {
      height: 160,
      width: '100%'
    }
  }, /*#__PURE__*/_react.default.createElement(_charts.Tooltip, {
    type: "vertical",
    body: ({
      items
    }) => {
      const firstItem = items[0];
      const events = firstItem.datum.events;
      const rows = [items[0]];
      if (events) {
        rows.push({
          ...firstItem,
          formattedValue: events.good,
          value: events.good,
          label: _i18n.i18n.translate('xpack.slo.sloEdit.dataPreviewChart.goodEvents', {
            defaultMessage: 'Good events'
          })
        });
        rows.push({
          ...firstItem,
          value: events.total,
          formattedValue: events.total,
          label: _i18n.i18n.translate('xpack.slo.sloEdit.dataPreviewChart.badEvents', {
            defaultMessage: 'Total events'
          })
        });
      }
      return /*#__PURE__*/_react.default.createElement(_charts.TooltipTable, {
        columns: columns,
        items: rows
      });
    }
  }), /*#__PURE__*/_react.default.createElement(_charts.Settings, {
    baseTheme: baseTheme,
    showLegend: false,
    theme: [{
      lineSeriesStyle: {
        point: {
          visible: false
        }
      }
    }],
    noResults: /*#__PURE__*/_react.default.createElement(_eui.EuiIcon, {
      type: "visualizeApp",
      size: "l",
      color: "subdued",
      title: "no results"
    }),
    locale: _i18n.i18n.getLocale()
  }), annotation, /*#__PURE__*/_react.default.createElement(_charts.Axis, {
    id: "y-axis",
    title: _i18n.i18n.translate('xpack.slo.sloEdit.dataPreviewChart.yTitle', {
      defaultMessage: 'SLI'
    }),
    ticks: 5,
    position: _charts.Position.Left,
    tickFormat: d => (0, _numeral.default)(d).format(numberFormat),
    domain: domain
  }), /*#__PURE__*/_react.default.createElement(_charts.Axis, {
    id: "time",
    title: label || DEFAULT_LABEL,
    tickFormat: d => (0, _moment.default)(d).format(dateFormat),
    position: _charts.Position.Bottom,
    timeAxisLayerCount: 2,
    gridLine: {
      visible: true
    },
    style: {
      tickLine: {
        size: 0,
        padding: 4,
        visible: true
      },
      tickLabel: {
        alignment: {
          horizontal: _charts.Position.Left,
          vertical: _charts.Position.Bottom
        },
        padding: 0,
        offset: {
          x: 0,
          y: 0
        }
      }
    }
  }), /*#__PURE__*/_react.default.createElement(_charts.AreaSeries, {
    id: "SLI",
    xScaleType: _charts.ScaleType.Time,
    yScaleType: _charts.ScaleType.Linear,
    xAccessor: "date",
    yAccessors: ['value'],
    data: (previewData !== null && previewData !== void 0 ? previewData : []).map(datum => ({
      date: new Date(datum.date).getTime(),
      value: datum.sliValue && datum.sliValue >= 0 ? datum.sliValue : null,
      events: datum.events
    }))
  })))));
}
const DEFAULT_LABEL = _i18n.i18n.translate('xpack.slo.sloEdit.dataPreviewChart.xTitle', {
  defaultMessage: 'Last hour'
});