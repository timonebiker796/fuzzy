"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFetchSloHealth = useFetchSloHealth;
var _sloSchema = require("@kbn/slo-schema");
var _reactQuery = require("@tanstack/react-query");
var _kibana_react = require("../utils/kibana_react");
var _query_key_factory = require("./query_key_factory");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function useFetchSloHealth({
  list
}) {
  const {
    http
  } = (0, _kibana_react.useKibana)().services;
  const payload = list.map(slo => {
    var _slo$instanceId;
    return {
      sloId: slo.id,
      sloInstanceId: (_slo$instanceId = slo.instanceId) !== null && _slo$instanceId !== void 0 ? _slo$instanceId : _sloSchema.ALL_VALUE
    };
  });
  const {
    isLoading,
    isError,
    data
  } = (0, _reactQuery.useQuery)({
    queryKey: _query_key_factory.sloKeys.health(payload),
    queryFn: async ({
      signal
    }) => {
      try {
        const response = await http.post('/internal/observability/slos/_health', {
          body: JSON.stringify({
            list: payload
          }),
          signal
        });
        return response;
      } catch (error) {
        // ignore error
      }
    },
    enabled: Boolean(list.length > 0),
    refetchOnWindowFocus: false,
    keepPreviousData: true
  });
  return {
    data,
    isLoading,
    isError
  };
}