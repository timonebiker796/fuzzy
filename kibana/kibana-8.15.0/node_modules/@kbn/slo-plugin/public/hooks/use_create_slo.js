"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCreateSlo = useCreateSlo;
var _react = _interopRequireDefault(require("react"));
var _rison = require("@kbn/rison");
var _reactQuery = require("@tanstack/react-query");
var _eui = require("@elastic/eui");
var _reactKibanaMount = require("@kbn/react-kibana-mount");
var _i18nReact = require("@kbn/i18n-react");
var _i18n = require("@kbn/i18n");
var _sharedUxLinkRedirectApp = require("@kbn/shared-ux-link-redirect-app");
var _kibana_react = require("../utils/kibana_react");
var _paths = require("../../common/locators/paths");
var _query_key_factory = require("./query_key_factory");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function useCreateSlo() {
  const {
    i18n: i18nStart,
    theme,
    application: {
      navigateToUrl
    },
    http,
    notifications: {
      toasts
    }
  } = (0, _kibana_react.useKibana)().services;
  const services = (0, _kibana_react.useKibana)().services;
  const queryClient = (0, _reactQuery.useQueryClient)();
  return (0, _reactQuery.useMutation)(['createSlo'], ({
    slo
  }) => {
    const body = JSON.stringify(slo);
    return http.post(`/api/observability/slos`, {
      body
    });
  }, {
    onSuccess: (data, {
      slo
    }) => {
      queryClient.invalidateQueries({
        queryKey: _query_key_factory.sloKeys.lists(),
        exact: false
      });
      const sloEditUrl = http.basePath.prepend(_paths.paths.sloEdit(data.id));
      toasts.addSuccess({
        title: (0, _reactKibanaMount.toMountPoint)( /*#__PURE__*/_react.default.createElement(_sharedUxLinkRedirectApp.RedirectAppLinks, {
          coreStart: services,
          "data-test-subj": "observabilityMainContainer"
        }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
          id: "xpack.slo.slo.create.successNotification",
          defaultMessage: "Successfully created {name}. {editSLO}",
          values: {
            name: slo.name,
            editSLO: /*#__PURE__*/_react.default.createElement(_eui.EuiLink, {
              "data-test-subj": "o11yUseCreateSloEditSloLink",
              href: sloEditUrl
            }, _i18n.i18n.translate('xpack.slo.useCreateSlo.editSLOLinkLabel', {
              defaultMessage: 'Edit SLO'
            }))
          }
        })), {
          i18n: i18nStart,
          theme
        })
      }, {
        toastLifeTimeMs: 30000
      });
    },
    onError: (error, {
      slo
    }, context) => {
      var _error$body$message, _error$body;
      toasts.addError(new Error((_error$body$message = (_error$body = error.body) === null || _error$body === void 0 ? void 0 : _error$body.message) !== null && _error$body$message !== void 0 ? _error$body$message : error.message), {
        title: _i18n.i18n.translate('xpack.slo.create.errorNotification', {
          defaultMessage: 'Something went wrong while creating {name}',
          values: {
            name: slo.name
          }
        })
      });
      navigateToUrl(http.basePath.prepend(_paths.paths.sloCreateWithEncodedForm((0, _rison.encode)(slo))));
    }
  });
}