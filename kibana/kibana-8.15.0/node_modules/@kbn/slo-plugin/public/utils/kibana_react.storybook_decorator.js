"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KibanaReactStorybookDecorator = KibanaReactStorybookDecorator;
var _react = _interopRequireDefault(require("react"));
var _rxjs = require("rxjs");
var _reactQuery = require("@tanstack/react-query");
var _public = require("@kbn/kibana-react-plugin/public");
var _sharedUxPageKibanaTemplate = require("@kbn/shared-ux-page-kibana-template");
var _reactRouterDom = require("react-router-dom");
var _common = require("@kbn/observability-shared-plugin/common");
var _observability_rule_type_registry_mock = require("../rules/observability_rule_type_registry_mock");
var _plugin_context = require("../context/plugin_context");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function KibanaReactStorybookDecorator(Story) {
  const queryClient = new _reactQuery.QueryClient();
  const appMountParameters = {
    setHeaderActionMenu: () => {}
  };
  const observabilityRuleTypeRegistry = (0, _observability_rule_type_registry_mock.createObservabilityRuleTypeRegistryMock)();
  const mockTheme = {
    darkMode: false
  };
  const createTheme$Mock = () => {
    return (0, _rxjs.of)({
      ...mockTheme
    });
  };
  return /*#__PURE__*/_react.default.createElement(_public.KibanaContextProvider, {
    services: {
      application: {
        navigateToUrl: () => {},
        capabilities: {
          [_common.sloFeatureId]: {
            read: true,
            write: true
          },
          [_common.casesFeatureId]: {
            read_cases: true
          }
        }
      },
      cases: {
        getAllCases: () => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Get All Cases component from Cases app"),
        helpers: {
          getUICapabilities: () => ({
            read_cases: true
          })
        },
        ui: {
          getCases: () => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Get Cases component from Cases app")
        }
      },
      charts: {
        theme: {
          useChartsBaseTheme: () => {}
        },
        activeCursor: () => {}
      },
      data: {},
      dataViews: {
        create: () => Promise.resolve({})
      },
      docLinks: {
        links: {
          query: {}
        }
      },
      http: {
        basePath: {
          prepend: _ => ''
        }
      },
      notifications: {
        toasts: {
          addDanger: () => {}
        }
      },
      share: {
        url: {
          locators: {
            get: () => {}
          }
        }
      },
      storage: {
        get: () => {}
      },
      theme: {
        theme$: createTheme$Mock()
      },
      triggersActionsUi: {
        getAddRuleFlyout: {}
      },
      uiSettings: {
        get: setting => {
          if (setting === 'dateFormat') {
            return 'MMM D, YYYY @ HH:mm:ss.SSS';
          }
          if (setting === 'format:percent:defaultPattern') {
            return '0,0.[000]%';
          }
        }
      },
      unifiedSearch: {}
    }
  }, /*#__PURE__*/_react.default.createElement(_plugin_context.PluginContext.Provider, {
    value: {
      appMountParameters,
      observabilityRuleTypeRegistry,
      ObservabilityPageTemplate: _sharedUxPageKibanaTemplate.KibanaPageTemplate
    }
  }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.MemoryRouter, null, /*#__PURE__*/_react.default.createElement(_reactQuery.QueryClientProvider, {
    client: queryClient
  }, /*#__PURE__*/_react.default.createElement(Story, null)))));
}