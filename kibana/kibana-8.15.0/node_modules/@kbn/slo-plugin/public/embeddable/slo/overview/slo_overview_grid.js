"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SloCardChartList = SloCardChartList;
var _react = _interopRequireDefault(require("react"));
var _sloSchema = require("@kbn/slo-schema");
var _charts = require("@elastic/charts");
var _i18n = require("@kbn/i18n");
var _i18nReact = require("@kbn/i18n-react");
var _eui = require("@elastic/eui");
var _kibana_react = require("../../../utils/kibana_react");
var _slo_overview_details = require("../common/slo_overview_details");
var _use_fetch_slo_list = require("../../../hooks/use_fetch_slo_list");
var _chart_data_formatter = require("../../../utils/slo/chart_data_formatter");
var _use_fetch_rules_for_slo = require("../../../hooks/use_fetch_rules_for_slo");
var _use_fetch_active_alerts = require("../../../hooks/use_fetch_active_alerts");
var _slo_card_item_badges = require("../../../pages/slos/components/card_view/slo_card_item_badges");
var _use_slo_summary = require("../../../pages/slos/hooks/use_slo_summary");
var _slo_card_item = require("../../../pages/slos/components/card_view/slo_card_item");
var _use_fetch_historical_summary = require("../../../hooks/use_fetch_historical_summary");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const getSloChartData = ({
  slo,
  historicalSummary,
  subTitle,
  cardColor,
  sliValue,
  sloTarget
}) => {
  const historicalSliData = (0, _chart_data_formatter.formatHistoricalData)(historicalSummary, 'sli_value');
  return {
    title: slo.name,
    subtitle: subTitle,
    value: sliValue,
    trendShape: _charts.MetricTrendShape.Area,
    trend: historicalSliData === null || historicalSliData === void 0 ? void 0 : historicalSliData.map(d => ({
      x: d.key,
      y: d.value
    })),
    extra: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.slo.sloGridItem.targetFlexItemLabel",
      defaultMessage: "Target {target}",
      values: {
        target: sloTarget
      }
    }),
    icon: () => /*#__PURE__*/_react.default.createElement(_eui.EuiIcon, {
      type: "visGauge",
      size: "l"
    }),
    color: cardColor
  };
};
function SloCardChartList({
  sloId
}) {
  var _sloList$results;
  const {
    http: {
      basePath
    },
    uiSettings
  } = (0, _kibana_react.useKibana)().services;
  const [selectedSlo, setSelectedSlo] = _react.default.useState(null);
  const kqlQuery = `slo.id:"${sloId}"`;
  const {
    data: sloList,
    isLoading
  } = (0, _use_fetch_slo_list.useFetchSloList)({
    kqlQuery
  });
  const {
    data: activeAlertsBySlo
  } = (0, _use_fetch_active_alerts.useFetchActiveAlerts)({
    sloIdsAndInstanceIds: [[sloId, _sloSchema.ALL_VALUE]]
  });
  const {
    data: rulesBySlo
  } = (0, _use_fetch_rules_for_slo.useFetchRulesForSlo)({
    sloIds: [sloId]
  });
  const {
    data: historicalSummaries = []
  } = (0, _use_fetch_historical_summary.useFetchHistoricalSummary)({
    sloList: (_sloList$results = sloList === null || sloList === void 0 ? void 0 : sloList.results) !== null && _sloList$results !== void 0 ? _sloList$results : []
  });
  const {
    colors
  } = (0, _slo_card_item.useSloCardColor)();
  const chartsData = [[]];
  sloList === null || sloList === void 0 ? void 0 : sloList.results.forEach(slo => {
    var _slo$summary$status, _historicalSummaries$, _historicalSummaries$2;
    const subTitle = (0, _slo_card_item.getSubTitle)(slo);
    const cardColor = colors[(_slo$summary$status = slo.summary.status) !== null && _slo$summary$status !== void 0 ? _slo$summary$status : 'NO_DATA'];
    const {
      sliValue,
      sloTarget
    } = (0, _use_slo_summary.getSloFormattedSummary)(slo, uiSettings, basePath);
    const historicalSummary = (_historicalSummaries$ = (_historicalSummaries$2 = historicalSummaries.find(hist => {
      var _slo$instanceId;
      return hist.sloId === slo.id && hist.instanceId === ((_slo$instanceId = slo.instanceId) !== null && _slo$instanceId !== void 0 ? _slo$instanceId : _sloSchema.ALL_VALUE);
    })) === null || _historicalSummaries$2 === void 0 ? void 0 : _historicalSummaries$2.data) !== null && _historicalSummaries$ !== void 0 ? _historicalSummaries$ : [];
    const lastArray = chartsData[chartsData.length - 1];
    if (lastArray.length >= 4) {
      // If the last array has reached its maximum length, create a new array
      chartsData.push([]);
    }
    const rules = rulesBySlo === null || rulesBySlo === void 0 ? void 0 : rulesBySlo[slo === null || slo === void 0 ? void 0 : slo.id];
    const activeAlerts = activeAlertsBySlo.get(slo);
    const hasGroupBy = Boolean(slo.groupBy && slo.groupBy !== _sloSchema.ALL_VALUE);
    const data = getSloChartData({
      slo,
      subTitle,
      cardColor,
      sliValue,
      sloTarget,
      historicalSummary
    });
    data.body = /*#__PURE__*/_react.default.createElement(_slo_card_item_badges.SloCardItemBadges, {
      slo: slo,
      rules: rules,
      activeAlerts: activeAlerts,
      handleCreateRule: () => {},
      hasGroupBy: hasGroupBy
    });
    chartsData[chartsData.length - 1].push(data);
  });
  if (isLoading) {
    return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
      alignItems: "center",
      justifyContent: "center",
      style: {
        height: '100%'
      }
    }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
      grow: false
    }, /*#__PURE__*/_react.default.createElement(_eui.EuiLoadingSpinner, {
      size: "xl"
    })));
  }
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    "data-shared-item": "",
    style: {
      width: '100%'
    }
  }, /*#__PURE__*/_react.default.createElement(_charts.Chart, null, /*#__PURE__*/_react.default.createElement(_charts.Settings, {
    baseTheme: _charts.DARK_THEME,
    onElementClick: ([d]) => {
      if ((0, _charts.isMetricElementEvent)(d)) {
        const {
          columnIndex,
          rowIndex
        } = d;
        const slo = sloList === null || sloList === void 0 ? void 0 : sloList.results[rowIndex * 4 + columnIndex];
        setSelectedSlo(slo !== null && slo !== void 0 ? slo : null);
      }
    },
    locale: _i18n.i18n.getLocale()
  }), /*#__PURE__*/_react.default.createElement(_charts.Metric, {
    id: `slo-id-instances`,
    data: chartsData
  }))), /*#__PURE__*/_react.default.createElement(_slo_overview_details.SloOverviewDetails, {
    slo: selectedSlo,
    setSelectedSlo: setSelectedSlo
  }));
}