"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOverviewPanelTitle = exports.getOverviewEmbeddableFactory = void 0;
var _i18n = require("@kbn/i18n");
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _eui = require("@elastic/eui");
var _presentationPublishing = require("@kbn/presentation-publishing");
var _rxjs = require("rxjs");
var _constants = require("./constants");
var _slo_overview_grid = require("./slo_overview_grid");
var _slo_overview = require("./slo_overview");
var _group_view = require("./group_view/group_view");
var _slo_embeddable_context = require("../common/slo_embeddable_context");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } /*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
const getOverviewPanelTitle = () => _i18n.i18n.translate('xpack.slo.sloEmbeddable.displayName', {
  defaultMessage: 'SLO Overview'
});
exports.getOverviewPanelTitle = getOverviewPanelTitle;
const getOverviewEmbeddableFactory = getStartServices => {
  const factory = {
    type: _constants.SLO_OVERVIEW_EMBEDDABLE_ID,
    deserializeState: state => {
      return state.rawState;
    },
    buildEmbeddable: async (state, buildApi, uuid, parentApi) => {
      const [coreStart, pluginStart] = await getStartServices();
      const deps = {
        ...coreStart,
        ...pluginStart
      };
      async function onEdit() {
        try {
          const {
            openSloConfiguration
          } = await Promise.resolve().then(() => _interopRequireWildcard(require('./slo_overview_open_configuration')));
          const result = await openSloConfiguration(coreStart, pluginStart, api.getSloGroupOverviewConfig());
          api.updateSloGroupOverviewConfig(result);
        } catch (e) {
          return Promise.reject();
        }
      }
      const {
        titlesApi,
        titleComparators,
        serializeTitles
      } = (0, _presentationPublishing.initializeTitles)(state);
      const defaultTitle$ = new _rxjs.BehaviorSubject(getOverviewPanelTitle());
      const sloId$ = new _rxjs.BehaviorSubject(state.sloId);
      const sloInstanceId$ = new _rxjs.BehaviorSubject(state.sloInstanceId);
      const showAllGroupByInstances$ = new _rxjs.BehaviorSubject(state.showAllGroupByInstances);
      const overviewMode$ = new _rxjs.BehaviorSubject(state.overviewMode);
      const groupFilters$ = new _rxjs.BehaviorSubject(state.groupFilters);
      const remoteName$ = new _rxjs.BehaviorSubject(state.remoteName);
      const reload$ = new _rxjs.Subject();
      const api = buildApi({
        ...titlesApi,
        defaultPanelTitle: defaultTitle$,
        getTypeDisplayName: () => _i18n.i18n.translate('xpack.slo.editSloOverviewEmbeddableTitle.typeDisplayName', {
          defaultMessage: 'criteria'
        }),
        isEditingEnabled: () => api.getSloGroupOverviewConfig().overviewMode === 'groups',
        onEdit: async () => {
          onEdit();
        },
        serializeState: () => {
          return {
            rawState: {
              ...serializeTitles(),
              sloId: sloId$.getValue(),
              sloInstanceId: sloInstanceId$.getValue(),
              showAllGroupByInstances: showAllGroupByInstances$.getValue(),
              overviewMode: overviewMode$.getValue(),
              groupFilters: groupFilters$.getValue(),
              remoteName: remoteName$.getValue()
            }
          };
        },
        getSloGroupOverviewConfig: () => {
          return {
            groupFilters: groupFilters$.getValue(),
            overviewMode: overviewMode$.getValue()
          };
        },
        updateSloGroupOverviewConfig: update => {
          groupFilters$.next(update.groupFilters);
        }
      }, {
        sloId: [sloId$, value => sloId$.next(value)],
        sloInstanceId: [sloInstanceId$, value => sloInstanceId$.next(value)],
        groupFilters: [groupFilters$, value => groupFilters$.next(value)],
        showAllGroupByInstances: [showAllGroupByInstances$, value => showAllGroupByInstances$.next(value)],
        remoteName: [remoteName$, value => remoteName$.next(value)],
        overviewMode: [overviewMode$, value => overviewMode$.next(value)],
        ...titleComparators
      });
      const fetchSubscription = (0, _presentationPublishing.fetch$)(api).pipe().subscribe(next => {
        reload$.next(next.isReload);
      });
      return {
        api,
        Component: () => {
          const [sloId, sloInstanceId, showAllGroupByInstances, overviewMode, groupFilters, remoteName] = (0, _presentationPublishing.useBatchedPublishingSubjects)(sloId$, sloInstanceId$, showAllGroupByInstances$, overviewMode$, groupFilters$, remoteName$);
          (0, _react.useEffect)(() => {
            return () => {
              fetchSubscription.unsubscribe();
            };
          }, []);
          const renderOverview = () => {
            if (overviewMode === 'groups') {
              var _groupFilters$groupBy, _groupFilters$kqlQuer, _groupFilters$groups;
              const groupBy = (_groupFilters$groupBy = groupFilters === null || groupFilters === void 0 ? void 0 : groupFilters.groupBy) !== null && _groupFilters$groupBy !== void 0 ? _groupFilters$groupBy : 'status';
              const kqlQuery = (_groupFilters$kqlQuer = groupFilters === null || groupFilters === void 0 ? void 0 : groupFilters.kqlQuery) !== null && _groupFilters$kqlQuer !== void 0 ? _groupFilters$kqlQuer : '';
              const groups = (_groupFilters$groups = groupFilters === null || groupFilters === void 0 ? void 0 : groupFilters.groups) !== null && _groupFilters$groups !== void 0 ? _groupFilters$groups : [];
              return /*#__PURE__*/_react.default.createElement(Wrapper, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
                "data-test-subj": "sloGroupOverviewPanel",
                "data-shared-item": ""
              }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
                css: `
                        margin-top: 20px;
                      `
              }, /*#__PURE__*/_react.default.createElement(_group_view.GroupSloView, {
                view: "cardView",
                groupBy: groupBy,
                groups: groups,
                kqlQuery: kqlQuery,
                filters: groupFilters === null || groupFilters === void 0 ? void 0 : groupFilters.filters,
                reloadSubject: reload$
              }))));
            } else {
              return /*#__PURE__*/_react.default.createElement(_slo_overview.SloOverview, {
                sloId: sloId,
                sloInstanceId: sloInstanceId,
                reloadSubject: reload$,
                showAllGroupByInstances: showAllGroupByInstances,
                remoteName: remoteName
              });
            }
          };
          return /*#__PURE__*/_react.default.createElement(_slo_embeddable_context.SloEmbeddableContext, {
            deps: deps
          }, showAllGroupByInstances ? /*#__PURE__*/_react.default.createElement(_slo_overview_grid.SloCardChartList, {
            sloId: sloId
          }) : renderOverview());
        }
      };
    }
  };
  return factory;
};
exports.getOverviewEmbeddableFactory = getOverviewEmbeddableFactory;
const Wrapper = _styledComponents.default.div`
  width: 100%;
  padding: 5px 15px;
  overflow: scroll;

  .euiAccordion__buttonContent {
    min-width: 100px;
  }
`;