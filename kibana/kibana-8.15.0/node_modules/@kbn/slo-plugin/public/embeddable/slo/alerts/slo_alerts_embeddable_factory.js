"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAlertsEmbeddableFactory = getAlertsEmbeddableFactory;
exports.getAlertsPanelTitle = void 0;
var _i18n = require("@kbn/i18n");
var _react = _interopRequireWildcard(require("react"));
var _sharedUxRouter = require("@kbn/shared-ux-router");
var _rxjs = require("rxjs");
var _presentationPublishing = require("@kbn/presentation-publishing");
var _public = require("@kbn/kibana-react-plugin/public");
var _reactQuery = require("@tanstack/react-query");
var _history = require("history");
var _public2 = require("@kbn/kibana-utils-plugin/public");
var _constants = require("./constants");
var _slo_alerts_wrapper = require("./slo_alerts_wrapper");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } /*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
const history = (0, _history.createBrowserHistory)();
const queryClient = new _reactQuery.QueryClient();
const getAlertsPanelTitle = () => _i18n.i18n.translate('xpack.slo.sloAlertsEmbeddable.displayTitle', {
  defaultMessage: 'SLO Alerts'
});
exports.getAlertsPanelTitle = getAlertsPanelTitle;
function getAlertsEmbeddableFactory(getStartServices, kibanaVersion) {
  const factory = {
    type: _constants.SLO_ALERTS_EMBEDDABLE_ID,
    deserializeState: state => {
      return state.rawState;
    },
    buildEmbeddable: async (state, buildApi, uuid, parentApi) => {
      const [coreStart, pluginStart] = await getStartServices();
      const deps = {
        ...coreStart,
        ...pluginStart
      };
      async function onEdit() {
        try {
          const {
            openSloConfiguration
          } = await Promise.resolve().then(() => _interopRequireWildcard(require('./slo_alerts_open_configuration')));
          const result = await openSloConfiguration(coreStart, pluginStart, api.getSloAlertsConfig());
          api.updateSloAlertsConfig(result);
        } catch (e) {
          return Promise.reject();
        }
      }
      const {
        titlesApi,
        titleComparators,
        serializeTitles
      } = (0, _presentationPublishing.initializeTitles)(state);
      const defaultTitle$ = new _rxjs.BehaviorSubject(getAlertsPanelTitle());
      const slos$ = new _rxjs.BehaviorSubject(state.slos);
      const showAllGroupByInstances$ = new _rxjs.BehaviorSubject(state.showAllGroupByInstances);
      const reload$ = new _rxjs.Subject();
      const api = buildApi({
        ...titlesApi,
        defaultPanelTitle: defaultTitle$,
        getTypeDisplayName: () => _i18n.i18n.translate('xpack.slo.editSloAlertswEmbeddable.typeDisplayName', {
          defaultMessage: 'configuration'
        }),
        isEditingEnabled: () => true,
        onEdit: async () => {
          onEdit();
        },
        serializeState: () => {
          return {
            rawState: {
              ...serializeTitles(),
              slos: slos$.getValue(),
              showAllGroupByInstances: showAllGroupByInstances$.getValue()
            }
          };
        },
        getSloAlertsConfig: () => {
          return {
            slos: slos$.getValue(),
            showAllGroupByInstances: showAllGroupByInstances$.getValue()
          };
        },
        updateSloAlertsConfig: update => {
          slos$.next(update.slos);
          showAllGroupByInstances$.next(update.showAllGroupByInstances);
        }
      }, {
        slos: [slos$, value => slos$.next(value)],
        showAllGroupByInstances: [showAllGroupByInstances$, value => showAllGroupByInstances$.next(value)],
        ...titleComparators
      });
      const fetchSubscription = (0, _presentationPublishing.fetch$)(api).pipe().subscribe(next => {
        reload$.next(next);
      });
      return {
        api,
        Component: () => {
          var _fetchContext$timeRan;
          const [slos, showAllGroupByInstances] = (0, _presentationPublishing.useBatchedPublishingSubjects)(slos$, showAllGroupByInstances$);
          const fetchContext = (0, _presentationPublishing.useFetchContext)(api);
          const I18nContext = deps.i18n.Context;
          (0, _react.useEffect)(() => {
            return () => {
              fetchSubscription.unsubscribe();
            };
          }, []);
          return /*#__PURE__*/_react.default.createElement(I18nContext, null, /*#__PURE__*/_react.default.createElement(_public.KibanaContextProvider, {
            services: {
              ...deps,
              storage: new _public2.Storage(localStorage),
              isServerless: !!deps.serverless,
              kibanaVersion
            }
          }, /*#__PURE__*/_react.default.createElement(_sharedUxRouter.Router, {
            history: history
          }, /*#__PURE__*/_react.default.createElement(_reactQuery.QueryClientProvider, {
            client: queryClient
          }, /*#__PURE__*/_react.default.createElement(_slo_alerts_wrapper.SloAlertsWrapper, {
            onEdit: onEdit,
            deps: deps,
            slos: slos,
            timeRange: (_fetchContext$timeRan = fetchContext.timeRange) !== null && _fetchContext$timeRan !== void 0 ? _fetchContext$timeRan : {
              from: 'now-15m/m',
              to: 'now'
            },
            reloadSubject: reload$,
            showAllGroupByInstances: showAllGroupByInstances
          })))));
        }
      };
    }
  };
  return factory;
}