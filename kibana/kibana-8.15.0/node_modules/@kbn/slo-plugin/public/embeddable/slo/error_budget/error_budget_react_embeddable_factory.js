"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getErrorBudgetPanelTitle = exports.getErrorBudgetEmbeddableFactory = void 0;
var _i18n = require("@kbn/i18n");
var _react = _interopRequireWildcard(require("react"));
var _sharedUxRouter = require("@kbn/shared-ux-router");
var _history = require("history");
var _presentationPublishing = require("@kbn/presentation-publishing");
var _rxjs = require("rxjs");
var _public = require("@kbn/kibana-react-plugin/public");
var _reactQuery = require("@tanstack/react-query");
var _constants = require("./constants");
var _error_budget_burn_down = require("./error_budget_burn_down");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const getErrorBudgetPanelTitle = () => _i18n.i18n.translate('xpack.slo.errorBudgetEmbeddable.title', {
  defaultMessage: 'SLO Error Budget burn down'
});
exports.getErrorBudgetPanelTitle = getErrorBudgetPanelTitle;
const queryClient = new _reactQuery.QueryClient();
const getErrorBudgetEmbeddableFactory = deps => {
  const factory = {
    type: _constants.SLO_ERROR_BUDGET_ID,
    deserializeState: state => {
      return state.rawState;
    },
    buildEmbeddable: async (state, buildApi, uuid, parentApi) => {
      const {
        titlesApi,
        titleComparators,
        serializeTitles
      } = (0, _presentationPublishing.initializeTitles)(state);
      const defaultTitle$ = new _rxjs.BehaviorSubject(getErrorBudgetPanelTitle());
      const sloId$ = new _rxjs.BehaviorSubject(state.sloId);
      const sloInstanceId$ = new _rxjs.BehaviorSubject(state.sloInstanceId);
      const reload$ = new _rxjs.Subject();
      const api = buildApi({
        ...titlesApi,
        defaultPanelTitle: defaultTitle$,
        serializeState: () => {
          return {
            rawState: {
              ...serializeTitles(),
              sloId: sloId$.getValue(),
              sloInstanceId: sloInstanceId$.getValue()
            }
          };
        }
      }, {
        sloId: [sloId$, value => sloId$.next(value)],
        sloInstanceId: [sloInstanceId$, value => sloInstanceId$.next(value)],
        ...titleComparators
      });
      const fetchSubscription = (0, _presentationPublishing.fetch$)(api).pipe().subscribe(next => {
        reload$.next(next.isReload);
      });
      return {
        api,
        Component: () => {
          const [sloId, sloInstanceId] = (0, _presentationPublishing.useBatchedPublishingSubjects)(sloId$, sloInstanceId$);
          const I18nContext = deps.i18n.Context;
          (0, _react.useEffect)(() => {
            return () => {
              fetchSubscription.unsubscribe();
            };
          }, []);
          return /*#__PURE__*/_react.default.createElement(I18nContext, null, /*#__PURE__*/_react.default.createElement(_sharedUxRouter.Router, {
            history: (0, _history.createBrowserHistory)()
          }, /*#__PURE__*/_react.default.createElement(_public.KibanaContextProvider, {
            services: deps
          }, /*#__PURE__*/_react.default.createElement(_reactQuery.QueryClientProvider, {
            client: queryClient
          }, /*#__PURE__*/_react.default.createElement(_error_budget_burn_down.SloErrorBudget, {
            sloId: sloId,
            sloInstanceId: sloInstanceId,
            reloadSubject: reload$
          })))));
        }
      };
    }
  };
  return factory;
};
exports.getErrorBudgetEmbeddableFactory = getErrorBudgetEmbeddableFactory;