"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAddAlertsPanelAction = createAddAlertsPanelAction;
var _i18n = require("@kbn/i18n");
var _presentationContainers = require("@kbn/presentation-containers");
var _public = require("@kbn/ui-actions-plugin/public");
var _constants = require("../embeddable/slo/alerts/constants");
var _constants2 = require("../embeddable/slo/common/constants");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } /*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
function createAddAlertsPanelAction(getStartServices) {
  return {
    id: _constants.ADD_SLO_ALERTS_ACTION_ID,
    grouping: _constants2.COMMON_SLO_GROUPING,
    getIconType: () => 'alert',
    order: 20,
    isCompatible: async ({
      embeddable
    }) => {
      return (0, _presentationContainers.apiIsPresentationContainer)(embeddable);
    },
    execute: async ({
      embeddable
    }) => {
      if (!(0, _presentationContainers.apiIsPresentationContainer)(embeddable)) throw new _public.IncompatibleActionError();
      const [coreStart, deps] = await getStartServices();
      try {
        const {
          openSloConfiguration
        } = await Promise.resolve().then(() => _interopRequireWildcard(require('../embeddable/slo/alerts/slo_alerts_open_configuration')));
        const initialState = await openSloConfiguration(coreStart, deps);
        embeddable.addNewPanel({
          panelType: _constants.SLO_ALERTS_EMBEDDABLE_ID,
          initialState
        }, true);
      } catch (e) {
        return Promise.reject();
      }
    },
    getDisplayName: () => _i18n.i18n.translate('xpack.slo.sloAlertsEmbeddable.displayName', {
      defaultMessage: 'SLO Alerts'
    })
  };
}