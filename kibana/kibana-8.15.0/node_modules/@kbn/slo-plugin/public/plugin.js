"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SloPlugin = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _public = require("@kbn/core/public");
var _rxjs = require("rxjs");
var _common = require("../common");
var _slo_details = require("./locators/slo_details");
var _slo_edit = require("./locators/slo_edit");
var _slo_list = require("./locators/slo_list");
var _paths = require("../common/locators/paths");
var _get_create_slo_flyout = require("./pages/slo_edit/shared_flyout/get_create_slo_flyout");
var _register_burn_rate_rule_type = require("./rules/register_burn_rate_rule_type");
var _constants = require("./embeddable/slo/overview/constants");
var _constants2 = require("./embeddable/slo/error_budget/constants");
var _constants3 = require("./embeddable/slo/alerts/constants");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } /*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
class SloPlugin {
  constructor(initContext) {
    var _this$initContext$con;
    (0, _defineProperty2.default)(this, "appUpdater$", new _rxjs.BehaviorSubject(() => ({})));
    (0, _defineProperty2.default)(this, "experimentalFeatures", {
      ruleFormV2: {
        enabled: false
      }
    });
    this.initContext = initContext;
    this.experimentalFeatures = (_this$initContext$con = this.initContext.config.get().experimental) !== null && _this$initContext$con !== void 0 ? _this$initContext$con : this.experimentalFeatures;
  }
  setup(coreSetup, pluginsSetup) {
    const kibanaVersion = this.initContext.env.packageInfo.version;
    const sloDetailsLocator = pluginsSetup.share.url.locators.create(new _slo_details.SloDetailsLocatorDefinition());
    const sloEditLocator = pluginsSetup.share.url.locators.create(new _slo_edit.SloEditLocatorDefinition());
    const sloListLocator = pluginsSetup.share.url.locators.create(new _slo_list.SloListLocatorDefinition());
    const mount = async params => {
      const {
        renderApp
      } = await Promise.resolve().then(() => _interopRequireWildcard(require('./application')));
      const [coreStart, pluginsStart] = await coreSetup.getStartServices();
      const {
        ruleTypeRegistry,
        actionTypeRegistry
      } = pluginsStart.triggersActionsUi;
      const {
        observabilityRuleTypeRegistry
      } = pluginsStart.observability;
      return renderApp({
        appMountParameters: params,
        core: coreStart,
        isDev: this.initContext.env.mode.dev,
        observabilityRuleTypeRegistry,
        kibanaVersion,
        usageCollection: pluginsSetup.usageCollection,
        ObservabilityPageTemplate: pluginsStart.observabilityShared.navigation.PageTemplate,
        plugins: {
          ...pluginsStart,
          ruleTypeRegistry,
          actionTypeRegistry
        },
        isServerless: !!pluginsStart.serverless,
        experimentalFeatures: this.experimentalFeatures
      });
    };
    const appUpdater$ = this.appUpdater$;
    const app = {
      id: _common.sloAppId,
      title: _common.PLUGIN_NAME,
      order: 8002,
      updater$: appUpdater$,
      euiIconType: 'logoObservability',
      appRoute: _paths.SLOS_BASE_PATH,
      category: _public.DEFAULT_APP_CATEGORIES.observability,
      mount,
      keywords: ['observability', 'monitor', 'slos']
    };
    // Register an application into the side navigation menu
    coreSetup.application.register(app);
    (0, _register_burn_rate_rule_type.registerBurnRateRuleType)(pluginsSetup.observability.observabilityRuleTypeRegistry);
    const assertPlatinumLicense = async () => {
      const licensing = pluginsSetup.licensing;
      const license = await (0, _rxjs.firstValueFrom)(licensing.license$);
      const hasPlatinumLicense = license.hasAtLeast('platinum');
      if (hasPlatinumLicense) {
        const [coreStart, pluginsStart] = await coreSetup.getStartServices();
        pluginsStart.dashboard.registerDashboardPanelPlacementSetting(_constants.SLO_OVERVIEW_EMBEDDABLE_ID, serializedState => {
          if (serializedState !== null && serializedState !== void 0 && serializedState.showAllGroupByInstances || serializedState !== null && serializedState !== void 0 && serializedState.groupFilters) {
            return {
              width: 24,
              height: 8
            };
          }
          return {
            width: 12,
            height: 8
          };
        });
        pluginsSetup.embeddable.registerReactEmbeddableFactory(_constants.SLO_OVERVIEW_EMBEDDABLE_ID, async () => {
          const {
            getOverviewEmbeddableFactory
          } = await Promise.resolve().then(() => _interopRequireWildcard(require('./embeddable/slo/overview/slo_embeddable_factory')));
          return getOverviewEmbeddableFactory(coreSetup.getStartServices);
        });
        pluginsSetup.embeddable.registerReactEmbeddableFactory(_constants3.SLO_ALERTS_EMBEDDABLE_ID, async () => {
          const {
            getAlertsEmbeddableFactory
          } = await Promise.resolve().then(() => _interopRequireWildcard(require('./embeddable/slo/alerts/slo_alerts_embeddable_factory')));
          return getAlertsEmbeddableFactory(coreSetup.getStartServices, kibanaVersion);
        });
        pluginsSetup.embeddable.registerReactEmbeddableFactory(_constants2.SLO_ERROR_BUDGET_ID, async () => {
          const deps = {
            ...coreStart,
            ...pluginsStart
          };
          const {
            getErrorBudgetEmbeddableFactory
          } = await Promise.resolve().then(() => _interopRequireWildcard(require('./embeddable/slo/error_budget/error_budget_react_embeddable_factory')));
          return getErrorBudgetEmbeddableFactory(deps);
        });
        const registerAsyncSloUiActions = async () => {
          if (pluginsSetup.uiActions) {
            const {
              registerSloUiActions
            } = await Promise.resolve().then(() => _interopRequireWildcard(require('./ui_actions')));
            registerSloUiActions(coreSetup, pluginsSetup, pluginsStart);
          }
        };
        registerAsyncSloUiActions();
      }
    };
    assertPlatinumLicense();
    return {
      sloDetailsLocator,
      sloEditLocator,
      sloListLocator
    };
  }
  start(coreStart, pluginsStart) {
    const kibanaVersion = this.initContext.env.packageInfo.version;
    const {
      ruleTypeRegistry,
      actionTypeRegistry
    } = pluginsStart.triggersActionsUi;
    return {
      getCreateSLOFlyout: (0, _get_create_slo_flyout.getCreateSLOFlyoutLazy)({
        core: coreStart,
        isDev: this.initContext.env.mode.dev,
        kibanaVersion,
        observabilityRuleTypeRegistry: pluginsStart.observability.observabilityRuleTypeRegistry,
        ObservabilityPageTemplate: pluginsStart.observabilityShared.navigation.PageTemplate,
        plugins: {
          ...pluginsStart,
          ruleTypeRegistry,
          actionTypeRegistry
        },
        isServerless: !!pluginsStart.serverless,
        experimentalFeatures: this.experimentalFeatures
      })
    };
  }
  stop() {}
}
exports.SloPlugin = SloPlugin;