"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerBurnRateRuleType = void 0;
var _react = require("react");
var _i18n = require("@kbn/i18n");
var _ruleDataUtils = require("@kbn/rule-data-utils");
var _slo = require("../../common/field_names/slo");
var _validation = require("../components/burn_rate_rule_editor/validation");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } /*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
const sloBurnRateDefaultActionMessage = _i18n.i18n.translate('xpack.slo.rules.burnRate.defaultActionMessage', {
  defaultMessage: `'{{context.reason}}'

'{{rule.name}}' is active with the following conditions:

- SLO: '{{context.sloName}}'
- The burn rate over the last '{{context.longWindow.duration}}' is '{{context.longWindow.burnRate}}'
- The burn rate over the last '{{context.shortWindow.duration}}' is '{{context.shortWindow.burnRate}}'
- Threshold: '{{context.burnRateThreshold}}'

[View alert details]('{{context.alertDetailsUrl}}')
`
});
const sloBurnRateDefaultRecoveryMessage = _i18n.i18n.translate('xpack.slo.rules.burnRate.defaultRecoveryMessage', {
  defaultMessage: `'{{context.reason}}'

'{{rule.name}}' has recovered.

- SLO: '{{context.sloName}}'
- The burn rate over the last '{{context.longWindow.duration}}' is '{{context.longWindow.burnRate}}'
- The burn rate over the last '{{context.shortWindow.duration}}' is '{{context.shortWindow.burnRate}}'
- Threshold: '{{context.burnRateThreshold}}'

[View alert details]('{{context.alertDetailsUrl}}')
`
});
const registerBurnRateRuleType = async observabilityRuleTypeRegistry => {
  observabilityRuleTypeRegistry.register({
    id: _ruleDataUtils.SLO_BURN_RATE_RULE_TYPE_ID,
    description: _i18n.i18n.translate('xpack.slo.rules.burnRate.description', {
      defaultMessage: 'Alert when your SLO burn rate is too high over a defined period of time.'
    }),
    format: ({
      fields
    }) => {
      var _fields$ALERT_REASON, _fields$SLO_INSTANCE_;
      return {
        reason: (_fields$ALERT_REASON = fields[_ruleDataUtils.ALERT_REASON]) !== null && _fields$ALERT_REASON !== void 0 ? _fields$ALERT_REASON : '-',
        link: `/app/slos/${fields[_slo.SLO_ID_FIELD]}?instanceId=${(_fields$SLO_INSTANCE_ = fields[_slo.SLO_INSTANCE_ID_FIELD]) !== null && _fields$SLO_INSTANCE_ !== void 0 ? _fields$SLO_INSTANCE_ : '*'}`
      };
    },
    iconClass: 'bell',
    documentationUrl(docLinks) {
      return `${docLinks.links.observability.sloBurnRateRule}`;
    },
    ruleParamsExpression: /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('../components/burn_rate_rule_editor')))),
    validate: _validation.validateBurnRateRule,
    requiresAppContext: false,
    defaultActionMessage: sloBurnRateDefaultActionMessage,
    defaultRecoveryMessage: sloBurnRateDefaultRecoveryMessage,
    alertDetailsAppSection: /*#__PURE__*/(0, _react.lazy)(() => Promise.resolve().then(() => _interopRequireWildcard(require('../components/slo/burn_rate/alert_details/alert_details_app_section')))),
    priority: 100
  });
};
exports.registerBurnRateRuleType = registerBurnRateRuleType;