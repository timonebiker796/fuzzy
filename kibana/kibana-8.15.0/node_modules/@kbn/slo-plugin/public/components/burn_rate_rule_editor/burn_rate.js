"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BurnRate = BurnRate;
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function BurnRate({
  onChange,
  initialBurnRate = 1,
  maxBurnRate,
  errors
}) {
  const [burnRate, setBurnRate] = (0, _react.useState)(initialBurnRate);
  const hasError = errors !== undefined && errors.length > 0;
  const [formattedValue, setFormattedValue] = (0, _react.useState)(burnRate.toFixed(2));
  const onBurnRateChange = event => {
    const value = Number(event.target.value);
    setBurnRate(value);
    onChange(value);
  };
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    label: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, _i18n.i18n.translate('xpack.slo.rules.burnRate.rowLabel', {
      defaultMessage: 'Burn rate threshold'
    }), ' ', /*#__PURE__*/_react.default.createElement(_eui.EuiIconTip, {
      position: "top",
      content: _i18n.i18n.translate('xpack.slo.rules.burnRate.tooltip', {
        defaultMessage: 'The burn rate is how fast the service consumes the error budget over the lookback period.'
      })
    })),
    fullWidth: true,
    isInvalid: hasError
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFieldNumber, {
    fullWidth: true,
    step: 0.01,
    min: 0.01,
    max: maxBurnRate,
    value: formattedValue,
    onChange: event => {
      onBurnRateChange(event);
      setFormattedValue(event.target.value);
    },
    onBlur: event => {
      const value = event.target.value;
      setFormattedValue(Number(value).toFixed(2));
    },
    "data-test-subj": "burnRate"
  }));
}