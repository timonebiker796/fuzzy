"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.idForWarning = exports.WarningsFlyoutStep = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _i18nReact = require("@kbn/i18n-react");
var _app_context = require("../../../../../app_context");
var _warning_step_checkbox = require("./warning_step_checkbox");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const warningToComponentMap = {
  customTypeName: _warning_step_checkbox.CustomTypeNameWarningCheckbox,
  indexSetting: _warning_step_checkbox.DeprecatedSettingWarningCheckbox,
  replaceIndexWithAlias: _warning_step_checkbox.ReplaceIndexWithAliasWarningCheckbox
};
const idForWarning = id => `reindexWarning-${id}`;
exports.idForWarning = idForWarning;
/**
 * Displays warning text about destructive changes required to reindex this index. The user
 * must acknowledge each change before being allowed to proceed.
 */
const WarningsFlyoutStep = ({
  warnings,
  hideWarningsStep,
  continueReindex,
  meta
}) => {
  const {
    services: {
      core: {
        docLinks
      }
    }
  } = (0, _app_context.useAppContext)();
  const {
    links
  } = docLinks;
  const [checkedIds, setCheckedIds] = (0, _react.useState)(warnings.reduce((initialCheckedIds, warning, index) => {
    initialCheckedIds[idForWarning(index)] = false;
    return initialCheckedIds;
  }, {}));

  // Do not allow to proceed until all checkboxes are checked.
  const blockAdvance = Object.values(checkedIds).filter(v => v).length < warnings.length;
  const onChange = e => {
    const optionId = e.target.id;
    setCheckedIds(prev => ({
      ...prev,
      ...{
        [optionId]: !checkedIds[optionId]
      }
    }));
  };
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlyoutBody, null, warnings.length > 0 && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiCallOut, {
    title: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.upgradeAssistant.checkupTab.reindexing.flyout.warningsStep.destructiveCallout.calloutTitle",
      defaultMessage: "This index requires destructive changes that cannot be reversed"
    }),
    color: "warning",
    iconType: "warning"
  }, /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.upgradeAssistant.checkupTab.reindexing.flyout.warningsStep.destructiveCallout.calloutDetail",
    defaultMessage: "Back up the index before continuing. To proceed with the reindex, accept each change."
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, null), /*#__PURE__*/_react.default.createElement(_eui.EuiTitle, {
    size: "s"
  }, /*#__PURE__*/_react.default.createElement("h3", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.upgradeAssistant.checkupTab.reindexing.flyout.warningsStep.acceptChangesTitle",
    defaultMessage: "Accept changes"
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, null), warnings.map((warning, index) => {
    const WarningCheckbox = warningToComponentMap[warning.warningType];
    return /*#__PURE__*/_react.default.createElement(WarningCheckbox, {
      key: idForWarning(index),
      isChecked: checkedIds[idForWarning(index)],
      onChange: onChange,
      docLinks: links,
      id: idForWarning(index),
      meta: {
        ...meta,
        ...warning.meta
      }
    });
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlyoutFooter, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    justifyContent: "spaceBetween"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiButtonEmpty, {
    iconType: "arrowLeft",
    onClick: hideWarningsStep,
    flush: "left"
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.cancelButtonLabel",
    defaultMessage: "Back"
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
    fill: true,
    color: "primary",
    onClick: continueReindex,
    disabled: blockAdvance
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.upgradeAssistant.checkupTab.reindexing.flyout.checklistStep.continueButtonLabel",
    defaultMessage: "Continue reindexing"
  }))))));
};
exports.WarningsFlyoutStep = WarningsFlyoutStep;