"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDeprecationDataView = exports.ExternalLinks = void 0;
var _rison = require("@kbn/rison");
var _react = _interopRequireWildcard(require("react"));
var _esQuery = require("@kbn/es-query");
var _i18nReact = require("@kbn/i18n-react");
var _analytics = require("@kbn/analytics");
var _eui = require("@elastic/eui");
var _constants = require("../../../../../common/constants");
var _app_context = require("../../../app_context");
var _ui_metric = require("../../../lib/ui_metric");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const getDeprecationDataView = async dataService => {
  const results = await dataService.dataViews.find(_constants.DEPRECATION_LOGS_INDEX_PATTERN);
  // Since the find might return also results with wildcard matchers we need to find the
  // index pattern that has an exact match with our title.
  const deprecationDataView = results.find(result => result.title === _constants.DEPRECATION_LOGS_INDEX_PATTERN);
  if (deprecationDataView) {
    return deprecationDataView;
  } else {
    // When creating the data view, we need to be careful when creating a data view
    // for an index that doesnt exist. Since the deprecation logs data stream is only created
    // when a deprecation log is indexed it could be possible that it might not exist at the
    // time we need to render the DiscoveryAppLink.
    // So in order to avoid those errors we need to make sure that the data view is created
    // with allowNoIndex and that we skip fetching fields to from the source index.
    const override = false;
    const skipFetchFields = true;
    // prettier-ignore
    const newDataView = await dataService.dataViews.createAndSave({
      title: _constants.DEPRECATION_LOGS_INDEX_PATTERN,
      allowNoIndex: true
    }, override, skipFetchFields);
    return newDataView;
  }
};
exports.getDeprecationDataView = getDeprecationDataView;
const DiscoverAppLink = ({
  checkpoint
}) => {
  const {
    services: {
      data: dataService
    },
    plugins: {
      share
    }
  } = (0, _app_context.useAppContext)();
  const [discoveryUrl, setDiscoveryUrl] = (0, _react.useState)();
  (0, _react.useEffect)(() => {
    const getDiscoveryUrl = async () => {
      const locator = share.url.locators.get('DISCOVER_APP_LOCATOR');
      if (!locator) {
        return;
      }
      const dataView = await getDeprecationDataView(dataService);
      const field = dataView.getFieldByName(_constants.DEPRECATION_LOGS_ORIGIN_FIELD);
      let filters = [];
      if (field !== undefined) {
        const filter = (0, _esQuery.buildPhrasesFilter)(field, [..._constants.APPS_WITH_DEPRECATION_LOGS], dataView);
        filter.meta.negate = true;
        filters = [filter];
      }
      const url = await (locator === null || locator === void 0 ? void 0 : locator.getUrl({
        indexPatternId: dataView.id,
        query: {
          language: 'kuery',
          query: `@timestamp > "${checkpoint}"`
        },
        filters
      }));
      setDiscoveryUrl(url);
    };
    getDiscoveryUrl();
  }, [dataService, checkpoint, share.url.locators]);
  if (discoveryUrl === undefined) {
    return null;
  }
  return (
    /*#__PURE__*/
    // eslint-disable-next-line @elastic/eui/href-or-on-click
    _react.default.createElement(_eui.EuiLink, {
      href: discoveryUrl,
      onClick: () => {
        _ui_metric.uiMetricService.trackUiMetric(_analytics.METRIC_TYPE.CLICK, _ui_metric.UIM_DISCOVER_CLICK);
      },
      "data-test-subj": "viewDiscoverLogs"
    }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.upgradeAssistant.overview.viewDiscoverResultsAction",
      defaultMessage: "Analyze logs in Discover"
    }))
  );
};
const ObservabilityAppLink = ({
  checkpoint
}) => {
  var _http$basePath;
  const {
    services: {
      core: {
        http
      }
    }
  } = (0, _app_context.useAppContext)();

  // Ideally we don't want to hardcode the path to the Log Stream app and use the UrlService.locator instead.
  // Issue opened: https://github.com/elastic/kibana/issues/104855
  const streamAppPath = '/app/logs/stream';
  const sourceId = _constants.DEPRECATION_LOGS_SOURCE_ID;
  const logPosition = `(end:now,start:${(0, _rison.encode)(checkpoint)})`;
  const logFilter = encodeURI(`(language:kuery,query:'not ${_constants.DEPRECATION_LOGS_ORIGIN_FIELD} : (${_constants.APPS_WITH_DEPRECATION_LOGS.join(' or ')})')`);
  const queryParams = `sourceId=${sourceId}&logPosition=${logPosition}&logFilter=${logFilter}`;
  const logStreamUrl = http === null || http === void 0 ? void 0 : (_http$basePath = http.basePath) === null || _http$basePath === void 0 ? void 0 : _http$basePath.prepend(`${streamAppPath}?${queryParams}`);
  return (
    /*#__PURE__*/
    // eslint-disable-next-line @elastic/eui/href-or-on-click
    _react.default.createElement(_eui.EuiLink, {
      href: logStreamUrl,
      onClick: () => {
        _ui_metric.uiMetricService.trackUiMetric(_analytics.METRIC_TYPE.CLICK, _ui_metric.UIM_OBSERVABILITY_CLICK);
      },
      "data-test-subj": "viewObserveLogs"
    }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.upgradeAssistant.overview.viewObservabilityResultsAction",
      defaultMessage: "View deprecation logs in Observability"
    }))
  );
};
const ExternalLinks = ({
  checkpoint
}) => {
  const {
    infra: hasInfraPlugin
  } = (0, _app_context.useAppContext)().plugins;
  return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, null, hasInfraPlugin && /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiPanel, null, /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    size: "s"
  }, /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.upgradeAssistant.overview.observe.observabilityDescription",
    defaultMessage: "Get insight into which deprecated APIs are being used and what applications you need to update."
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  }), /*#__PURE__*/_react.default.createElement(ObservabilityAppLink, {
    checkpoint: checkpoint
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiPanel, null, /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    size: "s"
  }, /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.upgradeAssistant.overview.observe.discoveryDescription",
    defaultMessage: "Search and filter the deprecation logs to understand the types of changes you need to make."
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  }), /*#__PURE__*/_react.default.createElement(DiscoverAppLink, {
    checkpoint: checkpoint
  }))));
};
exports.ExternalLinks = ExternalLinks;