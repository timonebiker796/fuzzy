"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CloudBackup = void 0;
var _react = _interopRequireWildcard(require("react"));
var _momentTimezone = _interopRequireDefault(require("moment-timezone"));
var _i18nReact = require("@kbn/i18n-react");
var _i18n = require("@kbn/i18n");
var _analytics = require("@kbn/analytics");
var _eui = require("@elastic/eui");
var _constants = require("../../../../../common/constants");
var _app_context = require("../../../app_context");
var _ui_metric = require("../../../lib/ui_metric");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const isMissingFoundSnapshotsRepo = error => {
  return error.statusCode === 404 && error.message.toString().includes(_constants.CLOUD_SNAPSHOT_REPOSITORY);
};
const CloudBackup = ({
  cloudSnapshotsUrl,
  setIsComplete,
  setForceOnPremStep
}) => {
  const {
    services: {
      api
    }
  } = (0, _app_context.useAppContext)();
  const {
    isInitialRequest,
    isLoading,
    error,
    data,
    resendRequest
  } = api.useLoadCloudBackupStatus();

  // Tell overview whether the step is complete or not.
  (0, _react.useEffect)(() => {
    // Loading shouldn't invalidate the previous state.
    if (!isLoading) {
      var _ref;
      // An error should invalidate the previous state.
      setIsComplete((_ref = !error && (data === null || data === void 0 ? void 0 : data.isBackedUp)) !== null && _ref !== void 0 ? _ref : false);
      // If snapshots are not enabled, as it could happen in an ECE installation, the
      // cloud backup status api will return a 404 error saying that the found-snapshots
      // repository is missing. If that were to happen, we should force the users to see
      // the on prem backup step instead.
      if (error && isMissingFoundSnapshotsRepo(error)) {
        setForceOnPremStep(true);
      }
    }

    // Depending upon setIsComplete would create an infinite loop.
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [error, isLoading, data, setForceOnPremStep]);
  if (isInitialRequest && isLoading) {
    return /*#__PURE__*/_react.default.createElement(_eui.EuiSkeletonText, {
      "data-test-subj": "cloudBackupLoading",
      lines: 3
    });
  }
  if (error) {
    return /*#__PURE__*/_react.default.createElement(_eui.EuiCallOut, {
      title: _i18n.i18n.translate('xpack.upgradeAssistant.overview.cloudBackup.loadingError', {
        defaultMessage: 'An error occurred while retrieving the latest snapshot status'
      }),
      color: "danger",
      iconType: "warning",
      "data-test-subj": "cloudBackupErrorCallout"
    }, /*#__PURE__*/_react.default.createElement("p", null, error.statusCode, " - ", error.message), /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
      color: "danger",
      onClick: resendRequest,
      "data-test-subj": "cloudBackupRetryButton"
    }, _i18n.i18n.translate('xpack.upgradeAssistant.overview.cloudBackup.retryButton', {
      defaultMessage: 'Try again'
    })));
  }
  const lastBackupTime = (0, _momentTimezone.default)(data.lastBackupTime).toISOString();
  const statusMessage = data.isBackedUp ? /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    alignItems: "center",
    gutterSize: "s",
    "data-test-subj": "dataBackedUpStatus"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiIcon, {
    type: "check",
    color: "success"
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiText, null, /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.upgradeAssistant.overview.cloudBackup.hasSnapshotMessage",
    defaultMessage: "Last snapshot created on {lastBackupTime}.",
    values: {
      lastBackupTime: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedDate, {
        value: lastBackupTime,
        year: "numeric",
        month: "long",
        day: "2-digit"
      }), ' ', /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedTime, {
        value: lastBackupTime,
        timeZoneName: "short",
        hour12: false
      }))
    }
  }))))) : /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    alignItems: "center",
    gutterSize: "s",
    "data-test-subj": "dataNotBackedUpStatus"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiIcon, {
    type: "warning",
    color: "danger"
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiText, null, /*#__PURE__*/_react.default.createElement("p", null, _i18n.i18n.translate('xpack.upgradeAssistant.overview.cloudBackup.noSnapshotMessage', {
    defaultMessage: `Your data isn't backed up.`
  })))));
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, statusMessage, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
    href: cloudSnapshotsUrl,
    onClick: () => {
      _ui_metric.uiMetricService.trackUiMetric(_analytics.METRIC_TYPE.CLICK, _ui_metric.UIM_BACKUP_DATA_CLOUD_CLICK);
    },
    "data-test-subj": "cloudSnapshotsLink",
    target: "_blank",
    iconType: "popout",
    iconSide: "right"
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.upgradeAssistant.overview.cloudBackup.snapshotsLink",
    defaultMessage: "Create snapshot"
  })));
};
exports.CloudBackup = CloudBackup;