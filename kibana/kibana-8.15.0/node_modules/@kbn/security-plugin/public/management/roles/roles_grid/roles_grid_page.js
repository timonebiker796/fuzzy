"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RolesGridPage = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _eui = require("@elastic/eui");
var _lodash = _interopRequireDefault(require("lodash"));
var _react = _interopRequireWildcard(require("react"));
var _i18n = require("@kbn/i18n");
var _i18nReact = require("@kbn/i18n-react");
var _public = require("@kbn/kibana-react-plugin/public");
var _sharedUxPageKibanaTemplate = require("@kbn/shared-ux-page-kibana-template");
var _confirm_delete = require("./confirm_delete");
var _permission_denied = require("./permission_denied");
var _model = require("../../../../common/model");
var _badges = require("../../badges");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const getRoleManagementHref = (action, roleName) => {
  return `/${action}${roleName ? `/${encodeURIComponent(roleName)}` : ''}`;
};
const getVisibleRoles = (roles, filter, includeReservedRoles) => {
  return roles.filter(role => {
    const normalized = `${role.name}`.toLowerCase();
    const normalizedQuery = filter.toLowerCase();
    return normalized.indexOf(normalizedQuery) !== -1 && (includeReservedRoles || !(0, _model.isRoleReserved)(role));
  });
};
const DEFAULT_TABLE_STATE = {
  query: _eui.EuiSearchBar.Query.MATCH_ALL,
  sort: {
    field: 'creation',
    direction: 'desc'
  },
  from: 0,
  size: 25,
  filters: {}
};
const RolesGridPage = ({
  notifications,
  rolesAPIClient,
  history,
  readOnly,
  buildFlavor,
  cloudOrgUrl,
  analytics,
  theme,
  i18n: i18nStart
}) => {
  const [roles, setRoles] = (0, _react.useState)([]);
  const [visibleRoles, setVisibleRoles] = (0, _react.useState)([]);
  const [selection, setSelection] = (0, _react.useState)([]);
  const [filter, setFilter] = (0, _react.useState)('');
  const [showDeleteConfirmation, setShowDeleteConfirmation] = (0, _react.useState)(false);
  const [permissionDenied, setPermissionDenied] = (0, _react.useState)(false);
  const [includeReservedRoles, setIncludeReservedRoles] = (0, _react.useState)(true);
  const [isLoading, setIsLoading] = (0, _react.useState)(false);
  const [tableState, setTableState] = (0, _react.useState)(DEFAULT_TABLE_STATE);
  (0, _react.useEffect)(() => {
    loadRoles();
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  const loadRoles = async () => {
    try {
      setIsLoading(true);
      const rolesFromApi = await rolesAPIClient.getRoles();
      setRoles(rolesFromApi);
      setVisibleRoles(getVisibleRoles(rolesFromApi, filter, includeReservedRoles));
    } catch (e) {
      if (_lodash.default.get(e, 'body.statusCode') === 403) {
        setPermissionDenied(true);
      } else {
        notifications.toasts.addDanger(_i18n.i18n.translate('xpack.security.management.roles.fetchingRolesErrorMessage', {
          defaultMessage: 'Error fetching roles: {message}',
          values: {
            message: _lodash.default.get(e, 'body.message', '')
          }
        }));
      }
    } finally {
      setIsLoading(false);
    }
  };
  const onIncludeReservedRolesChange = e => {
    setIncludeReservedRoles(e.target.checked);
    setVisibleRoles(getVisibleRoles(roles, filter, e.target.checked));
  };
  const getRoleStatusBadges = role => {
    const enabled = (0, _model.isRoleEnabled)(role);
    const deprecated = (0, _model.isRoleDeprecated)(role);
    const reserved = (0, _model.isRoleReserved)(role);
    const badges = [];
    if (!enabled) {
      badges.push( /*#__PURE__*/_react.default.createElement(_badges.DisabledBadge, {
        "data-test-subj": "roleDisabled"
      }));
    }
    if (reserved) {
      badges.push( /*#__PURE__*/_react.default.createElement(_badges.ReservedBadge, {
        "data-test-subj": "roleReserved",
        tooltipContent: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
          id: "xpack.security.management.roles.reservedRoleBadgeTooltip",
          defaultMessage: "Reserved roles are built-in and cannot be edited or removed."
        })
      }));
    }
    if (deprecated) {
      badges.push( /*#__PURE__*/_react.default.createElement(_badges.DeprecatedBadge, {
        "data-test-subj": "roleDeprecated",
        tooltipContent: (0, _model.getExtendedRoleDeprecationNotice)(role)
      }));
    }
    return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
      gutterSize: "s"
    }, badges.map((badge, index) => /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
      key: index,
      grow: false
    }, badge)));
  };
  const handleDelete = () => {
    setSelection([]);
    setShowDeleteConfirmation(false);
    loadRoles();
  };
  const deleteOneRole = roleToDelete => {
    setSelection([roleToDelete]);
    setShowDeleteConfirmation(true);
  };
  const renderToolsLeft = () => {
    if (selection.length === 0) {
      return;
    }
    const numSelected = selection.length;
    return /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
      "data-test-subj": "deleteRoleButton",
      color: "danger",
      onClick: () => setShowDeleteConfirmation(true)
    }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.security.management.roles.deleteSelectedRolesButtonLabel",
      defaultMessage: "Delete {numSelected} role{numSelected, plural, one { } other {s}}",
      values: {
        numSelected
      }
    }));
  };
  const renderToolsRight = () => {
    if (buildFlavor !== 'serverless') {
      return /*#__PURE__*/_react.default.createElement(_eui.EuiSwitch, {
        "data-test-subj": "showReservedRolesSwitch",
        label: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
          id: "xpack.security.management.roles.showReservedRolesLabel",
          defaultMessage: "Show reserved roles"
        }),
        checked: includeReservedRoles,
        onChange: onIncludeReservedRolesChange
      });
    }
  };
  const onTableChange = ({
    page,
    sort
  }) => {
    const newState = {
      ...tableState,
      from: (page === null || page === void 0 ? void 0 : page.index) * (page === null || page === void 0 ? void 0 : page.size),
      size: page === null || page === void 0 ? void 0 : page.size
    };
    setTableState(newState);
  };
  const getColumnConfig = () => {
    const config = [{
      field: 'name',
      name: _i18n.i18n.translate('xpack.security.management.roles.nameColumnName', {
        defaultMessage: 'Role'
      }),
      sortable: true,
      render: name => /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
        color: "subdued",
        size: "s"
      }, /*#__PURE__*/_react.default.createElement(_eui.EuiLink, (0, _extends2.default)({
        "data-test-subj": "roleRowName"
      }, (0, _public.reactRouterNavigate)(history, getRoleManagementHref('edit', name))), name))
    }, {
      field: 'description',
      name: _i18n.i18n.translate('xpack.security.management.roles.descriptionColumnName', {
        defaultMessage: 'Role Description'
      }),
      sortable: true,
      truncateText: {
        lines: 3
      },
      render: (description, record) => /*#__PURE__*/_react.default.createElement(_eui.EuiToolTip, {
        position: "top",
        content: description,
        display: "block"
      }, /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
        color: "subdued",
        size: "s",
        "data-test-subj": `roleRowDescription-${record.name}`
      }, description))
    }];
    if (buildFlavor !== 'serverless') {
      config.push({
        field: 'metadata',
        name: _i18n.i18n.translate('xpack.security.management.roles.statusColumnName', {
          defaultMessage: 'Status'
        }),
        sortable: role => (0, _model.isRoleEnabled)(role) && !(0, _model.isRoleDeprecated)(role),
        render: (_metadata, record) => getRoleStatusBadges(record)
      });
    }
    if (!readOnly) {
      config.push({
        name: _i18n.i18n.translate('xpack.security.management.roles.actionsColumnName', {
          defaultMessage: 'Actions'
        }),
        width: '150px',
        actions: [{
          type: 'icon',
          icon: 'copy',
          isPrimary: true,
          available: role => !(0, _model.isRoleReserved)(role),
          name: _i18n.i18n.translate('xpack.security.management.roles.cloneRoleActionName', {
            defaultMessage: 'Clone'
          }),
          description: role => _i18n.i18n.translate('xpack.security.management.roles.cloneRoleActionLabel', {
            defaultMessage: 'Clone {roleName}',
            values: {
              roleName: role.name
            }
          }),
          href: role => (0, _public.reactRouterNavigate)(history, getRoleManagementHref('clone', role.name)).href,
          onClick: (role, event) => (0, _public.reactRouterNavigate)(history, getRoleManagementHref('clone', role.name)).onClick(event),
          'data-test-subj': role => `clone-role-action-${role.name}`
        }, {
          type: 'icon',
          icon: 'trash',
          color: 'danger',
          name: _i18n.i18n.translate('xpack.security.management.roles.deleteRoleActionName', {
            defaultMessage: 'Delete'
          }),
          description: role => _i18n.i18n.translate('xpack.security.management.roles.deleteRoleActionLabel', {
            defaultMessage: `Delete {roleName}`,
            values: {
              roleName: role.name
            }
          }),
          'data-test-subj': role => `delete-role-action-${role.name}`,
          onClick: role => deleteOneRole(role),
          available: role => !role.metadata || !role.metadata._reserved
        }, {
          isPrimary: true,
          type: 'icon',
          icon: 'pencil',
          name: _i18n.i18n.translate('xpack.security.management.roles.editRoleActionName', {
            defaultMessage: 'Edit'
          }),
          description: role => _i18n.i18n.translate('xpack.security.management.roles.editRoleActionLabel', {
            defaultMessage: `Edit {roleName}`,
            values: {
              roleName: role.name
            }
          }),
          'data-test-subj': role => `edit-role-action-${role.name}`,
          href: role => (0, _public.reactRouterNavigate)(history, getRoleManagementHref('edit', role.name)).href,
          onClick: (role, event) => (0, _public.reactRouterNavigate)(history, getRoleManagementHref('edit', role.name)).onClick(event),
          available: role => !(0, _model.isRoleReadOnly)(role),
          enabled: () => selection.length === 0
        }]
      });
    }
    return config;
  };
  const onCancelDelete = () => {
    setShowDeleteConfirmation(false);
  };
  const pagination = {
    pageIndex: tableState.from / tableState.size,
    pageSize: tableState.size,
    totalItemCount: visibleRoles.length,
    pageSizeOptions: [25, 50, 100]
  };
  return permissionDenied ? /*#__PURE__*/_react.default.createElement(_permission_denied.PermissionDenied, null) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_sharedUxPageKibanaTemplate.KibanaPageTemplate.Header, {
    bottomBorder: true,
    "data-test-subj": "rolesGridPageHeader",
    pageTitle: buildFlavor === 'serverless' ? /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.security.management.roles.customRoleTitle",
      defaultMessage: "Custom Roles"
    }) : /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.security.management.roles.roleTitle",
      defaultMessage: "Roles"
    }),
    description: buildFlavor === 'serverless' ? /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.security.management.roles.customRolesSubtitle",
      defaultMessage: "In addition to the predefined roles on the system, you can create your own roles and provide your users with the exact set of privileges that they need."
    }) : /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.security.management.roles.subtitle",
      defaultMessage: "Apply roles to groups of users and manage permissions across the stack."
    }),
    rightSideItems: readOnly ? undefined : [/*#__PURE__*/_react.default.createElement(_eui.EuiButton, (0, _extends2.default)({
      "data-test-subj": "createRoleButton"
    }, (0, _public.reactRouterNavigate)(history, getRoleManagementHref('edit')), {
      fill: true,
      iconType: "plusInCircleFilled"
    }), /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.security.management.roles.createRoleButtonLabel",
      defaultMessage: "Create role"
    })), buildFlavor === 'serverless' && /*#__PURE__*/_react.default.createElement(_eui.EuiButtonEmpty, {
      href: cloudOrgUrl,
      target: "_blank",
      iconSide: "right",
      iconType: "popout"
    }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.security.management.roles.assignRolesLinkLabel",
      defaultMessage: "Assign roles"
    }))]
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "l"
  }), /*#__PURE__*/_react.default.createElement(_sharedUxPageKibanaTemplate.KibanaPageTemplate.Section, {
    paddingSize: "none"
  }, showDeleteConfirmation ? /*#__PURE__*/_react.default.createElement(_confirm_delete.ConfirmDelete, {
    onCancel: onCancelDelete,
    rolesToDelete: selection.map(role => role.name),
    callback: handleDelete,
    cloudOrgUrl: cloudOrgUrl,
    notifications: notifications,
    rolesAPIClient: rolesAPIClient,
    buildFlavor: buildFlavor,
    theme: theme,
    analytics: analytics,
    i18n: i18nStart
  }) : null, /*#__PURE__*/_react.default.createElement(_eui.EuiSearchBar, {
    box: {
      incremental: true,
      'data-test-subj': 'searchRoles'
    },
    onChange: query => {
      setFilter(query.queryText);
      setVisibleRoles(getVisibleRoles(roles, query.queryText, includeReservedRoles));
    },
    toolsLeft: renderToolsLeft(),
    toolsRight: renderToolsRight()
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "s"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiBasicTable, {
    "data-test-subj": "rolesTable",
    itemId: "name",
    columns: getColumnConfig(),
    selection: readOnly ? undefined : {
      selectable: role => !role.metadata || !role.metadata._reserved,
      selectableMessage: selectable => !selectable ? 'Role is reserved' : '',
      onSelectionChange: value => setSelection(value),
      selected: selection
    },
    onChange: onTableChange,
    pagination: pagination,
    noItemsMessage: buildFlavor === 'serverless' ? /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.security.management.roles.noCustomRolesFound",
      defaultMessage: "No custom roles to show"
    }) : /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.security.management.roles.noRolesFound",
      defaultMessage: "No items found"
    }),
    items: visibleRoles,
    loading: isLoading,
    sorting: {
      sort: {
        field: 'name',
        direction: 'asc'
      }
    },
    rowProps: {
      'data-test-subj': 'roleRow'
    }
  })));
};
exports.RolesGridPage = RolesGridPage;