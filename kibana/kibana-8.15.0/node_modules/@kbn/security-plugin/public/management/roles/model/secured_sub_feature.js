"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SecuredSubFeature = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _common = require("@kbn/features-plugin/common");
var _sub_feature_privilege = require("./sub_feature_privilege");
var _sub_feature_privilege_group = require("./sub_feature_privilege_group");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

class SecuredSubFeature extends _common.SubFeature {
  constructor(config, actionMapping = {}) {
    super(config);
    (0, _defineProperty2.default)(this, "privileges", void 0);
    (0, _defineProperty2.default)(this, "privilegesTooltip", void 0);
    /**
     * A list of the privilege groups that have at least one enabled privilege.
     */
    (0, _defineProperty2.default)(this, "nonEmptyPrivilegeGroups", void 0);
    this.actionMapping = actionMapping;
    this.privilegesTooltip = config.privilegesTooltip || '';
    this.nonEmptyPrivilegeGroups = this.privilegeGroups.flatMap(group => {
      const filteredPrivileges = group.privileges.filter(privilege => !privilege.disabled);
      if (filteredPrivileges.length === 0) {
        return [];
      }

      // If some privileges are disabled, we need to update the group to reflect the change.
      return [group.privileges.length === filteredPrivileges.length ? group : {
        ...group,
        privileges: filteredPrivileges
      }];
    });
    this.privileges = Array.from(this.privilegeIterator());
  }
  getPrivilegeGroups() {
    return this.nonEmptyPrivilegeGroups.map(pg => new _sub_feature_privilege_group.SubFeaturePrivilegeGroup(pg, this.actionMapping));
  }
  *privilegeIterator({
    predicate = () => true
  } = {}) {
    for (const group of this.nonEmptyPrivilegeGroups) {
      for (const gp of group.privileges) {
        const privilege = new _sub_feature_privilege.SubFeaturePrivilege(gp, this.actionMapping[gp.id]);
        if (predicate(privilege, this)) {
          yield privilege;
        }
      }
    }
  }
  getDescription() {
    return this.description;
  }
}
exports.SecuredSubFeature = SecuredSubFeature;