"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EditRoleMappingPage = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _eui = require("@elastic/eui");
var _react = _interopRequireWildcard(require("react"));
var _i18n = require("@kbn/i18n");
var _i18nReact = require("@kbn/i18n-react");
var _mapping_info_panel = require("./mapping_info_panel");
var _rule_editor_panel = require("./rule_editor_panel");
var _role_mapping_validation = require("./services/role_mapping_validation");
var _components = require("../components");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

class EditRoleMappingPage extends _react.Component {
  constructor(props) {
    super(props);
    (0, _defineProperty2.default)(this, "getInfoPanelMode", () => {
      return this.props.readOnly ? 'view' : this.editingExistingRoleMapping() ? 'edit' : 'create';
    });
    (0, _defineProperty2.default)(this, "getFormTitle", () => {
      if (this.props.readOnly) {
        return /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
          id: "xpack.security.management.editRoleMapping.readOnlyRoleMappingTitle",
          defaultMessage: "Viewing role mapping"
        });
      }
      if (this.editingExistingRoleMapping()) {
        return /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
          id: "xpack.security.management.editRoleMapping.editRoleMappingTitle",
          defaultMessage: "Edit role mapping"
        });
      }
      return /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
        id: "xpack.security.management.editRoleMapping.createRoleMappingTitle",
        defaultMessage: "Create role mapping"
      });
    });
    (0, _defineProperty2.default)(this, "getFormButtons", () => {
      if (this.props.readOnly === true) {
        return this.getReturnToRoleMappingListButton();
      }
      return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
        grow: false
      }, this.getSaveButton()), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
        grow: false
      }, this.getCancelButton()), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
        grow: true
      }), this.getDeleteButton());
    });
    (0, _defineProperty2.default)(this, "getReturnToRoleMappingListButton", () => {
      return /*#__PURE__*/_react.default.createElement(_eui.EuiButton
      // {...reactRouterNavigate(this.props.history, '')}
      , {
        onClick: this.backToRoleMappingsList,
        iconType: "arrowLeft",
        "data-test-subj": "roleMappingFormReturnButton"
      }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
        id: "xpack.security.management.editRoleMapping.returnToRoleMappingListButton",
        defaultMessage: "Back to role mappings"
      }));
    });
    (0, _defineProperty2.default)(this, "getSaveButton", () => {
      return /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
        fill: true,
        onClick: this.saveRoleMapping,
        isLoading: this.state.loadState === 'saveInProgress',
        disabled: !this.state.rulesValid || this.state.loadState === 'saveInProgress',
        "data-test-subj": "saveRoleMappingButton"
      }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
        id: "xpack.security.management.editRoleMapping.saveRoleMappingButton",
        defaultMessage: "Save role mapping"
      }));
    });
    (0, _defineProperty2.default)(this, "getCancelButton", () => {
      return /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
        onClick: this.backToRoleMappingsList
      }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
        id: "xpack.security.management.editRoleMapping.cancelButton",
        defaultMessage: "Cancel"
      }));
    });
    (0, _defineProperty2.default)(this, "getDeleteButton", () => {
      if (this.editingExistingRoleMapping() && !this.props.readOnly) {
        return /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
          grow: false
        }, /*#__PURE__*/_react.default.createElement(_components.DeleteProvider, {
          roleMappingsAPI: this.props.roleMappingsAPI,
          notifications: this.props.notifications
        }, deleteRoleMappingsPrompt => {
          return /*#__PURE__*/_react.default.createElement(_eui.EuiButtonEmpty, {
            "data-test-subj": "deleteRoleMappingButton",
            onClick: () => deleteRoleMappingsPrompt([this.state.roleMapping], () => this.backToRoleMappingsList()),
            color: "danger"
          }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
            id: "xpack.security.management.editRoleMapping.deleteRoleMappingButton",
            defaultMessage: "Delete role mapping"
          }));
        }));
      }
      return null;
    });
    (0, _defineProperty2.default)(this, "onRuleValidityChange", rulesValid => {
      this.setState({
        rulesValid
      });
    });
    (0, _defineProperty2.default)(this, "saveRoleMapping", () => {
      if (!this.state.roleMapping) {
        return;
      }
      const {
        isInvalid
      } = (0, _role_mapping_validation.validateRoleMappingForSave)(this.state.roleMapping);
      if (isInvalid) {
        this.setState({
          validateForm: true
        });
        return;
      }
      const roleMappingName = this.state.roleMapping.name;
      this.setState({
        loadState: 'saveInProgress'
      });
      this.props.roleMappingsAPI.saveRoleMapping(this.state.roleMapping).then(() => {
        this.props.notifications.toasts.addSuccess({
          title: _i18n.i18n.translate('xpack.security.management.editRoleMapping.saveSuccess', {
            defaultMessage: `Saved role mapping ''{roleMappingName}''`,
            values: {
              roleMappingName
            }
          }),
          'data-test-subj': 'savedRoleMappingSuccessToast'
        });
        this.backToRoleMappingsList();
      }).catch(e => {
        var _e$body;
        this.props.notifications.toasts.addError(e, {
          title: _i18n.i18n.translate('xpack.security.management.editRoleMapping.saveError', {
            defaultMessage: `Error saving role mapping`
          }),
          toastMessage: e === null || e === void 0 ? void 0 : (_e$body = e.body) === null || _e$body === void 0 ? void 0 : _e$body.message
        });
        this.setState({
          loadState: 'saveInProgress'
        });
      });
    });
    (0, _defineProperty2.default)(this, "editingExistingRoleMapping", () => typeof this.props.name === 'string' && this.props.action === 'edit');
    (0, _defineProperty2.default)(this, "cloningExistingRoleMapping", () => typeof this.props.name === 'string' && this.props.action === 'clone');
    (0, _defineProperty2.default)(this, "backToRoleMappingsList", () => this.props.history.push('/'));
    this.state = {
      loadState: 'loading',
      roleMapping: null,
      hasCompatibleRealms: true,
      canUseStoredScripts: true,
      canUseInlineScripts: true,
      rulesValid: true,
      validateForm: false,
      formError: {
        isInvalid: false
      }
    };
  }
  componentDidMount() {
    this.loadAppData();
  }
  async componentDidUpdate(prevProps) {
    if (prevProps.name !== this.props.name) {
      await this.loadAppData();
    }
  }
  render() {
    const {
      loadState
    } = this.state;
    if (loadState === 'permissionDenied') {
      return /*#__PURE__*/_react.default.createElement(_components.PermissionDenied, null);
    }
    if (loadState === 'loading') {
      return /*#__PURE__*/_react.default.createElement(_eui.EuiPageSection, {
        alignment: "center",
        color: "subdued"
      }, /*#__PURE__*/_react.default.createElement(_components.SectionLoading, null));
    }
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiPageHeader, {
      bottomBorder: true,
      pageTitle: this.getFormTitle(),
      description: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
        id: "xpack.security.management.editRoleMapping.roleMappingDescription",
        defaultMessage: "Use role mappings to control which roles are assigned to your users. {learnMoreLink}",
        values: {
          learnMoreLink: /*#__PURE__*/_react.default.createElement(_eui.EuiLink, {
            href: this.props.docLinks.links.security.mappingRoles,
            external: true,
            target: "_blank"
          }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
            id: "xpack.security.management.editRoleMapping.learnMoreLinkText",
            defaultMessage: "Learn more about role mappings."
          }))
        }
      }), !this.state.hasCompatibleRealms && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
        size: "s"
      }), /*#__PURE__*/_react.default.createElement(_components.NoCompatibleRealms, null)))
    }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
      size: "l"
    }), /*#__PURE__*/_react.default.createElement(_eui.EuiForm, {
      isInvalid: this.state.formError.isInvalid,
      error: this.state.formError.error
    }, /*#__PURE__*/_react.default.createElement(_mapping_info_panel.MappingInfoPanel, {
      "data-test-subj": "roleMappingInfoPanel",
      roleMapping: this.state.roleMapping,
      onChange: roleMapping => this.setState({
        roleMapping
      }),
      mode: this.getInfoPanelMode(),
      validateForm: this.state.validateForm,
      canUseInlineScripts: this.state.canUseInlineScripts,
      canUseStoredScripts: this.state.canUseStoredScripts,
      rolesAPIClient: this.props.rolesAPIClient,
      docLinks: this.props.docLinks
    }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, null), /*#__PURE__*/_react.default.createElement(_rule_editor_panel.RuleEditorPanel, {
      "data-test-subj": "roleMappingRulePanel",
      rawRules: this.state.roleMapping.rules,
      validateForm: this.state.validateForm,
      onValidityChange: this.onRuleValidityChange,
      onChange: rules => this.setState({
        roleMapping: {
          ...this.state.roleMapping,
          rules
        }
      }),
      docLinks: this.props.docLinks,
      readOnly: this.props.readOnly
    }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, null), this.getFormButtons()));
  }
  async loadAppData() {
    try {
      const [features, roleMapping] = await Promise.all([this.props.securityFeaturesAPI.checkFeatures(), this.editingExistingRoleMapping() || this.cloningExistingRoleMapping() ? this.props.roleMappingsAPI.getRoleMapping(this.props.name) : Promise.resolve({
        name: '',
        enabled: true,
        metadata: {},
        role_templates: [],
        roles: [],
        rules: {}
      })]);
      const {
        canReadSecurity,
        canUseStoredScripts,
        canUseInlineScripts,
        hasCompatibleRealms
      } = features;
      const loadState = canReadSecurity ? 'ready' : 'permissionDenied';
      this.setState({
        loadState,
        hasCompatibleRealms,
        canUseStoredScripts,
        canUseInlineScripts,
        roleMapping: {
          ...roleMapping,
          name: this.cloningExistingRoleMapping() ? '' : roleMapping.name
        }
      });
    } catch (e) {
      var _e$body$message, _e$body2;
      this.props.notifications.toasts.addDanger({
        title: _i18n.i18n.translate('xpack.security.management.editRoleMapping.table.fetchingRoleMappingsErrorMessage', {
          defaultMessage: 'Error loading role mapping editor: {message}',
          values: {
            message: (_e$body$message = e === null || e === void 0 ? void 0 : (_e$body2 = e.body) === null || _e$body2 === void 0 ? void 0 : _e$body2.message) !== null && _e$body$message !== void 0 ? _e$body$message : ''
          }
        }),
        'data-test-subj': 'errorLoadingRoleMappingEditorToast'
      });
      this.backToRoleMappingsList();
    }
  }
}
exports.EditRoleMappingPage = EditRoleMappingPage;
(0, _defineProperty2.default)(EditRoleMappingPage, "defaultProps", {
  readOnly: false
});