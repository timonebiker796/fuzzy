"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LogEntryTimestampColumn = exports.LogEntryRowWrapper = exports.LogEntryMessageColumn = exports.LogEntryFlyout = exports.LogEntryFieldColumn = exports.LogEntryContextMenu = exports.LogEntryColumn = exports.LogColumnHeadersWrapper = exports.LogColumnHeader = exports.LogAIAssistant = void 0;
Object.defineProperty(exports, "LogHighlightsStateProvider", {
  enumerable: true,
  get: function () {
    return _log_highlights.LogHighlightsStateProvider;
  }
});
Object.defineProperty(exports, "LogPositionStateProvider", {
  enumerable: true,
  get: function () {
    return _log_position.LogPositionStateProvider;
  }
});
exports.LogStream = void 0;
Object.defineProperty(exports, "LogStreamProvider", {
  enumerable: true,
  get: function () {
    return _log_stream.LogStreamProvider;
  }
});
Object.defineProperty(exports, "LogViewProvider", {
  enumerable: true,
  get: function () {
    return _use_log_view.LogViewProvider;
  }
});
exports.WithSummary = exports.ScrollableLogTextStreamView = void 0;
Object.defineProperty(exports, "getLogViewReferenceFromUrl", {
  enumerable: true,
  get: function () {
    return _log_view_state.getLogViewReferenceFromUrl;
  }
});
Object.defineProperty(exports, "iconColumnId", {
  enumerable: true,
  get: function () {
    return _log_entry_column.iconColumnId;
  }
});
Object.defineProperty(exports, "initializeFromUrl", {
  enumerable: true,
  get: function () {
    return _log_view_state.initializeFromUrl;
  }
});
Object.defineProperty(exports, "listenForUrlChanges", {
  enumerable: true,
  get: function () {
    return _log_view_state.listenForUrlChanges;
  }
});
exports.plugin = plugin;
Object.defineProperty(exports, "updateContextInUrl", {
  enumerable: true,
  get: function () {
    return _log_view_state.updateContextInUrl;
  }
});
Object.defineProperty(exports, "useColumnWidths", {
  enumerable: true,
  get: function () {
    return _log_entry_column.useColumnWidths;
  }
});
Object.defineProperty(exports, "useLogHighlightsStateContext", {
  enumerable: true,
  get: function () {
    return _log_highlights.useLogHighlightsStateContext;
  }
});
Object.defineProperty(exports, "useLogPositionStateContext", {
  enumerable: true,
  get: function () {
    return _log_position.useLogPositionStateContext;
  }
});
Object.defineProperty(exports, "useLogStreamContext", {
  enumerable: true,
  get: function () {
    return _log_stream.useLogStreamContext;
  }
});
Object.defineProperty(exports, "useLogView", {
  enumerable: true,
  get: function () {
    return _use_log_view.useLogView;
  }
});
Object.defineProperty(exports, "useLogViewContext", {
  enumerable: true,
  get: function () {
    return _use_log_view.useLogViewContext;
  }
});
var _sharedUxUtility = require("@kbn/shared-ux-utility");
var _plugin = require("./plugin");
var _use_log_view = require("./hooks/use_log_view");
var _log_stream = require("./containers/logs/log_stream");
var _log_position = require("./containers/logs/log_position");
var _log_highlights = require("./containers/logs/log_highlights");
var _log_entry_column = require("./components/logging/log_text_stream/log_entry_column");
var _log_view_state = require("./observability_logs/log_view_state");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; } /*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
// This exports static code and TypeScript types,
// as well as, Kibana Platform `plugin()` initializer.
function plugin() {
  return new _plugin.LogsSharedPlugin();
}

// Containers & Hook

// Shared components

const WithSummary = exports.WithSummary = (0, _sharedUxUtility.dynamic)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./containers/logs/log_summary/with_summary'))));
const LogEntryFlyout = exports.LogEntryFlyout = (0, _sharedUxUtility.dynamic)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./components/logging/log_entry_flyout/log_entry_flyout'))));
const LogAIAssistant = exports.LogAIAssistant = (0, _sharedUxUtility.dynamic)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./components/log_ai_assistant/log_ai_assistant'))));
const LogStream = exports.LogStream = (0, _sharedUxUtility.dynamic)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./components/log_stream/log_stream'))));
const LogColumnHeader = exports.LogColumnHeader = (0, _sharedUxUtility.dynamic)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./components/logging/log_text_stream/column_headers'))));
const LogColumnHeadersWrapper = exports.LogColumnHeadersWrapper = (0, _sharedUxUtility.dynamic)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./components/logging/log_text_stream/column_headers_wrapper'))));
const LogEntryColumn = exports.LogEntryColumn = (0, _sharedUxUtility.dynamic)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./components/logging/log_text_stream/log_entry_column'))));
const LogEntryContextMenu = exports.LogEntryContextMenu = (0, _sharedUxUtility.dynamic)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./components/logging/log_text_stream/log_entry_context_menu'))));
const LogEntryFieldColumn = exports.LogEntryFieldColumn = (0, _sharedUxUtility.dynamic)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./components/logging/log_text_stream/log_entry_field_column'))));
const LogEntryMessageColumn = exports.LogEntryMessageColumn = (0, _sharedUxUtility.dynamic)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./components/logging/log_text_stream/log_entry_message_column'))));
const LogEntryRowWrapper = exports.LogEntryRowWrapper = (0, _sharedUxUtility.dynamic)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./components/logging/log_text_stream/log_entry_row_wrapper'))));
const LogEntryTimestampColumn = exports.LogEntryTimestampColumn = (0, _sharedUxUtility.dynamic)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./components/logging/log_text_stream/log_entry_timestamp_column'))));
const ScrollableLogTextStreamView = exports.ScrollableLogTextStreamView = (0, _sharedUxUtility.dynamic)(() => Promise.resolve().then(() => _interopRequireWildcard(require('./components/logging/log_text_stream/scrollable_log_text_stream_view'))));

// State machine utils