"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logEntrySearchResponsePayloadRT = exports.logEntrySearchRequestParamsRT = exports.logEntryRT = exports.LOG_ENTRY_SEARCH_STRATEGY = void 0;
var rt = _interopRequireWildcard(require("io-ts"));
var _log_entry = require("../../log_entry");
var _log_views = require("../../log_views");
var _errors = require("../common/errors");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const LOG_ENTRY_SEARCH_STRATEGY = exports.LOG_ENTRY_SEARCH_STRATEGY = 'infra-log-entry';
const logEntrySearchRequestParamsRT = exports.logEntrySearchRequestParamsRT = rt.type({
  logView: _log_views.logViewReferenceRT,
  logEntryId: rt.string
});
const logEntryRT = exports.logEntryRT = rt.type({
  id: rt.string,
  index: rt.string,
  fields: rt.array(_log_entry.logEntryFieldRT),
  cursor: _log_entry.logEntryCursorRT
});
const logEntrySearchResponsePayloadRT = exports.logEntrySearchResponsePayloadRT = rt.intersection([rt.type({
  data: rt.union([logEntryRT, rt.null])
}), rt.partial({
  errors: rt.array(_errors.searchStrategyErrorRT)
})]);