"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CoreDeprecationsRouteHandlerContext = void 0;
function _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }
function _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError("Cannot initialize the same private elements twice on an object"); }
function _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }
function _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }
function _assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
var _client = /*#__PURE__*/new WeakMap();
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

/**
 * The {@link DeprecationsRequestHandlerContext} implementation.
 * @internal
 */
class CoreDeprecationsRouteHandlerContext {
  constructor(deprecationsStart, elasticsearchRouterHandlerContext, savedObjectsRouterHandlerContext) {
    _classPrivateFieldInitSpec(this, _client, void 0);
    this.deprecationsStart = deprecationsStart;
    this.elasticsearchRouterHandlerContext = elasticsearchRouterHandlerContext;
    this.savedObjectsRouterHandlerContext = savedObjectsRouterHandlerContext;
  }
  get client() {
    if (_classPrivateFieldGet(_client, this) == null) {
      _classPrivateFieldSet(_client, this, this.deprecationsStart.asScopedToClient(this.elasticsearchRouterHandlerContext.client, this.savedObjectsRouterHandlerContext.client));
    }
    return _classPrivateFieldGet(_client, this);
  }
}
exports.CoreDeprecationsRouteHandlerContext = CoreDeprecationsRouteHandlerContext;