"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NavigationPublicPlugin = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _rxjs = require("rxjs");
var _common = require("../common");
var _top_nav_menu = require("./top_nav_menu");
var _side_navigation = require("./side_navigation");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

class NavigationPublicPlugin {
  constructor(initializerContext) {
    (0, _defineProperty2.default)(this, "topNavMenuExtensionsRegistry", new _top_nav_menu.TopNavMenuExtensionsRegistry());
    (0, _defineProperty2.default)(this, "stop$", new _rxjs.ReplaySubject(1));
    (0, _defineProperty2.default)(this, "coreStart", void 0);
    (0, _defineProperty2.default)(this, "depsStart", void 0);
    (0, _defineProperty2.default)(this, "isSolutionNavExperiementEnabled$", (0, _rxjs.of)(false));
    this.initializerContext = initializerContext;
  }
  setup(_core) {
    return {
      registerMenuItem: this.topNavMenuExtensionsRegistry.register.bind(this.topNavMenuExtensionsRegistry)
    };
  }
  start(core, depsStart) {
    var _spaces$getActiveSpac;
    this.coreStart = core;
    this.depsStart = depsStart;
    const {
      unifiedSearch,
      cloud,
      cloudExperiments,
      spaces
    } = depsStart;
    const extensions = this.topNavMenuExtensionsRegistry.getAll();
    const chrome = core.chrome;
    const activeSpace$ = (_spaces$getActiveSpac = spaces === null || spaces === void 0 ? void 0 : spaces.getActiveSpace$()) !== null && _spaces$getActiveSpac !== void 0 ? _spaces$getActiveSpac : (0, _rxjs.of)(undefined);

    /*
     *
     *  This helps clients of navigation to create
     *  a TopNav Search Bar which does not uses global unifiedSearch/data/query service
     *
     *  Useful in creating multiple stateful SearchBar in the same app without affecting
     *  global filters
     *
     * */
    const createCustomTopNav = (customUnifiedSearch, customExtensions) => {
      return (0, _top_nav_menu.createTopNav)(customUnifiedSearch !== null && customUnifiedSearch !== void 0 ? customUnifiedSearch : unifiedSearch, customExtensions !== null && customExtensions !== void 0 ? customExtensions : extensions);
    };
    const onCloud = cloud !== undefined; // The new side nav will initially only be available to cloud users
    const isServerless = this.initializerContext.env.packageInfo.buildFlavor === 'serverless';
    if (cloudExperiments && onCloud && !isServerless) {
      this.isSolutionNavExperiementEnabled$ = (0, _rxjs.from)(cloudExperiments.getVariation(_common.SOLUTION_NAV_FEATURE_FLAG_NAME, false).catch(() => false)).pipe((0, _rxjs.shareReplay)(1));
    }

    // Initialize the solution navigation if it is enabled
    (0, _rxjs.combineLatest)([this.isSolutionNavExperiementEnabled$, activeSpace$]).pipe((0, _rxjs.take)(1)).subscribe(([isEnabled, activeSpace]) => {
      this.initiateChromeStyleAndSideNav(chrome, {
        isFeatureEnabled: isEnabled,
        isServerless,
        activeSpace
      });
      if (!isEnabled) return;
      chrome.project.setCloudUrls(cloud);
    });
    return {
      ui: {
        TopNavMenu: (0, _top_nav_menu.createTopNav)(unifiedSearch, extensions),
        AggregateQueryTopNavMenu: (0, _top_nav_menu.createTopNav)(unifiedSearch, extensions),
        createTopNavWithCustomContext: createCustomTopNav
      },
      addSolutionNavigation: solutionNavigation => {
        (0, _rxjs.firstValueFrom)(this.isSolutionNavExperiementEnabled$).then(isEnabled => {
          if (!isEnabled) return;
          this.addSolutionNavigation(solutionNavigation);
        });
      },
      isSolutionNavEnabled$: (0, _rxjs.combineLatest)([this.isSolutionNavExperiementEnabled$, activeSpace$]).pipe((0, _rxjs.map)(([isFeatureEnabled, activeSpace]) => {
        return getIsProjectNav(isFeatureEnabled, activeSpace === null || activeSpace === void 0 ? void 0 : activeSpace.solution) && !isServerless;
      }))
    };
  }
  stop() {
    this.stop$.next();
  }
  getSideNavComponent({
    dataTestSubj,
    panelContentProvider
  } = {}) {
    if (!this.coreStart) throw new Error('coreStart is not available');
    if (!this.depsStart) throw new Error('depsStart is not available');
    const core = this.coreStart;
    const {
      project
    } = core.chrome;
    const activeNavigationNodes$ = project.getActiveNavigationNodes$();
    const navigationTreeUi$ = project.getNavigationTreeUi$();
    return () => /*#__PURE__*/_react.default.createElement(_side_navigation.SideNavComponent, {
      navProps: {
        navigationTree$: navigationTreeUi$,
        dataTestSubj,
        panelContentProvider
      },
      deps: {
        core,
        activeNodes$: activeNavigationNodes$
      }
    });
  }
  addSolutionNavigation(solutionNavigation) {
    if (!this.coreStart) throw new Error('coreStart is not available');
    const {
      dataTestSubj,
      panelContentProvider,
      ...rest
    } = solutionNavigation;
    const sideNavComponent = this.getSideNavComponent({
      dataTestSubj,
      panelContentProvider
    });
    const {
      project
    } = this.coreStart.chrome;
    project.updateSolutionNavigations({
      [solutionNavigation.id]: {
        ...rest,
        sideNavComponent
      }
    });
  }
  initiateChromeStyleAndSideNav(chrome, {
    isFeatureEnabled,
    isServerless,
    activeSpace
  }) {
    const solutionView = activeSpace === null || activeSpace === void 0 ? void 0 : activeSpace.solution;
    const isProjectNav = getIsProjectNav(isFeatureEnabled, solutionView) && !isServerless;

    // On serverless the chrome style is already set by the serverless plugin
    if (!isServerless) {
      chrome.setChromeStyle(isProjectNav ? 'project' : 'classic');
    }
    if (isProjectNav) {
      chrome.project.changeActiveSolutionNavigation(solutionView);
    }
  }
}
exports.NavigationPublicPlugin = NavigationPublicPlugin;
function getIsProjectNav(isFeatureEnabled, solutionView) {
  return isFeatureEnabled && Boolean(solutionView) && isKnownSolutionView(solutionView);
}
function isKnownSolutionView(solution) {
  return Boolean(solution) && ['oblt', 'es', 'security'].includes(solution);
}