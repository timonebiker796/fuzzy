"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TopNavMenuBadges = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _eui = require("@elastic/eui");
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

const TopNavMenuBadges = ({
  badges
}) => {
  if (!badges || badges.length === 0) return null;
  return /*#__PURE__*/_react.default.createElement(_eui.EuiBadgeGroup, {
    className: "kbnTopNavMenu__badgeGroup"
  }, badges.map(createBadge));
};
exports.TopNavMenuBadges = TopNavMenuBadges;
function createBadge({
  badgeText,
  toolTipProps,
  renderCustomBadge,
  ...badgeProps
}, i) {
  const key = `nav-menu-badge-${i}`;
  const Badge = () => /*#__PURE__*/_react.default.createElement(_eui.EuiBadge, (0, _extends2.default)({
    tabIndex: 0
  }, badgeProps), badgeText);
  if (renderCustomBadge) {
    return /*#__PURE__*/_react.default.createElement(_react.Fragment, {
      key: key
    }, renderCustomBadge({
      badgeText
    }));
  }
  return toolTipProps ? /*#__PURE__*/_react.default.createElement(_eui.EuiToolTip, (0, _extends2.default)({
    key: key
  }, toolTipProps), /*#__PURE__*/_react.default.createElement(Badge, null)) : /*#__PURE__*/_react.default.createElement(Badge, {
    key: key
  });
}