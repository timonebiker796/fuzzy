"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSummaryAlertActionVariables = exports.getAlwaysProvidedActionVariables = exports.SummaryAlertProvidedActionVariables = exports.LegacyAlertProvidedActionVariables = exports.AlertProvidedActionVariables = void 0;
exports.transformActionVariables = transformActionVariables;
var _i18n = require("@kbn/i18n");
var _lodash = require("lodash");
var _types = require("../../types");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

function transformProvidedActionVariables(actionVariables, omitMessageVariables) {
  if (!actionVariables) {
    return [];
  }
  const filteredActionVariables = omitMessageVariables ? omitMessageVariables === 'all' ? (0, _lodash.pick)(actionVariables, _types.REQUIRED_ACTION_VARIABLES) : (0, _lodash.pick)(actionVariables, [..._types.REQUIRED_ACTION_VARIABLES, ..._types.CONTEXT_ACTION_VARIABLES]) : actionVariables;
  const paramsVars = prefixKeys(filteredActionVariables.params, 'rule.params.');
  const contextVars = filteredActionVariables.context ? prefixKeys(filteredActionVariables.context, 'context.') : [];
  const stateVars = filteredActionVariables.state ? prefixKeys(filteredActionVariables.state, 'state.') : [];
  return contextVars.concat(paramsVars, stateVars);
}

// return a "flattened" list of action variables for an alertType
function transformActionVariables(actionVariables, summaryActionVariables, omitMessageVariables, isSummaryAction) {
  if (isSummaryAction) {
    const alwaysProvidedVars = getSummaryAlertActionVariables();
    const transformedActionVars = transformProvidedActionVariables(summaryActionVariables, omitMessageVariables);
    return alwaysProvidedVars.concat(transformedActionVars);
  }
  const alwaysProvidedVars = getAlwaysProvidedActionVariables();
  const transformedActionVars = transformProvidedActionVariables(actionVariables, omitMessageVariables);
  return alwaysProvidedVars.concat(transformedActionVars);
}
let AlertProvidedActionVariables = exports.AlertProvidedActionVariables = /*#__PURE__*/function (AlertProvidedActionVariables) {
  AlertProvidedActionVariables["ruleId"] = "rule.id";
  AlertProvidedActionVariables["ruleName"] = "rule.name";
  AlertProvidedActionVariables["ruleSpaceId"] = "rule.spaceId";
  AlertProvidedActionVariables["ruleTags"] = "rule.tags";
  AlertProvidedActionVariables["ruleType"] = "rule.type";
  AlertProvidedActionVariables["ruleUrl"] = "rule.url";
  AlertProvidedActionVariables["ruleParams"] = "rule.params";
  AlertProvidedActionVariables["date"] = "date";
  AlertProvidedActionVariables["alertId"] = "alert.id";
  AlertProvidedActionVariables["alertUuid"] = "alert.uuid";
  AlertProvidedActionVariables["alertActionGroup"] = "alert.actionGroup";
  AlertProvidedActionVariables["alertActionGroupName"] = "alert.actionGroupName";
  AlertProvidedActionVariables["alertActionSubgroup"] = "alert.actionSubgroup";
  AlertProvidedActionVariables["alertFlapping"] = "alert.flapping";
  AlertProvidedActionVariables["kibanaBaseUrl"] = "kibanaBaseUrl";
  AlertProvidedActionVariables["alertConsecutiveMatches"] = "alert.consecutiveMatches";
  return AlertProvidedActionVariables;
}({});
let LegacyAlertProvidedActionVariables = exports.LegacyAlertProvidedActionVariables = /*#__PURE__*/function (LegacyAlertProvidedActionVariables) {
  LegacyAlertProvidedActionVariables["alertId"] = "alertId";
  LegacyAlertProvidedActionVariables["alertName"] = "alertName";
  LegacyAlertProvidedActionVariables["alertInstanceId"] = "alertInstanceId";
  LegacyAlertProvidedActionVariables["alertActionGroup"] = "alertActionGroup";
  LegacyAlertProvidedActionVariables["alertActionGroupName"] = "alertActionGroupName";
  LegacyAlertProvidedActionVariables["alertActionSubgroup"] = "alertActionSubgroup";
  LegacyAlertProvidedActionVariables["tags"] = "tags";
  LegacyAlertProvidedActionVariables["spaceId"] = "spaceId";
  LegacyAlertProvidedActionVariables["params"] = "params";
  return LegacyAlertProvidedActionVariables;
}({});
let SummaryAlertProvidedActionVariables = exports.SummaryAlertProvidedActionVariables = /*#__PURE__*/function (SummaryAlertProvidedActionVariables) {
  SummaryAlertProvidedActionVariables["newAlertsCount"] = "alerts.new.count";
  SummaryAlertProvidedActionVariables["newAlertsData"] = "alerts.new.data";
  SummaryAlertProvidedActionVariables["ongoingAlertsCount"] = "alerts.ongoing.count";
  SummaryAlertProvidedActionVariables["ongoingAlertsData"] = "alerts.ongoing.data";
  SummaryAlertProvidedActionVariables["recoveredAlertsCount"] = "alerts.recovered.count";
  SummaryAlertProvidedActionVariables["recoveredAlertsData"] = "alerts.recovered.data";
  SummaryAlertProvidedActionVariables["allAlertsCount"] = "alerts.all.count";
  SummaryAlertProvidedActionVariables["allAlertsData"] = "alerts.all.data";
  return SummaryAlertProvidedActionVariables;
}({});
const AlertProvidedActionVariableDescriptions = Object.freeze({
  [LegacyAlertProvidedActionVariables.alertId]: {
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.legacyAlertIdLabel', {
      defaultMessage: 'This has been deprecated in favor of {variable}.',
      values: {
        variable: AlertProvidedActionVariables.ruleId
      }
    }),
    deprecated: true
  },
  [LegacyAlertProvidedActionVariables.alertName]: {
    deprecated: true,
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.legacyAlertNameLabel', {
      defaultMessage: 'This has been deprecated in favor of {variable}.',
      values: {
        variable: AlertProvidedActionVariables.ruleName
      }
    })
  },
  [LegacyAlertProvidedActionVariables.alertInstanceId]: {
    deprecated: true,
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.legacyAlertInstanceIdLabel', {
      defaultMessage: 'This has been deprecated in favor of {variable}.',
      values: {
        variable: AlertProvidedActionVariables.alertId
      }
    })
  },
  [LegacyAlertProvidedActionVariables.alertActionGroup]: {
    deprecated: true,
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.legacyAlertActionGroupLabel', {
      defaultMessage: 'This has been deprecated in favor of {variable}.',
      values: {
        variable: AlertProvidedActionVariables.alertActionGroup
      }
    })
  },
  [LegacyAlertProvidedActionVariables.alertActionGroupName]: {
    deprecated: true,
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.legacyAlertActionGroupNameLabel', {
      defaultMessage: 'This has been deprecated in favor of {variable}.',
      values: {
        variable: AlertProvidedActionVariables.alertActionGroupName
      }
    })
  },
  [LegacyAlertProvidedActionVariables.tags]: {
    deprecated: true,
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.legacyTagsLabel', {
      defaultMessage: 'This has been deprecated in favor of {variable}.',
      values: {
        variable: AlertProvidedActionVariables.ruleTags
      }
    })
  },
  [LegacyAlertProvidedActionVariables.spaceId]: {
    deprecated: true,
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.legacySpaceIdLabel', {
      defaultMessage: 'This has been deprecated in favor of {variable}.',
      values: {
        variable: AlertProvidedActionVariables.ruleSpaceId
      }
    })
  },
  [LegacyAlertProvidedActionVariables.params]: {
    deprecated: true,
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.legacyParamsLabel', {
      defaultMessage: 'This has been deprecated in favor of {variable}.',
      values: {
        variable: AlertProvidedActionVariables.ruleParams
      }
    })
  },
  [AlertProvidedActionVariables.date]: {
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.dateLabel', {
      defaultMessage: 'The date the rule scheduled the action.'
    })
  },
  [AlertProvidedActionVariables.kibanaBaseUrl]: {
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.kibanaBaseUrlLabel', {
      defaultMessage: 'The configured server.publicBaseUrl value or empty string if not configured.'
    })
  },
  [AlertProvidedActionVariables.ruleId]: {
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.ruleIdLabel', {
      defaultMessage: 'The ID of the rule.'
    })
  },
  [AlertProvidedActionVariables.ruleName]: {
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.ruleNameLabel', {
      defaultMessage: 'The name of the rule.'
    })
  },
  [AlertProvidedActionVariables.ruleSpaceId]: {
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.ruleSpaceIdLabel', {
      defaultMessage: 'The space ID of the rule.'
    })
  },
  [AlertProvidedActionVariables.ruleType]: {
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.ruleTypeLabel', {
      defaultMessage: 'The type of rule.'
    })
  },
  [AlertProvidedActionVariables.ruleTags]: {
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.ruleTagsLabel', {
      defaultMessage: 'The tags of the rule.'
    })
  },
  [AlertProvidedActionVariables.ruleParams]: {
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.ruleParamsLabel', {
      defaultMessage: 'The parameters of the rule.'
    })
  },
  [AlertProvidedActionVariables.ruleUrl]: {
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.ruleUrlLabel', {
      defaultMessage: 'The URL to the rule that generated the alert. This will be an empty string if the server.publicBaseUrl is not configured.'
    }),
    usesPublicBaseUrl: true
  },
  [AlertProvidedActionVariables.alertId]: {
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.alertIdLabel', {
      defaultMessage: 'The ID of the alert that scheduled actions for the rule.'
    })
  },
  [AlertProvidedActionVariables.alertUuid]: {
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.alertUuidLabel', {
      defaultMessage: 'The UUID of the alert that scheduled actions for the rule.'
    })
  },
  [AlertProvidedActionVariables.alertActionGroup]: {
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.alertActionGroupLabel', {
      defaultMessage: 'The action group of the alert that scheduled actions for the rule.'
    })
  },
  [AlertProvidedActionVariables.alertActionGroupName]: {
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.alertActionGroupNameLabel', {
      defaultMessage: 'The human readable name of the action group of the alert that scheduled actions for the rule.'
    })
  },
  [AlertProvidedActionVariables.alertFlapping]: {
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.alertFlappingLabel', {
      defaultMessage: 'A flag on the alert that indicates whether the alert status is changing repeatedly.'
    })
  },
  [AlertProvidedActionVariables.alertConsecutiveMatches]: {
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.alertConsecutiveMatchesLabel', {
      defaultMessage: 'The number of consecutive runs that meet the rule conditions.'
    })
  }
});
const SummarizedAlertProvidedActionVariableDescriptions = Object.freeze({
  ...AlertProvidedActionVariableDescriptions,
  [SummaryAlertProvidedActionVariables.allAlertsCount]: {
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.allAlertsCountLabel', {
      defaultMessage: 'The count of all alerts.'
    })
  },
  [SummaryAlertProvidedActionVariables.allAlertsData]: {
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.allAlertsDataLabel', {
      defaultMessage: 'An array of objects for all alerts.'
    })
  },
  [SummaryAlertProvidedActionVariables.newAlertsCount]: {
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.newAlertsCountLabel', {
      defaultMessage: 'The count of new alerts.'
    })
  },
  [SummaryAlertProvidedActionVariables.newAlertsData]: {
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.newAlertsDataLabel', {
      defaultMessage: 'An array of objects for new alerts.'
    })
  },
  [SummaryAlertProvidedActionVariables.ongoingAlertsCount]: {
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.ongoingAlertsCountLabel', {
      defaultMessage: 'The count of ongoing alerts.'
    })
  },
  [SummaryAlertProvidedActionVariables.ongoingAlertsData]: {
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.ongoingAlertsDataLabel', {
      defaultMessage: 'An array of objects for ongoing alerts.'
    })
  },
  [SummaryAlertProvidedActionVariables.recoveredAlertsCount]: {
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.recoveredAlertsCountLabel', {
      defaultMessage: 'The count of recovered alerts.'
    })
  },
  [SummaryAlertProvidedActionVariables.recoveredAlertsData]: {
    description: _i18n.i18n.translate('xpack.triggersActionsUI.actionVariables.recoveredAlertsDataLabel', {
      defaultMessage: 'An array of objects for recovered alerts.'
    })
  }
});
function prefixKeys(actionVariables, prefix) {
  return actionVariables.map(actionVariable => {
    return {
      ...actionVariable,
      name: `${prefix}${actionVariable.name}`
    };
  });
}
const transformContextVariables = variables => Object.entries(variables).map(([key, variable]) => ({
  ...variable,
  name: key
}));
const getAlwaysProvidedActionVariables = () => {
  return transformContextVariables(AlertProvidedActionVariableDescriptions);
};
exports.getAlwaysProvidedActionVariables = getAlwaysProvidedActionVariables;
const getSummaryAlertActionVariables = () => {
  return transformContextVariables(SummarizedAlertProvidedActionVariableDescriptions);
};
exports.getSummaryAlertActionVariables = getSummaryAlertActionVariables;