"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ActionTypeFilter = void 0;
var _react = _interopRequireWildcard(require("react"));
var _i18nReact = require("@kbn/i18n-react");
var _eui = require("@elastic/eui");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const ActionTypeFilter = ({
  actionTypes,
  onChange: onFilterChange,
  filters
}) => {
  const {
    euiTheme
  } = (0, _eui.useEuiTheme)();
  const [isPopoverOpen, setIsPopoverOpen] = (0, _react.useState)(false);
  const onClick = (0, _react.useCallback)(item => {
    return () => {
      const isPreviouslyChecked = filters.includes(item.id);
      if (isPreviouslyChecked) {
        onFilterChange(filters.filter(val => val !== item.id));
      } else {
        onFilterChange(filters.concat(item.id));
      }
    };
  }, [filters, onFilterChange]);
  return /*#__PURE__*/_react.default.createElement(_eui.EuiPopover, {
    isOpen: isPopoverOpen,
    closePopover: () => setIsPopoverOpen(false),
    button: /*#__PURE__*/_react.default.createElement(_eui.EuiFilterButton, {
      iconType: "arrowDown",
      hasActiveFilters: filters.length > 0,
      numActiveFilters: filters.length,
      numFilters: filters.length,
      onClick: () => setIsPopoverOpen(!isPopoverOpen),
      "data-test-subj": "actionTypeFilterButton"
    }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.triggersActionsUI.sections.rulesList.actionTypeFilterLabel",
      defaultMessage: "Action type"
    }))
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "eui-yScroll",
    css: {
      maxHeight: euiTheme.base * 30
    }
  }, actionTypes.map(item => /*#__PURE__*/_react.default.createElement(_eui.EuiFilterSelectItem, {
    key: item.id,
    onClick: onClick(item),
    checked: filters.includes(item.id) ? 'on' : undefined,
    "data-test-subj": `actionType${item.id}FilterOption`
  }, item.name))));
};
exports.ActionTypeFilter = ActionTypeFilter;