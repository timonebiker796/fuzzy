"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.alertSearchBarStateContainer = exports.alertSearchBarState = exports.Provider = void 0;
exports.useAlertSearchBarStateContainer = useAlertSearchBarStateContainer;
exports.useContainer = void 0;
var _Either = require("fp-ts/Either");
var _pipeable = require("fp-ts/pipeable");
var _react = require("react");
var _reactRouterDom = require("react-router-dom");
var _public = require("@kbn/kibana-utils-plugin/public");
var t = _interopRequireWildcard(require("io-ts"));
var _ioTsUtils = require("@kbn/io-ts-utils");
var _kibana = require("../../../common/lib/kibana");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const defaultState = {
  rangeFrom: 'now-24h',
  rangeTo: 'now',
  kuery: '',
  filters: [],
  controlFilters: [],
  filterControls: []
};
const transitions = {
  setRangeFrom: state => rangeFrom => ({
    ...state,
    rangeFrom
  }),
  setRangeTo: state => rangeTo => ({
    ...state,
    rangeTo
  }),
  setKuery: state => kuery => ({
    ...state,
    kuery
  }),
  setFilters: state => filters => ({
    ...state,
    filters
  }),
  setControlFilters: state => controlFilters => ({
    ...state,
    controlFilters
  }),
  setSavedQueryId: state => savedQueryId => ({
    ...state,
    savedQueryId
  }),
  setFilterControls: state => filterControls => ({
    ...state,
    filterControls
  })
};
const alertSearchBarStateContainer = exports.alertSearchBarStateContainer = (0, _public.createStateContainer)(defaultState, transitions);
const {
  Provider,
  useContainer
} = (0, _public.createStateContainerReactHelpers)();
exports.useContainer = useContainer;
exports.Provider = Provider;
function useAlertSearchBarStateContainer(urlStorageKey, {
  replace
} = {}) {
  const [savedQuery, setSavedQuery] = (0, _react.useState)();
  const stateContainer = useContainer();
  useUrlStateSyncEffect(stateContainer, urlStorageKey, replace);
  const {
    setRangeFrom,
    setRangeTo,
    setKuery,
    setFilters,
    setSavedQueryId,
    setControlFilters,
    setFilterControls
  } = stateContainer.transitions;
  const {
    rangeFrom,
    rangeTo,
    kuery,
    filters,
    savedQueryId,
    controlFilters,
    filterControls
  } = (0, _public.useContainerSelector)(stateContainer, state => state);
  (0, _react.useEffect)(() => {
    if (!savedQuery) {
      setSavedQueryId(undefined);
      return;
    }
    if (savedQuery.id !== savedQueryId) {
      var _savedQuery$attribute, _savedQuery$attribute2, _savedQuery$attribute3;
      setSavedQueryId(savedQuery.id);
      if (typeof savedQuery.attributes.query.query === 'string') {
        setKuery(savedQuery.attributes.query.query);
      }
      if ((_savedQuery$attribute = savedQuery.attributes.filters) !== null && _savedQuery$attribute !== void 0 && _savedQuery$attribute.length) {
        setFilters(savedQuery.attributes.filters);
      }
      if ((_savedQuery$attribute2 = savedQuery.attributes.timefilter) !== null && _savedQuery$attribute2 !== void 0 && _savedQuery$attribute2.from) {
        setRangeFrom(savedQuery.attributes.timefilter.from);
      }
      if ((_savedQuery$attribute3 = savedQuery.attributes.timefilter) !== null && _savedQuery$attribute3 !== void 0 && _savedQuery$attribute3.to) {
        setRangeFrom(savedQuery.attributes.timefilter.to);
      }
    }
  }, [savedQuery, savedQueryId, setFilters, setKuery, setRangeFrom, setSavedQueryId, stateContainer]);
  return {
    kuery,
    onKueryChange: setKuery,
    filters,
    onFiltersChange: setFilters,
    controlFilters,
    onControlFiltersChange: setControlFilters,
    filterControls,
    onFilterControlsChange: setFilterControls,
    rangeFrom,
    onRangeFromChange: setRangeFrom,
    rangeTo,
    onRangeToChange: setRangeTo,
    savedQuery,
    setSavedQuery,
    clearSavedQuery() {
      setSavedQueryId(undefined);
    }
  };
}
const setupUrlStateSync = (stateContainer, urlStateStorage, urlStorageKey, replace = true) => {
  // This handles filling the state when an incomplete URL set is provided
  const setWithDefaults = changedState => {
    stateContainer.set({
      ...defaultState,
      ...changedState
    });
  };
  return (0, _public.syncState)({
    storageKey: urlStorageKey,
    stateContainer: {
      ...stateContainer,
      set: setWithDefaults
    },
    stateStorage: {
      ...urlStateStorage,
      set: (key, state) => urlStateStorage.set(key, state, {
        replace
      })
    }
  });
};
const useUrlStateSyncEffect = (stateContainer, urlStorageKey, replace = true) => {
  const history = (0, _reactRouterDom.useHistory)();
  const {
    data: {
      query: {
        timefilter: {
          timefilter: timeFilterService
        }
      }
    }
  } = (0, _kibana.useKibana)().services;
  (0, _react.useEffect)(() => {
    const urlStateStorage = (0, _public.createKbnUrlStateStorage)({
      history,
      useHash: false,
      useHashQuery: false
    });
    const {
      start,
      stop
    } = setupUrlStateSync(stateContainer, urlStateStorage, urlStorageKey, replace);
    start();
    syncUrlStateWithInitialContainerState(timeFilterService, stateContainer, urlStateStorage, urlStorageKey, replace);
    return stop;
  }, [stateContainer, history, timeFilterService, urlStorageKey, replace]);
};
const alertSearchBarState = exports.alertSearchBarState = t.partial({
  rangeFrom: _ioTsUtils.datemathStringRt,
  rangeTo: _ioTsUtils.datemathStringRt,
  kuery: t.string
});
const syncUrlStateWithInitialContainerState = (timeFilterService, stateContainer, urlStateStorage, urlStorageKey, replace = true) => {
  const urlState = alertSearchBarState.decode(urlStateStorage.get(urlStorageKey));
  if ((0, _Either.isRight)(urlState)) {
    const newState = {
      ...defaultState,
      ...(0, _pipeable.pipe)(urlState).right
    };
    stateContainer.set(newState);
    urlStateStorage.set(urlStorageKey, stateContainer.get(), {
      replace: true
    });
    return;
  } else if (timeFilterService.isTimeTouched()) {
    const {
      from,
      to
    } = timeFilterService.getTime();
    const newState = {
      ...defaultState,
      rangeFrom: from,
      rangeTo: to
    };
    stateContainer.set(newState);
  } else {
    // Reset the state container when no URL state or timefilter range is set to avoid accidentally
    // re-using state set on a previous visit to the page in the same session
    stateContainer.set(defaultState);
  }
  urlStateStorage.set(urlStorageKey, stateContainer.get(), {
    replace
  });
};