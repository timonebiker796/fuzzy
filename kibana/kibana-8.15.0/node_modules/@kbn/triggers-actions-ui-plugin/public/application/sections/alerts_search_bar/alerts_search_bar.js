"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AlertsSearchBar = AlertsSearchBar;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _public = require("@kbn/kibana-react-plugin/public");
var _esQuery = require("@kbn/es-query");
var _ruleDataUtils = require("@kbn/rule-data-utils");
var _quick_filters = require("./quick_filters");
var _constants = require("./constants");
var _translations = require("./translations");
var _use_alert_data_view = require("../../hooks/use_alert_data_view");
var _use_rule_aad_fields = require("../../hooks/use_rule_aad_fields");
var _use_load_rule_types_query = require("../../hooks/use_load_rule_types_query");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const SA_ALERTS = {
  type: 'alerts',
  fields: {}
};

// TODO Share buildEsQuery to be used between AlertsSearchBar and AlertsStateTable component https://github.com/elastic/kibana/issues/144615
// Also TODO: Replace all references to this component with the one from alerts-ui-shared
function AlertsSearchBar({
  appName,
  disableQueryLanguageSwitcher = false,
  featureIds,
  ruleTypeId,
  query,
  filters,
  quickFilters = [],
  onQueryChange,
  onQuerySubmit,
  onFiltersUpdated,
  rangeFrom,
  rangeTo,
  showFilterBar = false,
  showDatePicker = true,
  showSubmitButton = true,
  placeholder = _translations.SEARCH_BAR_PLACEHOLDER,
  submitOnBlur = false,
  filtersForSuggestions,
  ...props
}) {
  var _ruleType$ruleTypesSt;
  const {
    unifiedSearch: {
      ui: {
        SearchBar
      }
    }
  } = (0, _public.useKibana)().services;
  const [queryLanguage, setQueryLanguage] = (0, _react.useState)('kuery');
  const {
    dataViews,
    loading
  } = (0, _use_alert_data_view.useAlertDataViews)(featureIds !== null && featureIds !== void 0 ? featureIds : []);
  const {
    aadFields,
    loading: fieldsLoading
  } = (0, _use_rule_aad_fields.useRuleAADFields)(ruleTypeId);
  const indexPatterns = ruleTypeId && aadFields !== null && aadFields !== void 0 && aadFields.length ? [{
    title: ruleTypeId,
    fields: aadFields
  }] : dataViews;
  const ruleType = (0, _use_load_rule_types_query.useLoadRuleTypesQuery)({
    filteredRuleTypes: ruleTypeId !== undefined ? [ruleTypeId] : [],
    enabled: ruleTypeId !== undefined
  });
  const isSecurity = featureIds && featureIds.length === 1 && featureIds.includes(_ruleDataUtils.AlertConsumers.SIEM) || ruleType && ruleTypeId && ((_ruleType$ruleTypesSt = ruleType.ruleTypesState.data.get(ruleTypeId)) === null || _ruleType$ruleTypesSt === void 0 ? void 0 : _ruleType$ruleTypesSt.producer) === _ruleDataUtils.AlertConsumers.SIEM;
  const onSearchQuerySubmit = (0, _react.useCallback)(({
    dateRange,
    query: nextQuery
  }, isUpdate) => {
    var _nextQuery$language;
    onQuerySubmit({
      dateRange,
      query: typeof (nextQuery === null || nextQuery === void 0 ? void 0 : nextQuery.query) === 'string' ? nextQuery.query : undefined
    }, isUpdate);
    setQueryLanguage((_nextQuery$language = nextQuery === null || nextQuery === void 0 ? void 0 : nextQuery.language) !== null && _nextQuery$language !== void 0 ? _nextQuery$language : 'kuery');
  }, [onQuerySubmit, setQueryLanguage]);
  const onSearchQueryChange = (0, _react.useCallback)(({
    dateRange,
    query: nextQuery
  }) => {
    var _nextQuery$language2;
    onQueryChange === null || onQueryChange === void 0 ? void 0 : onQueryChange({
      dateRange,
      query: typeof (nextQuery === null || nextQuery === void 0 ? void 0 : nextQuery.query) === 'string' ? nextQuery.query : undefined
    });
    setQueryLanguage((_nextQuery$language2 = nextQuery === null || nextQuery === void 0 ? void 0 : nextQuery.language) !== null && _nextQuery$language2 !== void 0 ? _nextQuery$language2 : 'kuery');
  }, [onQueryChange, setQueryLanguage]);
  const onRefresh = ({
    dateRange
  }) => {
    onQuerySubmit({
      dateRange
    });
  };
  const additionalQueryBarMenuItems = (0, _react.useMemo)(() => {
    if (showFilterBar && quickFilters.length > 0) {
      // EuiContextMenu expects a flattened panels structure so here we collect all
      // the nested panels in a linear list
      const panels = [];
      const quickFiltersItemToContextMenuItem = qf => {
        if ((0, _quick_filters.isQuickFiltersGroup)(qf)) {
          var _qf$icon;
          const panelId = `quick-filters-panel-${panels.length}`;
          panels.push({
            id: panelId,
            title: qf.title,
            items: qf.items.map(quickFiltersItemToContextMenuItem),
            'data-test-subj': panelId
          });
          return {
            name: qf.title,
            icon: (_qf$icon = qf.icon) !== null && _qf$icon !== void 0 ? _qf$icon : 'filterInCircle',
            panel: panelId,
            'data-test-subj': `quick-filters-item-${qf.title}`
          };
        } else {
          var _qf$icon2;
          const {
            filter,
            ...menuItem
          } = qf;
          return {
            ...menuItem,
            icon: (_qf$icon2 = qf.icon) !== null && _qf$icon2 !== void 0 ? _qf$icon2 : 'filterInCircle',
            onClick: () => {
              if (!(filters !== null && filters !== void 0 && filters.some(f => (0, _esQuery.compareFilters)(f, filter)))) {
                onFiltersUpdated === null || onFiltersUpdated === void 0 ? void 0 : onFiltersUpdated([...(filters !== null && filters !== void 0 ? filters : []), filter]);
              }
            },
            'data-test-subj': `quick-filters-item-${qf.name}`
          };
        }
      };
      return {
        items: quickFilters.map(quickFiltersItemToContextMenuItem),
        panels
      };
    } else {
      return {
        items: [],
        panels: []
      };
    }
  }, [filters, onFiltersUpdated, quickFilters, showFilterBar]);
  return /*#__PURE__*/_react.default.createElement(SearchBar, (0, _extends2.default)({
    appName: appName,
    disableQueryLanguageSwitcher: disableQueryLanguageSwitcher
    // @ts-expect-error - DataView fields prop and SearchBar indexPatterns props are overly broad
    ,
    indexPatterns: loading || fieldsLoading ? _constants.NO_INDEX_PATTERNS : indexPatterns,
    placeholder: placeholder,
    query: {
      query: query !== null && query !== void 0 ? query : '',
      language: queryLanguage
    },
    filters: filters,
    additionalQueryBarMenuItems: additionalQueryBarMenuItems,
    dateRangeFrom: rangeFrom,
    dateRangeTo: rangeTo,
    displayStyle: "inPage",
    showFilterBar: showFilterBar,
    onQuerySubmit: onSearchQuerySubmit,
    onFiltersUpdated: onFiltersUpdated,
    onRefresh: onRefresh,
    showDatePicker: showDatePicker,
    showQueryInput: true,
    saveQueryMenuVisibility: "allowed_by_app_privilege",
    showSubmitButton: showSubmitButton,
    submitOnBlur: submitOnBlur,
    onQueryChange: onSearchQueryChange,
    suggestionsAbstraction: isSecurity ? undefined : SA_ALERTS,
    filtersForSuggestions: filtersForSuggestions
  }, props));
}

// eslint-disable-next-line import/no-default-export