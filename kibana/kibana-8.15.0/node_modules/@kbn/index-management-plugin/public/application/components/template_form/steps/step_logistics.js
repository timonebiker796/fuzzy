"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StepLogistics = void 0;
var _react = _interopRequireWildcard(require("react"));
var _eui = require("@elastic/eui");
var _i18nReact = require("@kbn/i18n-react");
var _i18n = require("@kbn/i18n");
var _shared_imports = require("../../../../shared_imports");
var _shared = require("../../shared");
var _documentation = require("../../../services/documentation");
var _template_form_schemas = require("../template_form_schemas");
var _constants = require("../../../../../common/constants");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

// Create or Form components with partial props that are common to all instances
const UseField = (0, _shared_imports.getUseField)({
  component: _shared_imports.Field
});
const FormRow = (0, _shared_imports.getFormRow)({
  titleTag: 'h3'
});
function getFieldsMeta(esDocsBase) {
  return {
    name: {
      title: _i18n.i18n.translate('xpack.idxMgmt.templateForm.stepLogistics.nameTitle', {
        defaultMessage: 'Name'
      }),
      description: _i18n.i18n.translate('xpack.idxMgmt.templateForm.stepLogistics.nameDescription', {
        defaultMessage: 'A unique identifier for this template.'
      }),
      testSubject: 'nameField'
    },
    indexPatterns: {
      title: _i18n.i18n.translate('xpack.idxMgmt.templateForm.stepLogistics.indexPatternsTitle', {
        defaultMessage: 'Index patterns'
      }),
      description: _i18n.i18n.translate('xpack.idxMgmt.templateForm.stepLogistics.indexPatternsDescription', {
        defaultMessage: 'The index patterns to apply to the template.'
      }),
      testSubject: 'indexPatternsField'
    },
    createDataStream: {
      title: _i18n.i18n.translate('xpack.idxMgmt.templateForm.stepLogistics.dataStreamTitle', {
        defaultMessage: 'Data stream'
      }),
      description: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
        id: "xpack.idxMgmt.templateForm.stepLogistics.dataStreamDescription",
        defaultMessage: "The template creates data streams instead of indices. {docsLink}",
        values: {
          docsLink: /*#__PURE__*/_react.default.createElement(_eui.EuiLink, {
            href: _documentation.documentationService.getDataStreamsDocumentationLink(),
            target: "_blank",
            external: true
          }, _i18n.i18n.translate('xpack.idxMgmt.templateForm.stepLogistics.dataStreamDocumentionLink', {
            defaultMessage: 'Learn more.'
          }))
        }
      }),
      testSubject: 'dataStreamField'
    },
    order: {
      title: _i18n.i18n.translate('xpack.idxMgmt.templateForm.stepLogistics.orderTitle', {
        defaultMessage: 'Merge order'
      }),
      description: _i18n.i18n.translate('xpack.idxMgmt.templateForm.stepLogistics.orderDescription', {
        defaultMessage: 'The merge order when multiple templates match an index.'
      }),
      testSubject: 'orderField'
    },
    priority: {
      title: _i18n.i18n.translate('xpack.idxMgmt.templateForm.stepLogistics.priorityTitle', {
        defaultMessage: 'Priority'
      }),
      description: _i18n.i18n.translate('xpack.idxMgmt.templateForm.stepLogistics.priorityDescription', {
        defaultMessage: 'Only the highest priority template will be applied.'
      }),
      testSubject: 'priorityField'
    },
    version: {
      title: _i18n.i18n.translate('xpack.idxMgmt.templateForm.stepLogistics.versionTitle', {
        defaultMessage: 'Version'
      }),
      description: _i18n.i18n.translate('xpack.idxMgmt.templateForm.stepLogistics.versionDescription', {
        defaultMessage: 'A number that identifies the template to external management systems.'
      }),
      testSubject: 'versionField'
    },
    dataRetention: {
      title: _i18n.i18n.translate('xpack.idxMgmt.templateForm.stepLogistics.dataRetentionTitle', {
        defaultMessage: 'Data retention'
      }),
      description: _i18n.i18n.translate('xpack.idxMgmt.templateForm.stepLogistics.dataRetentionDescription', {
        defaultMessage: 'Data will be kept at least this long before being automatically deleted.'
      }),
      unitTestSubject: 'unitDataRetentionField'
    },
    allowAutoCreate: {
      title: _i18n.i18n.translate('xpack.idxMgmt.templateForm.stepLogistics.allowAutoCreateTitle', {
        defaultMessage: 'Allow auto create'
      }),
      description: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
        id: "xpack.idxMgmt.templateForm.stepLogistics.allowAutoCreateDescription",
        defaultMessage: "This setting overwrites the value of the {settingName} cluster setting. If set to {true} in a template, then indices can be automatically created using that template.",
        values: {
          settingName: /*#__PURE__*/_react.default.createElement(_eui.EuiCode, null, "action.auto_create_index"),
          true: /*#__PURE__*/_react.default.createElement(_eui.EuiCode, null, "true")
        }
      }),
      testSubject: 'allowAutoCreateField'
    }
  };
}
function formDeserializer(formData) {
  return {
    ...formData,
    addMeta: Boolean(formData._meta && Object.keys(formData._meta).length),
    doCreateDataStream: Boolean(formData.dataStream)
  };
}
function getformSerializer(initialTemplateData = {}) {
  return formData => {
    var _initialTemplateData$;
    const {
      addMeta,
      doCreateDataStream,
      ...rest
    } = formData;
    const dataStream = doCreateDataStream ? (_initialTemplateData$ = initialTemplateData.dataStream) !== null && _initialTemplateData$ !== void 0 ? _initialTemplateData$ : {} : undefined;
    return {
      ...rest,
      dataStream
    };
  };
}
const StepLogistics = exports.StepLogistics = /*#__PURE__*/_react.default.memo(({
  defaultValue,
  isEditing = false,
  onChange,
  isLegacy = false
}) => {
  const {
    form
  } = (0, _shared_imports.useForm)({
    schema: _template_form_schemas.schemas.logistics,
    defaultValue,
    options: {
      stripEmptyFields: false
    },
    serializer: getformSerializer(defaultValue),
    deserializer: formDeserializer
  });
  const {
    submit,
    isSubmitted,
    isValid: isFormValid,
    getErrors: getFormErrors,
    getFormData
  } = form;
  const [{
    addMeta,
    doCreateDataStream,
    lifecycle
  }] = (0, _shared_imports.useFormData)({
    form,
    watch: ['addMeta', 'lifecycle.enabled', 'lifecycle.infiniteDataRetention', 'doCreateDataStream']
  });

  /**
   * When the consumer call validate() on this step, we submit the form so it enters the "isSubmitted" state
   * and we can display the form errors on top of the forms if there are any.
   */
  const validate = (0, _react.useCallback)(async () => {
    return (await submit()).isValid;
  }, [submit]);
  (0, _react.useEffect)(() => {
    onChange({
      isValid: isFormValid,
      getData: getFormData,
      validate
    });
  }, [onChange, isFormValid, validate, getFormData]);
  const {
    name,
    indexPatterns,
    createDataStream,
    order,
    priority,
    version,
    dataRetention,
    allowAutoCreate
  } = getFieldsMeta(_documentation.documentationService.getEsDocsBase());
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    justifyContent: "spaceBetween"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiTitle, null, /*#__PURE__*/_react.default.createElement("h2", {
    "data-test-subj": "stepTitle"
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.idxMgmt.templateForm.stepLogistics.stepTitle",
    defaultMessage: "Logistics"
  })))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiButtonEmpty, {
    size: "s",
    flush: "right",
    href: _documentation.documentationService.getTemplatesDocumentationLink(isLegacy),
    target: "_blank",
    iconType: "help"
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.idxMgmt.templateForm.stepLogistics.docsButtonLabel",
    defaultMessage: "Index Templates docs"
  })))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "l"
  }), /*#__PURE__*/_react.default.createElement(_shared_imports.Form, {
    form: form,
    isInvalid: isSubmitted && !isFormValid,
    error: getFormErrors(),
    "data-test-subj": "stepLogistics"
  }, /*#__PURE__*/_react.default.createElement(FormRow, {
    title: name.title,
    description: name.description
  }, /*#__PURE__*/_react.default.createElement(UseField, {
    path: "name",
    componentProps: {
      ['data-test-subj']: name.testSubject,
      euiFieldProps: {
        disabled: isEditing
      }
    },
    config: isEditing ? _template_form_schemas.nameConfigWithoutValidations : _template_form_schemas.nameConfig
  })), /*#__PURE__*/_react.default.createElement(FormRow, {
    title: indexPatterns.title,
    description: indexPatterns.description
  }, /*#__PURE__*/_react.default.createElement(UseField, {
    path: "indexPatterns",
    componentProps: {
      ['data-test-subj']: indexPatterns.testSubject
    }
  })), isLegacy !== true && /*#__PURE__*/_react.default.createElement(FormRow, {
    title: createDataStream.title,
    description: createDataStream.description
  }, /*#__PURE__*/_react.default.createElement(UseField, {
    path: "doCreateDataStream",
    componentProps: {
      'data-test-subj': createDataStream.testSubject
    }
  })), doCreateDataStream && /*#__PURE__*/_react.default.createElement(FormRow, {
    title: dataRetention.title,
    description: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, dataRetention.description, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
      size: "m"
    }), /*#__PURE__*/_react.default.createElement(UseField, {
      path: "lifecycle.enabled",
      componentProps: {
        'data-test-subj': 'dataRetentionToggle'
      }
    }))
  }, (lifecycle === null || lifecycle === void 0 ? void 0 : lifecycle.enabled) && /*#__PURE__*/_react.default.createElement(UseField, {
    path: "lifecycle.value",
    component: _shared_imports.NumericField,
    labelAppend: /*#__PURE__*/_react.default.createElement(UseField, {
      path: "lifecycle.infiniteDataRetention",
      "data-test-subj": "infiniteDataRetentionToggle",
      componentProps: {
        euiFieldProps: {
          compressed: true
        }
      }
    }),
    componentProps: {
      euiFieldProps: {
        disabled: lifecycle === null || lifecycle === void 0 ? void 0 : lifecycle.infiniteDataRetention,
        'data-test-subj': 'valueDataRetentionField',
        min: 1,
        append: /*#__PURE__*/_react.default.createElement(_shared.UnitField, {
          path: "lifecycle.unit",
          options: _shared.timeUnits,
          disabled: lifecycle === null || lifecycle === void 0 ? void 0 : lifecycle.infiniteDataRetention,
          euiFieldProps: {
            'data-test-subj': 'unitDataRetentionField'
          }
        })
      }
    }
  })), isLegacy && /*#__PURE__*/_react.default.createElement(FormRow, {
    title: order.title,
    description: order.description
  }, /*#__PURE__*/_react.default.createElement(UseField, {
    path: "order",
    componentProps: {
      ['data-test-subj']: order.testSubject
    }
  })), isLegacy === false && /*#__PURE__*/_react.default.createElement(FormRow, {
    title: priority.title,
    description: priority.description
  }, /*#__PURE__*/_react.default.createElement(UseField, {
    path: "priority",
    componentProps: {
      ['data-test-subj']: priority.testSubject
    }
  })), /*#__PURE__*/_react.default.createElement(FormRow, {
    title: version.title,
    description: version.description
  }, /*#__PURE__*/_react.default.createElement(UseField, {
    path: "version",
    componentProps: {
      ['data-test-subj']: version.testSubject
    }
  })), isLegacy === false && /*#__PURE__*/_react.default.createElement(FormRow, {
    title: allowAutoCreate.title,
    description: allowAutoCreate.description
  }, /*#__PURE__*/_react.default.createElement(UseField, {
    path: "allowAutoCreate",
    component: _shared_imports.RadioGroupField,
    componentProps: {
      'data-test-subj': allowAutoCreate.testSubject,
      euiFieldProps: {
        options: _constants.allowAutoCreateRadios,
        name: 'allowAutoCreate radio group'
      }
    }
  })), isLegacy === false && /*#__PURE__*/_react.default.createElement(FormRow, {
    title: _i18n.i18n.translate('xpack.idxMgmt.templateForm.stepLogistics.metaFieldTitle', {
      defaultMessage: '_meta field'
    }),
    description: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.idxMgmt.templateForm.stepLogistics.metaFieldDescription",
      defaultMessage: "Use the _meta field to store any metadata you want."
    }), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
      size: "m"
    }), /*#__PURE__*/_react.default.createElement(UseField, {
      path: "addMeta",
      "data-test-subj": "metaToggle"
    }))
  }, addMeta && /*#__PURE__*/_react.default.createElement(UseField, {
    path: "_meta",
    component: _shared_imports.JsonEditorField,
    componentProps: {
      codeEditorProps: {
        height: '280px',
        'aria-label': _i18n.i18n.translate('xpack.idxMgmt.templateForm.stepLogistics.metaFieldEditorAriaLabel', {
          defaultMessage: '_meta field data editor'
        }),
        'data-test-subj': 'metaField'
      }
    }
  }))));
});