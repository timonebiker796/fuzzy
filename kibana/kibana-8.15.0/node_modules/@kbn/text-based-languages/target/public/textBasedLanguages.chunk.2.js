(window.textBasedLanguages_bundle_jsonpfunction=window.textBasedLanguages_bundle_jsonpfunction||[]).push([[2],{57:function(e,t,n){"use strict";n.r(t),n.d(t,"initialSection",(function(){return c})),n.d(t,"sourceCommands",(function(){return m})),n.d(t,"processingCommands",(function(){return g})),n.d(t,"functions",(function(){return E})),n.d(t,"aggregationFunctions",(function(){return h})),n.d(t,"groupingFunctions",(function(){return f})),n.d(t,"operators",(function(){return x}));var a=n(5),s=n.n(a),i=n(2),o=n(1),r=n(4),d=n(3);const l=({ariaLabelContent:e,markdownContent:t,children:n,className:a,onRender:o,openLinksInNewTab:l=!0,defaultValue:u="",placeholder:c="",height:m="full",readOnly:g=!1,enableTooltipSupport:E=!1,validateLinks:h=!1,enableSoftLineBreaks:f=!1,...x})=>{const[T,p]=Object(i.useState)(u);Object(i.useEffect)((()=>{null==o||o()}),[o]);const b=Array();E||b.push("tooltip"),h||b.push("linkValidator"),f&&b.push("lineBreaks");const{parsingPlugins:y,processingPlugins:L,uiPlugins:S}=Object(r.getDefaultEuiMarkdownPlugins)({exclude:b});var w;return L[1][1].components.a=e=>Object(d.jsx)(r.EuiLink,s()({},e,{target:"_blank"})),g?Object(d.jsx)(r.EuiMarkdownFormat,{textSize:"relative",color:"inherit",className:a,"aria-label":null!=e?e:"markdown component",parsingPluginList:y,processingPluginList:l?L:void 0,"data-test-subj":x["data-test-subj"],style:x.style},null!==(w=null!=n?n:t)&&void 0!==w?w:""):Object(d.jsx)(r.EuiMarkdownEditor,{className:a,"aria-label":null!=e?e:"markdown component",placeholder:c,value:T,onChange:p,height:m,uiPlugins:S,parsingPluginList:y,processingPluginList:l?L:void 0,"data-test-subj":x["data-test-subj"]})},u=e=>Object(d.jsx)(l,s()({},e,{readOnly:!0,enableSoftLineBreaks:!0})),c=Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.markdown",{defaultMessage:"## ES|QL\n\nAn ES|QL (Elasticsearch query language) query consists of a series of commands, separated by pipe characters: `|`. Each query starts with a **source command**, which produces a table, typically with data from Elasticsearch. \n\nA source command can be followed by one or more **processing commands**. Processing commands can change the output table of the previous command by adding, removing, and changing rows and columns.\n\n```\nsource-command\n| processing-command1\n| processing-command2\n```\n\nThe result of a query is the table produced by the final processing command.                                  \n                                      "})}),m={label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.sourceCommands",{defaultMessage:"Source commands"}),description:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.commandsDescription",{defaultMessage:"A source command produces a table, typically with data from Elasticsearch. ES|QL supports the following source commands."}),items:[{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.from",{defaultMessage:"FROM"}),description:Object(d.jsx)(u,{openLinksInNewTab:!0,markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.from.markdown",{defaultMessage:"### FROM\nThe `FROM` source command returns a table with up to 10,000 documents from a data stream, index, or alias. Each row in the resulting table represents a document. Each column corresponds to a field, and can be accessed by the name of that field.\n\n```\nFROM employees\n```\n\nYou can use [date math](https://www.elastic.co/guide/en/elasticsearch/reference/current/api-conventions.html#api-date-math-index-names) to refer to indices, aliases and data streams. This can be useful for time series data.\n\nUse comma-separated lists or wildcards to query multiple data streams, indices, or aliases:\n\n```\nFROM employees-00001,employees-*\n```\n\n#### Metadata\n\nES|QL can access the following metadata fields:\n\n* `_index`: the index to which the document belongs. The field is of the type `keyword`.\n* `_id`: the source document's ID. The field is of the type `keyword`.\n* `_version`: the source document's version. The field is of the type `long`.\n\nUse the `METADATA` directive to enable metadata fields:\n\n```\nFROM index [METADATA _index, _id]\n```\n\nMetadata fields are only available if the source of the data is an index. Consequently, `FROM` is the only source commands that supports the `METADATA` directive.\n\nOnce enabled, the fields are then available to subsequent processing commands, just like the other index fields:\n\n```\nFROM ul_logs, apps [METADATA _index, _version]\n| WHERE id IN (13, 14) AND _version == 1\n| EVAL key = CONCAT(_index, \"_\", TO_STR(id))\n| SORT id, _index\n| KEEP id, _index, _version, key\n```\n\nAlso, similar to the index fields, once an aggregation is performed, a metadata field will no longer be accessible to subsequent commands, unless used as grouping field:\n\n```\nFROM employees [METADATA _index, _id]\n| STATS max = MAX(emp_no) BY _index\n```\n            ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.row",{defaultMessage:"ROW"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.row.markdown",{defaultMessage:'### ROW\nThe `ROW` source command produces a row with one or more columns with values that you specify. This can be useful for testing.\n              \n```\nROW a = 1, b = "two", c = null\n```\n\nUse square brackets to create multi-value columns:\n\n```\nROW a = [2, 1]\n```\n\nROW supports the use of functions:\n\n```\nROW a = ROUND(1.23, 0)\n```\n            ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.show",{defaultMessage:"SHOW"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.show.markdown",{defaultMessage:"### SHOW\nThe `SHOW <item>` source command returns information about the deployment and its capabilities:\n\n* Use `SHOW INFO` to return the deployment's version, build date and hash.\n* Use `SHOW FUNCTIONS` to return a list of all supported functions and a synopsis of each function.\n            ",ignoreTag:!0,description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})}]},g={label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.processingCommands",{defaultMessage:"Processing commands"}),description:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.processingCommandsDescription",{defaultMessage:"Processing commands change an input table by adding, removing, or changing rows and columns. ES|QL supports the following processing commands."}),items:[{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.dissect",{defaultMessage:"DISSECT"}),description:Object(d.jsx)(u,{openLinksInNewTab:!0,markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.dissect.markdown",{defaultMessage:'### DISSECT\n`DISSECT` enables you to extract structured data out of a string. `DISSECT` matches the string against a delimiter-based pattern, and extracts the specified keys as columns.\n\nRefer to the [dissect processor documentation](https://www.elastic.co/guide/en/elasticsearch/reference/current/dissect-processor.html) for the syntax of dissect patterns.\n\n```\nROW a = "1953-01-23T12:15:00Z - some text - 127.0.0.1"\n| DISSECT a "%\'{Y}-%{M}-%{D}T%{h}:%{m}:%{s}Z - %{msg} - %{ip}\'"\n```            ',ignoreTag:!0,description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.drop",{defaultMessage:"DROP"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.drop.markdown",{defaultMessage:"### DROP\nUse `DROP` to remove columns from a table:\n              \n```\nFROM employees\n| DROP height\n```\n\nRather than specify each column by name, you can use wildcards to drop all columns with a name that matches a pattern:\n\n```\nFROM employees\n| DROP height*\n```\n            ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.enrich",{defaultMessage:"ENRICH"}),description:Object(d.jsx)(u,{openLinksInNewTab:!0,markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.enrich.markdown",{defaultMessage:'### ENRICH\nYou can use `ENRICH` to add data from your existing indices to incoming records. It’s similar to [ingest enrich](https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest-enriching-data.html), but it works at query time.\n\n```\nROW language_code = "1"\n| ENRICH languages_policy\n```\n\n`ENRICH` requires an [enrich policy](https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest-enriching-data.html#enrich-policy) to be executed. The enrich policy defines a match field (a key field) and a set of enrich fields.\n\n`ENRICH` will look for records in the [enrich index](https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest-enriching-data.html#enrich-index) based on the match field value. The matching key in the input dataset can be defined using `ON <field-name>`; if it’s not specified, the match will be performed on a field with the same name as the match field defined in the enrich policy.\n\n```\nROW a = "1"\n| ENRICH languages_policy ON a\n```\n\nYou can specify which attributes (between those defined as enrich fields in the policy) have to be added to the result, using `WITH <field1>, <field2>...` syntax.\n\n```\nROW a = "1"\n| ENRICH languages_policy ON a WITH language_name\n```\n\nAttributes can also be renamed using `WITH new_name=<field1>`\n\n```\nROW a = "1"\n| ENRICH languages_policy ON a WITH name = language_name\n```\n\nBy default (if no `WITH` is defined), `ENRICH` will add all the enrich fields defined in the enrich policy to the result.\n\nIn case of name collisions, the newly created fields will override the existing fields.\n            ',ignoreTag:!0,description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.eval",{defaultMessage:"EVAL"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.eval.markdown",{defaultMessage:"### EVAL\n`EVAL` enables you to add new columns:\n\n```\nFROM employees\n| KEEP first_name, last_name, height\n| EVAL height_feet = height * 3.281, height_cm = height * 100\n```\n\nIf the specified column already exists, the existing column will be dropped, and the new column will be appended to the table:\n\n```\nFROM employees\n| KEEP first_name, last_name, height\n| EVAL height = height * 3.281\n```\n\n#### Functions\n`EVAL` supports various functions for calculating values. Refer to Functions for more information.\n            ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.grok",{defaultMessage:"GROK"}),description:Object(d.jsx)(u,{openLinksInNewTab:!0,markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.grok.markdown",{defaultMessage:"### GROK\n`GROK` enables you to extract structured data out of a string. `GROK` matches the string against patterns, based on regular expressions, and extracts the specified patterns as columns.\n\nRefer to the [grok processor documentation](https://www.elastic.co/guide/en/elasticsearch/reference/current/grok-processor.html) for the syntax of grok patterns.\n\n```\nROW a = \"12 15.5 15.6 true\"\n| GROK a \"%'{NUMBER:b:int}' %'{NUMBER:c:float}' %'{NUMBER:d:double}' %'{WORD:e:boolean}'\"\n```\n            ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.keep",{defaultMessage:"KEEP"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.keep.markdown",{defaultMessage:"### KEEP\nThe `KEEP` command enables you to specify what columns are returned and the order in which they are returned.\n\nTo limit the columns that are returned, use a comma-separated list of column names. The columns are returned in the specified order:\n              \n```\nFROM employees\n| KEEP first_name, last_name, height\n```\n\nRather than specify each column by name, you can use wildcards to return all columns with a name that matches a pattern:\n\n```\nFROM employees\n| KEEP h*\n```\n\nThe asterisk wildcard (`*`) by itself translates to all columns that do not match the other arguments. This query will first return all columns with a name that starts with an h, followed by all other columns:\n\n```\nFROM employees\n| KEEP h*, *\n```\n            ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.limit",{defaultMessage:"LIMIT"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.limit.markdown",{defaultMessage:"### LIMIT\nThe `LIMIT` processing command enables you to limit the number of rows:\n              \n```\nFROM employees\n| LIMIT 5\n```\n            ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mvExpand",{defaultMessage:"MV_EXPAND"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mvExpand.markdown",{defaultMessage:'### MV_EXPAND\nThe `MV_EXPAND` processing command expands multivalued fields into one row per value, duplicating other fields:              \n```\nROW a=[1,2,3], b="b", j=["a","b"]\n| MV_EXPAND a\n```\n            ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.rename",{defaultMessage:"RENAME"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.rename.markdown",{defaultMessage:"### RENAME\nUse `RENAME` to rename a column using the following syntax:\n\n```\nRENAME <old-name> AS <new-name>\n```\n\nFor example:\n\n```\nFROM employees\n| KEEP first_name, last_name, still_hired\n| RENAME still_hired AS employed\n```\n\nIf a column with the new name already exists, it will be replaced by the new column.\n\nMultiple columns can be renamed with a single `RENAME` command:\n\n```\nFROM employees\n| KEEP first_name, last_name\n| RENAME first_name AS fn, last_name AS ln\n```\n            ",ignoreTag:!0,description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.sort",{defaultMessage:"SORT"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.sort.markdown",{defaultMessage:"### SORT\nUse the `SORT` command to sort rows on one or more fields:\n\n```\nFROM employees\n| KEEP first_name, last_name, height\n| SORT height\n```\n\nThe default sort order is ascending. Set an explicit sort order using `ASC` or `DESC`:\n\n```\nFROM employees\n| KEEP first_name, last_name, height\n| SORT height DESC\n```\n\nIf two rows have the same sort key, the original order will be preserved. You can provide additional sort expressions to act as tie breakers:\n\n```\nFROM employees\n| KEEP first_name, last_name, height\n| SORT height DESC, first_name ASC\n```\n\n#### `null` values\nBy default, `null` values are treated as being larger than any other value. With an ascending sort order, `null` values are sorted last, and with a descending sort order, `null` values are sorted first. You can change that by providing `NULLS FIRST` or `NULLS LAST`:\n\n```\nFROM employees\n| KEEP first_name, last_name, height\n| SORT first_name ASC NULLS FIRST\n```\n            ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.statsby",{defaultMessage:"STATS ... BY"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.statsby.markdown",{defaultMessage:"### STATS ... BY\nUse `STATS ... BY` to group rows according to a common value and calculate one or more aggregated values over the grouped rows.\n\n**Examples**:\n\n```\nFROM employees\n| STATS count = COUNT(emp_no) BY languages\n| SORT languages\n```\n\nIf `BY` is omitted, the output table contains exactly one row with the aggregations applied over the entire dataset:\n\n```\nFROM employees\n| STATS avg_lang = AVG(languages)\n```\n\nIt's possible to calculate multiple values:\n\n```\nFROM employees\n| STATS avg_lang = AVG(languages), max_lang = MAX(languages)\n```\n\nIt's also possible to group by multiple values (only supported for long and keyword family fields):\n\n```\nFROM employees\n| EVAL hired = DATE_FORMAT(hire_date, \"YYYY\")\n| STATS avg_salary = AVG(salary) BY hired, languages.long\n| EVAL avg_salary = ROUND(avg_salary)\n| SORT hired, languages.long\n```\n\nRefer to **Aggregation functions** for a list of functions that can be used with `STATS ... BY`.\n\nBoth the aggregating functions and the grouping expressions accept other functions. This is useful for using `STATS...BY` on multivalue columns. For example, to calculate the average salary change, you can use `MV_AVG` to first average the multiple values per employee, and use the result with the `AVG` function:\n\n```\nFROM employees\n| STATS avg_salary_change = AVG(MV_AVG(salary_change))\n```\n\nAn example of grouping by an expression is grouping employees on the first letter of their last name:\n\n```\nFROM employees\n| STATS my_count = COUNT() BY LEFT(last_name, 1)\n| SORT `LEFT(last_name, 1)`\n```\n\nSpecifying the output column name is optional. If not specified, the new column name is equal to the expression. The following query returns a column named `AVG(salary)`:\n\n```\nFROM employees\n| STATS AVG(salary)\n```\n\nBecause this name contains special characters, it needs to be quoted with backticks (`) when using it in subsequent commands:\n\n```\nFROM employees\n| STATS AVG(salary)\n| EVAL avg_salary_rounded = ROUND(`AVG(salary)`)\n```\n\n**Note**: `STATS` without any groups is much faster than adding a group.\n\n**Note**: Grouping on a single expression is currently much more optimized than grouping on many expressions.\n            ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.where",{defaultMessage:"WHERE"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.where.markdown",{defaultMessage:"### WHERE\nUse `WHERE` to produce a table that contains all the rows from the input table for which the provided condition evaluates to `true`:\n              \n```\nFROM employees\n| KEEP first_name, last_name, still_hired\n| WHERE still_hired == true\n```\n\n#### Operators\n\nRefer to **Operators** for an overview of the supported operators.\n\n#### Functions\n`WHERE` supports various functions for calculating values. Refer to **Functions** for more information.\n            ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})}]},E={label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.functions",{defaultMessage:"Functions"}),description:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.functionsDocumentationESQLDescription",{defaultMessage:"Functions are supported by ROW, EVAL and WHERE."}),items:[{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.abs",{defaultMessage:"ABS"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.abs.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### ABS\n  Returns the absolute value.\n\n  ```\n  ROW number = -1.0 \n  | EVAL abs_number = ABS(number)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.acos",{defaultMessage:"ACOS"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.acos.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### ACOS\n  Returns the arccosine of `n` as an angle, expressed in radians.\n\n  ```\n  ROW a=.9\n  | EVAL acos=ACOS(a)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.asin",{defaultMessage:"ASIN"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.asin.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### ASIN\n  Returns the arcsine of the input\n  numeric expression as an angle, expressed in radians.\n\n  ```\n  ROW a=.9\n  | EVAL asin=ASIN(a)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.atan",{defaultMessage:"ATAN"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.atan.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### ATAN\n  Returns the arctangent of the input\n  numeric expression as an angle, expressed in radians.\n\n  ```\n  ROW a=12.9\n  | EVAL atan=ATAN(a)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.atan2",{defaultMessage:"ATAN2"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.atan2.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### ATAN2\n  The angle between the positive x-axis and the ray from the\n  origin to the point (x , y) in the Cartesian plane, expressed in radians.\n\n  ```\n  ROW y=12.9, x=.6\n  | EVAL atan2=ATAN2(y, x)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.bucket",{defaultMessage:"BUCKET"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.bucket.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### BUCKET\n  Creates groups of values - buckets - out of a datetime or numeric input.\n  The size of the buckets can either be provided directly, or chosen based on a recommended count and values range.\n\n  ```\n  FROM employees\n  | WHERE hire_date >= "1985-01-01T00:00:00Z" AND hire_date < "1986-01-01T00:00:00Z"\n  | STATS hire_date = MV_SORT(VALUES(hire_date)) BY month = BUCKET(hire_date, 20, "1985-01-01T00:00:00Z", "1986-01-01T00:00:00Z")\n  | SORT hire_date\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.case",{defaultMessage:"CASE"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.case.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### CASE\n  Accepts pairs of conditions and values. The function returns the value that\n  belongs to the first condition that evaluates to `true`.\n\n  If the number of arguments is odd, the last argument is the default value which\n  is returned when no condition matches. If the number of arguments is even, and\n  no condition matches, the function returns `null`.\n\n  ```\n  FROM employees\n  | EVAL type = CASE(\n      languages <= 1, "monolingual",\n      languages <= 2, "bilingual",\n       "polyglot")\n  | KEEP emp_no, languages, type\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.cbrt",{defaultMessage:"CBRT"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.cbrt.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### CBRT\n  Returns the cube root of a number. The input can be any numeric value, the return value is always a double.\n  Cube roots of infinities are null.\n\n  ```\n  ROW d = 1000.0\n  | EVAL c = cbrt(d)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.ceil",{defaultMessage:"CEIL"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.ceil.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### CEIL\n  Round a number up to the nearest integer.\n\n  ```\n  ROW a=1.8\n  | EVAL a=CEIL(a)\n  ```\n  Note: This is a noop for `long` (including unsigned) and `integer`. For `double` this picks the closest `double` value to the integer similar to Math.ceil.\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.cidr_match",{defaultMessage:"CIDR_MATCH"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.cidr_match.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### CIDR_MATCH\n  Returns true if the provided IP is contained in one of the provided CIDR blocks.\n\n  ```\n  FROM hosts \n  | WHERE CIDR_MATCH(ip1, "127.0.0.2/32", "127.0.0.3/32") \n  | KEEP card, host, ip0, ip1\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.coalesce",{defaultMessage:"COALESCE"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.coalesce.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### COALESCE\n  Returns the first of its arguments that is not null. If all arguments are null, it returns `null`.\n\n  ```\n  ROW a=null, b="b"\n  | EVAL COALESCE(a, b)\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.concat",{defaultMessage:"CONCAT"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.concat.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### CONCAT\n  Concatenates two or more strings.\n\n  ```\n  FROM employees\n  | KEEP first_name, last_name\n  | EVAL fullname = CONCAT(first_name, " ", last_name)\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.cos",{defaultMessage:"COS"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.cos.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### COS\n  Returns the cosine of an angle.\n\n  ```\n  ROW a=1.8 \n  | EVAL cos=COS(a)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.cosh",{defaultMessage:"COSH"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.cosh.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### COSH\n  Returns the hyperbolic cosine of an angle.\n\n  ```\n  ROW a=1.8 \n  | EVAL cosh=COSH(a)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.date_diff",{defaultMessage:"DATE_DIFF"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.date_diff.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### DATE_DIFF\n  Subtracts the `startTimestamp` from the `endTimestamp` and returns the difference in multiples of `unit`.\n  If `startTimestamp` is later than the `endTimestamp`, negative values are returned.\n\n  ```\n  ROW date1 = TO_DATETIME("2023-12-02T11:00:00.000Z"), date2 = TO_DATETIME("2023-12-02T11:00:00.001Z")\n  | EVAL dd_ms = DATE_DIFF("microseconds", date1, date2)\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.date_extract",{defaultMessage:"DATE_EXTRACT"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.date_extract.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### DATE_EXTRACT\n  Extracts parts of a date, like year, month, day, hour.\n\n  ```\n  ROW date = DATE_PARSE("yyyy-MM-dd", "2022-05-06")\n  | EVAL year = DATE_EXTRACT("year", date)\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.date_format",{defaultMessage:"DATE_FORMAT"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.date_format.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### DATE_FORMAT\n  Returns a string representation of a date, in the provided format.\n\n  ```\n  FROM employees\n  | KEEP first_name, last_name, hire_date\n  | EVAL hired = DATE_FORMAT("YYYY-MM-dd", hire_date)\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.date_parse",{defaultMessage:"DATE_PARSE"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.date_parse.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### DATE_PARSE\n  Returns a date by parsing the second argument using the format specified in the first argument.\n\n  ```\n  ROW date_string = "2022-05-06"\n  | EVAL date = DATE_PARSE("yyyy-MM-dd", date_string)\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.date_trunc",{defaultMessage:"DATE_TRUNC"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.date_trunc.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### DATE_TRUNC\n  Rounds down a date to the closest interval.\n\n  ```\n  FROM employees\n  | KEEP first_name, last_name, hire_date\n  | EVAL year_hired = DATE_TRUNC(1 year, hire_date)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.e",{defaultMessage:"E"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.e.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### E\n  Returns Euler's number.\n\n  ```\n  ROW E()\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.ends_with",{defaultMessage:"ENDS_WITH"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.ends_with.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### ENDS_WITH\n  Returns a boolean that indicates whether a keyword string ends with another string.\n\n  ```\n  FROM employees\n  | KEEP last_name\n  | EVAL ln_E = ENDS_WITH(last_name, "d")\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.floor",{defaultMessage:"FLOOR"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.floor.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### FLOOR\n  Round a number down to the nearest integer.\n\n  ```\n  ROW a=1.8\n  | EVAL a=FLOOR(a)\n  ```\n  Note: This is a noop for `long` (including unsigned) and `integer`.\n  For `double` this picks the closest `double` value to the integer\n  similar to Math.floor.\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.from_base64",{defaultMessage:"FROM_BASE64"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.from_base64.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### FROM_BASE64\n  Decode a base64 string.\n\n  ```\n  row a = "ZWxhc3RpYw==" \n  | eval d = from_base64(a)\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.greatest",{defaultMessage:"GREATEST"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.greatest.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### GREATEST\n  Returns the maximum value from multiple columns. This is similar to `MV_MAX`\n  except it is intended to run on multiple columns at once.\n\n  ```\n  ROW a = 10, b = 20\n  | EVAL g = GREATEST(a, b)\n  ```\n  Note: When run on `keyword` or `text` fields, this returns the last string in alphabetical order. When run on `boolean` columns this will return `true` if any values are `true`.\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.ip_prefix",{defaultMessage:"IP_PREFIX"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.ip_prefix.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### IP_PREFIX\n  Truncates an IP to a given prefix length.\n\n  ```\n  row ip4 = to_ip("1.2.3.4"), ip6 = to_ip("fe80::cae2:65ff:fece:feb9")\n  | eval ip4_prefix = ip_prefix(ip4, 24, 0), ip6_prefix = ip_prefix(ip6, 0, 112);\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.least",{defaultMessage:"LEAST"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.least.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### LEAST\n  Returns the minimum value from multiple columns. This is similar to `MV_MIN` except it is intended to run on multiple columns at once.\n\n  ```\n  ROW a = 10, b = 20\n  | EVAL l = LEAST(a, b)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.left",{defaultMessage:"LEFT"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.left.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### LEFT\n  Returns the substring that extracts 'length' chars from 'string' starting from the left.\n\n  ```\n  FROM employees\n  | KEEP last_name\n  | EVAL left = LEFT(last_name, 3)\n  | SORT last_name ASC\n  | LIMIT 5\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.length",{defaultMessage:"LENGTH"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.length.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### LENGTH\n  Returns the character length of a string.\n\n  ```\n  FROM employees\n  | KEEP first_name, last_name\n  | EVAL fn_length = LENGTH(first_name)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.locate",{defaultMessage:"LOCATE"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.locate.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### LOCATE\n  Returns an integer that indicates the position of a keyword substring within another string\n\n  ```\n  row a = "hello"\n  | eval a_ll = locate(a, "ll")\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.log",{defaultMessage:"LOG"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.log.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### LOG\n  Returns the logarithm of a value to a base. The input can be any numeric value, the return value is always a double.\n\n  Logs of zero, negative numbers, and base of one return `null` as well as a warning.\n\n  ```\n  ROW base = 2.0, value = 8.0\n  | EVAL s = LOG(base, value)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.log10",{defaultMessage:"LOG10"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.log10.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### LOG10\n  Returns the logarithm of a value to base 10. The input can be any numeric value, the return value is always a double.\n\n  Logs of 0 and negative numbers return `null` as well as a warning.\n\n  ```\n  ROW d = 1000.0 \n  | EVAL s = LOG10(d)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.ltrim",{defaultMessage:"LTRIM"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.ltrim.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### LTRIM\n  Removes leading whitespaces from a string.\n\n  ```\n  ROW message = "   some text  ",  color = " red "\n  | EVAL message = LTRIM(message)\n  | EVAL color = LTRIM(color)\n  | EVAL message = CONCAT("\'", message, "\'")\n  | EVAL color = CONCAT("\'", color, "\'")\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_append",{defaultMessage:"MV_APPEND"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_append.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### MV_APPEND\n  Concatenates values of two multi-value fields.\n\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_avg",{defaultMessage:"MV_AVG"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_avg.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### MV_AVG\n  Converts a multivalued field into a single valued field containing the average of all of the values.\n\n  ```\n  ROW a=[3, 5, 1, 6]\n  | EVAL avg_a = MV_AVG(a)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_concat",{defaultMessage:"MV_CONCAT"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_concat.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### MV_CONCAT\n  Converts a multivalued string expression into a single valued column containing the concatenation of all values separated by a delimiter.\n\n  ```\n  ROW a=["foo", "zoo", "bar"]\n  | EVAL j = MV_CONCAT(a, ", ")\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_count",{defaultMessage:"MV_COUNT"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_count.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### MV_COUNT\n  Converts a multivalued expression into a single valued column containing a count of the number of values.\n\n  ```\n  ROW a=["foo", "zoo", "bar"]\n  | EVAL count_a = MV_COUNT(a)\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_dedupe",{defaultMessage:"MV_DEDUPE"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_dedupe.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### MV_DEDUPE\n  Remove duplicate values from a multivalued field.\n\n  ```\n  ROW a=["foo", "foo", "bar", "foo"]\n  | EVAL dedupe_a = MV_DEDUPE(a)\n  ```\n  Note: `MV_DEDUPE` may, but won\'t always, sort the values in the column.\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_first",{defaultMessage:"MV_FIRST"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_first.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### MV_FIRST\n  Converts a multivalued expression into a single valued column containing the\n  first value. This is most useful when reading from a function that emits\n  multivalued columns in a known order like `SPLIT`.\n\n  The order that  multivalued fields are read from\n  underlying storage is not guaranteed. It is *frequently* ascending, but don\'t\n  rely on that. If you need the minimum value use `MV_MIN` instead of\n  `MV_FIRST`. `MV_MIN` has optimizations for sorted values so there isn\'t a\n  performance benefit to `MV_FIRST`.\n\n  ```\n  ROW a="foo;bar;baz"\n  | EVAL first_a = MV_FIRST(SPLIT(a, ";"))\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_last",{defaultMessage:"MV_LAST"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_last.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### MV_LAST\n  Converts a multivalue expression into a single valued column containing the last\n  value. This is most useful when reading from a function that emits multivalued\n  columns in a known order like `SPLIT`.\n\n  The order that  multivalued fields are read from\n  underlying storage is not guaranteed. It is *frequently* ascending, but don\'t\n  rely on that. If you need the maximum value use `MV_MAX` instead of\n  `MV_LAST`. `MV_MAX` has optimizations for sorted values so there isn\'t a\n  performance benefit to `MV_LAST`.\n\n  ```\n  ROW a="foo;bar;baz"\n  | EVAL last_a = MV_LAST(SPLIT(a, ";"))\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_max",{defaultMessage:"MV_MAX"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_max.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### MV_MAX\n  Converts a multivalued expression into a single valued column containing the maximum value.\n\n  ```\n  ROW a=[3, 5, 1]\n  | EVAL max_a = MV_MAX(a)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_median",{defaultMessage:"MV_MEDIAN"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_median.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### MV_MEDIAN\n  Converts a multivalued field into a single valued field containing the median value.\n\n  ```\n  ROW a=[3, 5, 1]\n  | EVAL median_a = MV_MEDIAN(a)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_min",{defaultMessage:"MV_MIN"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_min.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### MV_MIN\n  Converts a multivalued expression into a single valued column containing the minimum value.\n\n  ```\n  ROW a=[2, 1]\n  | EVAL min_a = MV_MIN(a)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_slice",{defaultMessage:"MV_SLICE"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_slice.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### MV_SLICE\n  Returns a subset of the multivalued field using the start and end index values.\n\n  ```\n  row a = [1, 2, 2, 3]\n  | eval a1 = mv_slice(a, 1), a2 = mv_slice(a, 2, 3)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_sort",{defaultMessage:"MV_SORT"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_sort.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### MV_SORT\n  Sorts a multivalued field in lexicographical order.\n\n  ```\n  ROW a = [4, 2, -3, 2]\n  | EVAL sa = mv_sort(a), sd = mv_sort(a, "DESC")\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_sum",{defaultMessage:"MV_SUM"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_sum.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### MV_SUM\n  Converts a multivalued field into a single valued field containing the sum of all of the values.\n\n  ```\n  ROW a=[3, 5, 6]\n  | EVAL sum_a = MV_SUM(a)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_zip",{defaultMessage:"MV_ZIP"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.mv_zip.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### MV_ZIP\n  Combines the values from two multivalued fields with a delimiter that joins them together.\n\n  ```\n  ROW a = ["x", "y", "z"], b = ["1", "2"]\n  | EVAL c = mv_zip(a, b, "-")\n  | KEEP a, b, c\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.now",{defaultMessage:"NOW"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.now.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### NOW\n  Returns current date and time.\n\n  ```\n  ROW current_date = NOW()\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.pi",{defaultMessage:"PI"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.pi.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### PI\n  Returns Pi, the ratio of a circle's circumference to its diameter.\n\n  ```\n  ROW PI()\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.pow",{defaultMessage:"POW"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.pow.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### POW\n  Returns the value of `base` raised to the power of `exponent`.\n\n  ```\n  ROW base = 2.0, exponent = 2\n  | EVAL result = POW(base, exponent)\n  ```\n  Note: It is still possible to overflow a double result here; in that case, null will be returned.\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.repeat",{defaultMessage:"REPEAT"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.repeat.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### REPEAT\n  Returns a string constructed by concatenating `string` with itself the specified `number` of times.\n\n  ```\n  ROW a = "Hello!"\n  | EVAL triple_a = REPEAT(a, 3);\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.replace",{defaultMessage:"REPLACE"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.replace.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### REPLACE\n  The function substitutes in the string `str` any match of the regular expression `regex`\n  with the replacement string `newStr`.\n\n  ```\n  ROW str = "Hello World"\n  | EVAL str = REPLACE(str, "World", "Universe")\n  | KEEP str\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.right",{defaultMessage:"RIGHT"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.right.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### RIGHT\n  Return the substring that extracts 'length' chars from 'str' starting from the right.\n\n  ```\n  FROM employees\n  | KEEP last_name\n  | EVAL right = RIGHT(last_name, 3)\n  | SORT last_name ASC\n  | LIMIT 5\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.round",{defaultMessage:"ROUND"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.round.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### ROUND\n  Rounds a number to the specified number of decimal places.\n  Defaults to 0, which returns the nearest integer. If the\n  precision is a negative number, rounds to the number of digits left\n  of the decimal point.\n\n  ```\n  FROM employees\n  | KEEP first_name, last_name, height\n  | EVAL height_ft = ROUND(height * 3.281, 1)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.rtrim",{defaultMessage:"RTRIM"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.rtrim.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### RTRIM\n  Removes trailing whitespaces from a string.\n\n  ```\n  ROW message = "   some text  ",  color = " red "\n  | EVAL message = RTRIM(message)\n  | EVAL color = RTRIM(color)\n  | EVAL message = CONCAT("\'", message, "\'")\n  | EVAL color = CONCAT("\'", color, "\'")\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.signum",{defaultMessage:"SIGNUM"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.signum.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### SIGNUM\n  Returns the sign of the given number.\n  It returns `-1` for negative numbers, `0` for `0` and `1` for positive numbers.\n\n  ```\n  ROW d = 100.0\n  | EVAL s = SIGNUM(d)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.sin",{defaultMessage:"SIN"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.sin.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### SIN\n  Returns ths Sine trigonometric function of an angle.\n\n  ```\n  ROW a=1.8 \n  | EVAL sin=SIN(a)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.sinh",{defaultMessage:"SINH"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.sinh.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### SINH\n  Returns the hyperbolic sine of an angle.\n\n  ```\n  ROW a=1.8 \n  | EVAL sinh=SINH(a)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.split",{defaultMessage:"SPLIT"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.split.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### SPLIT\n  Split a single valued string into multiple strings.\n\n  ```\n  ROW words="foo;bar;baz;qux;quux;corge"\n  | EVAL word = SPLIT(words, ";")\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.sqrt",{defaultMessage:"SQRT"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.sqrt.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### SQRT\n  Returns the square root of a number. The input can be any numeric value, the return value is always a double.\n  Square roots of negative numbers and infinities are null.\n\n  ```\n  ROW d = 100.0\n  | EVAL s = SQRT(d)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.st_contains",{defaultMessage:"ST_CONTAINS"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.st_contains.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### ST_CONTAINS\n  Returns whether the first geometry contains the second geometry.\n  This is the inverse of the `ST_WITHIN` function.\n\n  ```\n  FROM airport_city_boundaries\n  | WHERE ST_CONTAINS(city_boundary, TO_GEOSHAPE("POLYGON((109.35 18.3, 109.45 18.3, 109.45 18.4, 109.35 18.4, 109.35 18.3))"))\n  | KEEP abbrev, airport, region, city, city_location\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.st_disjoint",{defaultMessage:"ST_DISJOINT"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.st_disjoint.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### ST_DISJOINT\n  Returns whether the two geometries or geometry columns are disjoint.\n  This is the inverse of the `ST_INTERSECTS` function.\n  In mathematical terms: ST_Disjoint(A, B) ⇔ A ⋂ B = ∅\n\n  ```\n  FROM airport_city_boundaries\n  | WHERE ST_DISJOINT(city_boundary, TO_GEOSHAPE("POLYGON((-10 -60, 120 -60, 120 60, -10 60, -10 -60))"))\n  | KEEP abbrev, airport, region, city, city_location\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.st_distance",{defaultMessage:"ST_DISTANCE"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.st_distance.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### ST_DISTANCE\n  Computes the distance between two points.\n  For cartesian geometries, this is the pythagorean distance in the same units as the original coordinates.\n  For geographic geometries, this is the circular distance along the great circle in meters.\n\n  ```\n  FROM airports\n  | WHERE abbrev == "CPH"\n  | EVAL distance = ST_DISTANCE(location, city_location)\n  | KEEP abbrev, name, location, city_location, distance\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.st_intersects",{defaultMessage:"ST_INTERSECTS"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.st_intersects.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### ST_INTERSECTS\n  Returns true if two geometries intersect.\n  They intersect if they have any point in common, including their interior points\n  (points along lines or within polygons).\n  This is the inverse of the `ST_DISJOINT` function.\n  In mathematical terms: ST_Intersects(A, B) ⇔ A ⋂ B ≠ ∅\n\n  ```\n  FROM airports\n  | WHERE ST_INTERSECTS(location, TO_GEOSHAPE("POLYGON((42 14, 43 14, 43 15, 42 15, 42 14))"))\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.st_within",{defaultMessage:"ST_WITHIN"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.st_within.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### ST_WITHIN\n  Returns whether the first geometry is within the second geometry.\n  This is the inverse of the `ST_CONTAINS` function.\n\n  ```\n  FROM airport_city_boundaries\n  | WHERE ST_WITHIN(city_boundary, TO_GEOSHAPE("POLYGON((109.1 18.15, 109.6 18.15, 109.6 18.65, 109.1 18.65, 109.1 18.15))"))\n  | KEEP abbrev, airport, region, city, city_location\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.st_x",{defaultMessage:"ST_X"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.st_x.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### ST_X\n  Extracts the `x` coordinate from the supplied point.\n  If the points is of type `geo_point` this is equivalent to extracting the `longitude` value.\n\n  ```\n  ROW point = TO_GEOPOINT("POINT(42.97109629958868 14.7552534006536)")\n  | EVAL x =  ST_X(point), y = ST_Y(point)\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.st_y",{defaultMessage:"ST_Y"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.st_y.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### ST_Y\n  Extracts the `y` coordinate from the supplied point.\n  If the points is of type `geo_point` this is equivalent to extracting the `latitude` value.\n\n  ```\n  ROW point = TO_GEOPOINT("POINT(42.97109629958868 14.7552534006536)")\n  | EVAL x =  ST_X(point), y = ST_Y(point)\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.starts_with",{defaultMessage:"STARTS_WITH"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.starts_with.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### STARTS_WITH\n  Returns a boolean that indicates whether a keyword string starts with another string.\n\n  ```\n  FROM employees\n  | KEEP last_name\n  | EVAL ln_S = STARTS_WITH(last_name, "B")\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.substring",{defaultMessage:"SUBSTRING"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.substring.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### SUBSTRING\n  Returns a substring of a string, specified by a start position and an optional length\n\n  ```\n  FROM employees\n  | KEEP last_name\n  | EVAL ln_sub = SUBSTRING(last_name, 1, 3)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.tan",{defaultMessage:"TAN"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.tan.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### TAN\n  Returns the Tangent trigonometric function of an angle.\n\n  ```\n  ROW a=1.8 \n  | EVAL tan=TAN(a)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.tanh",{defaultMessage:"TANH"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.tanh.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### TANH\n  Returns the Tangent hyperbolic function of an angle.\n\n  ```\n  ROW a=1.8 \n  | EVAL tanh=TANH(a)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.tau",{defaultMessage:"TAU"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.tau.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### TAU\n  Returns the ratio of a circle's circumference to its radius.\n\n  ```\n  ROW TAU()\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_base64",{defaultMessage:"TO_BASE64"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_base64.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### TO_BASE64\n  Encode a string to a base64 string.\n\n  ```\n  row a = "elastic" \n  | eval e = to_base64(a)\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_boolean",{defaultMessage:"TO_BOOLEAN"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_boolean.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### TO_BOOLEAN\n  Converts an input value to a boolean value.\n  A string value of *true* will be case-insensitive converted to the Boolean *true*.\n  For anything else, including the empty string, the function will return *false*.\n  The numerical value of *0* will be converted to *false*, anything else will be converted to *true*.\n\n  ```\n  ROW str = ["true", "TRuE", "false", "", "yes", "1"]\n  | EVAL bool = TO_BOOLEAN(str)\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_cartesianpoint",{defaultMessage:"TO_CARTESIANPOINT"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_cartesianpoint.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### TO_CARTESIANPOINT\n  Converts an input value to a `cartesian_point` value.\n  A string will only be successfully converted if it respects WKT Point format.\n\n  ```\n  ROW wkt = ["POINT(4297.11 -1475.53)", "POINT(7580.93 2272.77)"]\n  | MV_EXPAND wkt\n  | EVAL pt = TO_CARTESIANPOINT(wkt)\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_cartesianshape",{defaultMessage:"TO_CARTESIANSHAPE"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_cartesianshape.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### TO_CARTESIANSHAPE\n  Converts an input value to a `cartesian_shape` value.\n  A string will only be successfully converted if it respects WKT format.\n\n  ```\n  ROW wkt = ["POINT(4297.11 -1475.53)", "POLYGON ((3339584.72 1118889.97, 4452779.63 4865942.27, 2226389.81 4865942.27, 1113194.90 2273030.92, 3339584.72 1118889.97))"]\n  | MV_EXPAND wkt\n  | EVAL geom = TO_CARTESIANSHAPE(wkt)\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_datetime",{defaultMessage:"TO_DATETIME"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_datetime.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### TO_DATETIME\n  Converts an input value to a date value.\n  A string will only be successfully converted if it's respecting the format `yyyy-MM-dd'T'HH:mm:ss.SSS'Z'`.\n  To convert dates in other formats, use `DATE_PARSE`.\n\n  ```\n  ROW string = [\"1953-09-02T00:00:00.000Z\", \"1964-06-02T00:00:00.000Z\", \"1964-06-02 00:00:00\"]\n  | EVAL datetime = TO_DATETIME(string)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_degrees",{defaultMessage:"TO_DEGREES"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_degrees.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### TO_DEGREES\n  Converts a number in radians to degrees.\n\n  ```\n  ROW rad = [1.57, 3.14, 4.71]\n  | EVAL deg = TO_DEGREES(rad)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_double",{defaultMessage:"TO_DOUBLE"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_double.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### TO_DOUBLE\n  Converts an input value to a double value. If the input parameter is of a date type,\n  its value will be interpreted as milliseconds since the Unix epoch,\n  converted to double. Boolean *true* will be converted to double *1.0*, *false* to *0.0*.\n\n  ```\n  ROW str1 = "5.20128E11", str2 = "foo"\n  | EVAL dbl = TO_DOUBLE("520128000000"), dbl1 = TO_DOUBLE(str1), dbl2 = TO_DOUBLE(str2)\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_geopoint",{defaultMessage:"TO_GEOPOINT"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_geopoint.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### TO_GEOPOINT\n  Converts an input value to a `geo_point` value.\n  A string will only be successfully converted if it respects WKT Point format.\n\n  ```\n  ROW wkt = "POINT(42.97109630194 14.7552534413725)"\n  | EVAL pt = TO_GEOPOINT(wkt)\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_geoshape",{defaultMessage:"TO_GEOSHAPE"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_geoshape.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### TO_GEOSHAPE\n  Converts an input value to a `geo_shape` value.\n  A string will only be successfully converted if it respects WKT format.\n\n  ```\n  ROW wkt = "POLYGON ((30 10, 40 40, 20 40, 10 20, 30 10))"\n  | EVAL geom = TO_GEOSHAPE(wkt)\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_integer",{defaultMessage:"TO_INTEGER"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_integer.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### TO_INTEGER\n  Converts an input value to an integer value.\n  If the input parameter is of a date type, its value will be interpreted as milliseconds\n  since the Unix epoch, converted to integer.\n  Boolean *true* will be converted to integer *1*, *false* to *0*.\n\n  ```\n  ROW long = [5013792, 2147483647, 501379200000]\n  | EVAL int = TO_INTEGER(long)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_ip",{defaultMessage:"TO_IP"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_ip.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### TO_IP\n  Converts an input string to an IP value.\n\n  ```\n  ROW str1 = "1.1.1.1", str2 = "foo"\n  | EVAL ip1 = TO_IP(str1), ip2 = TO_IP(str2)\n  | WHERE CIDR_MATCH(ip1, "1.0.0.0/8")\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_long",{defaultMessage:"TO_LONG"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_long.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### TO_LONG\n  Converts an input value to a long value. If the input parameter is of a date type,\n  its value will be interpreted as milliseconds since the Unix epoch, converted to long.\n  Boolean *true* will be converted to long *1*, *false* to *0*.\n\n  ```\n  ROW str1 = "2147483648", str2 = "2147483648.2", str3 = "foo"\n  | EVAL long1 = TO_LONG(str1), long2 = TO_LONG(str2), long3 = TO_LONG(str3)\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_lower",{defaultMessage:"TO_LOWER"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_lower.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### TO_LOWER\n  Returns a new string representing the input string converted to lower case.\n\n  ```\n  ROW message = "Some Text"\n  | EVAL message_lower = TO_LOWER(message)\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_radians",{defaultMessage:"TO_RADIANS"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_radians.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### TO_RADIANS\n  Converts a number in degrees to radians.\n\n  ```\n  ROW deg = [90.0, 180.0, 270.0]\n  | EVAL rad = TO_RADIANS(deg)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_string",{defaultMessage:"TO_STRING"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_string.markdown",{defaultMessage:"\x3c!--\n  This is generated by ESQL's AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### TO_STRING\n  Converts an input value into a string.\n\n  ```\n  ROW a=10\n  | EVAL j = TO_STRING(a)\n  ```\n  ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_unsigned_long",{defaultMessage:"TO_UNSIGNED_LONG"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_unsigned_long.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### TO_UNSIGNED_LONG\n  Converts an input value to an unsigned long value. If the input parameter is of a date type,\n  its value will be interpreted as milliseconds since the Unix epoch, converted to unsigned long.\n  Boolean *true* will be converted to unsigned long *1*, *false* to *0*.\n\n  ```\n  ROW str1 = "2147483648", str2 = "2147483648.2", str3 = "foo"\n  | EVAL long1 = TO_UNSIGNED_LONG(str1), long2 = TO_ULONG(str2), long3 = TO_UL(str3)\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_upper",{defaultMessage:"TO_UPPER"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_upper.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### TO_UPPER\n  Returns a new string representing the input string converted to upper case.\n\n  ```\n  ROW message = "Some Text"\n  | EVAL message_upper = TO_UPPER(message)\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_version",{defaultMessage:"TO_VERSION"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.to_version.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### TO_VERSION\n  Converts an input string to a version value.\n\n  ```\n  ROW v = TO_VERSION("1.2.3")\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.top",{defaultMessage:"TOP"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.top.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### TOP\n  Collects the top values for a field. Includes repeated values.\n\n  ```\n  FROM employees\n  | STATS top_salaries = TOP(salary, 3, "desc"), top_salary = MAX(salary)\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.trim",{defaultMessage:"TRIM"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.trim.markdown",{defaultMessage:'\x3c!--\n  This is generated by ESQL\'s AbstractFunctionTestCase. Do no edit it. See ../README.md for how to regenerate it.\n  --\x3e\n\n  ### TRIM\n  Removes leading and trailing whitespaces from a string.\n\n  ```\n  ROW message = "   some text  ",  color = " red "\n  | EVAL message = TRIM(message)\n  | EVAL color = TRIM(color)\n  ```\n  ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)",ignoreTag:!0})})}]},h={label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.aggregationFunctions",{defaultMessage:"Aggregation functions"}),description:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.aggregationFunctionsDocumentationESQLDescription",{defaultMessage:"These functions can by used with STATS...BY:"}),items:[{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.avgFunction",{defaultMessage:"AVG"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.avgFunction.markdown",{defaultMessage:"### AVG\nReturns the average of a numeric field.\n\n```\nFROM employees\n| STATS AVG(height)\n```\n\nThe expression can use inline functions. For example, to calculate the average over a multivalued column, first use `MV_AVG` to average the multiple values per row, and use the result with the `AVG` function:\n\n```\nFROM employees\n| STATS avg_salary_change = AVG(MV_AVG(salary_change))\n```\n              ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.countFunction",{defaultMessage:"COUNT"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.countFunction.markdown",{defaultMessage:'### COUNT\nReturns the total number (count) of input values.\n\n```\nFROM employees\n| STATS COUNT(height)\n```\n\nCan take any field type as input.\n\nTo count the number of rows, use `COUNT()` or `COUNT(*)`:\n\n```\nFROM employees\n| STATS count = COUNT(*) BY languages\n| SORT languages DESC\n```\n\nThe expression can use inline functions. This example splits a string into multiple values using the `SPLIT` function and counts the values:\n\n```\nROW words="foo;bar;baz;qux;quux;foo"\n| STATS word_count = COUNT(SPLIT(words, ";"))\n```\n              ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.countDistinctFunction",{defaultMessage:"COUNT_DISTINCT"}),description:Object(d.jsx)(u,{openLinksInNewTab:!0,markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.countDistinctFunction.markdown",{defaultMessage:'### COUNT_DISTINCT\nCounts the approximate number of distinct values.\n\n```\nFROM hosts\n| STATS COUNT_DISTINCT(ip0), COUNT_DISTINCT(ip1)\n```\n\nThe `COUNT_DISTINCT` function is approximate, based on the HyperLogLog++ algorithm. Refer to the [documentation](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-cardinality-aggregation.html#_counts_are_approximate) for more information. The precision is configurable, using an optional second parameter. The maximum supported value is 40000. Thresholds above this number will have the same effect as a threshold of 40000. The default value is 3000.\n\n```\nFROM hosts\n| STATS COUNT_DISTINCT(ip0, 80000), COUNT_DISTINCT(ip1, 5)\n```\n\nThe expression can use inline functions. This example splits a string into multiple values using the `SPLIT` function and counts the unique values:\n\n```\nROW words="foo;bar;baz;qux;quux;foo"\n| STATS distinct_word_count = COUNT_DISTINCT(SPLIT(words, ";"))\n```\n              ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.maxFunction",{defaultMessage:"MAX"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.maxFunction.markdown",{defaultMessage:"### MAX\nReturns the maximum value of a numeric expression.\n\n```\nFROM employees\n| STATS MAX(languages)\n```\n\nThe expression can use inline functions. For example, to calculate the maximum over an average of a multivalued column, use `MV_AVG` to first average the multiple values per row, and use the result with the `MAX` function:\n\n```\nFROM employees\n| STATS max_avg_salary_change = MAX(MV_AVG(salary_change))\n```\n              ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.medianFunction",{defaultMessage:"MEDIAN"}),description:Object(d.jsx)(u,{openLinksInNewTab:!0,markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.medianFunction.markdown",{defaultMessage:"### MEDIAN\nReturns the value that is greater than half of all values and less than half of all values, also known as the 50% `PERCENTILE`.\n\n**NOTE:** Like `PERCENTILE`, `MEDIAN` is usually approximate, based on the TDigest algorithm.\n\n**WARNING:** `MEDIAN` is also [non-deterministic](https://en.wikipedia.org/wiki/Nondeterministic_algorithm). This means you can get slightly different results using the same data.\n\nExample:\n\n```\nFROM employees\n| STATS MEDIAN(salary), PERCENTILE(salary, 50)\n```\n\nThe expression can use inline functions. For example, to calculate the median of the maximum values of a multivalued column, first use `MV_MAX` to get the maximum value per row, and use the result with the `MEDIAN` function:\n\n```\nFROM employees\n| STATS median_max_salary_change = MEDIAN(MV_MAX(salary_change))\n```\n              ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.medianAbsoluteDeviationFunction",{defaultMessage:"MEDIAN_ABSOLUTE_DEVIATION"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.medianAbsoluteDeviationFunction.markdown",{defaultMessage:"### MEDIAN_ABSOLUTE_DEVIATION\nReturns the median absolute deviation, a measure of variability. It is a robust statistic, meaning that it is useful for describing data that may have outliers, or may not be normally distributed. For such data it can be more descriptive than the standard deviation.\n\nIt is calculated as the median of each data point’s deviation from the median of the entire sample. That is, for a random variable X, the median absolute deviation is `median(|median(X) - X|)`.\n\n```\nFROM employees\n| STATS MEDIAN(salary), MEDIAN_ABSOLUTE_DEVIATION(salary)\n```\n\nNOTE: Like `PERCENTILE`, `MEDIAN_ABSOLUTE_DEVIATION` is usually approximate, based on the TDigest algorithm. `MEDIAN_ABSOLUTE_DEVIATION` is also non-deterministic. This means you can get slightly different results using the same data.\n\nThe expression can use inline functions. For example, to calculate the median absolute deviation of the maximum values of a multivalued column, first use `MV_MAX` to get the maximum value per row, and use the result with the `MEDIAN_ABSOLUTE_DEVIATION` function:\n\n```\nFROM employees\n| STATS m_a_d_max_salary_change = MEDIAN_ABSOLUTE_DEVIATION(MV_MAX(salary_change))\n```\n\n",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.minFunction",{defaultMessage:"MIN"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.minFunction.markdown",{defaultMessage:"### MIN\nReturns the minimum value of a numeric field.\n\n```\nFROM employees\n| STATS MIN(languages)\n```\n\nThe expression can use inline functions. For example, to calculate the minimum over an average of a multivalued column, use `MV_AVG` to first average the multiple values per row, and use the result with the `MIN` function:\n\n```\nFROM employees\n| STATS min_avg_salary_change = MIN(MV_AVG(salary_change))\n```\n              ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.percentileFunction",{defaultMessage:"PERCENTILE"}),description:Object(d.jsx)(u,{openLinksInNewTab:!0,markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.percentileFunction.markdown",{defaultMessage:"### PERCENTILE\nThe value at which a certain percentage of observed values occur. For example, the 95th percentile is the value which is greater than 95% of the observed values and the 50th percentile is the `MEDIAN`.\n\n```\nFROM employees\n| STATS p0 = PERCENTILE(salary,  0)\n     , p50 = PERCENTILE(salary, 50)\n     , p99 = PERCENTILE(salary, 99)\n```\n\n**NOTE**: `PERCENTILE` is usually approximate, based on the TDigest algorithm. \n\n**WARNING:** `PERCENTILE` is also [non-deterministic](https://en.wikipedia.org/wiki/Nondeterministic_algorithm). This means you can get slightly different results using the same data.\n\nThe expression can use inline functions. For example, to calculate a percentile of the maximum values of a multivalued column, first use `MV_MAX` to get the maximum value per row, and use the result with the `PERCENTILE` function:\n\n```\nFROM employees\n| STATS p80_max_salary_change = PERCENTILE(MV_MAX(salary_change), 80)\n```\n              ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.stCentroidFunction",{defaultMessage:"ST_CENTROID_AGG"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.stCentroidFunction.markdown",{defaultMessage:"### ST_CENTROID_AGG\n**WARNING: This functionality is in technical preview and may be changed or removed in a future release. Elastic will work to fix any issues, but features in technical preview are not subject to the support SLA of official GA features.**\n\nCalculates the spatial centroid over a field with spatial point geometry type.\n\n```\nFROM airports\n| STATS centroid=ST_CENTROID_AGG(location)\n```\n              ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.sumFunction",{defaultMessage:"SUM"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.sumFunction.markdown",{defaultMessage:"### SUM\nReturns the sum of a numeric field.\n\n```\nFROM employees\n| STATS SUM(languages)\n```\n\nThe expression can use inline functions. For example, to calculate the sum of each employee’s maximum salary changes, apply the `MV_MAX` function to each row and then `SUM` the results:\n\n```\nFROM employees\n| STATS total_salary_changes = SUM(MV_MAX(salary_change))\n```\n              ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.valuesFunction",{defaultMessage:"VALUES"}),description:Object(d.jsx)(u,{openLinksInNewTab:!0,markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.valuesFunction.markdown",{defaultMessage:"### VALUES\n\n**WARNING: Do not use `VALUES` on production environments. This functionality is in technical preview and may be changed or removed in a future release. Elastic will work to fix any issues, but features in technical preview are not subject to the support SLA of official GA features.**\n\nReturns all values in a group as a multivalued field. The order of the returned values isn’t guaranteed. If you need the values returned in order use `MV_SORT`.\n\nAccepts an expression of any type except `geo_point`, `cartesian_point`, `geo_shape`, or `cartesian_shape`.\n\n\nExample:\n\n```\n  FROM employees\n| EVAL first_letter = SUBSTRING(first_name, 0, 1)\n| STATS first_name=MV_SORT(VALUES(first_name)) BY first_letter\n| SORT first_letter\n```\n\n> _**WARNING:** This can use a significant amount of memory and ES|QL doesn’t yet grow aggregations beyond memory. So this aggregation will work until it is used to collect more values than can fit into memory. Once it collects too many values it will fail the query with a [Circuit Breaker Error](https://www.elastic.co/guide/en/elasticsearch/reference/current/circuit-breaker-errors.html)._\n\n              ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})}]},f={label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.groupingFunctions",{defaultMessage:"Grouping functions"}),description:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.groupingFunctionsDocumentationESQLDescription",{defaultMessage:"These grouping functions can be used with `STATS...BY`:"}),items:[{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.autoBucketFunction",{defaultMessage:"BUCKET"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.autoBucketFunction.markdown",{defaultMessage:'### BUCKET\nCreates groups of values - buckets - out of a datetime or numeric input. The size of the buckets can either be provided directly, or chosen based on a recommended count and values range.\n\n`BUCKET` works in two modes: \n\n1. Where the size of the bucket is computed based on a buckets count recommendation (four parameters) and a range.\n2. Where the bucket size is provided directly (two parameters).\n\nUsing a target number of buckets, a start of a range, and an end of a range, `BUCKET` picks an appropriate bucket size to generate the target number of buckets or fewer.\n\nFor example, requesting up to 20 buckets for a year will organize data into monthly intervals:\n\n```\nFROM employees\n| WHERE hire_date >= "1985-01-01T00:00:00Z" AND hire_date < "1986-01-01T00:00:00Z"\n| STATS hire_date = MV_SORT(VALUES(hire_date)) BY month = BUCKET(hire_date, 20, "1985-01-01T00:00:00Z", "1986-01-01T00:00:00Z")\n| SORT hire_date\n```\n\n**NOTE**: The goal isn’t to provide the exact target number of buckets, it’s to pick a range that provides _at most_ the target number of buckets.\n\nYou can combine `BUCKET` with an aggregation to create a histogram:\n\n```\nFROM employees\n| WHERE hire_date >= "1985-01-01T00:00:00Z" AND hire_date < "1986-01-01T00:00:00Z"\n| STATS hires_per_month = COUNT(*) BY month = BUCKET(hire_date, 20, "1985-01-01T00:00:00Z", "1986-01-01T00:00:00Z")\n| SORT month\n```\n\n**NOTE**: `BUCKET` does not create buckets that match zero documents. That’s why the previous example is missing `1985-03-01` and other dates.\n\nAsking for more buckets can result in a smaller range. For example, requesting at most 100 buckets in a year results in weekly buckets:\n\n```\nFROM employees\n| WHERE hire_date >= "1985-01-01T00:00:00Z" AND hire_date < "1986-01-01T00:00:00Z"\n| STATS hires_per_week = COUNT(*) BY week = BUCKET(hire_date, 100, "1985-01-01T00:00:00Z", "1986-01-01T00:00:00Z")\n| SORT week\n```\n\n**NOTE**: `BUCKET` does not filter any rows. It only uses the provided range to pick a good bucket size. For rows with a value outside of the range, it returns a bucket value that corresponds to a bucket outside the range. Combine `BUCKET` with `WHERE` to filter rows.\n\nIf the desired bucket size is known in advance, simply provide it as the second argument, leaving the range out:\n\n```\nFROM employees\n| WHERE hire_date >= "1985-01-01T00:00:00Z" AND hire_date < "1986-01-01T00:00:00Z"\n| STATS hires_per_week = COUNT(*) BY week = BUCKET(hire_date, 1 week)\n| SORT week\n```\n\n**NOTE**: When providing the bucket size as the second parameter, it must be a time duration or date period.\n\n`BUCKET` can also operate on numeric fields. For example, to create a salary histogram:\n\n```\nFROM employees\n| STATS COUNT(*) by bs = BUCKET(salary, 20, 25324, 74999)\n| SORT bs\n```\n\nUnlike the earlier example that intentionally filters on a date range, you rarely want to filter on a numeric range. You have to find the min and max separately. ES|QL doesn’t yet have an easy way to do that automatically.\n\nThe range can be omitted if the desired bucket size is known in advance. Simply provide it as the second argument:\n\n```\nFROM employees\n| WHERE hire_date >= "1985-01-01T00:00:00Z" AND hire_date < "1986-01-01T00:00:00Z"\n| STATS c = COUNT(1) BY b = BUCKET(salary, 5000.)\n| SORT b\n```\n\n**NOTE**: When providing the bucket size as the second parameter, it must be of a **floating point type**.\n\nHere\'s an example to create hourly buckets for the last 24 hours, and calculate the number of events per hour:\n\n```\nFROM sample_data\n| WHERE @timestamp >= NOW() - 1 day and @timestamp < NOW()\n| STATS COUNT(*) BY bucket = BUCKET(@timestamp, 25, NOW() - 1 day, NOW())\n```\n\nHere\'s an example  to create monthly buckets for the year 1985, and calculate the average salary by hiring month:\n\n```\nFROM employees\n| WHERE hire_date >= "1985-01-01T00:00:00Z" AND hire_date < "1986-01-01T00:00:00Z"\n| STATS AVG(salary) BY bucket = BUCKET(hire_date, 20, "1985-01-01T00:00:00Z", "1986-01-01T00:00:00Z")\n| SORT bucket\n```\n\n`BUCKET` may be used in both the aggregating and grouping part of the `STATS …​ BY …`​ command, provided that in the aggregating part the function is **referenced by an alias defined in the grouping part**, or that it is invoked with the exact same expression.\n\nFor example:\n\n```\nFROM employees\n| STATS s1 = b1 + 1, s2 = BUCKET(salary / 1000 + 999, 50.) + 2 BY b1 = BUCKET(salary / 100 + 99, 50.), b2 = BUCKET(salary / 1000 + 999, 50.)\n| SORT b1, b2\n| KEEP s1, b1, s2, b2\n```\n              ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})}]},x={label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.operators",{defaultMessage:"Operators"}),description:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.operatorsDocumentationESQLDescription",{defaultMessage:"ES|QL supports the following operators:"}),items:[{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.binaryOperators",{defaultMessage:"Binary operators"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.binaryOperators.markdown",{defaultMessage:"### Binary operators\nThese binary comparison operators are supported:\n\n* equality: `==`\n* inequality: `!=`\n* less than: `<`\n* less than or equal: `<=`\n* greater than: `>`\n* greater than or equal: `>=`\n* add: `+`\n* subtract: `-`\n* multiply: `*`\n* divide: `/`\n* modulus: `%`\n              ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.booleanOperators",{defaultMessage:"Boolean operators"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.booleanOperators.markdown",{defaultMessage:"### Boolean operators\nThe following boolean operators are supported:\n\n* `AND`\n* `OR`\n* `NOT`\n              ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.castOperator",{defaultMessage:"Cast (::)"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.castOperator.markdown",{defaultMessage:'### CAST (`::`)\nThe `::` operator provides a convenient alternative syntax to the `TO_<type>` type conversion functions.\n\nExample:\n```\nROW ver = CONCAT(("0"::INT + 1)::STRING, ".2.3")::VERSION\n```\n              ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.inOperator",{defaultMessage:"IN"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.inOperator.markdown",{defaultMessage:"### IN\nThe `IN` operator allows testing whether a field or expression equals an element in a list of literals, fields or expressions:\n\n```\nROW a = 1, b = 4, c = 3\n| WHERE c-a IN (3, b / 2, a)\n```\n              ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.stringOperators",{defaultMessage:"LIKE and RLIKE"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.stringOperators.markdown",{defaultMessage:'### LIKE and RLIKE\nFor string comparison using wildcards or regular expressions, use `LIKE` or `RLIKE`:\n\nUse `LIKE` to match strings using wildcards. The following wildcard characters are supported:\n\n* `*` matches zero or more characters.\n* `?` matches one character.\n\n```\nFROM employees\n| WHERE first_name LIKE "?b*"\n| KEEP first_name, last_name\n```\n\nUse `RLIKE` to match strings using regular expressions:\n\n```\nFROM employees\n| WHERE first_name RLIKE ".leja.*"\n| KEEP first_name, last_name\n```\n              ',description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})},{label:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.predicates",{defaultMessage:"NULL values"}),description:Object(d.jsx)(u,{markdownContent:o.i18n.translate("textBasedEditor.query.textBasedLanguagesEditor.documentationESQL.predicates.markdown",{defaultMessage:"### NULL values\nFor NULL comparison use the `IS NULL` and `IS NOT NULL` predicates:\n\n```\nFROM employees\n| WHERE birth_date IS NULL\n| KEEP first_name, last_name\n| SORT first_name\n| LIMIT 3\n```\n\n```\nFROM employees\n| WHERE is_rehired IS NOT NULL\n| STATS count(emp_no)\n```\n              ",description:"Text is in markdown. Do not translate function names, special characters, or field names like sum(bytes)"})})}]}}}]);