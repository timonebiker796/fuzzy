"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PipelineProcessorsItemStatus = void 0;
var _react = _interopRequireDefault(require("react"));
var _i18n = require("@kbn/i18n");
var _eui = require("@elastic/eui");
var _shared = require("./shared");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const processorStatusToIconMap = {
  success: {
    icon: 'checkInCircleFilled',
    iconColor: 'success',
    label: _i18n.i18n.translate('xpack.ingestPipelines.pipelineEditorItem.successStatusAriaLabel', {
      defaultMessage: 'Success'
    })
  },
  error: {
    icon: _shared.ErrorIcon,
    iconColor: 'danger',
    label: _i18n.i18n.translate('xpack.ingestPipelines.pipelineEditorItem.errorStatusAriaLabel', {
      defaultMessage: 'Error'
    })
  },
  error_ignored: {
    icon: _shared.ErrorIgnoredIcon,
    iconColor: 'danger',
    label: _i18n.i18n.translate('xpack.ingestPipelines.pipelineEditorItem.errorIgnoredStatusAriaLabel', {
      defaultMessage: 'Error ignored'
    })
  },
  dropped: {
    icon: 'indexClose',
    iconColor: 'subdued',
    label: _i18n.i18n.translate('xpack.ingestPipelines.pipelineEditorItem.droppedStatusAriaLabel', {
      defaultMessage: 'Dropped'
    })
  },
  skipped: {
    icon: _shared.SkippedIcon,
    iconColor: 'subdued',
    label: _i18n.i18n.translate('xpack.ingestPipelines.pipelineEditorItem.skippedStatusAriaLabel', {
      defaultMessage: 'Skipped'
    })
  },
  inactive: {
    icon: 'dot',
    iconColor: '#D3DAE6',
    // $euiColorLightShade
    label: _i18n.i18n.translate('xpack.ingestPipelines.pipelineEditorItem.inactiveStatusAriaLabel', {
      defaultMessage: 'Not run'
    })
  }
};

// This is a fallback in case ES returns a status we do not support
// This is not expected and likely means we need to modify the code to support a new status
const unknownStatus = {
  icon: 'dot',
  iconColor: '#D3DAE6',
  // $euiColorLightShade
  label: _i18n.i18n.translate('xpack.ingestPipelines.pipelineEditorItem.unknownStatusAriaLabel', {
    defaultMessage: 'Unknown'
  })
};
const PipelineProcessorsItemStatus = ({
  processorStatus
}) => {
  const {
    icon,
    iconColor,
    label
  } = processorStatusToIconMap[processorStatus] || unknownStatus;
  return /*#__PURE__*/_react.default.createElement(_eui.EuiToolTip, {
    position: "top",
    content: /*#__PURE__*/_react.default.createElement("p", null, label)
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiIcon, {
    color: iconColor,
    type: icon,
    "aria-label": label,
    size: "s",
    "data-test-subj": "processorStatusIcon"
  }));
};
exports.PipelineProcessorsItemStatus = PipelineProcessorsItemStatus;