"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PipelineDeleteModal = void 0;
var _react = _interopRequireDefault(require("react"));
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _i18nReact = require("@kbn/i18n-react");
var _shared_imports = require("../../../shared_imports");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const PipelineDeleteModal = ({
  pipelinesToDelete,
  callback
}) => {
  const {
    services
  } = (0, _shared_imports.useKibana)();
  const numPipelinesToDelete = pipelinesToDelete.length;
  const handleDeletePipelines = () => {
    services.api.deletePipelines(pipelinesToDelete).then(({
      data: {
        itemsDeleted,
        errors
      },
      error
    }) => {
      const hasDeletedPipelines = itemsDeleted && itemsDeleted.length;
      if (hasDeletedPipelines) {
        const successMessage = itemsDeleted.length === 1 ? _i18n.i18n.translate('xpack.ingestPipelines.deleteModal.successDeleteSingleNotificationMessageText', {
          defaultMessage: "Deleted pipeline ''{pipelineName}''",
          values: {
            pipelineName: pipelinesToDelete[0]
          }
        }) : _i18n.i18n.translate('xpack.ingestPipelines.deleteModal.successDeleteMultipleNotificationMessageText', {
          defaultMessage: 'Deleted {numSuccesses, plural, one {# pipeline} other {# pipelines}}',
          values: {
            numSuccesses: itemsDeleted.length
          }
        });
        callback({
          hasDeletedPipelines
        });
        services.notifications.toasts.addSuccess(successMessage);
      }
      if (error || errors !== null && errors !== void 0 && errors.length) {
        const hasMultipleErrors = (errors === null || errors === void 0 ? void 0 : errors.length) > 1 || error && pipelinesToDelete.length > 1;
        const errorMessage = hasMultipleErrors ? _i18n.i18n.translate('xpack.ingestPipelines.deleteModal.multipleErrorsNotificationMessageText', {
          defaultMessage: 'Error deleting {count} pipelines',
          values: {
            count: (errors === null || errors === void 0 ? void 0 : errors.length) || pipelinesToDelete.length
          }
        }) : _i18n.i18n.translate('xpack.ingestPipelines.deleteModal.errorNotificationMessageText', {
          defaultMessage: "Error deleting pipeline ''{name}''",
          values: {
            name: errors && errors[0].name || pipelinesToDelete[0]
          }
        });
        services.notifications.toasts.addDanger(errorMessage);
      }
    });
  };
  const handleOnCancel = () => {
    callback();
  };
  return /*#__PURE__*/_react.default.createElement(_eui.EuiConfirmModal, {
    buttonColor: "danger",
    "data-test-subj": "deletePipelinesConfirmation",
    title: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.ingestPipelines.deleteModal.modalTitleText",
      defaultMessage: "Delete {numPipelinesToDelete, plural, one {pipeline} other {# pipelines}}",
      values: {
        numPipelinesToDelete
      }
    }),
    onCancel: handleOnCancel,
    onConfirm: handleDeletePipelines,
    cancelButtonText: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.ingestPipelines.deleteModal.cancelButtonLabel",
      defaultMessage: "Cancel"
    }),
    confirmButtonText: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.ingestPipelines.deleteModal.confirmButtonLabel",
      defaultMessage: "Delete {numPipelinesToDelete, plural, one {pipeline} other {pipelines} }",
      values: {
        numPipelinesToDelete
      }
    })
  }, /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.ingestPipelines.deleteModal.deleteDescription",
    defaultMessage: "You are about to delete {numPipelinesToDelete, plural, one {this pipeline} other {these pipelines} }:",
    values: {
      numPipelinesToDelete
    }
  })), /*#__PURE__*/_react.default.createElement("ul", null, pipelinesToDelete.map(name => /*#__PURE__*/_react.default.createElement("li", {
    key: name
  }, name)))));
};
exports.PipelineDeleteModal = PipelineDeleteModal;