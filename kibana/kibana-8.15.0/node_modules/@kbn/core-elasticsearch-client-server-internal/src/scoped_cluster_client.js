"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScopedClusterClient = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }
function _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError("Cannot initialize the same private elements twice on an object"); }
function _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }
function _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }
function _assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
var _asCurrentUserFactory = /*#__PURE__*/new WeakMap();
var _asSecondaryAuthUserFactory = /*#__PURE__*/new WeakMap();
var _asCurrentUserClient = /*#__PURE__*/new WeakMap();
var _asSecondaryAuthUserClient = /*#__PURE__*/new WeakMap();
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

/** @internal **/
class ScopedClusterClient {
  constructor({
    asInternalUser,
    asCurrentUserFactory,
    asSecondaryAuthUserFactory
  }) {
    (0, _defineProperty2.default)(this, "asInternalUser", void 0);
    _classPrivateFieldInitSpec(this, _asCurrentUserFactory, void 0);
    _classPrivateFieldInitSpec(this, _asSecondaryAuthUserFactory, void 0);
    _classPrivateFieldInitSpec(this, _asCurrentUserClient, void 0);
    _classPrivateFieldInitSpec(this, _asSecondaryAuthUserClient, void 0);
    this.asInternalUser = asInternalUser;
    _classPrivateFieldSet(_asCurrentUserFactory, this, asCurrentUserFactory);
    _classPrivateFieldSet(_asSecondaryAuthUserFactory, this, asSecondaryAuthUserFactory);
  }
  get asCurrentUser() {
    if (_classPrivateFieldGet(_asCurrentUserClient, this) === undefined) {
      _classPrivateFieldSet(_asCurrentUserClient, this, _classPrivateFieldGet(_asCurrentUserFactory, this).call(this));
    }
    return _classPrivateFieldGet(_asCurrentUserClient, this);
  }
  get asSecondaryAuthUser() {
    if (_classPrivateFieldGet(_asSecondaryAuthUserClient, this) === undefined) {
      _classPrivateFieldSet(_asSecondaryAuthUserClient, this, _classPrivateFieldGet(_asSecondaryAuthUserFactory, this).call(this));
    }
    return _classPrivateFieldGet(_asSecondaryAuthUserClient, this);
  }
}
exports.ScopedClusterClient = ScopedClusterClient;