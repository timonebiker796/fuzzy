"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PolicyStepRetention = void 0;
var _react = _interopRequireWildcard(require("react"));
var _i18nReact = require("@kbn/i18n-react");
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _constants = require("../../../../../common/constants");
var _text = require("../../../services/text");
var _app_context = require("../../../app_context");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const getExpirationTimeOptions = (unitSize = '0') => Object.entries(_constants.TIME_UNITS).map(([_key, value]) => ({
  text: _text.textService.getTimeUnitLabel(value, unitSize),
  value
}));
const PolicyStepRetention = ({
  policy,
  updatePolicy,
  errors
}) => {
  const {
    retention = {}
  } = policy;
  const {
    docLinks
  } = (0, _app_context.useCore)();
  const updatePolicyRetention = (updatedFields, validationHelperData = {}) => {
    const newRetention = {
      ...retention,
      ...updatedFields
    };
    updatePolicy({
      retention: newRetention
    }, validationHelperData);
  };

  // State for touched inputs
  const [touched, setTouched] = (0, _react.useState)({
    expireAfterValue: false,
    minCount: false,
    maxCount: false
  });
  const renderExpireAfterField = () => /*#__PURE__*/_react.default.createElement(_eui.EuiDescribedFormGroup, {
    title: /*#__PURE__*/_react.default.createElement(_eui.EuiTitle, {
      size: "s"
    }, /*#__PURE__*/_react.default.createElement("h3", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.snapshotRestore.policyForm.stepRetention.expirationTitle",
      defaultMessage: "Expiration"
    }))),
    description: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.snapshotRestore.policyForm.stepRetention.expirationDescription",
      defaultMessage: "The time to wait before deleting snapshots."
    }),
    fullWidth: true
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    label: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.snapshotRestore.policyForm.stepRetention.expireAfterLabel",
      defaultMessage: "Delete after"
    }),
    isInvalid: touched.expireAfterValue && Boolean(errors.expireAfterValue),
    error: errors.expireAfterValue,
    fullWidth: true
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFieldNumber, {
    value: retention.expireAfterValue || '',
    onBlur: () => setTouched({
      ...touched,
      expireAfterValue: true
    }),
    onChange: e => {
      const value = e.target.value;
      updatePolicyRetention({
        expireAfterValue: value !== '' ? Number(value) : value
      });
    },
    "data-test-subj": "expireAfterValueInput",
    min: 0,
    "aria-label": _i18n.i18n.translate('xpack.snapshotRestore.policyForm.stepRetention.expireAfterAriaLabel', {
      defaultMessage: 'Expiration time input'
    })
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSelect, {
    value: retention.expireAfterUnit,
    options: getExpirationTimeOptions(retention.expireAfterValue ? retention.expireAfterValue.toString() : undefined),
    onChange: e => {
      updatePolicyRetention({
        expireAfterUnit: e.target.value
      });
    },
    "data-test-subj": "expireAfterUnitSelect",
    "aria-label": _i18n.i18n.translate('xpack.snapshotRestore.policyForm.stepRetention.expireAfterUnitsAriaLabel', {
      defaultMessage: 'Expiration time units selection'
    })
  })))));
  const renderCountFields = () => /*#__PURE__*/_react.default.createElement(_eui.EuiDescribedFormGroup, {
    title: /*#__PURE__*/_react.default.createElement(_eui.EuiTitle, {
      size: "s"
    }, /*#__PURE__*/_react.default.createElement("h3", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.snapshotRestore.policyForm.stepRetention.countTitle",
      defaultMessage: "Snapshots to retain"
    }))),
    description: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.snapshotRestore.policyForm.stepRetention.countDescription",
      defaultMessage: "The minimum and maximum number of snapshots to store for the policy."
    }),
    fullWidth: true
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    label: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.snapshotRestore.policyForm.stepRetention.minCountLabel",
      defaultMessage: "Mininum count"
    }),
    isInvalid: touched.minCount && Boolean(errors.minCount),
    error: errors.minCount,
    fullWidth: true
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFieldNumber, {
    fullWidth: true,
    value: retention.minCount || '',
    onBlur: () => setTouched({
      ...touched,
      minCount: true
    }),
    onChange: e => {
      const value = e.target.value;
      updatePolicyRetention({
        minCount: value !== '' ? Number(value) : value
      });
    },
    "data-test-subj": "minCountInput",
    min: 0
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFormRow, {
    label: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "xpack.snapshotRestore.policyForm.stepRetention.maxCountLabel",
      defaultMessage: "Maximum count"
    }),
    isInvalid: touched.maxCount && Boolean(errors.maxCount),
    error: errors.maxCount,
    fullWidth: true
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFieldNumber, {
    fullWidth: true,
    value: retention.maxCount || '',
    onBlur: () => setTouched({
      ...touched,
      maxCount: true
    }),
    onChange: e => {
      const value = e.target.value;
      updatePolicyRetention({
        maxCount: value !== '' ? Number(value) : value
      });
    },
    "data-test-subj": "maxCountInput",
    min: 0
  })))));
  return /*#__PURE__*/_react.default.createElement(_react.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    justifyContent: "spaceBetween"
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiTitle, null, /*#__PURE__*/_react.default.createElement("h2", null, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.snapshotRestore.policyForm.stepRetentionTitle",
    defaultMessage: "Snapshot retention (optional)"
  })))), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiButtonEmpty, {
    size: "s",
    flush: "right",
    href: docLinks.links.snapshotRestore.createSnapshot,
    target: "_blank",
    iconType: "help"
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.snapshotRestore.policyForm.stepRetention.docsButtonLabel",
    defaultMessage: "Snapshot docs"
  })))), renderExpireAfterField(), renderCountFields());
};
exports.PolicyStepRetention = PolicyStepRetention;