"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LinkContent = void 0;
var _eui = require("@elastic/eui");
var _i18n = require("@kbn/i18n");
var _i18nReact = require("@kbn/i18n-react");
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

const LinkContent = ({
  objectType,
  isDirty,
  shareableUrl,
  urlService,
  shareableUrlLocatorParams,
  allowShortUrl,
  delegatedShareUrlHandler
}) => {
  const [url, setUrl] = (0, _react.useState)('');
  const [urlParams] = (0, _react.useState)(undefined);
  const [isTextCopied, setTextCopied] = (0, _react.useState)(false);
  const [shortUrlCache, setShortUrlCache] = (0, _react.useState)(undefined);
  const getUrlWithUpdatedParams = (0, _react.useCallback)(tempUrl => {
    const urlWithUpdatedParams = urlParams ? Object.keys(urlParams).reduce((urlAccumulator, key) => {
      const urlParam = urlParams[key];
      return urlParam ? Object.keys(urlParam).reduce((queryAccumulator, queryParam) => {
        const isQueryParamEnabled = urlParam[queryParam];
        return isQueryParamEnabled ? queryAccumulator + `&${queryParam}=true` : queryAccumulator;
      }, urlAccumulator) : urlAccumulator;
    }, tempUrl) : tempUrl;

    // persist updated url to state
    setUrl(urlWithUpdatedParams);
    return urlWithUpdatedParams;
  }, [urlParams]);
  const getSnapshotUrl = (0, _react.useCallback)(() => {
    return getUrlWithUpdatedParams(shareableUrl || window.location.href);
  }, [getUrlWithUpdatedParams, shareableUrl]);
  const createShortUrl = (0, _react.useCallback)(async () => {
    if (shareableUrlLocatorParams) {
      const shortUrls = urlService.shortUrls.get(null);
      const shortUrl = await shortUrls.createWithLocator(shareableUrlLocatorParams);
      const urlWithLoc = await shortUrl.locator.getUrl(shortUrl.params, {
        absolute: true
      });
      setShortUrlCache(urlWithLoc);
      return urlWithLoc;
    } else {
      const snapshotUrl = getSnapshotUrl();
      const shortUrl = await urlService.shortUrls.get(null).createFromLongUrl(snapshotUrl);
      setShortUrlCache(shortUrl.url);
      return shortUrl.url;
    }
  }, [shareableUrlLocatorParams, urlService.shortUrls, getSnapshotUrl, setShortUrlCache]);
  const copyUrlHelper = (0, _react.useCallback)(async () => {
    let urlToCopy = url;
    if (!urlToCopy || delegatedShareUrlHandler) {
      urlToCopy = delegatedShareUrlHandler ? delegatedShareUrlHandler === null || delegatedShareUrlHandler === void 0 ? void 0 : delegatedShareUrlHandler() : allowShortUrl ? await createShortUrl() : getSnapshotUrl();
    }
    (0, _eui.copyToClipboard)(urlToCopy);
    setUrl(urlToCopy);
    setTextCopied(true);
    return urlToCopy;
  }, [url, delegatedShareUrlHandler, allowShortUrl, createShortUrl, getSnapshotUrl]);
  const handleTestUrl = (0, _react.useMemo)(() => {
    if (objectType !== 'search' || !allowShortUrl) return getSnapshotUrl();else if (objectType === 'search' && allowShortUrl) return shortUrlCache;
    return copyUrlHelper();
  }, [objectType, getSnapshotUrl, allowShortUrl, shortUrlCache, copyUrlHelper]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiForm, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiText, {
    size: "s"
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "share.link.helpText",
    defaultMessage: "Share a direct link to this {objectType}.",
    values: {
      objectType
    }
  })), isDirty && objectType === 'lens' && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "m"
  }), /*#__PURE__*/_react.default.createElement(_eui.EuiCallOut, {
    color: "warning",
    title: /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
      id: "share.link.warning.title",
      defaultMessage: "Unsaved changes"
    })
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "share.link.warning.lens",
    defaultMessage: "Copy the link to get a temporary link. Save the lens visualization to create a permanent link."
  }))), /*#__PURE__*/_react.default.createElement(_eui.EuiSpacer, {
    size: "l"
  })), /*#__PURE__*/_react.default.createElement(_eui.EuiFlexGroup, {
    justifyContent: "flexEnd",
    responsive: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiFlexItem, {
    grow: false
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiToolTip, {
    content: isTextCopied ? _i18n.i18n.translate('share.link.copied', {
      defaultMessage: 'Text copied'
    }) : null
  }, /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
    fill: true,
    "data-test-subj": "copyShareUrlButton",
    "data-share-url": handleTestUrl,
    onBlur: () => objectType === 'lens' && isDirty ? null : setTextCopied(false),
    onClick: copyUrlHelper,
    color: objectType === 'lens' && isDirty ? 'warning' : 'primary'
  }, /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "share.link.copyLinkButton",
    defaultMessage: "Copy link"
  }))))));
};
exports.LinkContent = LinkContent;