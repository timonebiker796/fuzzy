"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linkTab = void 0;
var _react = _interopRequireWildcard(require("react"));
var _i18n = require("@kbn/i18n");
var _context = require("../../context");
var _link_content = require("./link_content");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

const LINK_TAB_ACTIONS = {
  SET_DASHBOARD_URL: 'SET_DASHBOARD_URL',
  SET_IS_NOT_SAVED: 'SET_IS_NOT_SAVED'
};
const linkTabReducer = (state = {
  dashboardUrl: '',
  isNotSaved: false,
  setIsClicked: false
}, action) => {
  switch (action.type) {
    case LINK_TAB_ACTIONS.SET_DASHBOARD_URL:
      return {
        ...state,
        dashboardUrl: action.payload
      };
    case LINK_TAB_ACTIONS.SET_IS_NOT_SAVED:
      return {
        ...state,
        isNotSaved: action.payload
      };
    default:
      return state;
  }
};
const LinkTabContent = ({
  state,
  dispatch
}) => {
  const {
    objectType,
    objectId,
    isDirty,
    shareableUrl,
    urlService,
    shareableUrlLocatorParams,
    allowShortUrl,
    delegatedShareUrlHandler
  } = (0, _context.useShareTabsContext)();
  const setDashboardLink = (0, _react.useCallback)(url => {
    dispatch({
      type: LINK_TAB_ACTIONS.SET_DASHBOARD_URL,
      payload: url
    });
  }, [dispatch]);
  const setIsNotSaved = (0, _react.useCallback)(() => {
    dispatch({
      type: LINK_TAB_ACTIONS.SET_IS_NOT_SAVED,
      payload: objectType === 'lens' || objectType === 'dashboard' && !allowShortUrl ? isDirty : false
    });
  }, [dispatch, objectType, isDirty, allowShortUrl]);
  const setIsClicked = (0, _react.useCallback)(() => {
    dispatch({
      type: LINK_TAB_ACTIONS.SET_IS_NOT_SAVED,
      payload: setIsClicked
    });
  }, [dispatch]);
  return /*#__PURE__*/_react.default.createElement(_link_content.LinkContent, {
    objectType,
    objectId,
    isDirty,
    shareableUrl,
    urlService,
    shareableUrlLocatorParams,
    dashboardLink: state === null || state === void 0 ? void 0 : state.dashboardUrl,
    setDashboardLink,
    isNotSaved: state === null || state === void 0 ? void 0 : state.isNotSaved,
    setIsNotSaved,
    allowShortUrl,
    setIsClicked: state === null || state === void 0 ? void 0 : state.setIsClicked,
    delegatedShareUrlHandler
  });
};
const linkTab = exports.linkTab = {
  id: 'link',
  name: _i18n.i18n.translate('share.contextMenu.permalinksTab', {
    defaultMessage: 'Links'
  }),
  description: _i18n.i18n.translate('share.dashboard.link.description', {
    defaultMessage: 'Share a direct link to this search.'
  }),
  content: LinkTabContent,
  reducer: linkTabReducer
};