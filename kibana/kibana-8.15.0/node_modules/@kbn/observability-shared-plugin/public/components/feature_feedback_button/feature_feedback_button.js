"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSurveyFeedbackURL = exports.FeatureFeedbackButton = void 0;
var _react = _interopRequireDefault(require("react"));
var _eui = require("@elastic/eui");
var _i18nReact = require("@kbn/i18n-react");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

const KIBANA_VERSION_QUERY_PARAM = 'entry.548460210';
const KIBANA_DEPLOYMENT_TYPE_PARAM = 'entry.573002982';
const SANITIZED_PATH_PARAM = 'entry.1876422621';
const ML_JOB_TYPE = 'entry.170406579';
const getDeploymentType = (isCloudEnv, isServerlessEnv) => {
  if (isServerlessEnv) {
    return 'Serverless (fully-managed projects)';
  }
  if (isCloudEnv) {
    return 'Elastic Cloud (we manage)';
  }
  return 'Self-Managed (you manage)';
};
const getMLJobType = mlJobType => mlJobType === 'pod' ? 'Pod Anomalies' : 'Host Anomalies';
const getSurveyFeedbackURL = ({
  formUrl,
  formConfig,
  kibanaVersion,
  sanitizedPath,
  isCloudEnv,
  isServerlessEnv,
  nodeType
}) => {
  const deploymentType = isCloudEnv !== undefined || isServerlessEnv !== undefined ? getDeploymentType(isCloudEnv, isServerlessEnv) : undefined;
  const mlJobType = nodeType ? getMLJobType(nodeType) : undefined;
  const url = new URL(formUrl);
  if (kibanaVersion) {
    url.searchParams.append((formConfig === null || formConfig === void 0 ? void 0 : formConfig.kibanaVersionQueryParam) || KIBANA_VERSION_QUERY_PARAM, kibanaVersion);
  }
  if (deploymentType) {
    url.searchParams.append((formConfig === null || formConfig === void 0 ? void 0 : formConfig.kibanaDeploymentTypeQueryParam) || KIBANA_DEPLOYMENT_TYPE_PARAM, deploymentType);
  }
  if (sanitizedPath) {
    url.searchParams.append((formConfig === null || formConfig === void 0 ? void 0 : formConfig.sanitizedPathQueryParam) || SANITIZED_PATH_PARAM, sanitizedPath);
  }
  if (mlJobType) {
    url.searchParams.append((formConfig === null || formConfig === void 0 ? void 0 : formConfig.mlJobTypeParam) || ML_JOB_TYPE, mlJobType);
  }
  return url.href;
};
exports.getSurveyFeedbackURL = getSurveyFeedbackURL;
const FeatureFeedbackButton = ({
  formUrl,
  formConfig,
  'data-test-subj': dts,
  onClickCapture,
  defaultButton,
  kibanaVersion,
  isCloudEnv,
  isServerlessEnv,
  sanitizedPath,
  nodeType,
  surveyButtonText = /*#__PURE__*/_react.default.createElement(_i18nReact.FormattedMessage, {
    id: "xpack.observabilityShared.featureFeedbackButton.tellUsWhatYouThinkLink",
    defaultMessage: "Tell us what you think!"
  })
}) => {
  return /*#__PURE__*/_react.default.createElement(_eui.EuiButton, {
    href: getSurveyFeedbackURL({
      formUrl,
      formConfig,
      kibanaVersion,
      isCloudEnv,
      nodeType,
      isServerlessEnv,
      sanitizedPath
    }),
    target: "_blank",
    color: defaultButton ? undefined : 'warning',
    iconType: defaultButton ? undefined : 'editorComment',
    "data-test-subj": dts,
    onClickCapture: onClickCapture
  }, surveyButtonText);
};
exports.FeatureFeedbackButton = FeatureFeedbackButton;